<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>名字待定</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.signalfire2017.com/"/>
  <updated>2018-01-24T07:16:48.889Z</updated>
  <id>https://blog.signalfire2017.com/</id>
  
  <author>
    <name>signalFire</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tomcat+idea远程调试</title>
    <link href="https://blog.signalfire2017.com/2018/01/24/%E6%9D%82%E8%AE%B0/tomcat+idea%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <id>https://blog.signalfire2017.com/2018/01/24/杂记/tomcat+idea远程调试/</id>
    <published>2018-01-24T07:03:02.000Z</published>
    <updated>2018-01-24T07:16:48.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试的web项目"><a href="#测试的web项目" class="headerlink" title="测试的web项目"></a>测试的web项目</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.signalfire.servlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by jk on 2017/12/12.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"111111111111111111"</span>);</div><div class="line">        resp.getWriter().write(<span class="string">"hello baby"</span>);</div><div class="line">        resp.getWriter().flush();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></div><div class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></div><div class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>my<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.signalfire.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>my<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h1><ul>
<li>打war包部署到tomcat中</li>
<li>使用默认配置启动tomcat调试<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@mytest bin]# ./catalina.sh jpda start</div></pre></td></tr></table></figure>
</li>
</ul>
<p>默认情况下，远程调试的默认端口为8000，可以通过JPDA_ADDRESS进行配置，指定自定义的端口，另外，还有两个可以配置的参数</p>
<ul>
<li>JPDA_TRANSPORT：即调试器和虚拟机之间数据的传输方式，默认值是dt_socket</li>
<li>JPDA_SUSPEND：即JVM启动后是否立即挂起，默认是n<br>可以在catalina.sh中进行配置：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JPDA_TRANSPORT=dt_socket  </div><div class="line">JPDA_ADDRESS=5005  </div><div class="line">JPAD_SUSPEND=n</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="idea配置远程调试"><a href="#idea配置远程调试" class="headerlink" title="idea配置远程调试"></a>idea配置远程调试</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104020.png" alt="tomcat+idea远程调试-20171213104020"><br><img src="http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-2017121310403.png" alt="tomcat+idea远程调试-2017121310403">  </p>
<h2 id="debug启动"><a href="#debug启动" class="headerlink" title="debug启动"></a>debug启动</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104146.png" alt="tomcat+idea远程调试-20171213104146"></p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104437.png" alt="tomcat+idea远程调试-20171213104437"></p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104256.png" alt="tomcat+idea远程调试-20171213104256"></p>
<h1 id="调试java程序"><a href="#调试java程序" class="headerlink" title="调试java程序"></a>调试java程序</h1><p>在远程服务器上java启动参赛要加上调试的参数：<br>“-Xdebug -Xrunjdwp:transport=dt_socket,address=2345,server=y,suspend=n”</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;测试的web项目&quot;&gt;&lt;a href=&quot;#测试的web项目&quot; class=&quot;headerlink&quot; title=&quot;测试的web项目&quot;&gt;&lt;/a&gt;测试的web项目&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="idea" scheme="https://blog.signalfire2017.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>linux修改时间</title>
    <link href="https://blog.signalfire2017.com/2018/01/24/%E6%9D%82%E8%AE%B0/linux%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/"/>
    <id>https://blog.signalfire2017.com/2018/01/24/杂记/linux修改时间/</id>
    <published>2018-01-24T07:03:02.000Z</published>
    <updated>2018-02-06T03:01:51.907Z</updated>
    
    <content type="html"><![CDATA[<p>linux修改时间</p>
<ul>
<li><p>修改时区</p>
<blockquote>
<p>cp /usr/share/zoneinfo/UTC /etc/localtime </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cp /usr/share/zoneinfo/UTC /etc/localtime </div><div class="line">cp：是否覆盖“/etc/localtime”? y </div><div class="line">[root@localhost ~]# date </div><div class="line">2012年 11月 02日 星期五 00:07:30 UTC</div><div class="line">修改为中国的东八区</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>配置新的时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># vi /etc/sysconfig/clock</div><div class="line">ZONE=&quot;Asia/Shanghai&quot;</div><div class="line">UTC=false</div><div class="line">ARC=false</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>安装ntp</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y ntp</div></pre></td></tr></table></figure>
</li>
<li><p>设置时间同步</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ntpdate 210.72.145.44</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><h2 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">date -s 18:40:00</div></pre></td></tr></table></figure>
<p>参考链接 <a href="http://www.linuxidc.com/Linux/2017-03/141745.htm" target="_blank" rel="external">Linux服务器同步网络时间</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux修改时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改时区&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cp /usr/share/zoneinfo/UTC /etc/localtime &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="https://blog.signalfire2017.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装opencv-java</title>
    <link href="https://blog.signalfire2017.com/2018/01/24/%E6%9D%82%E8%AE%B0/linux%E4%B8%8B%E5%AE%89%E8%A3%85opencv-java/"/>
    <id>https://blog.signalfire2017.com/2018/01/24/杂记/linux下安装opencv-java/</id>
    <published>2018-01-24T07:03:02.000Z</published>
    <updated>2018-01-24T07:16:39.236Z</updated>
    
    <content type="html"><![CDATA[<p>linux下安装opencv java </p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>在正式环境安装的时候安装opencv时候一直编译失败，缺少文件，后来下载了310版本的opencv，可以用了<br>线上环境linux centos6.5</p>
<h1 id="linux版本"><a href="#linux版本" class="headerlink" title="linux版本"></a>linux版本</h1><p>centos7</p>
<h1 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h1><h1 id="安装ant"><a href="#安装ant" class="headerlink" title="安装ant"></a>安装ant</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://ant.apache.org/bindownload.cgi" target="_blank" rel="external">ant官网下载</a><a href="http://ant.apache.org/bindownload.cgi" target="_blank" rel="external">http://ant.apache.org/bindownload.cgi</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apache-ant-1.9.9-bin.tar.gz</div></pre></td></tr></table></figure></p>
<h2 id="解压-重命名"><a href="#解压-重命名" class="headerlink" title="解压 重命名"></a>解压 重命名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">unzip apache-ant-1.9.9-bin.tar.gz</div><div class="line">mv apache-ant-1.9.9 ant</div></pre></td></tr></table></figure>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /etc/profile </div><div class="line">在文件后加入 </div><div class="line">export ANT_HOME=/usr/local/ant </div><div class="line">export PATH=$ANT_HOME/bin:$PATH</div></pre></td></tr></table></figure>
<h2 id="刷新环境变量"><a href="#刷新环境变量" class="headerlink" title="刷新环境变量"></a>刷新环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<h1 id="安装OpenCV"><a href="#安装OpenCV" class="headerlink" title="安装OpenCV"></a>安装OpenCV</h1><h2 id="安装OpenCV依赖库"><a href="#安装OpenCV依赖库" class="headerlink" title="安装OpenCV依赖库"></a>安装OpenCV依赖库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y build-essential gcc gcc-c++ cmake git pkgconfig gtk+-devel gtk2-devel python python-pip python-devel</div></pre></td></tr></table></figure>
<h2 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h2><p>可以到<a href="https://opencv.org/releases.html" target="_blank" rel="external">官网</a>下载 选择对应版本，我这里是3.3.1<br><a href="https://opencv.org/releases.html" target="_blank" rel="external">https://opencv.org/releases.html</a></p>
<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>先解压,解压后进入目录,创建build目录,进入build目录,准备预编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">unzip opencv-3.3.1.zip</div><div class="line">cd opencv-3.3.1 </div><div class="line">mkdir build &amp;&amp; cd build/</div></pre></td></tr></table></figure></p>
<h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>通过cmake命令预先编译一次,编译完成后查看输出结果, 在<figure class="highlight plain"><figcaption><span>be built```里包含java这一项就表示预编译成功</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local ..</div></pre></td></tr></table></figure></p>
<p>可能会卡在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-- IPPICV: Download: ippicv_2017u3_lnx_intel64_general_20170822.tgz</div></pre></td></tr></table></figure></p>
<p>这个文件比较大,下载时间长一点,不要着急</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>cmake完成后，在build目录直接输入make进行编译，如果服务器CPU核数比较多，可以在make后加入-j8 使用8个线程同时进行编译，加快编译速度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make -j2</div></pre></td></tr></table></figure></p>
<p>关于下面这个异常，我编译的时候并没有出现，记录一下，备用。</p>
<p>编译过程可能出现异常，提示：</p>
<p>/usr/include/jasper/jas_math.h:117:22: error: ‘SIZE_MAX’ was not declared in this scope</p>
<p>出现这个异常，不要慌，可以通过修改/usr/include/jasper/jas_math.h 文件源码解决。<br>在/usr/include/jasper/jas_math.h 的头部#include 的下面添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#if ! defined SIZE_MAX </div><div class="line">#define SIZE_MAX (4294967295U) </div><div class="line">#endif</div></pre></td></tr></table></figure></p>
<p>然后重新编译就可以了。如果不行，请删除build目录下的内容，重新预编译、编译就应该没问题了</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>编译完成，就可以进行安装，安装过程是生成opencv对应的库文件，我这里是java项目需要用到，所以也会顺便生成java相关的库文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make install</div></pre></td></tr></table></figure></p>
<p>命令执行完成，会在结果中看到/usr/local/share/OpenCV/java/目录生成了两个java相关的依赖库文件 opencv-331.jar 和 libopencv_java331.so ， 当然，每个人的环境不同，可能目录也不同，具体看日志输出就行了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@opencv java]# ll /usr/local/share/OpenCV/java</div><div class="line">总用量 72012</div><div class="line">-rwxr-xr-x 1 root root 73320721 11月  8 14:05 libopencv_java331.so</div><div class="line">-rw-r--r-- 1 root root   414381 11月  8 10:03 opencv-331.jar</div></pre></td></tr></table></figure></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html" target="_blank" rel="external">opencv官方文档 Installation in Linux</a></li>
<li><a href="http://blog.csdn.net/chwshuang/article/details/78208273?locationNum=9&amp;fps=1" target="_blank" rel="external">CentOS6 - Linux下安装OpenCV</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux下安装opencv java &lt;/p&gt;
&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;在正式环境安装的时候安装opencv时候一直编译失败，缺少文件，后来下载了310版本
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="opencv" scheme="https://blog.signalfire2017.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>linux 程序down 问题排查</title>
    <link href="https://blog.signalfire2017.com/2018/01/24/%E6%9D%82%E8%AE%B0/linux%20%E7%A8%8B%E5%BA%8Fdown%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://blog.signalfire2017.com/2018/01/24/杂记/linux 程序down 问题排查/</id>
    <published>2018-01-24T07:03:02.000Z</published>
    <updated>2018-01-25T03:48:58.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux系统有自我保护机制"><a href="#linux系统有自我保护机制" class="headerlink" title="linux系统有自我保护机制"></a>linux系统有自我保护机制</h1><p>如果分配的内存用完了,会杀掉进程.<br>可以查看日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/var/log/messages</div></pre></td></tr></table></figure></p>
<p>然后通过进程ID 进行查询  ,或者 <code>oom-killer</code> 来查询<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/work/linux%20程序down%20问题排查-20171226102834.png" alt="linux 程序down 问题排查-20171226102834"></p>
<h2 id="内存不够"><a href="#内存不够" class="headerlink" title="内存不够"></a>内存不够</h2><p>可以配置虚拟内存,解决内存高峰时内存不够的问题.</p>
<h1 id="线程挂掉用jstack分析线程栈"><a href="#线程挂掉用jstack分析线程栈" class="headerlink" title="线程挂掉用jstack分析线程栈"></a>线程挂掉用jstack分析线程栈</h1><p>可以使用 jstack 查看进程信息</p>
<h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><h2 id="lsof-n-学习"><a href="#lsof-n-学习" class="headerlink" title="lsof -n (学习)"></a>lsof -n (学习)</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux系统有自我保护机制&quot;&gt;&lt;a href=&quot;#linux系统有自我保护机制&quot; class=&quot;headerlink&quot; title=&quot;linux系统有自我保护机制&quot;&gt;&lt;/a&gt;linux系统有自我保护机制&lt;/h1&gt;&lt;p&gt;如果分配的内存用完了,会杀掉进程.&lt;br&gt;可
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="https://blog.signalfire2017.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>js心跳请求</title>
    <link href="https://blog.signalfire2017.com/2018/01/24/%E6%9D%82%E8%AE%B0/js%E5%BF%83%E8%B7%B3%E8%AF%B7%E6%B1%82/"/>
    <id>https://blog.signalfire2017.com/2018/01/24/杂记/js心跳请求/</id>
    <published>2018-01-24T07:03:02.000Z</published>
    <updated>2018-01-24T07:16:40.764Z</updated>
    
    <content type="html"><![CDATA[<p>示例代码,mark一下<br>var timer = setInterval (function(){},time)<br>clearInterval(timer)<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timer;</div><div class="line">timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    Common.ajax.execute(&#123;</div><div class="line">        <span class="string">'url'</span>: Common.url.getBaseURL() + <span class="string">'/flow/get-trusteeship.do'</span>,</div><div class="line">        <span class="string">'data'</span>: &#123;</div><div class="line">            <span class="string">"programId"</span>: $(<span class="string">"#programId"</span>).val(),</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'success'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (data.result == <span class="string">'success'</span> &amp;&amp; data.trusteeship) &#123;</div><div class="line">                <span class="keyword">if</span>(data.trusteeship.status == <span class="number">3</span>)&#123;</div><div class="line">                    clearInterval(timer);</div><div class="line">                    EmayPagination.action.skipToCurrentPage($(<span class="string">'#trusteeshipListQueryPaginationContainer'</span>),</div><div class="line">                        $(<span class="string">'#trusteeshipListQueryPaginationContainer .pagination-node.active'</span>).attr(<span class="string">'data-current-page-number'</span>));</div><div class="line">                    Trusteeship.dom.setStep(<span class="number">3</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'error'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            Messager.action.error(<span class="string">'操作异常。'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;,<span class="number">5000</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;示例代码,mark一下&lt;br&gt;var timer = setInterval (function(){},time)&lt;br&gt;clearInterval(timer)&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="javascript" scheme="https://blog.signalfire2017.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>微服务框架与实战-笔记03-开始使用SpringCloud实战微服务</title>
    <link href="https://blog.signalfire2017.com/2018/01/21/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E4%B8%8E%E5%AE%9E%E6%88%98-%E7%AC%94%E8%AE%B003-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8SpringCloud%E5%AE%9E%E6%88%98%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>https://blog.signalfire2017.com/2018/01/21/微服务/微服务框架与实战-笔记03-开始使用SpringCloud实战微服务/</id>
    <published>2018-01-21T15:50:00.000Z</published>
    <updated>2018-01-21T16:17:09.085Z</updated>
    
    <content type="html"><![CDATA[<p>配套代码</p>
<ul>
<li><a href="http://www.broadview.com.cn/book/4774" target="_blank" rel="external">http://www.broadview.com.cn/book/4774</a>  可以去勘误等</li>
<li>1-11 章配套代码：<br><a href="https://github.com/itmuch/spring-cloud-docker-microservice-book-code" target="_blank" rel="external">https://github.com/itmuch/spring-cloud-docker-microservice-book-code</a></li>
<li>12-14 章配套代码：<br><a href="https://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker" target="_blank" rel="external">https://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker</a></li>
</ul>
<h1 id="实战前提"><a href="#实战前提" class="headerlink" title="实战前提"></a>实战前提</h1><h2 id="技术储备"><a href="#技术储备" class="headerlink" title="技术储备"></a>技术储备</h2><ul>
<li>语言基础：java或scala、Groovy</li>
<li>spring boot ：</li>
<li>项目管理和构建工具：maven gradle （可以相互转换）<h2 id="工具及软件版本"><a href="#工具及软件版本" class="headerlink" title="工具及软件版本"></a>工具及软件版本</h2></li>
<li>JKD：官方建议1.8，也可以用1.7</li>
<li>springboot： 书中使用1.4.5.RELEASE</li>
<li>springCloud：Camden SR4</li>
<li>IDE：Spring Tool suite 3.8.3 基于eclipse的IDE ，idea</li>
<li>maven：3.3.9 （3.3.x运行在JDK1.8以上）<br>降低学习成本的重要方法之一:<code>少踩坑</code><h1 id="服务提供者、服务消费者"><a href="#服务提供者、服务消费者" class="headerlink" title="服务提供者、服务消费者"></a>服务提供者、服务消费者</h1>描述微服务之间的调用关系<br>服务提供者：被调用方<br>服务消费者：调用方<h1 id="编写服务提供者"><a href="#编写服务提供者" class="headerlink" title="编写服务提供者"></a>编写服务提供者</h1>Spring Data JPA作为持久层框架，H2作为数据库<h2 id="编写项目"><a href="#编写项目" class="headerlink" title="编写项目"></a>编写项目</h2>自己下载代码看吧，microservice-simple-provider-user<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><code>spring-boot-starter-web</code>：springMVC支持<br><code>spring-boot-starter-data-jpa</code>：Spring Data JPA支持<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itmuch.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-simple-provider-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 引入spring boot的依赖 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 引入spring cloud的依赖 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>Camden.SR4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 添加spring-boot的maven插件 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="classpath下schema-sql-建表语句"><a href="#classpath下schema-sql-建表语句" class="headerlink" title="classpath下schema.sql 建表语句"></a>classpath下schema.sql 建表语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">if</span> <span class="keyword">exists</span>;</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (<span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">generated</span> <span class="keyword">by</span> <span class="keyword">default</span> <span class="keyword">as</span> <span class="keyword">identity</span>, username <span class="built_in">varchar</span>(<span class="number">40</span>), <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>), age <span class="built_in">int</span>(<span class="number">3</span>), balance <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>), primary <span class="keyword">key</span> (<span class="keyword">id</span>));</div></pre></td></tr></table></figure>
<h3 id="classpath下data-sql"><a href="#classpath下data-sql" class="headerlink" title="classpath下data.sql"></a>classpath下data.sql</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>, username, <span class="keyword">name</span>, age, balance) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'account1'</span>, <span class="string">'张三'</span>, <span class="number">20</span>, <span class="number">100.00</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>, username, <span class="keyword">name</span>, age, balance) <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">'account2'</span>, <span class="string">'李四'</span>, <span class="number">28</span>, <span class="number">180.00</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>, username, <span class="keyword">name</span>, age, balance) <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">'account3'</span>, <span class="string">'王五'</span>, <span class="number">32</span>, <span class="number">280.00</span>);</div></pre></td></tr></table></figure>
<h3 id="用户实体类"><a href="#用户实体类" class="headerlink" title="用户实体类"></a>用户实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.itmuch.cloud.study.entity;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.math.BigDecimal;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">  <span class="meta">@Id</span></div><div class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</div><div class="line">  <span class="keyword">private</span> Long id;</div><div class="line">  <span class="meta">@Column</span></div><div class="line">  <span class="keyword">private</span> String username;</div><div class="line">  <span class="meta">@Column</span></div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">  <span class="meta">@Column</span></div><div class="line">  <span class="keyword">private</span> Integer age;</div><div class="line">  <span class="meta">@Column</span></div><div class="line">  <span class="keyword">private</span> BigDecimal balance;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.username;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.username = username;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.balance;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(BigDecimal balance)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.balance = balance;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.itmuch.cloud.study.repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.itmuch.cloud.study.entity.User;</div><div class="line"></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><p><code>@GetMapping</code> Spring4.3新注解。组合注解，等价 @RequestMapping(method=RequestMethod.GET)<br>还有<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>、<code>@PatchMapping</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.itmuch.cloud.study.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.itmuch.cloud.study.entity.User;</div><div class="line"><span class="keyword">import</span> com.itmuch.cloud.study.repository.UserRepository;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> UserRepository userRepository;</div><div class="line"></div><div class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">    User findOne = <span class="keyword">this</span>.userRepository.findOne(id);</div><div class="line">    <span class="keyword">return</span> findOne;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><p><code>@SpringBootApplication</code> </p>
<ul>
<li>声明是一个Spring boot项目</li>
<li>组合注解，整合了@Configuration、@EnableAutoConfiguration、@ComponentScan</li>
<li>并开启了SpringBoot组件扫描和自动配置功能<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.itmuch.cloud.study;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderUserApplication</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    SpringApplication.run(ProviderUserApplication.class, args);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="配置文件-application-yml"><a href="#配置文件-application-yml" class="headerlink" title="配置文件 application.yml"></a>配置文件 application.yml</h2><p>SpringCloud、SpringBoot支持<code>properties</code>或者<code>yml格式</code>文件作为<code>配置文件</code><br><code>yml文件格式</code>：YAML（Yet Another Markup Language）编写的文件格式。<br>YAML和properties格式文件可以互相转换。<br>yml文件有<code>严格的缩进</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8000</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  jpa:</span></div><div class="line"><span class="attr">    generate-ddl:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    hibernate:</span></div><div class="line"><span class="attr">      ddl-auto:</span> <span class="string">none</span></div><div class="line"><span class="attr">  datasource:</span>                           <span class="comment"># 指定数据源</span></div><div class="line"><span class="attr">    platform:</span> <span class="string">h2</span>                        <span class="comment"># 指定数据源类型</span></div><div class="line"><span class="attr">    schema:</span> <span class="attr">classpath:schema.sql</span>        <span class="comment"># 指定h2数据库的建表脚本</span></div><div class="line"><span class="attr">    data:</span> <span class="attr">classpath:data.sql</span>            <span class="comment"># 指定h2数据库的数据脚本</span></div><div class="line"><span class="attr">logging:</span>                                <span class="comment"># 配置日志级别，让hibernate打印出执行的SQL</span></div><div class="line"><span class="attr">  level:</span></div><div class="line"><span class="attr">    root:</span> <span class="string">INFO</span></div><div class="line">    <span class="string">org.hibernate:</span> <span class="string">INFO</span></div><div class="line">    <span class="string">org.hibernate.type.descriptor.sql.BasicBinder:</span> <span class="string">TRACE</span></div><div class="line">    <span class="string">org.hibernate.type.descriptor.sql.BasicExtractor:</span> <span class="string">TRACE</span></div><div class="line">    </div><div class="line"><span class="comment">## INFO</span></div><div class="line"><span class="attr">info:</span> </div><div class="line"><span class="attr">  app:</span> </div><div class="line"><span class="attr">    name:</span> <span class="string">@project.artifactId@</span></div><div class="line"><span class="attr">    encoding:</span> <span class="string">@project.build.sourceEncoding@</span></div><div class="line"><span class="attr">    java:</span></div><div class="line"><span class="attr">      source:</span> <span class="string">@java.version@</span></div><div class="line"><span class="attr">      target:</span> <span class="string">@java.version@</span></div></pre></td></tr></table></figure></p>
<p>测试：<a href="http://localhost:8000/1" target="_blank" rel="external">http://localhost:8000/1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配套代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.broadview.com.cn/book/4774&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.broadview.com.cn/book/4774&lt;/a
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="微服务" scheme="https://blog.signalfire2017.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>微服务框架与实战-总体概览</title>
    <link href="https://blog.signalfire2017.com/2018/01/21/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E4%B8%8E%E5%AE%9E%E6%88%98-%E6%80%BB%E4%BD%93%E6%A6%82%E8%A7%88/"/>
    <id>https://blog.signalfire2017.com/2018/01/21/微服务/微服务框架与实战-总体概览/</id>
    <published>2018-01-21T15:49:54.000Z</published>
    <updated>2018-01-21T16:16:54.403Z</updated>
    
    <content type="html"><![CDATA[<p>这本书整体的看了一遍，具体细节还没有实践。先做个骨架，用的时候再丰富下。书中按照下面的顺序进行整合。<br><a id="more"></a></p>
<style>
table th:first-of-type {
    width: 15px;
}

table th:nth-of-type(2) {
    width: 20%;
}

table th:nth-of-type(3) {
    width: 30%;
}
</style>

<table>
<thead>
<tr>
<th>章</th>
<th>组件</th>
<th>功能</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td> 3</td>
<td>spring-boot</td>
<td>基础业务开发</td>
<td></td>
</tr>
<tr>
<td></td>
<td>spring-boot-actuator</td>
<td>提供很多监控端点</td>
<td></td>
</tr>
<tr>
<td> 4</td>
<td>Eureka</td>
<td>服务的注册与发现</td>
<td>集成于spring-cloud-netflix <br>是Netflix开源的服务发现组件<br>基于REST的服务<br>相似组件： Zookeeper，Consul</td>
</tr>
<tr>
<td> 5</td>
<td>Ribbon</td>
<td>客户端测负载均衡</td>
<td>Netflix发布的负载均衡器<br>有助于控制HTTP和TCP客户端的行为。</td>
</tr>
<tr>
<td></td>
<td>Feign</td>
<td>实现声明式REST调用</td>
<td>Netflix开发的声明式、模板化的HTTP客户端。</td>
</tr>
<tr>
<td></td>
<td>Hystrix</td>
<td>服务容错处理</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Turbine</td>
<td>聚合Hystrix监控数据的工具</td>
<td>将所有相关 /hystrix.stream 端点的数据聚合到一个聚合的/turbine.stream中<br>让集群的监控更加方便</td>
</tr>
<tr>
<td></td>
<td>RabbitMQ</td>
<td>消息中间件</td>
<td>解决网络故障问题（例如微服务与Turbine网络不通）</td>
</tr>
<tr>
<td> 8</td>
<td>Zuul</td>
<td>构建微服务网关</td>
<td>Netflix开源的微服务网关<br>可以和Eureka、Ribbon、Hystrix等组件配合使用<br>核心是一系列的过滤器</td>
</tr>
<tr>
<td></td>
<td>Sidecar</td>
<td>整合非JVM微服务</td>
<td></td>
</tr>
<tr>
<td> 9</td>
<td>spring-cloud-Config</td>
<td>统一管理微服务配置</td>
<td></td>
</tr>
<tr>
<td> 10</td>
<td>spring-cloud-sleuth</td>
<td>微服务跟踪</td>
<td>分布式跟踪的解决方案</td>
</tr>
<tr>
<td></td>
<td>ELK</td>
<td>日志分析系统</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Zipkin</td>
<td>Twitter开源的分布式跟踪系统</td>
<td>可与Sleuth配合使用<br>收集系统的时序数据<br>追踪微服务框架的系统延时等问题<br>提供友好的界面，帮助分析追踪数据。</td>
</tr>
<tr>
<td> 12</td>
<td>Docker</td>
<td>开源容器引擎<br>有助于更快地交付应用</td>
<td>可将应用程序和基础设施层隔离<br>能将基础设置当做程序一样进行管理<br>可更快地打包、测试以及部署应用程序<br>缩短从编写到部署运行代码的周期</td>
</tr>
<tr>
<td> 14</td>
<td>Docker Compose</td>
<td>编排微服务</td>
<td>用于定义和运行多容器Docker应用程序的工具<br>前身是Fig<br>非常适合用在开发、测试、构建CI工作流等场景</td>
</tr>
</tbody>
</table>
<p>雪崩效应：</p>
<ul>
<li>我们常把 “基础服务故障” 导致 “级联故障” 的现象成为雪崩效应。</li>
<li>描述的是提供者不可用导致消费者不可用，并将不可用逐渐放大的过程。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这本书整体的看了一遍，具体细节还没有实践。先做个骨架，用的时候再丰富下。书中按照下面的顺序进行整合。&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="微服务" scheme="https://blog.signalfire2017.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>微服务框架与实战-笔记02-微服务开发框架-SpringCloud</title>
    <link href="https://blog.signalfire2017.com/2018/01/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E4%B8%8E%E5%AE%9E%E6%88%98-%E7%AC%94%E8%AE%B002-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6-SpringCloud/"/>
    <id>https://blog.signalfire2017.com/2018/01/09/微服务/微服务框架与实战-笔记02-微服务开发框架-SpringCloud/</id>
    <published>2018-01-09T15:12:17.000Z</published>
    <updated>2018-01-09T15:24:15.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-简介"><a href="#Spring-Cloud-简介" class="headerlink" title="Spring Cloud 简介"></a>Spring Cloud 简介</h1><ul>
<li>在SpringBoot基础上构建的，用于快速构建分布式系统的通用模式工具集。</li>
<li>程序适合在Docker或者PaaS上部署。 所以又叫<code>云原生应用</code>（Cloud Native Application）。</li>
<li><code>云原生</code>（CloudNative）可简单理解为面向云环境的软件架构。<h1 id="Spring-Cloud-特点"><a href="#Spring-Cloud-特点" class="headerlink" title="Spring Cloud 特点"></a>Spring Cloud 特点</h1></li>
<li>约定优于配置</li>
<li>适用于各种环境</li>
<li>隐藏了组件的复杂性，并提供声明式、无xml的配置方式</li>
<li>开箱即用、快速启动</li>
<li>轻量级组件</li>
<li>组件丰富，功能齐全。如 配置管理，服务发现，断路器，微服务网关等</li>
<li>选型中立、丰富。例如：支持使用Eureka、Zookeeper、Consul实现服务发现。</li>
<li>灵活。组成部分解耦，可按需挑选技术选型。<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1>Spring项目一般以下面这种方式命名，但<code>SpringCloud</code>并<code>没有</code>使用这种方式。可以略过。<br>主版本号.次版本号.增量版本号.里程碑版本号<br>例如：4.3.5.RELEASE</li>
<li>主版本号：项目重大重构</li>
<li>次版本号：新特性的添加和变化</li>
<li>增量版本号：一般表示BUG修复</li>
<li>里程碑版本号：某个版本号的里程碑<h2 id="版本简介"><a href="#版本简介" class="headerlink" title="版本简介"></a>版本简介</h2><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/20181923037.png" alt="20181923037"><br>命名方式：英文单词SRX（x为数字）<br>英文单词：release train<br>SR：service release bug修复</li>
</ul>
<p>Dalston SR5 表示Dalston 第5次bug修复版本</p>
<p><a href="https://github.com/spring-cloud/spring-cloud-release/releases" target="_blank" rel="external">https://github.com/spring-cloud/spring-cloud-release/releases</a> 版本发布</p>
<h2 id="子项目一览"><a href="#子项目一览" class="headerlink" title="子项目一览"></a>子项目一览</h2><table>
<thead>
<tr>
<th>Component</th>
<th>Camden.SR7</th>
<th>Dalston.SR4</th>
<th>Edgware.RELEASE</th>
<th>Finchley.M4</th>
<th>Finchley.BUILD-SNAPSHOT</th>
</tr>
</thead>
<tbody>
<tr>
<td>spring-cloud-aws</td>
<td>1.1.4.RELEASE</td>
<td>1.2.1.RELEASE</td>
<td>1.2.2.RELEASE</td>
<td>2.0.0.M2</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-bus</td>
<td>1.2.2.RELEASE</td>
<td>1.3.1.RELEASE</td>
<td>1.3.2.RELEASE</td>
<td>2.0.0.M3</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-cli</td>
<td>1.2.4.RELEASE</td>
<td>1.3.4.RELEASE</td>
<td>1.4.0.RELEASE</td>
<td>2.0.0.M1</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-commons</td>
<td>1.1.9.RELEASE</td>
<td>1.2.4.RELEASE</td>
<td>1.3.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-contract</td>
<td>1.0.5.RELEASE</td>
<td>1.1.4.RELEASE</td>
<td>1.2.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-config</td>
<td>1.2.3.RELEASE</td>
<td>1.3.3.RELEASE</td>
<td>1.4.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-netflix</td>
<td>1.2.7.RELEASE</td>
<td>1.3.5.RELEASE</td>
<td>1.4.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-security</td>
<td>1.1.4.RELEASE</td>
<td>1.2.1.RELEASE</td>
<td>1.2.1.RELEASE</td>
<td>2.0.0.M1</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-cloudfoundry</td>
<td>1.0.1.RELEASE</td>
<td>1.1.0.RELEASE</td>
<td>1.1.0.RELEASE</td>
<td>2.0.0.M1</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-consul</td>
<td>1.1.4.RELEASE</td>
<td>1.2.1.RELEASE</td>
<td>1.3.0.RELEASE</td>
<td>2.0.0.M3</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-sleuth</td>
<td>1.1.3.RELEASE</td>
<td>1.2.5.RELEASE</td>
<td>1.3.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-stream</td>
<td>Brooklyn.SR3</td>
<td>Chelsea.SR2</td>
<td>Ditmars.RELEASE</td>
<td>Elmhurst.M3</td>
<td>Elmhurst.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-zookeeper</td>
<td>1.0.4.RELEASE</td>
<td>1.1.2.RELEASE</td>
<td>1.2.0.RELEASE</td>
<td>2.0.0.M3</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-boot</td>
<td>1.4.5.RELEASE</td>
<td>1.5.4.RELEASE</td>
<td>1.5.8.RELEASE</td>
<td>2.0.0.M6</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-task</td>
<td>1.0.3.RELEASE</td>
<td>1.1.2.RELEASE</td>
<td>1.2.2.RELEASE</td>
<td>2.0.0.M2</td>
<td>2.0.0.RELEASE</td>
</tr>
<tr>
<td>spring-cloud-vault</td>
<td></td>
<td>1.0.2.RELEASE</td>
<td>1.1.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-gateway</td>
<td></td>
<td></td>
<td>1.0.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
</tbody>
</table>
<h2 id="spring-cloud-spring-boot-版本兼容性"><a href="#spring-cloud-spring-boot-版本兼容性" class="headerlink" title="spring cloud / spring boot 版本兼容性"></a>spring cloud / spring boot 版本兼容性</h2><ul>
<li>Finchley使用Spring Boot 2.0.x构建和运行，并且不希望与Spring Boot 1.5.x一起使用。</li>
<li>Dalston和Edgware发行版建立在Spring Boot 1.5.x之上，并且不希望与Spring Boot 2.0.x一起使用。</li>
<li>Camden发行版基于Spring Boot 1.4.x，但也使用1.5.x进行测试。</li>
</ul>
<p><a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="external">http://projects.spring.io/spring-cloud/</a> 更具体的额可以看这里</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Cloud-简介&quot;&gt;&lt;a href=&quot;#Spring-Cloud-简介&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud 简介&quot;&gt;&lt;/a&gt;Spring Cloud 简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在SpringBoot基
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="微服务" scheme="https://blog.signalfire2017.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>使用多个git账户</title>
    <link href="https://blog.signalfire2017.com/2018/01/07/%E6%9D%82%E8%AE%B0/%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AAgit%E8%B4%A6%E6%88%B7/"/>
    <id>https://blog.signalfire2017.com/2018/01/07/杂记/使用多个git账户/</id>
    <published>2018-01-07T09:36:01.000Z</published>
    <updated>2018-01-07T09:40:55.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成两个SSH-key"><a href="#生成两个SSH-key" class="headerlink" title="生成两个SSH key"></a>生成两个SSH key</h1><p>为了举例方便，这里使用“one”和“two”两个账户。下同。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;one@gmail.com&quot;</div><div class="line"></div><div class="line">$ ssh-keygen -t rsa -C &quot;two@gmail.com&quot;</div></pre></td></tr></table></figure></p>
<p>不要一路回车，分别在第一个对话的时候输入重命名（id_rsa_one和id_rsa_two），这样会生成两份，包含私钥和公钥的4个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">id_rsa_one</div><div class="line">id_rsa_one.pub</div><div class="line">id_rsa_two</div><div class="line">id_rsa_two.pub</div></pre></td></tr></table></figure></p>
<h1 id="添加私钥"><a href="#添加私钥" class="headerlink" title="添加私钥"></a>添加私钥</h1><ol>
<li><p>打开ssh-agent</p>
<ul>
<li><p>如果你是github官方的bash：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-agent -s</div></pre></td></tr></table></figure>
</li>
<li><p>如果你是其它，比如msysgit：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ eval $(ssh-agent -s)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>添加私钥</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh-agent bash  //不执行这个会报没有权限</div><div class="line">$ ssh-add ~/.ssh/id_rsa_one</div><div class="line">$ ssh-add ~/.ssh/id_rsa_two</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="创建config文件"><a href="#创建config文件" class="headerlink" title="创建config文件"></a>创建config文件</h1><p>在.ssh下创建config</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># one(one@gmail.com) </div><div class="line">Host one.github.com //自定义的映射</div><div class="line">HostName github.com //git仓库对应的地址</div><div class="line">PreferredAuthentications publickey</div><div class="line">IdentityFile ~/.ssh/id_rsa_one //对应为文件</div><div class="line">User one   //对应的用户名</div><div class="line"># two(two@ gmail.com)</div><div class="line">Host two.github.com</div><div class="line">HostName github.com   </div><div class="line">PreferredAuthentications publickey</div><div class="line">IdentityFile ~/.ssh/id_rsa_two</div><div class="line">User two</div></pre></td></tr></table></figure>
<h1 id="部署SSH-key"><a href="#部署SSH-key" class="headerlink" title="部署SSH key"></a>部署SSH key</h1><p>在github上添加对应的ssh key</p>
<h1 id="clone项目方法"><a href="#clone项目方法" class="headerlink" title="clone项目方法"></a>clone项目方法</h1><blockquote>
<p>$ git clone git@<code>one.github.com</code>: <code>one的用户名</code>/learngit.git  注意是自定义的域名 和用户名（git的用户名）<br>$ git clone git@<code>two.github.com</code>: <code>two的用户名</code>/learngit.git </p>
</blockquote>
<h1 id="其他（与上面没有关联）"><a href="#其他（与上面没有关联）" class="headerlink" title="其他（与上面没有关联）"></a>其他（与上面没有关联）</h1><h2 id="git的三种环境变量"><a href="#git的三种环境变量" class="headerlink" title="git的三种环境变量"></a>git的三种环境变量</h2><ol>
<li>系统变量。<ul>
<li>存放在git的安装目录下：%Git%\etc\gitconfig。</li>
<li>若使用 git config 时用 –system 选项，读写的就是这个文件：</li>
<li>$ git config –system core.symlinks</li>
<li>系统变量对所有用户都适用。</li>
</ul>
</li>
<li>用户变量。<ul>
<li>存放在用户目录下。例如windows xp存放在：C:\Documents and Settings\$USER.gitconfig。</li>
<li>若使用 git config 时用 –global 选项，读写的就是这个文件：</li>
<li>$ git config –global user.name</li>
<li>用户变量只适用于该用户</li>
</ul>
</li>
<li>本地项目变量<ul>
<li>当前项目的 git 目录中的配置文件（也就是工作目录中的 .git/config 文件）。</li>
<li>若使用git config 时用 –local 选项，读写的就是这个文件：</li>
<li>$ git config –local remote.origin.url</li>
<li>本地变量只对当前项目有效。</li>
</ul>
</li>
</ol>
<h2 id="查找顺序"><a href="#查找顺序" class="headerlink" title="查找顺序"></a>查找顺序</h2><p>本地 》 用户 》系统</p>
<h2 id="其他config命令"><a href="#其他config命令" class="headerlink" title="其他config命令"></a>其他config命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git config --list 查看所有环境变量</div><div class="line">$ git config --system --list 查看系统环境变量</div><div class="line">$ git config --global --list 查看用户环境变量</div><div class="line">$ git config --local --list 查看本地环境变量</div><div class="line">$ git config --[system/global/local] [varname] [yourname] 编辑环境变量</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;生成两个SSH-key&quot;&gt;&lt;a href=&quot;#生成两个SSH-key&quot; class=&quot;headerlink&quot; title=&quot;生成两个SSH key&quot;&gt;&lt;/a&gt;生成两个SSH key&lt;/h1&gt;&lt;p&gt;为了举例方便，这里使用“one”和“two”两个账户。下同。&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="git" scheme="https://blog.signalfire2017.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>微服务框架与实战-笔记01-概述</title>
    <link href="https://blog.signalfire2017.com/2018/01/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E4%B8%8E%E5%AE%9E%E6%88%98-%E7%AC%94%E8%AE%B001-%E6%A6%82%E8%BF%B0/"/>
    <id>https://blog.signalfire2017.com/2018/01/05/微服务/微服务框架与实战-笔记01-概述/</id>
    <published>2018-01-05T14:42:27.000Z</published>
    <updated>2018-01-09T15:13:10.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单体应用架构存在的问题"><a href="#单体应用架构存在的问题" class="headerlink" title="单体应用架构存在的问题"></a>单体应用架构存在的问题</h1><ol>
<li>复杂性高  <ul>
<li>包含模块多</li>
<li>模块边界模糊</li>
<li>依赖关系不清</li>
<li>代码质量残次不齐等等</li>
</ul>
</li>
<li>技术债务</li>
<li>部署频率低  <ul>
<li>功能变更或缺陷修复都要重新部署整个应用。</li>
<li>全量部署 耗时长。影响范围大、风险高。</li>
</ul>
</li>
<li>可靠性差  <ul>
<li>一个bug可能会导致整个系统的崩溃</li>
</ul>
</li>
<li>扩展能力受限  <ul>
<li>只能整体扩展，无法根据业务模块进行伸缩。</li>
</ul>
</li>
<li>阻碍技术创新  <ul>
<li>一般使用统一的技术平台或方案解决所有问题。例如一个使用struts2的100万行代码的单体应用，如果想换成springMVC，成本是非常高的。</li>
</ul>
</li>
</ol>
<h1 id="微服务简介"><a href="#微服务简介" class="headerlink" title="微服务简介"></a>微服务简介</h1><p>并没有严格的定义，将一个单一应用程序开发为一组小型服务的方法。构建的是分布式系统。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li>每个服务运行在自己的进程中</li>
<li>一系列服务共同构建起整个项目</li>
<li>服务针对独立业务，只关注某个特定功能</li>
<li>服务间通信采用轻量级通信机制（如http资源api）</li>
<li>可以使用不同的语言，不同的存储</li>
<li>全自动部署机制</li>
</ol>
<h1 id="有点"><a href="#有点" class="headerlink" title="有点"></a>有点</h1><ol>
<li>易于开发维护</li>
<li>单个服务启动快</li>
<li>局部修改易部署</li>
<li>技术栈不受限</li>
<li>按需伸缩</li>
</ol>
<h1 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h1><ul>
<li>运维要求高<ul>
<li>需要保证几十个甚至上百个服务的正常运行与写作</li>
</ul>
</li>
<li>分布式固有的复杂性</li>
<li>接口调整成本搞</li>
<li>重复劳动 <ul>
<li>重复功能不足以分解为一个微服务，可以封装为公共组件，但是多语言就不一定行得通</li>
</ul>
</li>
</ul>
<h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><ul>
<li>单一职责原则</li>
<li>服务自治原则 <ul>
<li>治具备独立的业务能力、依赖与运行环境。</li>
</ul>
</li>
<li>轻量级通信机制 <ul>
<li>体量轻 </li>
<li>跨语言 </li>
<li>跨平台 </li>
<li>常用的有REST AMQP STOMP MQTT</li>
</ul>
</li>
<li>微服务力度</li>
</ul>
<p><code>康威定律</code>：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。看看下面的图片（来源于互联网，侵删），再想想Apple的产品、微软的产品设计，就能形象生动的理解这句话。</p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/20181522357.png" alt="20181522357"></p>
<p>用通俗的说法就是：<code>组织形式等同系统设计</code>。</p>
<h1 id="如何实现微服务架构"><a href="#如何实现微服务架构" class="headerlink" title="如何实现微服务架构"></a>如何实现微服务架构</h1><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>从开发和运行平台两个维度考虑：</p>
<ul>
<li>开发框架<ul>
<li>spring cloud</li>
<li>dubbo</li>
<li>dropwizard </li>
<li>armada</li>
</ul>
</li>
<li>运行平台<ul>
<li>并不绑定运行平台</li>
<li>PCServer</li>
<li>阿里云</li>
<li>aws</li>
<li>Docker<h1 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h1><img src="http://ovasdkxqr.bkt.clouddn.com//image/blog/201815224722.jpg" alt="201815224722"></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单体应用架构存在的问题&quot;&gt;&lt;a href=&quot;#单体应用架构存在的问题&quot; class=&quot;headerlink&quot; title=&quot;单体应用架构存在的问题&quot;&gt;&lt;/a&gt;单体应用架构存在的问题&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;复杂性高  &lt;ul&gt;
&lt;li&gt;包含模块多&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="微服务" scheme="https://blog.signalfire2017.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>aws-vpn</title>
    <link href="https://blog.signalfire2017.com/2018/01/03/%E6%9D%82%E8%AE%B0/aws-vpn/"/>
    <id>https://blog.signalfire2017.com/2018/01/03/杂记/aws-vpn/</id>
    <published>2018-01-02T16:20:16.000Z</published>
    <updated>2018-01-06T16:23:24.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="aws服务器的创建及vpn的安装"><a href="#aws服务器的创建及vpn的安装" class="headerlink" title="aws服务器的创建及vpn的安装"></a>aws服务器的创建及vpn的安装</h1><p><a href="https://www.jianshu.com/p/b0d460efca4e" target="_blank" rel="external">https://www.jianshu.com/p/b0d460efca4e</a></p>
<h1 id="配置-IPsec-L2TP-VPN-客户端"><a href="#配置-IPsec-L2TP-VPN-客户端" class="headerlink" title="配置 IPsec/L2TP VPN 客户端"></a>配置 IPsec/L2TP VPN 客户端</h1><p><a href="https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows" target="_blank" rel="external">https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows</a></p>
<h2 id="注册表修改"><a href="#注册表修改" class="headerlink" title="注册表修改"></a>注册表修改</h2><p><a href="https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows-错误-809" target="_blank" rel="external">https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows-错误-809</a> </p>
<p>windows10注册表修改,然后需要重启才能连上vpn<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Services\PolicyAgent /v AssumeUDPEncapsulationContextOnSendRule /t REG_DWORD /d 0x2 /f</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;aws服务器的创建及vpn的安装&quot;&gt;&lt;a href=&quot;#aws服务器的创建及vpn的安装&quot; class=&quot;headerlink&quot; title=&quot;aws服务器的创建及vpn的安装&quot;&gt;&lt;/a&gt;aws服务器的创建及vpn的安装&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https
    
    </summary>
    
      <category term="工具" scheme="https://blog.signalfire2017.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="vpn" scheme="https://blog.signalfire2017.com/tags/vpn/"/>
    
      <category term="aws" scheme="https://blog.signalfire2017.com/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>大数据0501-轻量级RPC框架开发</title>
    <link href="https://blog.signalfire2017.com/2018/01/01/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE0501-%E8%BD%BB%E9%87%8F%E7%BA%A7RPC%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91/"/>
    <id>https://blog.signalfire2017.com/2018/01/01/大数据/大数据0501-轻量级RPC框架开发/</id>
    <published>2017-12-31T18:08:22.000Z</published>
    <updated>2017-12-31T18:10:29.078Z</updated>
    
    <content type="html"><![CDATA[<p>1、掌握RPC原理<br>2、掌握nio操作<br>3、掌握netty简单的api<br>4、掌握自定义RPC框架<br><a id="more"></a></p>
<h1 id="RPC原理"><a href="#RPC原理" class="headerlink" title="RPC原理"></a>RPC原理</h1><h2 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h2><p>RPC（Remote Procedure Call Protocol）——<code>远程过程调用协议</code>，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。<br>RPC采用<code>客户机/服务器模式</code>。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。</p>
<h2 id="RPC原理-1"><a href="#RPC原理-1" class="headerlink" title="RPC原理"></a>RPC原理</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017126231022.png" alt="2017126231022"></p>
<p>运行时,一次客户机对服务器的RPC调用,其内部操作大致有如下十步：</p>
<ol>
<li>调用客户端句柄；执行传送参数</li>
<li>调用本地系统内核发送网络消息</li>
<li>消息传送到远程主机</li>
<li>服务器句柄得到消息并取得参数</li>
<li>执行远程过程</li>
<li>执行的过程将结果返回服务器句柄</li>
<li>服务器句柄返回结果，调用远程系统内核</li>
<li>消息传回本地主机</li>
<li>客户句柄由内核接收消息</li>
<li>客户接收句柄返回的数据</li>
</ol>
<h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><p>nio 是New IO 的简称，在jdk1.4 里提供的新api 。<br>Sun 官方标榜的特性如下：   </p>
<ol>
<li>为所有的原始类型提供(Buffer)缓存支持。字符集编码解码解决方案。 </li>
<li>Channel ：一个新的原始I/O 抽象。 </li>
<li>支持锁和内存映射文件的文件访问接口。 </li>
<li>提供多路(non-bloking) 非阻塞式的高伸缩性网络I/O 。</li>
</ol>
<h2 id="socket-nio原理"><a href="#socket-nio原理" class="headerlink" title="socket nio原理"></a>socket nio原理</h2><h3 id="传统的I-O"><a href="#传统的I-O" class="headerlink" title="传统的I/O"></a>传统的I/O</h3><p>使用传统的I/O程序读取文件内容, 并写入到另一个文件(或Socket), 如下程序:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">File.read(fileDesc, buf, len);</div><div class="line">Socket.send(socket, buf, len);</div></pre></td></tr></table></figure></p>
<p>会有较大的性能开销, 主要表现在一下两方面:</p>
<ol>
<li>上下文切换(context switch), 此处有4次用户态和内核态的切换</li>
<li>Buffer内存开销, 一个是应用程序buffer, 另一个是系统读取buffer以及socket buffer</li>
</ol>
<p>其运行示意图如下<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017127225741.png" alt="2017127225741"></p>
<ol>
<li>先将文件内容从磁盘中拷贝到操作系统buffer</li>
<li>再从操作系统buffer拷贝到程序应用buffer</li>
<li>从程序buffer拷贝到socket buffer</li>
<li>从socket buffer拷贝到协议引擎.</li>
</ol>
<h2 id="NIO-1"><a href="#NIO-1" class="headerlink" title="NIO"></a>NIO</h2><p>NIO技术省去了将操作系统的read buffer拷贝到程序的buffer, 以及从程序buffer拷贝到socket buffer的步骤, 直接将 read buffer 拷贝到 socket buffer. java 的 FileChannel.transferTo() 方法就是这样的实现, 这个实现是依赖于操作系统底层的sendFile()实现的.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">publicvoid transferTo(long position, long count, WritableByteChannel target);</div></pre></td></tr></table></figure></p>
<p>他的底层调用的是系统调用sendFile()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sendfile(int out_fd, int in_fd, off_t *offset, size_t count);</div></pre></td></tr></table></figure></p>
<p>如下图<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/201712723052.png" alt="201712723052"></p>
<p>参考帖子：<a href="http://blog.csdn.net/dd864140130/article/details/50299687" target="_blank" rel="external">http://blog.csdn.net/dd864140130/article/details/50299687</a></p>
<h1 id="轻量级RPC开发"><a href="#轻量级RPC开发" class="headerlink" title="轻量级RPC开发"></a>轻量级RPC开发</h1><h2 id="轻量级RPC框架需求分析及原理分析"><a href="#轻量级RPC框架需求分析及原理分析" class="headerlink" title="轻量级RPC框架需求分析及原理分析"></a>轻量级RPC框架需求分析及原理分析</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017126231155.png" alt="2017126231155"></p>
<h2 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程"></a>大概流程</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/20181115823.png" alt="20181115823"></p>
<h2 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/20181115919.png" alt="20181115919"></p>
<ul>
<li>rpc-sample-server   用户服务端 业务实现类 </li>
<li>rpc-sample-common   用户公用包 包含了业务接口</li>
<li>rpc-sample-app      用户客户端 调用业务接口</li>
<li>rpc-server          框架 服务包</li>
<li>rpc-registry        框架 注册和发现 zk用的包</li>
<li>rpc-common          框架 公共包 request response 加密 解密 序列化等公用类</li>
<li>rpc-client          框架 客户包<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2>rpc-server 主要利用<code>反射</code>将接收到的request进行解析、执行、返回结果。<br>rpc-client 主要使用<code>动态代理</code>将接口的调用 封装进request进行请求，然后返回结果。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、掌握RPC原理&lt;br&gt;2、掌握nio操作&lt;br&gt;3、掌握netty简单的api&lt;br&gt;4、掌握自定义RPC框架&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="rpc" scheme="https://blog.signalfire2017.com/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>北京冬天哪里好玩</title>
    <link href="https://blog.signalfire2017.com/2017/12/22/%E5%85%B6%E4%BB%96/%E5%8C%97%E4%BA%AC%E5%86%AC%E5%A4%A9%E5%93%AA%E9%87%8C%E5%A5%BD%E7%8E%A9/"/>
    <id>https://blog.signalfire2017.com/2017/12/22/其他/北京冬天哪里好玩/</id>
    <published>2017-12-22T15:55:03.000Z</published>
    <updated>2017-12-22T17:01:21.934Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml" target="_blank" rel="external">发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~</a><br>转来的<br><a id="more"></a></p>
<h1 id="古北水镇过暖冬"><a href="#古北水镇过暖冬" class="headerlink" title="古北水镇过暖冬"></a>古北水镇过暖冬</h1><p>冬日的水镇一改盛夏的浓艳，鳞次栉比的房屋，青石板的老街，悠长的胡同……让水镇更添几分宁静、祥和。这时候来古北逛逛古镇，看看夜景，泡泡温泉，真是从头到脚的舒心！</p>
<h2 id="门票信息：180-00元（体验价80-00元）"><a href="#门票信息：180-00元（体验价80-00元）" class="headerlink" title="门票信息：180.00元（体验价80.00元）"></a>门票信息：180.00元（体验价80.00元）</h2><h2 id="自驾路线："><a href="#自驾路线：" class="headerlink" title="自驾路线："></a>自驾路线：</h2><p>上了京承高速，一直前行，路上会有古北水镇的标示牌，下了高速，基本就到停车场。从京承高速收费站到古北水镇大约有120公里的路程。<br>tips：四季皆宜。 春季碧波荡漾，水镇宛若一幅江南水墨画；夏季纳凉避暑，戏水游乐；秋季银杏落叶和古朴的建筑情景交融，摄影取材的好去处；冬季皑皑白雪的覆盖下，河面冻结，嬉雪赏冰雕……</p>
<h1 id="首都博物馆"><a href="#首都博物馆" class="headerlink" title="首都博物馆"></a>首都博物馆</h1><p>欲了解一个地方，必去当地的博物馆！首都博物馆是咱们“老北京的博物馆”，从北京的历史文化，生活民俗，风土人文，全面的介绍北京的兴衰变迁。是深度了解北京的好地方。</p>
<h2 id="门票：持有效证件免费参观"><a href="#门票：持有效证件免费参观" class="headerlink" title="门票：持有效证件免费参观"></a>门票：持有效证件免费参观</h2><ul>
<li>地址：西城区复兴门外大街16号<h2 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h2></li>
<li>地铁：乘坐地铁1号线<code>木樨地站</code>下</li>
<li>公交：26、80、45、114、308、特19、937、843、844、840、845路<code>白云路站</code></li>
</ul>
<h1 id="呀路古热带植物园"><a href="#呀路古热带植物园" class="headerlink" title="呀路古热带植物园"></a>呀路古热带植物园</h1><p>北京呀路古热带植物园位于北京市大兴区长子营镇，是北京市最大的热带植物园，占地面积600亩。虽然外面寒风烈烈，但这里确是温暖如春！<br>景区收集了热带果树、热带饮料植物、热带观赏植物、热带药用植物、棕榈植物、热带濒危植物、热带珍奇植物和蔬菜作物等，热带亚热带物种达上千余种<br>景区内主要景点有勐巴拉娜西热带植物馆、土司堡民族展览馆和恐龙馆、孔雀馆等。景区内森林繁茂，蔓藤缠绕，不失为冬季的好去处。</p>
<h2 id="门票：60元"><a href="#门票：60元" class="headerlink" title="门票：60元"></a>门票：60元</h2><h2 id="乘车线路："><a href="#乘车线路：" class="headerlink" title="乘车线路："></a>乘车线路：</h2><ul>
<li>1、市区游客可乘坐976路、826路、926路公交车。 </li>
<li>2、大兴黄村地区的游客可以坐940路公交车<code>朱庄站</code>下车前行200米即到。</li>
</ul>
<h1 id="北京天文馆"><a href="#北京天文馆" class="headerlink" title="北京天文馆"></a>北京天文馆</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>北京天文馆是<code>中国第一座天文馆</code>，馆内有直径23.5米象征天穹的天象厅，中间安装精致的国产大型天象仪，<code>可表演日、月、星辰、流星彗星、日食以及月食等天象</code>。<br>北京天文馆包含<code>A、B两馆</code>，共4个科普剧场。</p>
<h3 id="A馆"><a href="#A馆" class="headerlink" title="A馆"></a>A馆</h3><ul>
<li>门厅正中 ： 反映<code>地球自转的傅科摆</code></li>
<li>西侧展厅 ： 陈列天文知识展览</li>
<li>东侧演讲厅 ： 经常举行学术交流和普及天文科学知识报告。</li>
<li>庭院中有两座天文台，其中一座装有口径13厘米的望远镜，可通过它观看月亮、行星、星云、星团，白天观测太阳黑子。</li>
</ul>
<h2 id="门票："><a href="#门票：" class="headerlink" title="门票："></a>门票：</h2><h3 id="10元-人"><a href="#10元-人" class="headerlink" title="10元/人"></a>10元/人</h3><h3 id="天象厅：45元-人"><a href="#天象厅：45元-人" class="headerlink" title="天象厅：45元/人"></a>天象厅：45元/人</h3><h3 id="宇宙剧场：30元-人"><a href="#宇宙剧场：30元-人" class="headerlink" title="宇宙剧场：30元/人"></a>宇宙剧场：30元/人</h3><h3 id="3D剧场、4D剧场：45元-人"><a href="#3D剧场、4D剧场：45元-人" class="headerlink" title="3D剧场、4D剧场：45元/人"></a>3D剧场、4D剧场：45元/人</h3><h2 id="乘车线路：-1"><a href="#乘车线路：-1" class="headerlink" title="乘车线路："></a>乘车线路：</h2><p>乘7、15、19、27、65、102、103、105、107、111、319、332、334、347、360、362、534、601、632、634、714、732、808、814、运通104、运通105、运通106、特4路<code>动物园站</code>下;地铁4号线<code>动物园站D</code>出口。</p>
<h1 id="南宫温泉水世界"><a href="#南宫温泉水世界" class="headerlink" title="南宫温泉水世界"></a>南宫温泉水世界</h1><p>南宫温泉坐落在4A级南宫旅游景区内，这里可是“<code>中国地热第一村</code>”！也是北京最大的一块地热田！温泉水都来自2980米深得地热井，每天出水量为2700吨，温度69—72℃~<br>整座水世界呈热带雨林的风情，里面种满了热带树木、植物，还有数十种汤泉药浴；儿童戏水乐园，漂流、戏水滑道….</p>
<h2 id="路线-1"><a href="#路线-1" class="headerlink" title="路线"></a>路线</h2><ul>
<li>地址:北京市丰台区王佐镇南宫南路9号</li>
<li>自驾：京港澳高速’南宫王佐19A’出口出向北第二个红绿灯右转200米路北</li>
<li>公交：乘458路,459路,951路,836路直达<code>王佐镇政府站</code>下车</li>
</ul>
<h1 id="顺景温泉"><a href="#顺景温泉" class="headerlink" title="顺景温泉"></a>顺景温泉</h1><p>日式汤屋、溶洞、水世界…在帝都，温泉我只服这一家！顺景温泉总占地13万平米，是吉尼斯认证的“<code>全球最大室内温泉</code>”！<br>这里的温泉水非常珍贵！活性矿物质远远高于理疗热矿水浓度标准室内外温泉池相互衔接，清池湖泊、小桥流水…充满着神秘色彩，给人以原始丛林的生态之美。<br>还有千奇百怪、突兀嶙峋的溶洞。置身于顺景的溶洞景观中，仿入梦境。满眼都是数万年的各异钟乳石、石笋，一切都分外神秘与美丽！    </p>
<h2 id="人均：240元左右-人"><a href="#人均：240元左右-人" class="headerlink" title="人均：240元左右/人"></a>人均：240元左右/人</h2><h2 id="路线-2"><a href="#路线-2" class="headerlink" title="路线"></a>路线</h2><ul>
<li>地址：朝阳区北四环东路2号</li>
<li>电话：010-84420088 010-85696688</li>
<li>乘车路线：847路、131路、401路、404路、641路公交在<code>四元桥西站</code>下车，步行至酒店。</li>
</ul>
<h1 id="X先生密室"><a href="#X先生密室" class="headerlink" title="X先生密室"></a>X先生密室</h1><p>X先生密室是一家大型真人密室逃脱游戏场所，致力于打造最全面的融合紧张刺激，需要玩家在房间中寻找线索，通过合作找出所有线索，交流和思考解开全部谜题，一步一步的走近最终答案，最终逃出密室。<br>绝对属于高科技范儿的密室逃脱，连实景岩洞、水池皮划都能在神秘屋里体验到。解开谜题的钥匙可能藏在任何物件里，有可能你身上穿的衣服也能帮你逃出牢笼。</p>
<h2 id="人均消费：140元"><a href="#人均消费：140元" class="headerlink" title="人均消费：140元"></a>人均消费：140元</h2><h2 id="路线-3"><a href="#路线-3" class="headerlink" title="路线"></a>路线</h2><ul>
<li>地址：朝阳区 工体北路13号世茂广场·工三 2层(工体北门对面)。</li>
<li>营业时间：10:00—2:20(22:30之后来店需提前电话咨询)</li>
<li>电话：4008598298。</li>
</ul>
<h1 id="北京自然博物馆"><a href="#北京自然博物馆" class="headerlink" title="北京自然博物馆"></a>北京自然博物馆</h1><p>如果不知道该如何打发时间，就来位于天桥南侧的北京自然博物馆吧~ 里面有各种动、植物标本、恐龙骨架、人体知识、小小水族馆….在这里，时间仿佛是静止的，不知孩子，大人也能玩的不亦乐乎~<br>有恐龙的化石骨骼，有恐龙的仿真模型，那些模型十分逼真，甚至有的还可以发出恐龙的叫声~<br>还有小小的海洋世界，没有太平洋富国海底世界那么大，只是一个不大的走廊，但是你也可以看到很多的海洋动植物~ 如果小朋友来这里，真的能疯玩一整天！</p>
<h2 id="门票：门票免费，至少需提前一天预约，不能预约当日参观门票"><a href="#门票：门票免费，至少需提前一天预约，不能预约当日参观门票" class="headerlink" title="门票：门票免费，至少需提前一天预约，不能预约当日参观门票"></a>门票：门票免费，至少需提前一天预约，不能预约当日参观门票</h2><h2 id="路线-4"><a href="#路线-4" class="headerlink" title="路线"></a>路线</h2><ul>
<li>地址：北京市东城区天桥南大街126号</li>
<li>公交7路, 17路, 20路, 35路, 36路, 69路, 71路, 72路<code>天桥西门</code>下车</li>
<li>地铁：地铁7号线 <code>珠市口站</code></li>
</ul>
<h1 id="地质博物馆"><a href="#地质博物馆" class="headerlink" title="地质博物馆"></a>地质博物馆</h1><p>中国地质博物馆是<code>中国成立最早的地质学博物馆</code>，创建于1916年，以其典藏系统、成果丰硕、陈列精美称雄于亚洲同类博物馆，并且在世界范围内享有盛誉。<br>中国地质博物馆收藏地质标本20余万件，涵盖地学各个领域。其中有蜚声海内外的<code>巨型山东龙</code>、<code>中华龙鸟等恐龙系列化石</code>，<code>北京人</code>、<code>元谋人</code>、<code>山顶洞人</code>等著名古人类化石等。</p>
<h2 id="门票：30元"><a href="#门票：30元" class="headerlink" title="门票：30元"></a>门票：30元</h2><h2 id="乘车线路：-2"><a href="#乘车线路：-2" class="headerlink" title="乘车线路："></a>乘车线路：</h2><p>市内交通：乘13、22、38、47、68、101、102、103、105、109、124、409、603、709、726、806、808、812、814、823、826、846、850路公共汽车西四站下</p>
<h1 id="世界花卉大观园"><a href="#世界花卉大观园" class="headerlink" title="世界花卉大观园"></a>世界花卉大观园</h1><p>世界花卉大观园位于北京南四环辅路北侧，京开公路东侧，全园41.8公顷，是<code>北京市四环以内最大的植物园</code>。<br>世界花卉大观园景观由<code>七大温室</code>和<code>十五个花园广场</code>组成。各温室内的植物千奇百怪、花锦簇。<br>热带植物馆中有数百年的佛肚树、重阳木、古榕树等乔木1800余种；沙生植物温室有上百种仙人掌、仙人球；精品花卉厅有生动风趣的植物生肖园、精品盆景园等等。</p>
<h2 id="门票：60元-1"><a href="#门票：60元-1" class="headerlink" title="门票：60元"></a>门票：60元</h2><h2 id="乘车线路：-3"><a href="#乘车线路：-3" class="headerlink" title="乘车线路："></a>乘车线路：</h2><p>4号线<code>公益西桥站</code>下车换乘646路到<code>世界花卉大观园站</code>下车。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~&lt;/a&gt;&lt;br&gt;转来的&lt;br&gt;
    
    </summary>
    
      <category term="玩" scheme="https://blog.signalfire2017.com/categories/%E7%8E%A9/"/>
    
    
      <category term="生活" scheme="https://blog.signalfire2017.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="北京" scheme="https://blog.signalfire2017.com/tags/%E5%8C%97%E4%BA%AC/"/>
    
      <category term="游玩" scheme="https://blog.signalfire2017.com/tags/%E6%B8%B8%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title>记录有北京游玩的链接</title>
    <link href="https://blog.signalfire2017.com/2017/12/22/%E5%85%B6%E4%BB%96/%E8%AE%B0%E5%BD%95%E6%9C%89%E5%8C%97%E4%BA%AC%E6%B8%B8%E7%8E%A9%E7%9A%84%E9%93%BE%E6%8E%A5/"/>
    <id>https://blog.signalfire2017.com/2017/12/22/其他/记录有北京游玩的链接/</id>
    <published>2017-12-22T15:51:55.000Z</published>
    <updated>2017-12-22T15:54:43.950Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml" target="_blank" rel="external">发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~&lt;/a
    
    </summary>
    
      <category term="玩" scheme="https://blog.signalfire2017.com/categories/%E7%8E%A9/"/>
    
    
      <category term="北京" scheme="https://blog.signalfire2017.com/tags/%E5%8C%97%E4%BA%AC/"/>
    
      <category term="游玩" scheme="https://blog.signalfire2017.com/tags/%E6%B8%B8%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title>大数据0406-javaJVM技术</title>
    <link href="https://blog.signalfire2017.com/2017/12/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE0406-javaJVM%E6%8A%80%E6%9C%AF/"/>
    <id>https://blog.signalfire2017.com/2017/12/05/大数据/大数据0406-javaJVM技术/</id>
    <published>2017-12-05T14:44:14.000Z</published>
    <updated>2017-12-05T15:50:19.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监控工具的使用"><a href="#监控工具的使用" class="headerlink" title="监控工具的使用"></a>监控工具的使用</h1><h2 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h2><p>可以分析jvm的内存使用情况和线程等信息。</p>
<h2 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h2><p><code>JDK/bin</code> 目录下 <code>jconsole.exe</code>将自动搜索出本机运行的所有JVM进程，不需要用户使用jps来查询了，双击其中一个进程即可开始监控。也可以“远程连接服务器，进行远程虚拟机的监控。”</p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231152.png" alt="2017125231152"></p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231222.png" alt="2017125231222"></p>
<h2 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h2><p>提供了和jconsole的功能类似，提供了一大堆的插件。<br>插件中，Visual GC（可视化GC）还是比较好用的，可视化GC可以看到内存的具体使用情况。</p>
<h1 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h1><h2 id="内存模型图解"><a href="#内存模型图解" class="headerlink" title="内存模型图解"></a>内存模型图解</h2><p>Java虚拟机在执行Java程序的过程中，会把它所管理的内存划分为若干个不同的数据区。这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有的区域则依赖用户线程的启动和结束而建立和销毁，我们可以将这些区域统称为Java运行时数据区域。<br>如下图是一个内存模型的关系图（详情见图：内存划分.png）：<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231537.png" alt="2017125231537"></p>
<p>Java虚拟机运行时数据区域被分为五个区域：<code>堆(Heap)、栈(Stack)、本地方法栈(Native Stack)、方法区(Method Area)、程序计数器(Program Count Register)</code>。<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125232329.png" alt="2017125232329"></p>
<h2 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h2><p>对于大多数应用来说，<code>Java Heap</code>是Java虚拟机管理的内存的最大一块，这块区域<code>随着虚拟机的启动而创建</code>。在实际的运用中，我们创建的<code>对象</code>和<code>数组</code>就是存放在堆里面。如果你听说线程安全的问题，就会很明确的知道Java Heap是一块<code>共享的区域</code>，操作共享区域的成员就有了锁和同步。<br>与Java Heap相关的还有Java的垃圾回收机制（GC）,Java Heap是垃圾回收器管理的主要区域。程序猿所熟悉的<code>新生代</code>、<code>老生代</code>、<code>永久代</code>的概念就是在堆里面，现在大多数的GC基本都采用了<code>分代收集算法</code>。如果再细致一点，Java Heap还有<code>Eden空间</code>，<code>From Survivor空间</code>,<code>To Survivor空间</code>等。<br>Java Heap可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125233020.png" alt="2017125233020"></p>
<h2 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h2><p>相对于Java Heap来讲，<code>Java Stack</code>是<code>线程私有</code>的，她的<code>生命周期与线程相同</code>。Java Stack描述的是Java方法执行时的内存模型，<code>每个方法执行时都会创建一个栈帧</code>（Stack Frame）用语存储局部变量表、操作数栈、动态链接、方法出口等信息。从下图从可以看到，每个线程在执行一个方法时，都意味着有一个栈帧在当前线程对应的栈帧中入栈和出栈。<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125233212.png" alt="2017125233212"></p>
<p>图中可以看到每一个栈帧中都有局部变量表。局部变量表存放了编译期间的各种基本数据类型，对象引用等信息。</p>
<h2 id="本地方法栈（Native-Stack）"><a href="#本地方法栈（Native-Stack）" class="headerlink" title="本地方法栈（Native Stack）"></a>本地方法栈（Native Stack）</h2><p>本地方法栈（Native Stack）与Java虚拟机站（Java Stack）所发挥的作用非常相似，他们之间的区别在于虚拟机栈为虚拟机栈执行java方法（也就是字节码）服务，而本地方法栈则为使用到Native方法服务。</p>
<h2 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h2><p>方法区（Method Area）与堆（Java Heap）一样，是<code>各个线程共享的内存区域</code>，它用于存储虚拟机加载的<code>类信息</code>，<code>常量</code>，<code>静态变量</code>，<code>即时编译器编译后的代码</code>等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是她却有一个别名叫做非堆（Non-Heap）。分析下Java虚拟机规范，之所以把方法区描述为堆的一个逻辑部分，应该觉得她们都是存储数据的角度出发的。一个存储对象数据（堆），一个存储静态信息(方法区)。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="线程私有的数据区域有："><a href="#线程私有的数据区域有：" class="headerlink" title="线程私有的数据区域有："></a>线程私有的数据区域有：</h3><p>Java虚拟机栈（Java Stack）<br>本地方法栈（Native Stack）  </p>
<h3 id="线程共有的数据区域有："><a href="#线程共有的数据区域有：" class="headerlink" title="线程共有的数据区域有："></a>线程共有的数据区域有：</h3><p>堆（Java Heap）<br>方法区  </p>
<h1 id="JVM参数列表"><a href="#JVM参数列表" class="headerlink" title="JVM参数列表"></a>JVM参数列表</h1><p>java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:NewRatio=4 -XX:SurvivorRatio=4 -XX:MaxPermSize=16m  -XX:MaxTenuringThreshold=0<br><code>-Xmx3550m</code>：最大堆内存为3550M。<br><code>-Xms3550m</code>：初始堆内存为3550m。<br>此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。<br><code>-Xmn2g</code>：设置年轻代大小为2G。<br>整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。<br><code>-Xss128k</code>：设置每个线程的堆栈大小。<br>JDK5.0以后每个线程堆栈大小为1M，在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000左右。<br><code>-XX:NewRatio=4</code>:设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5<br><code>-XX:SurvivorRatio=4</code>：设置年轻代中Eden区与Survivor区的大小比值。<br>设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6<br><code>-XX:MaxPermSize=16m</code>:设置持久代大小为16m。<br><code>-XX:MaxTenuringThreshold=0</code>：设置垃圾最大年龄。<br>如果设置为0的话，则年轻代对象不经过Survivor区，直 接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象 再年轻代的存活时间，增加在年轻代即被回收的概论。  </p>
<p>收集器设置<br>-XX:+UseSerialGC:设置串行收集器<br>-XX:+UseParallelGC:设置并行收集器<br>-XX:+UseParalledlOldGC:设置并行年老代收集器<br>-XX:+UseConcMarkSweepGC:设置并发收集器<br>垃圾回收统计信息<br>-XX:+PrintGC<br>-XX:+PrintGCDetails<br>-XX:+PrintGCTimeStamps<br>-Xloggc:filename<br>并行收集器设置<br>-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。<br>-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间<br>-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)<br>并发收集器设置<br>-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。<br>-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。  </p>
<h1 id="jvm案例演示"><a href="#jvm案例演示" class="headerlink" title="jvm案例演示"></a>jvm案例演示</h1><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>Jconsole的内存标签相当于可视化的jstat命令，用于监视收集器管理的虚拟机内存（java堆和永久代）的变化趋势。<br>我们通过下面的一段代码体验一下它的监视功能。运行时设置的虚拟机参数为：-Xms100m -Xmx100m -XX:+UseSerialGC，这段代码的作用是以64kb/50毫秒的速度往java堆内存中填充数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMemory</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span> </span>&#123;</div><div class="line">		<span class="keyword">public</span> <span class="keyword">byte</span>[] placeholder = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">64</span> * <span class="number">1024</span>];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillHeap</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		ArrayList&lt;OOMObject&gt; list = <span class="keyword">new</span> ArrayList&lt;OOMObject&gt;();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">			Thread.sleep(<span class="number">50</span>);</div><div class="line">			list.add(<span class="keyword">new</span> OOMObject());</div><div class="line">		&#125;</div><div class="line">		System.gc();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		fillHeap(<span class="number">1000</span>);</div><div class="line">		Thread.sleep(<span class="number">500000</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234140.png" alt="2017125234140"></p>
<p>从图中可以看出，运行轨迹成曲线增长，循环1000次后，虽然整个新生代Eden和Survivor区都基本上被清空了，但是老年代仍然保持峰值状态，这说明，填充的数据在GC后仍然存活，因为list的作用域没有结束。如果把System.gc();移到fillHeap(1000);后，就可以全部回收掉。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>jconsole线程标签相当于可视化了jstack命令，遇到线程停顿时，可以使用这个也签进行监控分析。线程长时间停顿的主要原因有：等待外部资源（数据库连接等），死循环、锁等待。下面的代码将演示这几种情况：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.java.jvm;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 死循环演示</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createBusyThread</span><span class="params">()</span> </span>&#123;</div><div class="line">		Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				System.out.println(<span class="string">"createBusyThread"</span>);</div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>)</div><div class="line">					;</div><div class="line">			&#125;</div><div class="line">		&#125;, <span class="string">"testBusyThread"</span>);</div><div class="line">		thread.start();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 线程锁等待</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createLockThread</span><span class="params">(<span class="keyword">final</span> Object lock)</span> </span>&#123;</div><div class="line">		Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				System.out.println(<span class="string">"createLockThread"</span>);</div><div class="line">				<span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						lock.wait();</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;, <span class="string">"testLockThread"</span>);</div><div class="line">		thread.start();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">		br.readLine();</div><div class="line">		createBusyThread();</div><div class="line">		br.readLine();</div><div class="line">		Object object = <span class="keyword">new</span> Object();</div><div class="line">		createLockThread(object);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>main线程：追踪到需要键盘录入<br>testBusyThread线程：线程阻塞在18行的while（true），直到线程切换，很耗性能<br>testLockThread线程：出于waitting状态，等待notify  </p>
<p>死锁：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.java.jvm;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeadThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> a, b;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TestDeadThread</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.a = a;</div><div class="line">		<span class="keyword">this</span>.b = b;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"createDeadThread"</span>);</div><div class="line">		<span class="keyword">synchronized</span> (Integer.valueOf(a)) &#123;</div><div class="line">			<span class="keyword">synchronized</span> (Integer.valueOf(b)) &#123;</div><div class="line">				System.out.println(a + b);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> TestDeadThread(<span class="number">1</span>, <span class="number">2</span>)).start();</div><div class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> TestDeadThread(<span class="number">2</span>, <span class="number">1</span>)).start();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>点击检查死锁，会出现死锁的详情。</p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234810.png" alt="2017125234810"></p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234928.png" alt="2017125234928"></p>
<p>thread-5的锁被thread-10持有，相反亦是，造成死锁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;监控工具的使用&quot;&gt;&lt;a href=&quot;#监控工具的使用&quot; class=&quot;headerlink&quot; title=&quot;监控工具的使用&quot;&gt;&lt;/a&gt;监控工具的使用&lt;/h1&gt;&lt;h2 id=&quot;jconsole&quot;&gt;&lt;a href=&quot;#jconsole&quot; class=&quot;headerli
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="java" scheme="https://blog.signalfire2017.com/tags/java/"/>
    
      <category term="JVM" scheme="https://blog.signalfire2017.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>大数据0405-java-socket</title>
    <link href="https://blog.signalfire2017.com/2017/12/03/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE0405-java-socket/"/>
    <id>https://blog.signalfire2017.com/2017/12/03/大数据/大数据0405-java-socket/</id>
    <published>2017-12-03T15:14:47.000Z</published>
    <updated>2017-12-03T15:17:24.365Z</updated>
    
    <content type="html"><![CDATA[<p>直接上代码吧<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast.bigdata.socket;</div><div class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceServer</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">// 创建一个serversocket，绑定到本机的8899端口上</span></div><div class="line">		ServerSocket server = <span class="keyword">new</span> ServerSocket();</div><div class="line">		server.bind(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8899</span>));</div><div class="line">		<span class="comment">// 接受客户端的连接请求;accept是一个阻塞方法，会一直等待，到有客户端请求连接才返回</span></div><div class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">			Socket socket = server.accept();</div><div class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> ServiceServerTask(socket)).start();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">======================</div><div class="line"><span class="keyword">package</span> cn.itcast.bigdata.socket;</div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceClient</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">/*ServiceIterface service = ProxyUtils.getProxy(ServiceIterface.class,"methodA",hostname,port);</span></div><div class="line"><span class="comment">		Result = service.methodA(parameters);*/</span></div><div class="line">		<span class="comment">// 向服务器发出请求建立连接</span></div><div class="line">		Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">8899</span>);</div><div class="line">		<span class="comment">// 从socket中获取输入输出流</span></div><div class="line">		InputStream inputStream = socket.getInputStream();</div><div class="line">		OutputStream outputStream = socket.getOutputStream();</div><div class="line">		PrintWriter pw = <span class="keyword">new</span> PrintWriter(outputStream);</div><div class="line">		pw.println(<span class="string">"hello"</span>);</div><div class="line">		pw.flush();</div><div class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</div><div class="line">		String result = br.readLine();</div><div class="line">		System.out.println(result);</div><div class="line">		inputStream.close();</div><div class="line">		outputStream.close();</div><div class="line">		socket.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">======================</div><div class="line"><span class="keyword">package</span> cn.itcast.bigdata.socket;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetDataServiceImpl</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">(String param)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"ok-"</span>+param;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">=======================</div><div class="line"><span class="keyword">package</span> cn.itcast.bigdata.socket;</div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceServerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	Socket socket ;</div><div class="line">	InputStream in=<span class="keyword">null</span>;</div><div class="line">	OutputStream out = <span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ServiceServerTask</span><span class="params">(Socket socket)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.socket = socket;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//业务逻辑：跟客户端进行数据交互</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		 <span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//从socket连接中获取到与client之间的网络通信输入输出流 </span></div><div class="line">			in = socket.getInputStream();</div><div class="line">			out = socket.getOutputStream();</div><div class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</div><div class="line">			<span class="comment">//从网络通信输入流中读取客户端发送过来的数据</span></div><div class="line">			<span class="comment">//注意：socketinputstream的读数据的方法都是阻塞的 </span></div><div class="line">			String param = br.readLine();</div><div class="line">			<span class="comment">/**</span></div><div class="line"><span class="comment">			 * 作业：</span></div><div class="line"><span class="comment">			 * 将以下业务调用逻辑写成更加通用的：可以根据客户端发过来的调用类名、调用方法名、调用该参数来灵活调用</span></div><div class="line"><span class="comment">			 * </span></div><div class="line"><span class="comment">			 * 《反射》</span></div><div class="line"><span class="comment">			 * </span></div><div class="line"><span class="comment">			 */</span></div><div class="line">			GetDataServiceImpl getDataServiceImpl = <span class="keyword">new</span> GetDataServiceImpl();</div><div class="line">			String result = getDataServiceImpl.getData(param);</div><div class="line">			<span class="comment">//将调用结果写到sokect的输出流中，以发送给客户端</span></div><div class="line">			PrintWriter pw = <span class="keyword">new</span> PrintWriter(out);</div><div class="line">			pw.println(result);</div><div class="line">			pw.flush();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				in.close();</div><div class="line">				out.close();</div><div class="line">				socket.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直接上代码吧&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="java" scheme="https://blog.signalfire2017.com/tags/java/"/>
    
      <category term="socket" scheme="https://blog.signalfire2017.com/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>大数据0404-java动态代理</title>
    <link href="https://blog.signalfire2017.com/2017/12/03/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE0404-java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://blog.signalfire2017.com/2017/12/03/大数据/大数据0404-java动态代理/</id>
    <published>2017-12-03T10:18:16.000Z</published>
    <updated>2017-12-03T10:30:22.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>在之前的代码调用阶段，我们用action调用service的方法实现业务即可。<br>由于之前在service中实现的业务可能不能够满足当先客户的要求，需要我们重新修改service中的方法，但是service的方法不只在我们这个模块使用，在其他模块也在调用，其他模块调用的时候，现有的service方法已经能够满足业务需求，所以我们不能只为了我们的业务而修改service，导致其他模块授影响。<br>那怎么办呢？<br>可以通过动态代理的方式，扩展我们的service中的方法实现，使得在原有的方法中增加更多的业务，而不是实际修改service中的方法，这种实现技术就叫做动态代理。<br>动态代理：在不修改原业务的基础上，基于原业务方法，进行重新的扩展，实现新的业务。  </p>
<h2 id="例如下面的例子："><a href="#例如下面的例子：" class="headerlink" title="例如下面的例子："></a>例如下面的例子：</h2><ul>
<li>旧业务<br>买家调用action，购买衣服，衣服在数据库的标价为50元，购买流程就是简单的调用。</li>
<li>新业务<br>在原先的价格上可以使用优惠券，但是这个功能在以前没有实现过，我们通过代理类，代理了原先的接口方法，在这个方法的基础上，修改了返回值。</li>
</ul>
<p>代理实现流程：</p>
<ol>
<li>书写代理类和代理方法，在代理方法中实现代理Proxy.newProxyInstance</li>
<li>代理中需要的参数分别为：被代理的类的类加载器soneObjectclass.getClassLoader()，被代理类的所有实现接口new Class[] { Interface.class }，句柄方法new InvocationHandler()</li>
<li>在句柄方法中复写invoke方法，invoke方法的输入有3个参数Object proxy（代理类对象）, Method method（被代理类的方法）,Object[] args（被代理类方法的传入参数），在这个方法中，我们可以定制化的开发新的业务。</li>
<li>获取代理类，强转成被代理的接口</li>
<li>最后，我们可以像没被代理一样，调用接口的认可方法，方法被调用后，方法名和参数列表将被传入代理类的invoke方法中，进行新业务的逻辑流程。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">原业务接口IBoss=================================</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 这是一个业务的接口，这个接口中的业务就是返回衣服的价格</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> wilson</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBoss</span> </span>&#123;<span class="comment">//接口</span></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">yifu</span><span class="params">(String size)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">原业务实现类====================================</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> <span class="keyword">implements</span> <span class="title">IBoss</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">yifu</span><span class="params">(String size)</span></span>&#123;</div><div class="line">		System.err.println(<span class="string">"天猫小强旗舰店，老板给客户发快递----衣服型号："</span>+size);</div><div class="line">		<span class="comment">//这件衣服的价钱，从数据库读取</span></div><div class="line">		<span class="keyword">return</span> <span class="number">50</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kuzi</span><span class="params">()</span></span>&#123;</div><div class="line">		System.err.println(<span class="string">"天猫小强旗舰店，老板给客户发快递----裤子"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">原业务调用====================================</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleAction</span> </span>&#123;</div><div class="line">		<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleByBossSelf</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		IBoss boss = <span class="keyword">new</span> Boss();</div><div class="line">		System.out.println(<span class="string">"老板自营！"</span>);</div><div class="line">		<span class="keyword">int</span> money = boss.yifu(<span class="string">"xxl"</span>);</div><div class="line">		System.out.println(<span class="string">"衣服成交价："</span> + money);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">代理类========================================</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyBoss</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 对接口方法进行代理</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> discountCoupon,</span></span></div><div class="line"><span class="function"><span class="params">			<span class="keyword">final</span> Class&lt;?&gt; interfaceClass, <span class="keyword">final</span> Class&lt;?&gt; implementsClass)</span></span></div><div class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(),</div><div class="line">				<span class="keyword">new</span> Class[] &#123; interfaceClass &#125;, <span class="keyword">new</span> InvocationHandler() &#123;</div><div class="line">					<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method,</span></span></div><div class="line"><span class="function"><span class="params">							Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">						Integer returnValue = (Integer) method.invoke(</div><div class="line">								implementsClass.newInstance(), args);<span class="comment">// 调用原始对象以后返回的值</span></div><div class="line">						<span class="keyword">return</span> returnValue - discountCoupon;</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">新业务调用=======================================</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> cn.itcast_05_proxy.proxyclass.ProxyBoss;</div><div class="line"><span class="keyword">import</span> cn.itcast_05_proxy.service.IBoss;</div><div class="line"><span class="keyword">import</span> cn.itcast_05_proxy.service.impl.Boss;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 什么是动态代理？ 简单的写一个模板接口，剩下的个性化工作，好给动态代理来完成！</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySaleAction</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *使用代理，在这个代理中，只代理了Boss的yifu方法</span></div><div class="line"><span class="comment">	 *定制化业务，可以改变原接口的参数、返回值等</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleByProxy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		IBoss boss = ProxyBoss.getProxy(<span class="number">10</span>,IBoss.class,Boss.class);<span class="comment">// 将代理的方法实例化成接口</span></div><div class="line">		<span class="comment">//IBoss boss = new Boss();// 将代理的方法实例化成接口</span></div><div class="line">		System.out.println(<span class="string">"代理经营！"</span>);</div><div class="line">		<span class="keyword">int</span> money = boss.yifu(<span class="string">"xxl"</span>);<span class="comment">// 调用接口的方法，实际上调用方式没有变</span></div><div class="line">		System.out.println(<span class="string">"衣服成交价："</span> + money);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态代理&quot;&gt;&lt;a href=&quot;#动态代理&quot; class=&quot;headerlink&quot; title=&quot;动态代理&quot;&gt;&lt;/a&gt;动态代理&lt;/h1&gt;&lt;p&gt;在之前的代码调用阶段，我们用action调用service的方法实现业务即可。&lt;br&gt;由于之前在service中实现的业务可
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="java" scheme="https://blog.signalfire2017.com/tags/java/"/>
    
      <category term="动态代理" scheme="https://blog.signalfire2017.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>大数据0403-java反射</title>
    <link href="https://blog.signalfire2017.com/2017/12/03/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE0403-java%E5%8F%8D%E5%B0%84/"/>
    <id>https://blog.signalfire2017.com/2017/12/03/大数据/大数据0403-java反射/</id>
    <published>2017-12-03T08:34:00.000Z</published>
    <updated>2017-12-03T10:30:25.769Z</updated>
    
    <content type="html"><![CDATA[<p>通过反射的方式可以获取class对象中的属性、方法、构造函数等:<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_04_reflect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReflect</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> String className = <span class="keyword">null</span>;</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">	<span class="keyword">public</span> Class personClass = <span class="keyword">null</span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 反射Person类</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception </span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Before</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		className = <span class="string">"cn.itcast_04_reflect.Person"</span>;</div><div class="line">		personClass = Class.forName(className);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *获取某个class文件对象</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClassName</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(personClass);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *获取某个class文件对象的另一种方式</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClassName2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(Person.class);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *创建一个class文件表示的实例对象，底层会调用空参数的构造方法</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNewInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(personClass.newInstance());</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *获取非私有的构造函数</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPublicConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Constructor  constructor  = personClass.getConstructor(Long.class,String.class);</div><div class="line">		Person person = (Person)constructor.newInstance(<span class="number">100L</span>,<span class="string">"zhangsan"</span>);</div><div class="line">		System.out.println(person.getId());</div><div class="line">		System.out.println(person.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *获得私有的构造函数</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPrivateConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Constructor con = personClass.getDeclaredConstructor(String.class);</div><div class="line">		con.setAccessible(<span class="keyword">true</span>);<span class="comment">//强制取消Java的权限检测</span></div><div class="line">		Person person2 = (Person)con.newInstance(<span class="string">"zhangsan"</span>);</div><div class="line">		System.out.println(<span class="string">"**"</span>+person2.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *访问非私有的成员变量</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNotPrivateField</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Constructor  constructor  = personClass.getConstructor(Long.class,String.class);</div><div class="line">		Object obj = constructor.newInstance(<span class="number">100L</span>,<span class="string">"zhangsan"</span>);</div><div class="line">		</div><div class="line">		Field field = personClass.getField(<span class="string">"name"</span>);</div><div class="line">		field.set(obj, <span class="string">"lisi"</span>);</div><div class="line">		System.out.println(field.get(obj));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *访问私有的成员变量</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPrivateField</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Constructor  constructor  = personClass.getConstructor(Long.class);</div><div class="line">		Object obj = constructor.newInstance(<span class="number">100L</span>);</div><div class="line">		</div><div class="line">		Field field2 = personClass.getDeclaredField(<span class="string">"id"</span>);</div><div class="line">		field2.setAccessible(<span class="keyword">true</span>);<span class="comment">//强制取消Java的权限检测</span></div><div class="line">		field2.set(obj,<span class="number">10000L</span>);</div><div class="line">		System.out.println(field2.get(obj));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *获取非私有的成员函数</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span> &#125;)</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNotPrivateMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(personClass.getMethod(<span class="string">"toString"</span>));</div><div class="line">		</div><div class="line">		Object obj = personClass.newInstance();<span class="comment">//获取空参的构造函数</span></div><div class="line">		Method toStringMethod = personClass.getMethod(<span class="string">"toString"</span>);</div><div class="line">		Object object = toStringMethod.invoke(obj);</div><div class="line">		System.out.println(object);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *获取私有的成员函数</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPrivateMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Object obj = personClass.newInstance();<span class="comment">//获取空参的构造函数</span></div><div class="line">		Method method = personClass.getDeclaredMethod(<span class="string">"getSomeThing"</span>);</div><div class="line">		method.setAccessible(<span class="keyword">true</span>);</div><div class="line">		Object value = method.invoke(obj);</div><div class="line">		System.out.println(value);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//当前加载这个class文件的那个类加载器对象</span></div><div class="line">		System.out.println(personClass.getClassLoader());</div><div class="line">		<span class="comment">//获取某个类实现的所有接口</span></div><div class="line">		Class[] interfaces = personClass.getInterfaces();</div><div class="line">		<span class="keyword">for</span> (Class class1 : interfaces) &#123;</div><div class="line">			System.out.println(class1);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//反射当前这个类的直接父类</span></div><div class="line">		System.out.println(personClass.getGenericSuperclass());</div><div class="line">		<span class="comment">/**</span></div><div class="line"><span class="comment">		 * getResourceAsStream这个方法可以获取到一个输入流，这个输入流会关联到name所表示的那个文件上。</span></div><div class="line"><span class="comment">		 */</span></div><div class="line">		<span class="comment">//path 不以’/'开头时默认是从此类所在的包下取资源，以’/'开头则是从ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。</span></div><div class="line">		System.out.println(personClass.getResourceAsStream(<span class="string">"/log4j.properties"</span>));</div><div class="line">		System.out.println(personClass.getResourceAsStream(<span class="string">"log4j.properties"</span>));</div><div class="line">		</div><div class="line">		<span class="comment">//判断当前的Class对象表示是否是数组</span></div><div class="line">		System.out.println(personClass.isArray());</div><div class="line">		System.out.println(<span class="keyword">new</span> String[<span class="number">3</span>].getClass().isArray());</div><div class="line">		</div><div class="line">		<span class="comment">//判断当前的Class对象表示是否是枚举类</span></div><div class="line">		System.out.println(personClass.isEnum());</div><div class="line">		System.out.println(Class.forName(<span class="string">"cn.itcast_04_reflect.City"</span>).isEnum());</div><div class="line">		</div><div class="line">		<span class="comment">//判断当前的Class对象表示是否是接口</span></div><div class="line">		System.out.println(personClass.isInterface());</div><div class="line">		System.out.println(Class.forName(<span class="string">"cn.itcast_04_reflect.TestInterface"</span>).isInterface());</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过反射的方式可以获取class对象中的属性、方法、构造函数等:&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="java" scheme="https://blog.signalfire2017.com/tags/java/"/>
    
      <category term="反射" scheme="https://blog.signalfire2017.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>大数据0402-JMS activeMQ</title>
    <link href="https://blog.signalfire2017.com/2017/12/03/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE0402-JMS%20activeMQ/"/>
    <id>https://blog.signalfire2017.com/2017/12/03/大数据/大数据0402-JMS activeMQ/</id>
    <published>2017-12-03T06:57:03.000Z</published>
    <updated>2017-12-03T10:30:08.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-JMS技术"><a href="#java-JMS技术" class="headerlink" title="java JMS技术"></a>java JMS技术</h1><h2 id="什么是JMS"><a href="#什么是JMS" class="headerlink" title="什么是JMS"></a>什么是JMS</h2><p>JMS即Java<font color="red">消息服务（Java Message Service）</font>应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。<br>JMS是一种与厂商无关的 API，用来访问消息收发系统消息。它类似于JDBC(Java Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。许多厂商都支持 JMS，包括 IBM 的 MQSeries、BEA的 Weblogic JMS service和 Progress 的 SonicMQ，这只是几个例子。 JMS 使您能够通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JMS客户机发送消息。消息是 JMS 中的一种类型对象，由两部分组成：报头和消息主体。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。根据有效负载的类型来划分，可以将消息分为几种类型，它们分别携带：简单文本(TextMessage)、可序列化的对象 (ObjectMessage)、属性集合 (MapMessage)、字节流 (BytesMessage)、原始值流 (StreamMessage)，还有无有效负载的消息 (Message)。</p>
<h2 id="JMS规范"><a href="#JMS规范" class="headerlink" title="JMS规范"></a>JMS规范</h2><h3 id="专业技术规范"><a href="#专业技术规范" class="headerlink" title="专业技术规范"></a>专业技术规范</h3><p>JMS（Java Messaging Service）是Java平台上有关面向消息中间件(MOM)的技术规范，它便于消息系统中的Java应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发，翻译为Java消息服务。</p>
<h3 id="体系架构"><a href="#体系架构" class="headerlink" title="体系架构"></a>体系架构</h3><p>JMS由以下元素组成。</p>
<ul>
<li>JMS提供者provider：连接面向消息中间件的，JMS接口的一个实现。提供者可以是Java平台的JMS实现，也可以是非Java平台的面向消息中间件的适配器。</li>
<li>JMS客户：生产或消费基于消息的Java的应用程序或对象。</li>
<li>JMS生产者：创建并发送消息的JMS客户。</li>
<li>JMS消费者：接收消息的JMS客户。</li>
<li>JMS消息：包括可以在JMS客户之间传递的数据的对象</li>
<li>JMS队列：一个容纳那些被发送的等待阅读的消息的区域。与队列名字所暗示的意思不同，消息的接受顺序并不一定要与消息的发送顺序相同。一旦一个消息被阅读，该消息将被从队列中移走。</li>
<li>JMS主题：一种支持发送消息给多个订阅者的机制。</li>
</ul>
<h3 id="Java消息服务应用程序结构支持两种模型"><a href="#Java消息服务应用程序结构支持两种模型" class="headerlink" title="Java消息服务应用程序结构支持两种模型"></a>Java消息服务应用程序结构支持两种模型</h3><h4 id="点对点或队列模型"><a href="#点对点或队列模型" class="headerlink" title="点对点或队列模型"></a>点对点或队列模型</h4><p>在点对点或队列模型下，一个生产者向一个特定的队列发布消息，一个消费者从该队列中读取消息。这里，生产者知道消费者的队列，并直接将消息发送到消费者的队列。<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/201712315592.png" alt="201712315592"><br>这种模式被概括为：  </p>
<ul>
<li>只有一个消费者将获得消息</li>
<li>生产者不需要在接收者消费该消息期间处于运行状态，接收者也同样不需要在消息发送时处于运行状态。</li>
<li>每一个成功处理的消息都由接收者签收</li>
</ul>
<h4 id="发布者-订阅者模型"><a href="#发布者-订阅者模型" class="headerlink" title="发布者/订阅者模型"></a>发布者/订阅者模型</h4><p>发布者/订阅者模型支持向一个特定的消息主题发布消息。0或多个订阅者可能对接收来自特定消息主题的消息感兴趣。在这种模型下，发布者和订阅者彼此不知道对方。这种模式好比是匿名公告板。<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017123155942.png" alt="2017123155942"><br>这种模式被概括为：</p>
<ul>
<li>多个消费者可以获得消息</li>
<li>在发布者和订阅者之间存在时间依赖性。发布者需要建立一个订阅（subscription），以便客户能够订阅。订阅者必须保持持续的活动状态以接收消息，除非订阅者建立了持久的订阅。在那种情况下，在订阅者未连接时发布的消息将在订阅者重新连接时重新发布。</li>
</ul>
<h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><h2 id="下载ActiveMQ"><a href="#下载ActiveMQ" class="headerlink" title="下载ActiveMQ"></a>下载ActiveMQ</h2><p>去官方网站下载：<a href="http://activemq.apache.org/" target="_blank" rel="external">http://activemq.apache.org/</a></p>
<h2 id="运行ActiveMQ"><a href="#运行ActiveMQ" class="headerlink" title="运行ActiveMQ"></a>运行ActiveMQ</h2><p>解压缩apache-activemq-5.5.1-bin.zip，<br>修改配置文件activeMQ.xml，将0.0.0.0修改为localhost<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">transportConnectors</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"openwire"</span> <span class="attr">uri</span>=<span class="string">"tcp://localhost:61616"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"ssl"</span>     <span class="attr">uri</span>=<span class="string">"ssl://localhost:61617"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"stomp"</span>   <span class="attr">uri</span>=<span class="string">"stomp://localhost:61613"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">uri</span>=<span class="string">"http://localhost:8081"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">uri</span>=<span class="string">"udp://localhost:61618"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后双击apache-activemq-5.5.1\bin\activemq.bat运行ActiveMQ程序。<br>启动ActiveMQ以后，登陆：<a href="http://localhost:8161/admin/，创建一个Queue，命名为FirstQueue。" target="_blank" rel="external">http://localhost:8161/admin/，创建一个Queue，命名为FirstQueue。</a>  </p>
<h1 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h1><h2 id="常用的JMS实现"><a href="#常用的JMS实现" class="headerlink" title="常用的JMS实现"></a>常用的JMS实现</h2><p>要使用Java消息服务，你必须要有一个JMS提供者，管理会话和队列。既有开源的提供者也有专有的提供者。<br>开源的提供者包括：</p>
<ul>
<li>Apache ActiveMQ</li>
<li>JBoss 社区所研发的 HornetQ</li>
<li>Joram</li>
<li>Coridan的MantaRay</li>
<li>The OpenJMS Group的OpenJMS</li>
<li>专有的提供者包括：</li>
<li>BEA的BEA WebLogic Server JMS</li>
<li>TIBCO Software的EMS</li>
<li>GigaSpaces Technologies的GigaSpaces</li>
<li>Softwired 2006的iBus</li>
<li>IONA Technologies的IONA JMS</li>
<li>SeeBeyond的IQManager（2005年8月被Sun Microsystems并购）</li>
<li>webMethods的JMS+ -</li>
<li>my-channels的Nirvana</li>
<li>Sonic Software的SonicMQ</li>
<li>SwiftMQ的SwiftMQ</li>
<li>IBM的WebSphere MQ</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_03_mq.topic;</div><div class="line"><span class="keyword">import</span> javax.jms.Connection;      </div><div class="line"><span class="keyword">import</span> javax.jms.DeliveryMode;      </div><div class="line"><span class="keyword">import</span> javax.jms.Destination;      </div><div class="line"><span class="keyword">import</span> javax.jms.JMSException;      </div><div class="line"><span class="keyword">import</span> javax.jms.MessageProducer;      </div><div class="line"><span class="keyword">import</span> javax.jms.Session;      </div><div class="line"><span class="keyword">import</span> javax.jms.TextMessage;      </div><div class="line">     </div><div class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnection;      </div><div class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;      </div><div class="line">     </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTool</span> </span>&#123;        </div><div class="line">    <span class="keyword">private</span> String user = ActiveMQConnection.DEFAULT_USER;         </div><div class="line">    <span class="keyword">private</span> String password = ActiveMQConnection.DEFAULT_PASSWORD;       </div><div class="line">    <span class="keyword">private</span> String url = ActiveMQConnection.DEFAULT_BROKER_URL;       </div><div class="line">    <span class="keyword">private</span> String subject = <span class="string">"mytopic"</span>;      </div><div class="line">    <span class="keyword">private</span> Destination destination = <span class="keyword">null</span>;      </div><div class="line">    <span class="keyword">private</span> Connection connection = <span class="keyword">null</span>;      </div><div class="line">    <span class="keyword">private</span> Session session = <span class="keyword">null</span>;      </div><div class="line">    <span class="keyword">private</span> MessageProducer producer = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">// 初始化      </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> JMSException, Exception </span>&#123;      </div><div class="line">        ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(      </div><div class="line">                user, password, url);      </div><div class="line">        connection = connectionFactory.createConnection();      </div><div class="line">        session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);      </div><div class="line">        destination = session.createTopic(subject);      </div><div class="line">        producer = session.createProducer(destination);      </div><div class="line">        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);      </div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 发送消息      </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> JMSException, Exception </span>&#123;      </div><div class="line">        initialize();      </div><div class="line">        TextMessage msg = session.createTextMessage(message);      </div><div class="line">        connection.start();      </div><div class="line">        System.out.println(<span class="string">"Producer:-&gt;Sending message: "</span> + message);      </div><div class="line">        producer.send(msg);      </div><div class="line">        System.out.println(<span class="string">"Producer:-&gt;Message sent complete!"</span>);      </div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 关闭连接      </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;      </div><div class="line">        System.out.println(<span class="string">"Producer:-&gt;Closing connection"</span>);      </div><div class="line">        <span class="keyword">if</span> (producer != <span class="keyword">null</span>)      </div><div class="line">            producer.close();      </div><div class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>)      </div><div class="line">            session.close();      </div><div class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)      </div><div class="line">            connection.close();      </div><div class="line">    &#125;      </div><div class="line">&#125;        </div><div class="line"></div><div class="line">----------------------------------------------------------</div><div class="line"><span class="keyword">package</span> cn.itcast_03_mq.topic;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.jms.JMSException;      </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTest</span> </span>&#123;      </div><div class="line">     </div><div class="line">    <span class="comment">/**    </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> args    </span></div><div class="line"><span class="comment">     */</span>     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, Exception </span>&#123;      </div><div class="line">        ProducerTool producer = <span class="keyword">new</span> ProducerTool(); </div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</div><div class="line">        	</div><div class="line">        	Thread.sleep(random.nextInt(<span class="number">10</span>)*<span class="number">1000</span>);</div><div class="line">        	</div><div class="line">        	producer.produceMessage(<span class="string">"Hello, world!--"</span>+i);      </div><div class="line">        	producer.close();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;      </div><div class="line">&#125;      </div><div class="line"></div><div class="line">----------------------------------------------------------</div><div class="line"><span class="keyword">package</span> cn.itcast_03_mq.topic;</div><div class="line"><span class="keyword">import</span> javax.jms.Connection;      </div><div class="line"><span class="keyword">import</span> javax.jms.Destination;      </div><div class="line"><span class="keyword">import</span> javax.jms.ExceptionListener;</div><div class="line"><span class="keyword">import</span> javax.jms.JMSException;      </div><div class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;      </div><div class="line"><span class="keyword">import</span> javax.jms.Session;      </div><div class="line"><span class="keyword">import</span> javax.jms.MessageListener;      </div><div class="line"><span class="keyword">import</span> javax.jms.Message;      </div><div class="line"><span class="keyword">import</span> javax.jms.TextMessage;      </div><div class="line">     </div><div class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnection;      </div><div class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;      </div><div class="line">     </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTool</span> <span class="keyword">implements</span> <span class="title">MessageListener</span>,<span class="title">ExceptionListener</span> </span>&#123;      </div><div class="line">    <span class="keyword">private</span> String user = ActiveMQConnection.DEFAULT_USER;      </div><div class="line">    <span class="keyword">private</span> String password = ActiveMQConnection.DEFAULT_PASSWORD;      </div><div class="line">    <span class="keyword">private</span> String url =ActiveMQConnection.DEFAULT_BROKER_URL;      </div><div class="line">    <span class="keyword">private</span> String subject = <span class="string">"mytopic"</span>;      </div><div class="line">    <span class="keyword">private</span> Destination destination = <span class="keyword">null</span>;      </div><div class="line">    <span class="keyword">private</span> Connection connection = <span class="keyword">null</span>;      </div><div class="line">    <span class="keyword">private</span> Session session = <span class="keyword">null</span>;      </div><div class="line">    <span class="keyword">private</span> MessageConsumer consumer = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean isconnection=<span class="keyword">false</span>;</div><div class="line">    <span class="comment">// 初始化      </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> JMSException, Exception </span>&#123;      </div><div class="line">        ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(      </div><div class="line">                user, password, url);      </div><div class="line">        connection = connectionFactory.createConnection();      </div><div class="line">        session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);      </div><div class="line">        destination = session.createTopic(subject);      </div><div class="line">        consumer = session.createConsumer(destination);     </div><div class="line">    &#125;      </div><div class="line">     </div><div class="line">    <span class="comment">// 消费消息      </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">()</span> <span class="keyword">throws</span> JMSException, Exception </span>&#123;      </div><div class="line">        initialize();      </div><div class="line">        connection.start();</div><div class="line">        consumer.setMessageListener(<span class="keyword">this</span>);    </div><div class="line">        connection.setExceptionListener(<span class="keyword">this</span>);</div><div class="line">        isconnection=<span class="keyword">true</span>;</div><div class="line">        System.out.println(<span class="string">"Consumer:-&gt;Begin listening..."</span>);      </div><div class="line">        <span class="comment">// 开始监听  </span></div><div class="line">        <span class="comment">// Message message = consumer.receive();      </span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 关闭连接      </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;      </div><div class="line">        System.out.println(<span class="string">"Consumer:-&gt;Closing connection"</span>);      </div><div class="line">        <span class="keyword">if</span> (consumer != <span class="keyword">null</span>)      </div><div class="line">            consumer.close();      </div><div class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>)      </div><div class="line">            session.close();      </div><div class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)      </div><div class="line">            connection.close();      </div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 消息处理函数      </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;      </div><div class="line">        <span class="keyword">try</span> &#123;      </div><div class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> TextMessage) &#123;      </div><div class="line">                TextMessage txtMsg = (TextMessage) message;      </div><div class="line">                String msg = txtMsg.getText();      </div><div class="line">                System.out.println(<span class="string">"Consumer:-&gt;Received: "</span> + msg);      </div><div class="line">            &#125; <span class="keyword">else</span> &#123;      </div><div class="line">                System.out.println(<span class="string">"Consumer:-&gt;Received: "</span> + message);      </div><div class="line">            &#125;      </div><div class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;      </div><div class="line">            <span class="comment">// TODO Auto-generated catch block      </span></div><div class="line">            e.printStackTrace();      </div><div class="line">        &#125;      </div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(JMSException arg0)</span> </span>&#123;</div><div class="line">		isconnection=<span class="keyword">false</span>;</div><div class="line">	&#125;      </div><div class="line">&#125;      </div><div class="line">----------------------------------------------------------     </div><div class="line"><span class="keyword">package</span> cn.itcast_03_mq.topic;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.jms.JMSException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> Thread t1 = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> JMSException</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">		t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ConsumerTest());</div><div class="line">		t1.setDaemon(<span class="keyword">false</span>);</div><div class="line">		t1.start();</div><div class="line">		<span class="comment">/**</span></div><div class="line"><span class="comment">		 * 如果发生异常，则重启consumer</span></div><div class="line"><span class="comment">		 */</span></div><div class="line">		<span class="comment">/*while (true) &#123;</span></div><div class="line"><span class="comment">			System.out.println(t1.isAlive());</span></div><div class="line"><span class="comment">			if (!t1.isAlive()) &#123;</span></div><div class="line"><span class="comment">				t1 = new Thread(new ConsumerTest());</span></div><div class="line"><span class="comment">				t1.start();</span></div><div class="line"><span class="comment">				System.out.println("重新启动");</span></div><div class="line"><span class="comment">			&#125;</span></div><div class="line"><span class="comment">			Thread.sleep(5000);</span></div><div class="line"><span class="comment">		&#125;*/</span></div><div class="line">		<span class="comment">// 延时500毫秒之后停止接受消息</span></div><div class="line">		<span class="comment">// Thread.sleep(500);</span></div><div class="line">		<span class="comment">// consumer.close();</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ConsumerTool consumer = <span class="keyword">new</span> ConsumerTool();</div><div class="line">			consumer.consumeMessage();</div><div class="line">			<span class="keyword">while</span> (ConsumerTool.isconnection) &#123;	</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java-JMS技术&quot;&gt;&lt;a href=&quot;#java-JMS技术&quot; class=&quot;headerlink&quot; title=&quot;java JMS技术&quot;&gt;&lt;/a&gt;java JMS技术&lt;/h1&gt;&lt;h2 id=&quot;什么是JMS&quot;&gt;&lt;a href=&quot;#什么是JMS&quot; class=&quot;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="java" scheme="https://blog.signalfire2017.com/tags/java/"/>
    
      <category term="JMS" scheme="https://blog.signalfire2017.com/tags/JMS/"/>
    
      <category term="activeMQ" scheme="https://blog.signalfire2017.com/tags/activeMQ/"/>
    
  </entry>
  
  <entry>
    <title>大数据0401-java多线程并发</title>
    <link href="https://blog.signalfire2017.com/2017/12/01/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE0401-java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/"/>
    <id>https://blog.signalfire2017.com/2017/12/01/大数据/大数据0401-java多线程并发/</id>
    <published>2017-12-01T14:59:38.000Z</published>
    <updated>2017-12-03T08:23:15.948Z</updated>
    
    <content type="html"><![CDATA[<p>内容包含</p>
<ol>
<li>掌握多线程</li>
<li>掌握并发包下的队列</li>
</ol>
<p>做个笔记，方便查看<br><a id="more"></a></p>
<h1 id="java多线程增强"><a href="#java多线程增强" class="headerlink" title="java多线程增强"></a>java多线程增强</h1><h2 id="进程介绍"><a href="#进程介绍" class="headerlink" title="进程介绍"></a>进程介绍</h2><p>不管是我们开发的应用程序，还是我们运行的其他的应用程序，都需要先把程序安装在本地的硬盘上。然后找到这个程序的启动文件，启动程序的时候，其实是电脑把当前的这个程序加载到内存中，在<font color="red">内存中需要给当前的程序分配一段独立的运行空间</font>。这片空间就专门负责当前这个程序的运行。  </p>
<p>不同的应用程序运行的过程中都需要在内存中分配自己独立的运行空间，彼此之间不会相互的影响。我们把每个独立应用程序在内存的独立空间称为当前应用程序运行的一个进程。  </p>
<p>进程：它是内存中的一段独立的空间，可以负责当前应用程序的运行。当前这个进程负责调度当前程序中的所有运行细节。</p>
<h2 id="线程介绍"><a href="#线程介绍" class="headerlink" title="线程介绍"></a>线程介绍</h2><p>在一个进程中，每个独立的功能都需要独立的去运行，这时又需要把当前这个进程划分成多个运行区域，每个独立的小区域（小单元）称为一个线程。</p>
<p>线程：它是位于进程中，负责当前进程中的某个具备独立运行资格的空间。<br>进程是负责整个程序的运行，而线程是程序中具体的某个独立功能的运行。一个进程中至少应该有一个线程。</p>
<h2 id="多线程介绍"><a href="#多线程介绍" class="headerlink" title="多线程介绍"></a>多线程介绍</h2><p>多线程：<font color="red">在一个进程中，我们同时开启多个线程，让多个线程同时去完成某些任务（功能）。<br>(比如后台服务系统，就可以用多个线程同时响应多个客户的请求)</font><br>多线程的目的：提高程序的运行效率。</p>
<h2 id="多线程运行的原理"><a href="#多线程运行的原理" class="headerlink" title="多线程运行的原理"></a>多线程运行的原理</h2><p>cpu在线程中做时间片的切换。</p>
<p>其实真正电脑中的程序的运行不是同时在运行的。CPU负责程序的运行，而CPU在运行程序的过程中某个时刻点上，它其实只能运行一个程序。而不是多个程序。而CPU它可以在多个程序之间进行高速的切换。而切换频率和速度太快，导致人的肉眼看不到。<br>每个程序就是进程， 而每个进程中会有多个线程，而CPU是在这些线程之间进行切换。<br>了解了CPU对一个任务的执行过程，我们就必须知道，多线程可以提高程序的运行效率，但不能无限制的开线程。  </p>
<h2 id="实现线程的两种方式"><a href="#实现线程的两种方式" class="headerlink" title="实现线程的两种方式"></a>实现线程的两种方式</h2><h3 id="继承Thread的方式"><a href="#继承Thread的方式" class="headerlink" title="继承Thread的方式"></a>继承Thread的方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.testThread;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadWithExtends</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	String flag;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThreadWithExtends</span><span class="params">(String flag)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.flag = flag;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		String tname = Thread.currentThread().getName();</div><div class="line">		System.out.println(tname+<span class="string">"线程的run方法被调用……"</span>);</div><div class="line">		Random random = <span class="keyword">new</span> Random();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(random.nextInt(<span class="number">10</span>)*<span class="number">100</span>);</div><div class="line">				System.out.println(tname+ <span class="string">"...."</span>+ flag);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Thread thread1 = <span class="keyword">new</span> MyThreadWithExtends(<span class="string">"a"</span>);</div><div class="line">		Thread thread2 = <span class="keyword">new</span> MyThreadWithExtends(<span class="string">"b"</span>);</div><div class="line">		thread1.start();</div><div class="line">		thread2.start();</div><div class="line">		<span class="comment">/**</span></div><div class="line"><span class="comment">		 * 如果是调用thread的run方法，则只是一个普通的方法调用，不会开启新的线程</span></div><div class="line"><span class="comment">		 */</span></div><div class="line"><span class="comment">//		thread1.run();</span></div><div class="line"><span class="comment">//		thread2.run();</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="声明实现-Runnable-接口的方式"><a href="#声明实现-Runnable-接口的方式" class="headerlink" title="声明实现 Runnable 接口的方式"></a>声明实现 Runnable 接口的方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.testThread;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadWithImpliment</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> x;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThreadWithImpliment</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.x = x;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		String name = Thread.currentThread().getName();</div><div class="line">		System.out.println(<span class="string">"线程"</span> + name + <span class="string">"的run方法被调用……"</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.println(x);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">100</span>);</div><div class="line">				</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThreadWithImpliment(<span class="number">1</span>), <span class="string">"thread-1"</span>);</div><div class="line">		Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThreadWithImpliment(<span class="number">2</span>), <span class="string">"thread-2"</span>);</div><div class="line">		 thread1.start();</div><div class="line">		 thread2.start();</div><div class="line">		<span class="comment">// 注意调用run和调用start的区别,直接调用run，则都运行在main线程中</span></div><div class="line"><span class="comment">//		thread1.run();</span></div><div class="line"><span class="comment">//		thread2.run();</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="java同步关键词解释"><a href="#java同步关键词解释" class="headerlink" title="java同步关键词解释"></a>java同步关键词解释</h1><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><h3 id="加同步格式："><a href="#加同步格式：" class="headerlink" title="加同步格式："></a>加同步格式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">synchronized( 需要一个任意的对象（锁） )&#123;</div><div class="line">	代码块中放操作共享数据的代码。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.testThread;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySynchronized</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> MySynchronized mySynchronized = <span class="keyword">new</span> MySynchronized();</div><div class="line">		<span class="keyword">final</span> MySynchronized mySynchronized2 = <span class="keyword">new</span> MySynchronized();</div><div class="line">		<span class="keyword">new</span> Thread(<span class="string">"thread1"</span>) &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">synchronized</span> (mySynchronized) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					System.out.println(<span class="keyword">this</span>.getName()+<span class="string">" start"</span>);</div><div class="line">					<span class="keyword">int</span> i =<span class="number">1</span>/<span class="number">0</span>;   <span class="comment">//如果发生异常，jvm会将锁释放</span></div><div class="line">					Thread.sleep(<span class="number">5000</span>);</div><div class="line">					System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"醒了"</span>);</div><div class="line">					System.out.println(<span class="keyword">this</span>.getName()+<span class="string">" end"</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;.start();</div><div class="line">		<span class="keyword">new</span> Thread(<span class="string">"thread2"</span>) &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">synchronized</span> (mySynchronized) &#123;         <span class="comment">//争抢同一把锁时，线程1没释放之前，线程2只能等待</span></div><div class="line"><span class="comment">//					synchronized (mySynchronized2) &#123;    //如果不是一把锁，可以看到两句话同时打印</span></div><div class="line">					System.out.println(<span class="keyword">this</span>.getName()+<span class="string">" start"</span>);</div><div class="line">					System.out.println(<span class="keyword">this</span>.getName()+<span class="string">" end"</span>);</div><div class="line">					</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="synchronized的缺陷"><a href="#synchronized的缺陷" class="headerlink" title="synchronized的缺陷"></a>synchronized的缺陷</h3><p>synchronized是java中的一个关键字，也就是说是Java语言内置的特性。<br>如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：</p>
<ol>
<li>获取锁的线程执行完了该代码块，然后线程释放对锁的占有；</li>
<li>线程执行发生异常，此时JVM会让线程自动释放锁。</li>
</ol>
<p>例子1：<br>如果这个获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。<br>因此就需要有一种机制<font color="red">可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间或者能够响应中断），通过Lock就可以办到。</font></p>
<p>例子2：<br>当有多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作会发生冲突现象，但是读操作和读操作不会发生冲突现象。<br>但是采用synchronized关键字来实现同步的话，就会导致一个问题：<br>如果多个线程都只是进行读操作，当一个线程在进行读操作时，其他线程只能等待无法进行读操作。  </p>
<p>因此就需要一种机制来使得多个线程都只是进行读操作时，线程之间不会发生冲突，通过Lock就可以办到。<br>另外，通过Lock可以知道线程有没有成功获取到锁。这个是synchronized无法办到的。<br>总的来说，也就是说Lock提供了比synchronized更多的功能。  </p>
<h2 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h2><h3 id="lock和synchronized的区别"><a href="#lock和synchronized的区别" class="headerlink" title="lock和synchronized的区别"></a>lock和synchronized的区别</h3><ol>
<li>Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；</li>
<li>Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。<h3 id="java-util-concurrent-locks包下常用的类"><a href="#java-util-concurrent-locks包下常用的类" class="headerlink" title="java.util.concurrent.locks包下常用的类"></a>java.util.concurrent.locks包下常用的类</h3><h4 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h4>首先要说明的就是Lock，通过查看Lock的源码可知，Lock是一个接口：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>获取锁：lock()，lockInterruptibly()， tryLock()，tryLock(long time, TimeUnit unit)<br>释放锁：unlock()</p>
<p>区别： </p>
<ul>
<li><p>lock()<br>平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。<br>由于在前面讲到如果采用Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用Lock必须在try{}catch{}块中进行，并且将释放锁的操作放在finally块中进行，以保证锁一定被被释放，防止死锁的发生。</p>
</li>
<li><p>tryLock()<br>有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。</p>
</li>
<li><p>tryLock(long time, TimeUnit unit)<br>和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。</p>
</li>
<li><p>lockInterruptibly()<br>比较特殊，当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就使说，当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程。<br>注意，当一个线程获取了锁之后，是不会被interrupt()方法中断的。<br>因此当通过lockInterruptibly()方法获取某个锁时，如果不能获取到，只有进行等待的情况下，是可以响应中断的。<br>而用synchronized修饰的话，当一个线程处于等待某个锁的状态，是无法被中断的，只有一直等待下去。  </p>
</li>
</ul>
<h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><p>直接使用lock接口的话，我们需要实现很多方法，不太方便，ReentrantLock是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法，ReentrantLock，意思是“可重入锁”。</p>
<ul>
<li><p>lock()的正确使用方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.lock;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLockTest</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 注意这个地方</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Thread thread = Thread.currentThread();</div><div class="line">				lock.lock();</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					System.out.println(thread.getName() + <span class="string">"得到了锁"</span>);</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">						arrayList.add(i);</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					System.out.println(thread.getName() + <span class="string">"释放了锁"</span>);</div><div class="line">					lock.unlock();</div><div class="line">				&#125;</div><div class="line">			&#125;;</div><div class="line">		&#125;.start();</div><div class="line">		</div><div class="line">		<span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Thread thread = Thread.currentThread();</div><div class="line">				lock.lock();</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					System.out.println(thread.getName() + <span class="string">"得到了锁"</span>);</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">						arrayList.add(i);</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					System.out.println(thread.getName() + <span class="string">"释放了锁"</span>);</div><div class="line">					lock.unlock();</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;;</div><div class="line">		&#125;.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>tryLock()的使用方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.lock;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 观察现象：一个线程获得锁后，另一个线程取不到锁，不会一直等待</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span></span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTryLock</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 注意这个地方</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Thread thread = Thread.currentThread();</div><div class="line">				<span class="keyword">boolean</span> tryLock = lock.tryLock();</div><div class="line">				System.out.println(thread.getName()+<span class="string">" "</span>+tryLock);</div><div class="line">				<span class="keyword">if</span> (tryLock) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						System.out.println(thread.getName() + <span class="string">"得到了锁"</span>);</div><div class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">							arrayList.add(i);</div><div class="line">						&#125;</div><div class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">					&#125; <span class="keyword">finally</span> &#123;</div><div class="line">						System.out.println(thread.getName() + <span class="string">"释放了锁"</span>);</div><div class="line">						lock.unlock();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;;</div><div class="line">		&#125;.start();</div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Thread thread = Thread.currentThread();</div><div class="line">				<span class="keyword">boolean</span> tryLock = lock.tryLock();</div><div class="line">				System.out.println(thread.getName()+<span class="string">" "</span>+tryLock);</div><div class="line">				<span class="keyword">if</span> (tryLock) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						System.out.println(thread.getName() + <span class="string">"得到了锁"</span>);</div><div class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">							arrayList.add(i);</div><div class="line">						&#125;</div><div class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">					&#125; <span class="keyword">finally</span> &#123;</div><div class="line">						System.out.println(thread.getName() + <span class="string">"释放了锁"</span>);</div><div class="line">						lock.unlock();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;;</div><div class="line">		&#125;.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>lockInterruptibly()响应中断的使用方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 观察现象：如果thread-0得到了锁，阻塞。。。thread-1尝试获取锁，如果拿不到，则可以被中断等待</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span></span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterruptibly</span> </span>&#123;</div><div class="line">	 <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();  </div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">	    	MyInterruptibly test = <span class="keyword">new</span> MyInterruptibly();</div><div class="line">	        MyThread thread0 = <span class="keyword">new</span> MyThread(test);</div><div class="line">	        MyThread thread1 = <span class="keyword">new</span> MyThread(test);</div><div class="line">	        thread0.start();</div><div class="line">	        thread1.start();</div><div class="line">	         </div><div class="line">	        <span class="keyword">try</span> &#123;</div><div class="line">	            Thread.sleep(<span class="number">2000</span>);</div><div class="line">	        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">	            e.printStackTrace();</div><div class="line">	        &#125;</div><div class="line">	        thread1.interrupt();</div><div class="line">	        System.out.println(<span class="string">"====================="</span>);</div><div class="line">	    &#125;  </div><div class="line">	     </div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">	        lock.lockInterruptibly();   <span class="comment">//注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出</span></div><div class="line">	        <span class="keyword">try</span> &#123;  </div><div class="line">	            System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</div><div class="line">	            <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">	            <span class="keyword">for</span>(    ;     ;) &#123;</div><div class="line">	                <span class="keyword">if</span>(System.currentTimeMillis() - startTime &gt;= Integer.MAX_VALUE)</div><div class="line">	                    <span class="keyword">break</span>;</div><div class="line">	                <span class="comment">//插入数据</span></div><div class="line">	            &#125;</div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">finally</span> &#123;</div><div class="line">	            System.out.println(Thread.currentThread().getName()+<span class="string">"执行finally"</span>);</div><div class="line">	            lock.unlock();</div><div class="line">	            System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</div><div class="line">	        &#125;  </div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	    <span class="keyword">private</span> MyInterruptibly test = <span class="keyword">null</span>;</div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(MyInterruptibly test)</span> </span>&#123;</div><div class="line">	        <span class="keyword">this</span>.test = test;</div><div class="line">	    &#125;</div><div class="line">	    <span class="meta">@Override</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	         </div><div class="line">	        <span class="keyword">try</span> &#123;</div><div class="line">	            test.insert(Thread.currentThread());</div><div class="line">	        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">	            System.out.println(Thread.currentThread().getName()+<span class="string">"被中断"</span>);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h4><p>ReadWriteLock也是一个接口，在它里面只定义了两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the lock used for reading.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for reading.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the lock used for writing.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for writing.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。下面的ReentrantReadWriteLock实现了ReadWriteLock接口。</p>
<h4 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h4><p>ReentrantReadWriteLock里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和writeLock()用来获取读锁和写锁。</p>
<p>ReentrantReadWriteLock具体用法</p>
<p>假如有多个线程要同时进行读操作的话，先看一下synchronized达到的效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.lock;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 一个线程又要读又要写，用synchronize来实现的话，读写操作都只能锁住后一个线程一个线程地进行</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span></span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySynchronizedReadWrite</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        <span class="keyword">final</span> MySynchronizedReadWrite test = <span class="keyword">new</span> MySynchronizedReadWrite();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.get(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.get(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">         </div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</div><div class="line">        	i++;</div><div class="line">        	<span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">0</span>)&#123;</div><div class="line">            System.out.println(thread.getName()+<span class="string">"正在进行写操作"</span>);</div><div class="line">        	&#125;<span class="keyword">else</span> &#123;</div><div class="line">        		System.out.println(thread.getName()+<span class="string">"正在进行读操作"</span>);	</div><div class="line">			&#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(thread.getName()+<span class="string">"读写操作完毕"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>改成用读写锁的话：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 使用读写锁，可以实现读写分离锁定，读操作并发进行，写操作锁定单个线程</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * 如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。</span></div><div class="line"><span class="comment"> * 如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span></span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReentrantReadWriteLock</span> </span>&#123;</div><div class="line">	 <span class="keyword">private</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line">     </div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">	        <span class="keyword">final</span> MyReentrantReadWriteLock test = <span class="keyword">new</span> MyReentrantReadWriteLock();</div><div class="line">	         </div><div class="line">	        <span class="keyword">new</span> Thread()&#123;</div><div class="line">	            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	                test.get(Thread.currentThread());</div><div class="line">	                test.write(Thread.currentThread());</div><div class="line">	            &#125;;</div><div class="line">	        &#125;.start();</div><div class="line">	         </div><div class="line">	        <span class="keyword">new</span> Thread()&#123;</div><div class="line">	            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	                test.get(Thread.currentThread());</div><div class="line">	                test.write(Thread.currentThread());</div><div class="line">	            &#125;;</div><div class="line">	        &#125;.start();</div><div class="line">	    &#125;  </div><div class="line">	    </div><div class="line">	    <span class="comment">/**</span></div><div class="line"><span class="comment">	     * 读操作,用读锁来锁定</span></div><div class="line"><span class="comment">	     * <span class="doctag">@param</span> thread</span></div><div class="line"><span class="comment">	     */</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">	        rwl.readLock().lock();</div><div class="line">	        <span class="keyword">try</span> &#123;</div><div class="line">	            <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">	             </div><div class="line">	            <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</div><div class="line">	                System.out.println(thread.getName()+<span class="string">"正在进行读操作"</span>);</div><div class="line">	            &#125;</div><div class="line">	            System.out.println(thread.getName()+<span class="string">"读操作完毕"</span>);</div><div class="line">	        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">	            rwl.readLock().unlock();</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line"></div><div class="line">	    <span class="comment">/**</span></div><div class="line"><span class="comment">	     * 写操作，用写锁来锁定</span></div><div class="line"><span class="comment">	     * <span class="doctag">@param</span> thread</span></div><div class="line"><span class="comment">	     */</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">	        rwl.writeLock().lock();;</div><div class="line">	        <span class="keyword">try</span> &#123;</div><div class="line">	            <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">	            <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</div><div class="line">	                System.out.println(thread.getName()+<span class="string">"正在进行写操作"</span>);</div><div class="line">	            &#125;</div><div class="line">	            System.out.println(thread.getName()+<span class="string">"写操作完毕"</span>);</div><div class="line">	        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">	            rwl.writeLock().unlock();</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：</p>
<ul>
<li>不过要注意的是，如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。</li>
<li>如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</li>
</ul>
</blockquote>
<h2 id="Lock和synchronized的选择"><a href="#Lock和synchronized的选择" class="headerlink" title="Lock和synchronized的选择"></a>Lock和synchronized的选择</h2><ol>
<li>Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现；</li>
<li>synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；</li>
<li>Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；</li>
<li>通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。</li>
<li>Lock可以提高多个线程进行读操作的效率。</li>
</ol>
<p>在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。</p>
<h1 id="java并发包"><a href="#java并发包" class="headerlink" title="java并发包"></a>java并发包</h1><h2 id="java并发包介绍"><a href="#java并发包介绍" class="headerlink" title="java并发包介绍"></a>java并发包介绍</h2><p>JDK5.0 以后的版本都引入了高级并发特性，大多数的特性在java.util.concurrent 包中，是专门用于多线程发编程的，充分利用了现代多处理器和多核心系统的功能以编写大规模并发应用程序。主要包含<font color="red">原子量、并发集合、同步器、</font>可重入锁，并对线程池的构造提供了强力的支持。</p>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h4><p>五种创建方式</p>
<h5 id="Single-Thread-Executor"><a href="#Single-Thread-Executor" class="headerlink" title="Single Thread Executor"></a>Single Thread Executor</h5><p>只有一个线程的线程池，因此所有提交的任务是顺序执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### Cached Thread Pool </div><div class="line">线程池里有很多线程需要同时执行，老的可用线程将被新的任务触发重新执行，&lt;font color=&quot;red&quot;&gt;如果线程超过60秒内没执行，那么将被终止并从池中删除&lt;/font&gt;  </div><div class="line">```Executors.newCachedThreadPool()</div></pre></td></tr></table></figure></p>
<h5 id="Fixed-Thread-Pool"><a href="#Fixed-Thread-Pool" class="headerlink" title="Fixed Thread Pool"></a>Fixed Thread Pool</h5><p><font color="red">拥有固定线程数的线程池，如果没有任务执行，那么线程会一直等待</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在构造函数中的参数4是线程池的大小，你可以随意设置，也可以和cpu的核数量保持一致，获取cpu的核数量  </div><div class="line">```int cpuNums = Runtime.getRuntime().availableProcessors();</div></pre></td></tr></table></figure></p>
<h5 id="Scheduled-Thread-Pool"><a href="#Scheduled-Thread-Pool" class="headerlink" title="Scheduled Thread Pool"></a>Scheduled Thread Pool</h5><p>用来调度即将执行的任务的线程池，可能是不是直接执行, 每隔多久执行一次… 策略型的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### Single Thread Scheduled Pool </div><div class="line">只有一个线程，用来调度任务在指定时间执行</div><div class="line">```Executors.newSingleThreadScheduledExecutor()</div></pre></td></tr></table></figure></p>
<h3 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h3><p>提交 Runnable ，任务完成后 Future 对象返回 null<br>调用excute,提交任务, 匿名Runable重写run方法, run方法里是业务逻辑<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.pool;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolWithRunable</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 通过线程池执行线程</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//创建一个线程池</span></div><div class="line">		ExecutorService pool = Executors.newCachedThreadPool();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">			pool.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					System.out.println(<span class="string">"thread name: "</span> + Thread.currentThread().getName());</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep(<span class="number">1000</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">		pool.shutdown();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提交 Callable，该方法返回一个 Future 实例表示任务的状态<br>调用submit提交任务, 匿名Callable,重写call方法, 有返回值, 获取返回值会阻塞,一直要等到线程任务返回结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.pool;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Future;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * callable 跟runnable的区别：</span></div><div class="line"><span class="comment"> * runnable的run方法不会有任何返回结果，所以主线程无法获得任务线程的返回值</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * callable的call方法可以返回结果，但是主线程在获取时是被阻塞，需要等待任务线程返回才能拿到结果</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span></span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolWithcallable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class="line">		ExecutorService pool = Executors.newFixedThreadPool(<span class="number">4</span>); </div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">			Future&lt;String&gt; submit = pool.submit(<span class="keyword">new</span> Callable&lt;String&gt;()&#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">					<span class="comment">//System.out.println("a");</span></div><div class="line">					Thread.sleep(<span class="number">5000</span>);</div><div class="line">					<span class="keyword">return</span> <span class="string">"b--"</span>+Thread.currentThread().getName();</div><div class="line">				&#125;			   </div><div class="line">			   &#125;);</div><div class="line">			<span class="comment">//从Future中get结果，这个方法是会被阻塞的，一直要等到线程任务返回结果</span></div><div class="line">			System.out.println(submit.get());</div><div class="line">		&#125; </div><div class="line">			pool.shutdown();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="java并发包消息队列及在开源软件中的应用"><a href="#java并发包消息队列及在开源软件中的应用" class="headerlink" title="java并发包消息队列及在开源软件中的应用"></a>java并发包消息队列及在开源软件中的应用</h2><h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3><p>也是java.util.concurrent下的主要用来<font color="red">控制线程同步的工具</font>。<br>主要的方法是：put、take一对阻塞存取；add、poll一对非阻塞存取。  </p>
<ul>
<li>插入:<ol>
<li>add(anObject):把anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则抛出异常,不好</li>
<li>offer(anObject):表示如果可能的话,将anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则返回false.</li>
<li>put(anObject):把anObject加到BlockingQueue里,如果BlockQueue没有空间,则调用此方法的线程被阻断直到BlockingQueue里面有空间再继续, 有阻塞, 放不进去就等待</li>
</ol>
</li>
<li>读取：<ol>
<li>poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间,取不到时返回null; 取不到返回null</li>
<li>take():取走BlockingQueue里排在首位的对象,若BlockingQueue为空,阻断进入等待状态直到Blocking有新的对象被加入为止; <font color="red">阻塞, 取不到就一直等</font></li>
</ol>
</li>
<li>其他<ol>
<li>int remainingCapacity();返回队列剩余的容量，在队列插入和获取的时候，<font color="red">不要瞎搞，数据可能不准, 不能保证数据的准确性</font></li>
<li>boolean remove(Object o); 从队列移除元素，如果存在，即移除一个或者更多，队列改    变了返回true</li>
<li>public boolean contains(Object o); 查看队列是否存在这个元素，存在返回true</li>
<li>int drainTo(Collection&lt;? super E&gt; c); //移除此队列中所有可用的元素,并将它们添加到给定 collection 中。<font color="red">取出放到集合中</font></li>
<li>int drainTo(Collection&lt;? super E&gt; c, int maxElements); 和上面方法的区别在于，指定了移动的数量;取出指定个数放到集合</li>
</ol>
</li>
</ul>
<p>BlockingQueue有四个具体的实现类,常用的两种实现类为：</p>
<h3 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h3><p>一个由数组支持的有界阻塞队列，规定大小的BlockingQueue,其构造函数必须带一个int参数来指明其大小.其所含的对象是以FIFO(先入先出)顺序排序的。</p>
<h3 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h3><p>大小不定的BlockingQueue,若其构造函数带一个规定大小的参数,生成的BlockingQueue有大小限制,若不带大小参数,所生成的BlockingQueue的大小由Integer.MAX_VALUE来决定.其所含的对象是以FIFO(先入先出)顺序排序的。<br>LinkedBlockingQueue 可以指定容量，也可以不指定，不指定的话，默认最大是Integer.MAX_VALUE,其中主要用到put和take方法，put方法在队列满的时候会阻塞直到有队列成员被消费，take方法在队列空的时候会阻塞，直到有队列成员被放进来。</p>
<h3 id="LinkedBlockingQueue和ArrayBlockingQueue区别"><a href="#LinkedBlockingQueue和ArrayBlockingQueue区别" class="headerlink" title="LinkedBlockingQueue和ArrayBlockingQueue区别"></a>LinkedBlockingQueue和ArrayBlockingQueue区别</h3><p>LinkedBlockingQueue和ArrayBlockingQueue比较起来,它们背后所用的数据结构不一样,导致LinkedBlockingQueue的数据吞吐量要大于ArrayBlockingQueue,但在线程数量很大时其性能的可预见性低于ArrayBlockingQueue.</p>
<p>生产者消费者的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_02_blockingqueue.main;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class="line"><span class="keyword">import</span> cn.itcast_02_blockingqueue.consumer.Consumer;</div><div class="line"><span class="keyword">import</span> cn.itcast_02_blockingqueue.producer.Producer;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> LinkedBlockingQueue&lt;String&gt;(<span class="number">2</span>);</div><div class="line">		<span class="comment">// BlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;String&gt;();</span></div><div class="line">		<span class="comment">// 不设置的话，LinkedBlockingQueue默认大小为Integer.MAX_VALUE</span></div><div class="line">		<span class="comment">// BlockingQueue&lt;String&gt; queue = new ArrayBlockingQueue&lt;String&gt;(2);</span></div><div class="line">		Consumer consumer = <span class="keyword">new</span> Consumer(queue);</div><div class="line">		Producer producer = <span class="keyword">new</span> Producer(queue);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">			<span class="keyword">new</span> Thread(producer, <span class="string">"Producer"</span> + (i + <span class="number">1</span>)).start();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">			<span class="keyword">new</span> Thread(consumer, <span class="string">"Consumer"</span> + (i + <span class="number">1</span>)).start();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">new</span> Thread(producer, <span class="string">"Producer"</span> + (<span class="number">5</span>)).start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">=====================================================================</div><div class="line"><span class="keyword">package</span> cn.itcast_02_blockingqueue.main;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBlockingQueue</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> LinkedBlockingQueue&lt;String&gt;(<span class="number">2</span>);</div><div class="line">		<span class="comment">// BlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;String&gt;();</span></div><div class="line">		<span class="comment">// 不设置的话，LinkedBlockingQueue默认大小为Integer.MAX_VALUE</span></div><div class="line">		<span class="comment">// BlockingQueue&lt;String&gt; queue = new ArrayBlockingQueue&lt;String&gt;(2);</span></div><div class="line">		TestBlockingQueueConsumer consumer = <span class="keyword">new</span> TestBlockingQueueConsumer(queue);</div><div class="line">		TestBlockingQueueProducer producer = <span class="keyword">new</span> TestBlockingQueueProducer(queue);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">			<span class="keyword">new</span> Thread(producer, <span class="string">"Producer"</span> + (i + <span class="number">1</span>)).start();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">			<span class="keyword">new</span> Thread(consumer, <span class="string">"Consumer"</span> + (i + <span class="number">1</span>)).start();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">new</span> Thread(producer, <span class="string">"Producer"</span> + (<span class="number">5</span>)).start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">=====================================================================</div><div class="line"><span class="keyword">package</span> cn.itcast_02_blockingqueue.main;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBlockingQueueConsumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;  </div><div class="line">    BlockingQueue&lt;String&gt; queue; </div><div class="line">    Random random = <span class="keyword">new</span> Random();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestBlockingQueueConsumer</span><span class="params">(BlockingQueue&lt;String&gt; queue)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.queue = queue;  </div><div class="line">    &#125;        </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">        	Thread.sleep(random.nextInt(<span class="number">10</span>));</div><div class="line">        	System.out.println(Thread.currentThread().getName()+ <span class="string">"trying..."</span>);</div><div class="line">            String temp = queue.take();<span class="comment">//如果队列为空，会阻塞当前线程  </span></div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" get a job "</span> +temp);  </div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line">=====================================================================</div><div class="line"><span class="keyword">package</span> cn.itcast_02_blockingqueue.main;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBlockingQueueProducer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	BlockingQueue&lt;String&gt; queue;</div><div class="line">	Random random = <span class="keyword">new</span> Random();</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TestBlockingQueueProducer</span><span class="params">(BlockingQueue&lt;String&gt; queue)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.queue = queue;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(random.nextInt(<span class="number">10</span>));</div><div class="line">				String task = Thread.currentThread().getName() + <span class="string">" made a product "</span> + i;</div><div class="line">				System.out.println(task);</div><div class="line">				queue.put(task);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">=====================================================================</div><div class="line"><span class="keyword">package</span> cn.itcast_02_blockingqueue.producer;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </div><div class="line">    BlockingQueue&lt;String&gt; queue;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BlockingQueue&lt;String&gt; queue)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.queue = queue;  </div><div class="line">    &#125;    </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            </div><div class="line">            System.out.println(<span class="string">"I have made a product:"</span>  </div><div class="line">                    + Thread.currentThread().getName()); </div><div class="line">            String temp = <span class="string">"A Product, 生产线程："</span>  </div><div class="line">                    + Thread.currentThread().getName();  </div><div class="line">            queue.put(temp);<span class="comment">//如果队列是满的话，会阻塞当前线程  </span></div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;    </div><div class="line">&#125;  </div><div class="line">=====================================================================</div><div class="line"><span class="keyword">package</span> cn.itcast_02_blockingqueue.consumer;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;  </div><div class="line">    BlockingQueue&lt;String&gt; queue; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue&lt;String&gt; queue)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.queue = queue;  </div><div class="line">    &#125;        </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">        	String consumer = Thread.currentThread().getName();</div><div class="line">        	System.out.println(consumer);  </div><div class="line">            String temp = queue.take();<span class="comment">//如果队列为空，会阻塞当前线程  </span></div><div class="line">            System.out.println(consumer+<span class="string">"get a product:"</span>+temp);  </div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="java并发编程的一些总结"><a href="#java并发编程的一些总结" class="headerlink" title="java并发编程的一些总结"></a>java并发编程的一些总结</h1><h2 id="不应用线程池的缺点"><a href="#不应用线程池的缺点" class="headerlink" title="不应用线程池的缺点"></a>不应用线程池的缺点</h2><p>有些开发者图省事，遇到需要多线程处理的地方，直接new Thread(…).start()，对于一般场景是没问题的，但如果是在并发请求很高的情况下，就会有些隐患：</p>
<ul>
<li>新建线程的开销。线程虽然比进程要轻量许多，但对于JVM来说，新建一个线程的代价还是挺大的，决不同于新建一个对象</li>
<li>资源消耗量。没有一个池来限制线程的数量，会导致线程的数量直接取决于应用的并发量，这样有潜在的线程数据巨大的可能，那么资源消耗量将是巨大的</li>
<li>稳定性。当线程数量超过系统资源所能承受的程度，稳定性就会成问题<h2 id="制定执行策略"><a href="#制定执行策略" class="headerlink" title="制定执行策略"></a>制定执行策略</h2>在每个需要多线程处理的地方，不管并发量有多大，需要考虑线程的执行策略</li>
<li>任务以什么顺序执行</li>
<li>可以有多少个任务并发执行</li>
<li>可以有多少个任务进入等待执行队列</li>
<li>系统过载的时候，应该放弃哪些任务？如何通知到应用程序？</li>
<li>一个任务的执行前后应该做什么处理</li>
</ul>
<h2 id="线程池的类型"><a href="#线程池的类型" class="headerlink" title="线程池的类型"></a>线程池的类型</h2><p>不管是通过Executors创建线程池，还是通过Spring来管理，都得清楚知道有哪几种线程池：</p>
<ul>
<li>FixedThreadPool：定长线程池，提交任务时创建线程，直到池的最大容量，如果有线程非预期结束，会补充新线程</li>
<li>CachedThreadPool：可变线程池，它犹如一个弹簧，如果没有任务需求时，它回收空闲线程，如果需求增加，则按需增加线程，不对池的大小做限制</li>
<li>SingleThreadExecutor：单线程。处理不过来的任务会进入FIFO队列等待执行</li>
<li>SecheduledThreadPool：周期性线程池。支持执行周期性线程任务<br>其实，这些不同类型的线程池都是通过构建一个ThreadPoolExecutor来完成的，所不同的是corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,threadFactory这么几个参数。具体可以参见JDK DOC。</li>
</ul>
<h2 id="线程池饱和策略"><a href="#线程池饱和策略" class="headerlink" title="线程池饱和策略"></a>线程池饱和策略</h2><p>由以上线程池类型可知，除了CachedThreadPool其他线程池都有饱和的可能，当饱和以后就需要相应的策略处理请求线程的任务，比如，达到上限时通过ThreadPoolExecutor.setRejectedExecutionHandler方法设置一个拒绝任务的策略，JDK提供了AbortPolicy、CallerRunsPolicy、DiscardPolicy、DiscardOldestPolicy几种策略，具体差异可见JDK DOC</p>
<h2 id="线程无依赖性"><a href="#线程无依赖性" class="headerlink" title="线程无依赖性"></a>线程无依赖性</h2><p><font color="red">多线程任务设计上尽量使得各任务是独立无依赖的</font>，所谓依赖性可两个方面：</p>
<ul>
<li>线程之间的依赖性。如果线程有依赖可能会造成死锁或饥饿</li>
<li>调用者与线程的依赖性。调用者得监视线程的完成情况，影响可并发量<br>当然，在有些业务里确实需要一定的依赖性，比如调用者需要得到线程完成后结果，传统的Thread是不便完成的，因为run方法无返回值，只能通过一些共享的变量来传递结果，但在Executor框架里可以通过Future和Callable实现需要有返回值的任务，当然线程的异步性导致需要有相应机制来保证调用者能等待任务完成，关于Future和Callable的用法前文已讲解；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容包含&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;掌握多线程&lt;/li&gt;
&lt;li&gt;掌握并发包下的队列&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;做个笔记，方便查看&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="java" scheme="https://blog.signalfire2017.com/tags/java/"/>
    
  </entry>
  
</feed>
