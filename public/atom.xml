<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>名字待定</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.signalfire2017.com/"/>
  <updated>2017-12-22T16:27:21.591Z</updated>
  <id>https://blog.signalfire2017.com/</id>
  
  <author>
    <name>signalFire</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>北京冬天哪里好玩</title>
    <link href="https://blog.signalfire2017.com/2017/12/22/%E5%8C%97%E4%BA%AC%E5%86%AC%E5%A4%A9%E5%93%AA%E9%87%8C%E5%A5%BD%E7%8E%A9/"/>
    <id>https://blog.signalfire2017.com/2017/12/22/北京冬天哪里好玩/</id>
    <published>2017-12-22T15:55:03.000Z</published>
    <updated>2017-12-22T16:27:21.591Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml" target="_blank" rel="external">发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~</a><br><a id="more"></a></p>
<h1 id="古北水镇过暖冬"><a href="#古北水镇过暖冬" class="headerlink" title="古北水镇过暖冬"></a>古北水镇过暖冬</h1><p>冬日的水镇一改盛夏的浓艳，鳞次栉比的房屋，青石板的老街，悠长的胡同……让水镇更添几分宁静、祥和。这时候来古北逛逛古镇，看看夜景，泡泡温泉，真是从头到脚的舒心！</p>
<h2 id="门票信息：180-00元（体验价80-00元）"><a href="#门票信息：180-00元（体验价80-00元）" class="headerlink" title="门票信息：180.00元（体验价80.00元）"></a>门票信息：180.00元（体验价80.00元）</h2><h2 id="自驾路线："><a href="#自驾路线：" class="headerlink" title="自驾路线："></a>自驾路线：</h2><p>上了京承高速，一直前行，路上会有古北水镇的标示牌，下了高速，基本就到停车场。从京承高速收费站到古北水镇大约有120公里的路程。<br>tips：四季皆宜。 春季碧波荡漾，水镇宛若一幅江南水墨画；夏季纳凉避暑，戏水游乐；秋季银杏落叶和古朴的建筑情景交融，摄影取材的好去处；冬季皑皑白雪的覆盖下，河面冻结，嬉雪赏冰雕……</p>
<h1 id="首都博物馆"><a href="#首都博物馆" class="headerlink" title="首都博物馆"></a>首都博物馆</h1><p>欲了解一个地方，必去当地的博物馆！首都博物馆是咱们“老北京的博物馆”，从北京的历史文化，生活民俗，风土人文，全面的介绍北京的兴衰变迁。是深度了解北京的好地方。</p>
<h2 id="门票：持有效证件免费参观"><a href="#门票：持有效证件免费参观" class="headerlink" title="门票：持有效证件免费参观"></a>门票：持有效证件免费参观</h2><ul>
<li>地址：西城区复兴门外大街16号<h2 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h2></li>
<li>地铁：乘坐地铁1号线<code>木樨地站</code>下</li>
<li>公交：26、80、45、114、308、特19、937、843、844、840、845路<code>白云路站</code></li>
</ul>
<h1 id="呀路古热带植物园"><a href="#呀路古热带植物园" class="headerlink" title="呀路古热带植物园"></a>呀路古热带植物园</h1><p>北京呀路古热带植物园位于北京市大兴区长子营镇，是北京市最大的热带植物园，占地面积600亩。虽然外面寒风烈烈，但这里确是温暖如春！<br>景区收集了热带果树、热带饮料植物、热带观赏植物、热带药用植物、棕榈植物、热带濒危植物、热带珍奇植物和蔬菜作物等，热带亚热带物种达上千余种<br>景区内主要景点有勐巴拉娜西热带植物馆、土司堡民族展览馆和恐龙馆、孔雀馆等。景区内森林繁茂，蔓藤缠绕，不失为冬季的好去处。</p>
<h2 id="门票：60元"><a href="#门票：60元" class="headerlink" title="门票：60元"></a>门票：60元</h2><h2 id="乘车线路："><a href="#乘车线路：" class="headerlink" title="乘车线路："></a>乘车线路：</h2><ul>
<li>1、市区游客可乘坐976路、826路、926路公交车。 </li>
<li>2、大兴黄村地区的游客可以坐940路公交车<code>朱庄站</code>下车前行200米即到。</li>
</ul>
<h1 id="北京天文馆"><a href="#北京天文馆" class="headerlink" title="北京天文馆"></a>北京天文馆</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>北京天文馆是<code>中国第一座天文馆</code>，馆内有直径23.5米象征天穹的天象厅，中间安装精致的国产大型天象仪，<code>可表演日、月、星辰、流星彗星、日食以及月食等天象</code>。<br>北京天文馆包含<code>A、B两馆</code>，共4个科普剧场。</p>
<h3 id="A馆"><a href="#A馆" class="headerlink" title="A馆"></a>A馆</h3><ul>
<li>门厅正中 ： 反映<code>地球自转的傅科摆</code></li>
<li>西侧展厅 ： 陈列天文知识展览</li>
<li>东侧演讲厅 ： 经常举行学术交流和普及天文科学知识报告。</li>
<li>庭院中有两座天文台，其中一座装有口径13厘米的望远镜，可通过它观看月亮、行星、星云、星团，白天观测太阳黑子。</li>
</ul>
<h2 id="门票："><a href="#门票：" class="headerlink" title="门票："></a>门票：</h2><h3 id="10元-人"><a href="#10元-人" class="headerlink" title="10元/人"></a>10元/人</h3><h3 id="天象厅：45元-人"><a href="#天象厅：45元-人" class="headerlink" title="天象厅：45元/人"></a>天象厅：45元/人</h3><h3 id="宇宙剧场：30元-人"><a href="#宇宙剧场：30元-人" class="headerlink" title="宇宙剧场：30元/人"></a>宇宙剧场：30元/人</h3><h3 id="3D剧场、4D剧场：45元-人"><a href="#3D剧场、4D剧场：45元-人" class="headerlink" title="3D剧场、4D剧场：45元/人"></a>3D剧场、4D剧场：45元/人</h3><h3 id="乘车线路：-1"><a href="#乘车线路：-1" class="headerlink" title="乘车线路："></a>乘车线路：</h3><p>乘7、15、19、27、65、102、103、105、107、111、319、332、334、347、360、362、534、601、632、634、714、732、808、814、运通104、运通105、运通106、特4路<code>动物园站</code>下;地铁4号线<code>动物园站D</code>出口。</p>
<h1 id="南宫温泉水世界"><a href="#南宫温泉水世界" class="headerlink" title="南宫温泉水世界"></a>南宫温泉水世界</h1><p>南宫温泉坐落在4A级南宫旅游景区内，这里可是“<code>中国地热第一村</code>”！也是北京最大的一块地热田！温泉水都来自2980米深得地热井，每天出水量为2700吨，温度69—72℃~<br>整座水世界呈热带雨林的风情，里面种满了热带树木、植物，还有数十种汤泉药浴；儿童戏水乐园，漂流、戏水滑道….</p>
<h2 id="路线-1"><a href="#路线-1" class="headerlink" title="路线"></a>路线</h2><ul>
<li>地址:北京市丰台区王佐镇南宫南路9号</li>
<li>自驾：京港澳高速’南宫王佐19A’出口出向北第二个红绿灯右转200米路北</li>
<li>公交：乘458路,459路,951路,836路直达<code>王佐镇政府站</code>下车</li>
</ul>
<h1 id="顺景温泉"><a href="#顺景温泉" class="headerlink" title="顺景温泉"></a>顺景温泉</h1><p>日式汤屋、溶洞、水世界…在帝都，温泉我只服这一家！顺景温泉总占地13万平米，是吉尼斯认证的“<code>全球最大室内温泉</code>”！<br>这里的温泉水非常珍贵！活性矿物质远远高于理疗热矿水浓度标准室内外温泉池相互衔接，清池湖泊、小桥流水…充满着神秘色彩，给人以原始丛林的生态之美。<br>还有千奇百怪、突兀嶙峋的溶洞。置身于顺景的溶洞景观中，仿入梦境。满眼都是数万年的各异钟乳石、石笋，一切都分外神秘与美丽！    </p>
<h2 id="人均：240元左右-人"><a href="#人均：240元左右-人" class="headerlink" title="人均：240元左右/人"></a>人均：240元左右/人</h2><h2 id="路线-2"><a href="#路线-2" class="headerlink" title="路线"></a>路线</h2><ul>
<li>地址：朝阳区北四环东路2号</li>
<li>电话：010-84420088 010-85696688</li>
<li>乘车路线：847路、131路、401路、404路、641路公交在<code>四元桥西站</code>下车，步行至酒店。</li>
</ul>
<h1 id="X先生密室"><a href="#X先生密室" class="headerlink" title="X先生密室"></a>X先生密室</h1><p>X先生密室是一家大型真人密室逃脱游戏场所，致力于打造最全面的融合紧张刺激，需要玩家在房间中寻找线索，通过合作找出所有线索，交流和思考解开全部谜题，一步一步的走近最终答案，最终逃出密室。<br>绝对属于高科技范儿的密室逃脱，连实景岩洞、水池皮划都能在神秘屋里体验到。解开谜题的钥匙可能藏在任何物件里，有可能你身上穿的衣服也能帮你逃出牢笼。</p>
<h2 id="人均消费：140元"><a href="#人均消费：140元" class="headerlink" title="人均消费：140元"></a>人均消费：140元</h2><h2 id="路线-3"><a href="#路线-3" class="headerlink" title="路线"></a>路线</h2><ul>
<li>地址：朝阳区 工体北路13号世茂广场·工三 2层(工体北门对面)。</li>
<li>营业时间：10:00—2:20(22:30之后来店需提前电话咨询)</li>
<li>电话：4008598298。</li>
</ul>
<h1 id="北京自然博物馆"><a href="#北京自然博物馆" class="headerlink" title="北京自然博物馆"></a>北京自然博物馆</h1><p>如果不知道该如何打发时间，就来位于天桥南侧的北京自然博物馆吧~ 里面有各种动、植物标本、恐龙骨架、人体知识、小小水族馆….在这里，时间仿佛是静止的，不知孩子，大人也能玩的不亦乐乎~<br>有恐龙的化石骨骼，有恐龙的仿真模型，那些模型十分逼真，甚至有的还可以发出恐龙的叫声~<br>还有小小的海洋世界，没有太平洋富国海底世界那么大，只是一个不大的走廊，但是你也可以看到很多的海洋动植物~ 如果小朋友来这里，真的能疯玩一整天！</p>
<h2 id="门票：门票免费，至少需提前一天预约，不能预约当日参观门票"><a href="#门票：门票免费，至少需提前一天预约，不能预约当日参观门票" class="headerlink" title="门票：门票免费，至少需提前一天预约，不能预约当日参观门票"></a>门票：门票免费，至少需提前一天预约，不能预约当日参观门票</h2><h2 id="路线-4"><a href="#路线-4" class="headerlink" title="路线"></a>路线</h2><ul>
<li>地址：北京市东城区天桥南大街126号</li>
<li>公交7路, 17路, 20路, 35路, 36路, 69路, 71路, 72路<code>天桥西门</code>下车</li>
<li>地铁：地铁7号线 <code>珠市口站</code></li>
</ul>
<h1 id="地质博物馆"><a href="#地质博物馆" class="headerlink" title="地质博物馆"></a>地质博物馆</h1><p>中国地质博物馆是<code>中国成立最早的地质学博物馆</code>，创建于1916年，以其典藏系统、成果丰硕、陈列精美称雄于亚洲同类博物馆，并且在世界范围内享有盛誉。<br>中国地质博物馆收藏地质标本20余万件，涵盖地学各个领域。其中有蜚声海内外的<code>巨型山东龙</code>、<code>中华龙鸟等恐龙系列化石</code>，<code>北京人</code>、<code>元谋人</code>、<code>山顶洞人</code>等著名古人类化石等。</p>
<h2 id="门票：30元"><a href="#门票：30元" class="headerlink" title="门票：30元"></a>门票：30元</h2><h2 id="乘车线路：-2"><a href="#乘车线路：-2" class="headerlink" title="乘车线路："></a>乘车线路：</h2><p>市内交通：乘13、22、38、47、68、101、102、103、105、109、124、409、603、709、726、806、808、812、814、823、826、846、850路公共汽车西四站下</p>
<h1 id="世界花卉大观园"><a href="#世界花卉大观园" class="headerlink" title="世界花卉大观园"></a>世界花卉大观园</h1><p>世界花卉大观园位于北京南四环辅路北侧，京开公路东侧，全园41.8公顷，是<code>北京市四环以内最大的植物园</code>。<br>世界花卉大观园景观由<code>七大温室</code>和<code>十五个花园广场</code>组成。各温室内的植物千奇百怪、花锦簇。<br>热带植物馆中有数百年的佛肚树、重阳木、古榕树等乔木1800余种；沙生植物温室有上百种仙人掌、仙人球；精品花卉厅有生动风趣的植物生肖园、精品盆景园等等。</p>
<h2 id="门票：60元-1"><a href="#门票：60元-1" class="headerlink" title="门票：60元"></a>门票：60元</h2><h2 id="乘车线路：-3"><a href="#乘车线路：-3" class="headerlink" title="乘车线路："></a>乘车线路：</h2><p>4号线<code>公益西桥站</code>下车换乘646路到<code>世界花卉大观园站</code>下车。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="https://blog.signalfire2017.com/categories/life/"/>
    
    
      <category term="生活" scheme="https://blog.signalfire2017.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>记录有北京游玩的链接</title>
    <link href="https://blog.signalfire2017.com/2017/12/22/%E8%AE%B0%E5%BD%95%E6%9C%89%E5%8C%97%E4%BA%AC%E6%B8%B8%E7%8E%A9%E7%9A%84%E9%93%BE%E6%8E%A5/"/>
    <id>https://blog.signalfire2017.com/2017/12/22/记录有北京游玩的链接/</id>
    <published>2017-12-22T15:51:55.000Z</published>
    <updated>2017-12-22T15:54:43.950Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml" target="_blank" rel="external">发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~&lt;/a
    
    </summary>
    
      <category term="玩" scheme="https://blog.signalfire2017.com/categories/%E7%8E%A9/"/>
    
    
      <category term="北京" scheme="https://blog.signalfire2017.com/tags/%E5%8C%97%E4%BA%AC/"/>
    
      <category term="游玩" scheme="https://blog.signalfire2017.com/tags/%E6%B8%B8%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title>大数据0406-javaJVM技术</title>
    <link href="https://blog.signalfire2017.com/2017/12/05/%E5%A4%A7%E6%95%B0%E6%8D%AE0406-javaJVM%E6%8A%80%E6%9C%AF/"/>
    <id>https://blog.signalfire2017.com/2017/12/05/大数据0406-javaJVM技术/</id>
    <published>2017-12-05T14:44:14.000Z</published>
    <updated>2017-12-05T15:50:19.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监控工具的使用"><a href="#监控工具的使用" class="headerlink" title="监控工具的使用"></a>监控工具的使用</h1><h2 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h2><p>可以分析jvm的内存使用情况和线程等信息。</p>
<h2 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h2><p><code>JDK/bin</code> 目录下 <code>jconsole.exe</code>将自动搜索出本机运行的所有JVM进程，不需要用户使用jps来查询了，双击其中一个进程即可开始监控。也可以“远程连接服务器，进行远程虚拟机的监控。”</p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231152.png" alt="2017125231152"></p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231222.png" alt="2017125231222"></p>
<h2 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h2><p>提供了和jconsole的功能类似，提供了一大堆的插件。<br>插件中，Visual GC（可视化GC）还是比较好用的，可视化GC可以看到内存的具体使用情况。</p>
<h1 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h1><h2 id="内存模型图解"><a href="#内存模型图解" class="headerlink" title="内存模型图解"></a>内存模型图解</h2><p>Java虚拟机在执行Java程序的过程中，会把它所管理的内存划分为若干个不同的数据区。这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有的区域则依赖用户线程的启动和结束而建立和销毁，我们可以将这些区域统称为Java运行时数据区域。<br>如下图是一个内存模型的关系图（详情见图：内存划分.png）：<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231537.png" alt="2017125231537"></p>
<p>Java虚拟机运行时数据区域被分为五个区域：<code>堆(Heap)、栈(Stack)、本地方法栈(Native Stack)、方法区(Method Area)、程序计数器(Program Count Register)</code>。<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125232329.png" alt="2017125232329"></p>
<h2 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h2><p>对于大多数应用来说，<code>Java Heap</code>是Java虚拟机管理的内存的最大一块，这块区域<code>随着虚拟机的启动而创建</code>。在实际的运用中，我们创建的<code>对象</code>和<code>数组</code>就是存放在堆里面。如果你听说线程安全的问题，就会很明确的知道Java Heap是一块<code>共享的区域</code>，操作共享区域的成员就有了锁和同步。<br>与Java Heap相关的还有Java的垃圾回收机制（GC）,Java Heap是垃圾回收器管理的主要区域。程序猿所熟悉的<code>新生代</code>、<code>老生代</code>、<code>永久代</code>的概念就是在堆里面，现在大多数的GC基本都采用了<code>分代收集算法</code>。如果再细致一点，Java Heap还有<code>Eden空间</code>，<code>From Survivor空间</code>,<code>To Survivor空间</code>等。<br>Java Heap可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125233020.png" alt="2017125233020"></p>
<h2 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h2><p>相对于Java Heap来讲，<code>Java Stack</code>是<code>线程私有</code>的，她的<code>生命周期与线程相同</code>。Java Stack描述的是Java方法执行时的内存模型，<code>每个方法执行时都会创建一个栈帧</code>（Stack Frame）用语存储局部变量表、操作数栈、动态链接、方法出口等信息。从下图从可以看到，每个线程在执行一个方法时，都意味着有一个栈帧在当前线程对应的栈帧中入栈和出栈。<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125233212.png" alt="2017125233212"></p>
<p>图中可以看到每一个栈帧中都有局部变量表。局部变量表存放了编译期间的各种基本数据类型，对象引用等信息。</p>
<h2 id="本地方法栈（Native-Stack）"><a href="#本地方法栈（Native-Stack）" class="headerlink" title="本地方法栈（Native Stack）"></a>本地方法栈（Native Stack）</h2><p>本地方法栈（Native Stack）与Java虚拟机站（Java Stack）所发挥的作用非常相似，他们之间的区别在于虚拟机栈为虚拟机栈执行java方法（也就是字节码）服务，而本地方法栈则为使用到Native方法服务。</p>
<h2 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h2><p>方法区（Method Area）与堆（Java Heap）一样，是<code>各个线程共享的内存区域</code>，它用于存储虚拟机加载的<code>类信息</code>，<code>常量</code>，<code>静态变量</code>，<code>即时编译器编译后的代码</code>等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是她却有一个别名叫做非堆（Non-Heap）。分析下Java虚拟机规范，之所以把方法区描述为堆的一个逻辑部分，应该觉得她们都是存储数据的角度出发的。一个存储对象数据（堆），一个存储静态信息(方法区)。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="线程私有的数据区域有："><a href="#线程私有的数据区域有：" class="headerlink" title="线程私有的数据区域有："></a>线程私有的数据区域有：</h3><p>Java虚拟机栈（Java Stack）<br>本地方法栈（Native Stack）  </p>
<h3 id="线程共有的数据区域有："><a href="#线程共有的数据区域有：" class="headerlink" title="线程共有的数据区域有："></a>线程共有的数据区域有：</h3><p>堆（Java Heap）<br>方法区  </p>
<h1 id="JVM参数列表"><a href="#JVM参数列表" class="headerlink" title="JVM参数列表"></a>JVM参数列表</h1><p>java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:NewRatio=4 -XX:SurvivorRatio=4 -XX:MaxPermSize=16m  -XX:MaxTenuringThreshold=0<br><code>-Xmx3550m</code>：最大堆内存为3550M。<br><code>-Xms3550m</code>：初始堆内存为3550m。<br>此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。<br><code>-Xmn2g</code>：设置年轻代大小为2G。<br>整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。<br><code>-Xss128k</code>：设置每个线程的堆栈大小。<br>JDK5.0以后每个线程堆栈大小为1M，在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000左右。<br><code>-XX:NewRatio=4</code>:设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5<br><code>-XX:SurvivorRatio=4</code>：设置年轻代中Eden区与Survivor区的大小比值。<br>设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6<br><code>-XX:MaxPermSize=16m</code>:设置持久代大小为16m。<br><code>-XX:MaxTenuringThreshold=0</code>：设置垃圾最大年龄。<br>如果设置为0的话，则年轻代对象不经过Survivor区，直 接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象 再年轻代的存活时间，增加在年轻代即被回收的概论。  </p>
<p>收集器设置<br>-XX:+UseSerialGC:设置串行收集器<br>-XX:+UseParallelGC:设置并行收集器<br>-XX:+UseParalledlOldGC:设置并行年老代收集器<br>-XX:+UseConcMarkSweepGC:设置并发收集器<br>垃圾回收统计信息<br>-XX:+PrintGC<br>-XX:+PrintGCDetails<br>-XX:+PrintGCTimeStamps<br>-Xloggc:filename<br>并行收集器设置<br>-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。<br>-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间<br>-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)<br>并发收集器设置<br>-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。<br>-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。  </p>
<h1 id="jvm案例演示"><a href="#jvm案例演示" class="headerlink" title="jvm案例演示"></a>jvm案例演示</h1><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>Jconsole的内存标签相当于可视化的jstat命令，用于监视收集器管理的虚拟机内存（java堆和永久代）的变化趋势。<br>我们通过下面的一段代码体验一下它的监视功能。运行时设置的虚拟机参数为：-Xms100m -Xmx100m -XX:+UseSerialGC，这段代码的作用是以64kb/50毫秒的速度往java堆内存中填充数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMemory</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span> </span>&#123;</div><div class="line">		<span class="keyword">public</span> <span class="keyword">byte</span>[] placeholder = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">64</span> * <span class="number">1024</span>];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillHeap</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		ArrayList&lt;OOMObject&gt; list = <span class="keyword">new</span> ArrayList&lt;OOMObject&gt;();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">			Thread.sleep(<span class="number">50</span>);</div><div class="line">			list.add(<span class="keyword">new</span> OOMObject());</div><div class="line">		&#125;</div><div class="line">		System.gc();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		fillHeap(<span class="number">1000</span>);</div><div class="line">		Thread.sleep(<span class="number">500000</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234140.png" alt="2017125234140"></p>
<p>从图中可以看出，运行轨迹成曲线增长，循环1000次后，虽然整个新生代Eden和Survivor区都基本上被清空了，但是老年代仍然保持峰值状态，这说明，填充的数据在GC后仍然存活，因为list的作用域没有结束。如果把System.gc();移到fillHeap(1000);后，就可以全部回收掉。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>jconsole线程标签相当于可视化了jstack命令，遇到线程停顿时，可以使用这个也签进行监控分析。线程长时间停顿的主要原因有：等待外部资源（数据库连接等），死循环、锁等待。下面的代码将演示这几种情况：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.java.jvm;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 死循环演示</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createBusyThread</span><span class="params">()</span> </span>&#123;</div><div class="line">		Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				System.out.println(<span class="string">"createBusyThread"</span>);</div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>)</div><div class="line">					;</div><div class="line">			&#125;</div><div class="line">		&#125;, <span class="string">"testBusyThread"</span>);</div><div class="line">		thread.start();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 线程锁等待</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createLockThread</span><span class="params">(<span class="keyword">final</span> Object lock)</span> </span>&#123;</div><div class="line">		Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				System.out.println(<span class="string">"createLockThread"</span>);</div><div class="line">				<span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						lock.wait();</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;, <span class="string">"testLockThread"</span>);</div><div class="line">		thread.start();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">		br.readLine();</div><div class="line">		createBusyThread();</div><div class="line">		br.readLine();</div><div class="line">		Object object = <span class="keyword">new</span> Object();</div><div class="line">		createLockThread(object);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>main线程：追踪到需要键盘录入<br>testBusyThread线程：线程阻塞在18行的while（true），直到线程切换，很耗性能<br>testLockThread线程：出于waitting状态，等待notify  </p>
<p>死锁：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.java.jvm;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeadThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> a, b;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TestDeadThread</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.a = a;</div><div class="line">		<span class="keyword">this</span>.b = b;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"createDeadThread"</span>);</div><div class="line">		<span class="keyword">synchronized</span> (Integer.valueOf(a)) &#123;</div><div class="line">			<span class="keyword">synchronized</span> (Integer.valueOf(b)) &#123;</div><div class="line">				System.out.println(a + b);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> TestDeadThread(<span class="number">1</span>, <span class="number">2</span>)).start();</div><div class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> TestDeadThread(<span class="number">2</span>, <span class="number">1</span>)).start();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>点击检查死锁，会出现死锁的详情。</p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234810.png" alt="2017125234810"></p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234928.png" alt="2017125234928"></p>
<p>thread-5的锁被thread-10持有，相反亦是，造成死锁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;监控工具的使用&quot;&gt;&lt;a href=&quot;#监控工具的使用&quot; class=&quot;headerlink&quot; title=&quot;监控工具的使用&quot;&gt;&lt;/a&gt;监控工具的使用&lt;/h1&gt;&lt;h2 id=&quot;jconsole&quot;&gt;&lt;a href=&quot;#jconsole&quot; class=&quot;headerli
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="java" scheme="https://blog.signalfire2017.com/tags/java/"/>
    
      <category term="JVM" scheme="https://blog.signalfire2017.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>大数据0405-java-socket</title>
    <link href="https://blog.signalfire2017.com/2017/12/03/%E5%A4%A7%E6%95%B0%E6%8D%AE0405-java-socket/"/>
    <id>https://blog.signalfire2017.com/2017/12/03/大数据0405-java-socket/</id>
    <published>2017-12-03T15:14:47.000Z</published>
    <updated>2017-12-03T15:17:24.365Z</updated>
    
    <content type="html"><![CDATA[<p>直接上代码吧<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast.bigdata.socket;</div><div class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceServer</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">// 创建一个serversocket，绑定到本机的8899端口上</span></div><div class="line">		ServerSocket server = <span class="keyword">new</span> ServerSocket();</div><div class="line">		server.bind(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8899</span>));</div><div class="line">		<span class="comment">// 接受客户端的连接请求;accept是一个阻塞方法，会一直等待，到有客户端请求连接才返回</span></div><div class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">			Socket socket = server.accept();</div><div class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> ServiceServerTask(socket)).start();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">======================</div><div class="line"><span class="keyword">package</span> cn.itcast.bigdata.socket;</div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceClient</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">/*ServiceIterface service = ProxyUtils.getProxy(ServiceIterface.class,"methodA",hostname,port);</span></div><div class="line"><span class="comment">		Result = service.methodA(parameters);*/</span></div><div class="line">		<span class="comment">// 向服务器发出请求建立连接</span></div><div class="line">		Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">8899</span>);</div><div class="line">		<span class="comment">// 从socket中获取输入输出流</span></div><div class="line">		InputStream inputStream = socket.getInputStream();</div><div class="line">		OutputStream outputStream = socket.getOutputStream();</div><div class="line">		PrintWriter pw = <span class="keyword">new</span> PrintWriter(outputStream);</div><div class="line">		pw.println(<span class="string">"hello"</span>);</div><div class="line">		pw.flush();</div><div class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</div><div class="line">		String result = br.readLine();</div><div class="line">		System.out.println(result);</div><div class="line">		inputStream.close();</div><div class="line">		outputStream.close();</div><div class="line">		socket.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">======================</div><div class="line"><span class="keyword">package</span> cn.itcast.bigdata.socket;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetDataServiceImpl</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">(String param)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"ok-"</span>+param;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">=======================</div><div class="line"><span class="keyword">package</span> cn.itcast.bigdata.socket;</div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceServerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	Socket socket ;</div><div class="line">	InputStream in=<span class="keyword">null</span>;</div><div class="line">	OutputStream out = <span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ServiceServerTask</span><span class="params">(Socket socket)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.socket = socket;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//业务逻辑：跟客户端进行数据交互</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		 <span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//从socket连接中获取到与client之间的网络通信输入输出流 </span></div><div class="line">			in = socket.getInputStream();</div><div class="line">			out = socket.getOutputStream();</div><div class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</div><div class="line">			<span class="comment">//从网络通信输入流中读取客户端发送过来的数据</span></div><div class="line">			<span class="comment">//注意：socketinputstream的读数据的方法都是阻塞的 </span></div><div class="line">			String param = br.readLine();</div><div class="line">			<span class="comment">/**</span></div><div class="line"><span class="comment">			 * 作业：</span></div><div class="line"><span class="comment">			 * 将以下业务调用逻辑写成更加通用的：可以根据客户端发过来的调用类名、调用方法名、调用该参数来灵活调用</span></div><div class="line"><span class="comment">			 * </span></div><div class="line"><span class="comment">			 * 《反射》</span></div><div class="line"><span class="comment">			 * </span></div><div class="line"><span class="comment">			 */</span></div><div class="line">			GetDataServiceImpl getDataServiceImpl = <span class="keyword">new</span> GetDataServiceImpl();</div><div class="line">			String result = getDataServiceImpl.getData(param);</div><div class="line">			<span class="comment">//将调用结果写到sokect的输出流中，以发送给客户端</span></div><div class="line">			PrintWriter pw = <span class="keyword">new</span> PrintWriter(out);</div><div class="line">			pw.println(result);</div><div class="line">			pw.flush();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				in.close();</div><div class="line">				out.close();</div><div class="line">				socket.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直接上代码吧&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="java" scheme="https://blog.signalfire2017.com/tags/java/"/>
    
      <category term="socket" scheme="https://blog.signalfire2017.com/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>大数据0404-java动态代理</title>
    <link href="https://blog.signalfire2017.com/2017/12/03/%E5%A4%A7%E6%95%B0%E6%8D%AE0404-java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://blog.signalfire2017.com/2017/12/03/大数据0404-java动态代理/</id>
    <published>2017-12-03T10:18:16.000Z</published>
    <updated>2017-12-03T10:30:22.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>在之前的代码调用阶段，我们用action调用service的方法实现业务即可。<br>由于之前在service中实现的业务可能不能够满足当先客户的要求，需要我们重新修改service中的方法，但是service的方法不只在我们这个模块使用，在其他模块也在调用，其他模块调用的时候，现有的service方法已经能够满足业务需求，所以我们不能只为了我们的业务而修改service，导致其他模块授影响。<br>那怎么办呢？<br>可以通过动态代理的方式，扩展我们的service中的方法实现，使得在原有的方法中增加更多的业务，而不是实际修改service中的方法，这种实现技术就叫做动态代理。<br>动态代理：在不修改原业务的基础上，基于原业务方法，进行重新的扩展，实现新的业务。  </p>
<h2 id="例如下面的例子："><a href="#例如下面的例子：" class="headerlink" title="例如下面的例子："></a>例如下面的例子：</h2><ul>
<li>旧业务<br>买家调用action，购买衣服，衣服在数据库的标价为50元，购买流程就是简单的调用。</li>
<li>新业务<br>在原先的价格上可以使用优惠券，但是这个功能在以前没有实现过，我们通过代理类，代理了原先的接口方法，在这个方法的基础上，修改了返回值。</li>
</ul>
<p>代理实现流程：</p>
<ol>
<li>书写代理类和代理方法，在代理方法中实现代理Proxy.newProxyInstance</li>
<li>代理中需要的参数分别为：被代理的类的类加载器soneObjectclass.getClassLoader()，被代理类的所有实现接口new Class[] { Interface.class }，句柄方法new InvocationHandler()</li>
<li>在句柄方法中复写invoke方法，invoke方法的输入有3个参数Object proxy（代理类对象）, Method method（被代理类的方法）,Object[] args（被代理类方法的传入参数），在这个方法中，我们可以定制化的开发新的业务。</li>
<li>获取代理类，强转成被代理的接口</li>
<li>最后，我们可以像没被代理一样，调用接口的认可方法，方法被调用后，方法名和参数列表将被传入代理类的invoke方法中，进行新业务的逻辑流程。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">原业务接口IBoss=================================</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 这是一个业务的接口，这个接口中的业务就是返回衣服的价格</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> wilson</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBoss</span> </span>&#123;<span class="comment">//接口</span></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">yifu</span><span class="params">(String size)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">原业务实现类====================================</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> <span class="keyword">implements</span> <span class="title">IBoss</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">yifu</span><span class="params">(String size)</span></span>&#123;</div><div class="line">		System.err.println(<span class="string">"天猫小强旗舰店，老板给客户发快递----衣服型号："</span>+size);</div><div class="line">		<span class="comment">//这件衣服的价钱，从数据库读取</span></div><div class="line">		<span class="keyword">return</span> <span class="number">50</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kuzi</span><span class="params">()</span></span>&#123;</div><div class="line">		System.err.println(<span class="string">"天猫小强旗舰店，老板给客户发快递----裤子"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">原业务调用====================================</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleAction</span> </span>&#123;</div><div class="line">		<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleByBossSelf</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		IBoss boss = <span class="keyword">new</span> Boss();</div><div class="line">		System.out.println(<span class="string">"老板自营！"</span>);</div><div class="line">		<span class="keyword">int</span> money = boss.yifu(<span class="string">"xxl"</span>);</div><div class="line">		System.out.println(<span class="string">"衣服成交价："</span> + money);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">代理类========================================</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyBoss</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 对接口方法进行代理</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> discountCoupon,</span></span></div><div class="line"><span class="function"><span class="params">			<span class="keyword">final</span> Class&lt;?&gt; interfaceClass, <span class="keyword">final</span> Class&lt;?&gt; implementsClass)</span></span></div><div class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(),</div><div class="line">				<span class="keyword">new</span> Class[] &#123; interfaceClass &#125;, <span class="keyword">new</span> InvocationHandler() &#123;</div><div class="line">					<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method,</span></span></div><div class="line"><span class="function"><span class="params">							Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">						Integer returnValue = (Integer) method.invoke(</div><div class="line">								implementsClass.newInstance(), args);<span class="comment">// 调用原始对象以后返回的值</span></div><div class="line">						<span class="keyword">return</span> returnValue - discountCoupon;</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">新业务调用=======================================</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> cn.itcast_05_proxy.proxyclass.ProxyBoss;</div><div class="line"><span class="keyword">import</span> cn.itcast_05_proxy.service.IBoss;</div><div class="line"><span class="keyword">import</span> cn.itcast_05_proxy.service.impl.Boss;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 什么是动态代理？ 简单的写一个模板接口，剩下的个性化工作，好给动态代理来完成！</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySaleAction</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *使用代理，在这个代理中，只代理了Boss的yifu方法</span></div><div class="line"><span class="comment">	 *定制化业务，可以改变原接口的参数、返回值等</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleByProxy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		IBoss boss = ProxyBoss.getProxy(<span class="number">10</span>,IBoss.class,Boss.class);<span class="comment">// 将代理的方法实例化成接口</span></div><div class="line">		<span class="comment">//IBoss boss = new Boss();// 将代理的方法实例化成接口</span></div><div class="line">		System.out.println(<span class="string">"代理经营！"</span>);</div><div class="line">		<span class="keyword">int</span> money = boss.yifu(<span class="string">"xxl"</span>);<span class="comment">// 调用接口的方法，实际上调用方式没有变</span></div><div class="line">		System.out.println(<span class="string">"衣服成交价："</span> + money);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态代理&quot;&gt;&lt;a href=&quot;#动态代理&quot; class=&quot;headerlink&quot; title=&quot;动态代理&quot;&gt;&lt;/a&gt;动态代理&lt;/h1&gt;&lt;p&gt;在之前的代码调用阶段，我们用action调用service的方法实现业务即可。&lt;br&gt;由于之前在service中实现的业务可
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="java" scheme="https://blog.signalfire2017.com/tags/java/"/>
    
      <category term="动态代理" scheme="https://blog.signalfire2017.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>大数据0403-java反射</title>
    <link href="https://blog.signalfire2017.com/2017/12/03/%E5%A4%A7%E6%95%B0%E6%8D%AE0403-java%E5%8F%8D%E5%B0%84/"/>
    <id>https://blog.signalfire2017.com/2017/12/03/大数据0403-java反射/</id>
    <published>2017-12-03T08:34:00.000Z</published>
    <updated>2017-12-03T10:30:25.769Z</updated>
    
    <content type="html"><![CDATA[<p>通过反射的方式可以获取class对象中的属性、方法、构造函数等:<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_04_reflect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReflect</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> String className = <span class="keyword">null</span>;</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">	<span class="keyword">public</span> Class personClass = <span class="keyword">null</span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 反射Person类</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception </span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Before</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		className = <span class="string">"cn.itcast_04_reflect.Person"</span>;</div><div class="line">		personClass = Class.forName(className);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *获取某个class文件对象</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClassName</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(personClass);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *获取某个class文件对象的另一种方式</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClassName2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(Person.class);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *创建一个class文件表示的实例对象，底层会调用空参数的构造方法</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNewInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(personClass.newInstance());</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *获取非私有的构造函数</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPublicConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Constructor  constructor  = personClass.getConstructor(Long.class,String.class);</div><div class="line">		Person person = (Person)constructor.newInstance(<span class="number">100L</span>,<span class="string">"zhangsan"</span>);</div><div class="line">		System.out.println(person.getId());</div><div class="line">		System.out.println(person.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *获得私有的构造函数</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPrivateConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Constructor con = personClass.getDeclaredConstructor(String.class);</div><div class="line">		con.setAccessible(<span class="keyword">true</span>);<span class="comment">//强制取消Java的权限检测</span></div><div class="line">		Person person2 = (Person)con.newInstance(<span class="string">"zhangsan"</span>);</div><div class="line">		System.out.println(<span class="string">"**"</span>+person2.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *访问非私有的成员变量</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNotPrivateField</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Constructor  constructor  = personClass.getConstructor(Long.class,String.class);</div><div class="line">		Object obj = constructor.newInstance(<span class="number">100L</span>,<span class="string">"zhangsan"</span>);</div><div class="line">		</div><div class="line">		Field field = personClass.getField(<span class="string">"name"</span>);</div><div class="line">		field.set(obj, <span class="string">"lisi"</span>);</div><div class="line">		System.out.println(field.get(obj));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *访问私有的成员变量</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPrivateField</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Constructor  constructor  = personClass.getConstructor(Long.class);</div><div class="line">		Object obj = constructor.newInstance(<span class="number">100L</span>);</div><div class="line">		</div><div class="line">		Field field2 = personClass.getDeclaredField(<span class="string">"id"</span>);</div><div class="line">		field2.setAccessible(<span class="keyword">true</span>);<span class="comment">//强制取消Java的权限检测</span></div><div class="line">		field2.set(obj,<span class="number">10000L</span>);</div><div class="line">		System.out.println(field2.get(obj));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *获取非私有的成员函数</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span> &#125;)</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNotPrivateMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(personClass.getMethod(<span class="string">"toString"</span>));</div><div class="line">		</div><div class="line">		Object obj = personClass.newInstance();<span class="comment">//获取空参的构造函数</span></div><div class="line">		Method toStringMethod = personClass.getMethod(<span class="string">"toString"</span>);</div><div class="line">		Object object = toStringMethod.invoke(obj);</div><div class="line">		System.out.println(object);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *获取私有的成员函数</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPrivateMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Object obj = personClass.newInstance();<span class="comment">//获取空参的构造函数</span></div><div class="line">		Method method = personClass.getDeclaredMethod(<span class="string">"getSomeThing"</span>);</div><div class="line">		method.setAccessible(<span class="keyword">true</span>);</div><div class="line">		Object value = method.invoke(obj);</div><div class="line">		System.out.println(value);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//当前加载这个class文件的那个类加载器对象</span></div><div class="line">		System.out.println(personClass.getClassLoader());</div><div class="line">		<span class="comment">//获取某个类实现的所有接口</span></div><div class="line">		Class[] interfaces = personClass.getInterfaces();</div><div class="line">		<span class="keyword">for</span> (Class class1 : interfaces) &#123;</div><div class="line">			System.out.println(class1);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//反射当前这个类的直接父类</span></div><div class="line">		System.out.println(personClass.getGenericSuperclass());</div><div class="line">		<span class="comment">/**</span></div><div class="line"><span class="comment">		 * getResourceAsStream这个方法可以获取到一个输入流，这个输入流会关联到name所表示的那个文件上。</span></div><div class="line"><span class="comment">		 */</span></div><div class="line">		<span class="comment">//path 不以’/'开头时默认是从此类所在的包下取资源，以’/'开头则是从ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。</span></div><div class="line">		System.out.println(personClass.getResourceAsStream(<span class="string">"/log4j.properties"</span>));</div><div class="line">		System.out.println(personClass.getResourceAsStream(<span class="string">"log4j.properties"</span>));</div><div class="line">		</div><div class="line">		<span class="comment">//判断当前的Class对象表示是否是数组</span></div><div class="line">		System.out.println(personClass.isArray());</div><div class="line">		System.out.println(<span class="keyword">new</span> String[<span class="number">3</span>].getClass().isArray());</div><div class="line">		</div><div class="line">		<span class="comment">//判断当前的Class对象表示是否是枚举类</span></div><div class="line">		System.out.println(personClass.isEnum());</div><div class="line">		System.out.println(Class.forName(<span class="string">"cn.itcast_04_reflect.City"</span>).isEnum());</div><div class="line">		</div><div class="line">		<span class="comment">//判断当前的Class对象表示是否是接口</span></div><div class="line">		System.out.println(personClass.isInterface());</div><div class="line">		System.out.println(Class.forName(<span class="string">"cn.itcast_04_reflect.TestInterface"</span>).isInterface());</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过反射的方式可以获取class对象中的属性、方法、构造函数等:&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="java" scheme="https://blog.signalfire2017.com/tags/java/"/>
    
      <category term="反射" scheme="https://blog.signalfire2017.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>大数据0402-JMS activeMQ</title>
    <link href="https://blog.signalfire2017.com/2017/12/03/%E5%A4%A7%E6%95%B0%E6%8D%AE0402-JMS%20activeMQ/"/>
    <id>https://blog.signalfire2017.com/2017/12/03/大数据0402-JMS activeMQ/</id>
    <published>2017-12-03T06:57:03.000Z</published>
    <updated>2017-12-03T10:30:08.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-JMS技术"><a href="#java-JMS技术" class="headerlink" title="java JMS技术"></a>java JMS技术</h1><h2 id="什么是JMS"><a href="#什么是JMS" class="headerlink" title="什么是JMS"></a>什么是JMS</h2><p>JMS即Java<font color="red">消息服务（Java Message Service）</font>应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。<br>JMS是一种与厂商无关的 API，用来访问消息收发系统消息。它类似于JDBC(Java Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。许多厂商都支持 JMS，包括 IBM 的 MQSeries、BEA的 Weblogic JMS service和 Progress 的 SonicMQ，这只是几个例子。 JMS 使您能够通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JMS客户机发送消息。消息是 JMS 中的一种类型对象，由两部分组成：报头和消息主体。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。根据有效负载的类型来划分，可以将消息分为几种类型，它们分别携带：简单文本(TextMessage)、可序列化的对象 (ObjectMessage)、属性集合 (MapMessage)、字节流 (BytesMessage)、原始值流 (StreamMessage)，还有无有效负载的消息 (Message)。</p>
<h2 id="JMS规范"><a href="#JMS规范" class="headerlink" title="JMS规范"></a>JMS规范</h2><h3 id="专业技术规范"><a href="#专业技术规范" class="headerlink" title="专业技术规范"></a>专业技术规范</h3><p>JMS（Java Messaging Service）是Java平台上有关面向消息中间件(MOM)的技术规范，它便于消息系统中的Java应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发，翻译为Java消息服务。</p>
<h3 id="体系架构"><a href="#体系架构" class="headerlink" title="体系架构"></a>体系架构</h3><p>JMS由以下元素组成。</p>
<ul>
<li>JMS提供者provider：连接面向消息中间件的，JMS接口的一个实现。提供者可以是Java平台的JMS实现，也可以是非Java平台的面向消息中间件的适配器。</li>
<li>JMS客户：生产或消费基于消息的Java的应用程序或对象。</li>
<li>JMS生产者：创建并发送消息的JMS客户。</li>
<li>JMS消费者：接收消息的JMS客户。</li>
<li>JMS消息：包括可以在JMS客户之间传递的数据的对象</li>
<li>JMS队列：一个容纳那些被发送的等待阅读的消息的区域。与队列名字所暗示的意思不同，消息的接受顺序并不一定要与消息的发送顺序相同。一旦一个消息被阅读，该消息将被从队列中移走。</li>
<li>JMS主题：一种支持发送消息给多个订阅者的机制。</li>
</ul>
<h3 id="Java消息服务应用程序结构支持两种模型"><a href="#Java消息服务应用程序结构支持两种模型" class="headerlink" title="Java消息服务应用程序结构支持两种模型"></a>Java消息服务应用程序结构支持两种模型</h3><h4 id="点对点或队列模型"><a href="#点对点或队列模型" class="headerlink" title="点对点或队列模型"></a>点对点或队列模型</h4><p>在点对点或队列模型下，一个生产者向一个特定的队列发布消息，一个消费者从该队列中读取消息。这里，生产者知道消费者的队列，并直接将消息发送到消费者的队列。<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/201712315592.png" alt="201712315592"><br>这种模式被概括为：  </p>
<ul>
<li>只有一个消费者将获得消息</li>
<li>生产者不需要在接收者消费该消息期间处于运行状态，接收者也同样不需要在消息发送时处于运行状态。</li>
<li>每一个成功处理的消息都由接收者签收</li>
</ul>
<h4 id="发布者-订阅者模型"><a href="#发布者-订阅者模型" class="headerlink" title="发布者/订阅者模型"></a>发布者/订阅者模型</h4><p>发布者/订阅者模型支持向一个特定的消息主题发布消息。0或多个订阅者可能对接收来自特定消息主题的消息感兴趣。在这种模型下，发布者和订阅者彼此不知道对方。这种模式好比是匿名公告板。<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017123155942.png" alt="2017123155942"><br>这种模式被概括为：</p>
<ul>
<li>多个消费者可以获得消息</li>
<li>在发布者和订阅者之间存在时间依赖性。发布者需要建立一个订阅（subscription），以便客户能够订阅。订阅者必须保持持续的活动状态以接收消息，除非订阅者建立了持久的订阅。在那种情况下，在订阅者未连接时发布的消息将在订阅者重新连接时重新发布。</li>
</ul>
<h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><h2 id="下载ActiveMQ"><a href="#下载ActiveMQ" class="headerlink" title="下载ActiveMQ"></a>下载ActiveMQ</h2><p>去官方网站下载：<a href="http://activemq.apache.org/" target="_blank" rel="external">http://activemq.apache.org/</a></p>
<h2 id="运行ActiveMQ"><a href="#运行ActiveMQ" class="headerlink" title="运行ActiveMQ"></a>运行ActiveMQ</h2><p>解压缩apache-activemq-5.5.1-bin.zip，<br>修改配置文件activeMQ.xml，将0.0.0.0修改为localhost<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">transportConnectors</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"openwire"</span> <span class="attr">uri</span>=<span class="string">"tcp://localhost:61616"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"ssl"</span>     <span class="attr">uri</span>=<span class="string">"ssl://localhost:61617"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"stomp"</span>   <span class="attr">uri</span>=<span class="string">"stomp://localhost:61613"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">uri</span>=<span class="string">"http://localhost:8081"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">uri</span>=<span class="string">"udp://localhost:61618"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后双击apache-activemq-5.5.1\bin\activemq.bat运行ActiveMQ程序。<br>启动ActiveMQ以后，登陆：<a href="http://localhost:8161/admin/，创建一个Queue，命名为FirstQueue。" target="_blank" rel="external">http://localhost:8161/admin/，创建一个Queue，命名为FirstQueue。</a>  </p>
<h1 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h1><h2 id="常用的JMS实现"><a href="#常用的JMS实现" class="headerlink" title="常用的JMS实现"></a>常用的JMS实现</h2><p>要使用Java消息服务，你必须要有一个JMS提供者，管理会话和队列。既有开源的提供者也有专有的提供者。<br>开源的提供者包括：</p>
<ul>
<li>Apache ActiveMQ</li>
<li>JBoss 社区所研发的 HornetQ</li>
<li>Joram</li>
<li>Coridan的MantaRay</li>
<li>The OpenJMS Group的OpenJMS</li>
<li>专有的提供者包括：</li>
<li>BEA的BEA WebLogic Server JMS</li>
<li>TIBCO Software的EMS</li>
<li>GigaSpaces Technologies的GigaSpaces</li>
<li>Softwired 2006的iBus</li>
<li>IONA Technologies的IONA JMS</li>
<li>SeeBeyond的IQManager（2005年8月被Sun Microsystems并购）</li>
<li>webMethods的JMS+ -</li>
<li>my-channels的Nirvana</li>
<li>Sonic Software的SonicMQ</li>
<li>SwiftMQ的SwiftMQ</li>
<li>IBM的WebSphere MQ</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_03_mq.topic;</div><div class="line"><span class="keyword">import</span> javax.jms.Connection;      </div><div class="line"><span class="keyword">import</span> javax.jms.DeliveryMode;      </div><div class="line"><span class="keyword">import</span> javax.jms.Destination;      </div><div class="line"><span class="keyword">import</span> javax.jms.JMSException;      </div><div class="line"><span class="keyword">import</span> javax.jms.MessageProducer;      </div><div class="line"><span class="keyword">import</span> javax.jms.Session;      </div><div class="line"><span class="keyword">import</span> javax.jms.TextMessage;      </div><div class="line">     </div><div class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnection;      </div><div class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;      </div><div class="line">     </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTool</span> </span>&#123;        </div><div class="line">    <span class="keyword">private</span> String user = ActiveMQConnection.DEFAULT_USER;         </div><div class="line">    <span class="keyword">private</span> String password = ActiveMQConnection.DEFAULT_PASSWORD;       </div><div class="line">    <span class="keyword">private</span> String url = ActiveMQConnection.DEFAULT_BROKER_URL;       </div><div class="line">    <span class="keyword">private</span> String subject = <span class="string">"mytopic"</span>;      </div><div class="line">    <span class="keyword">private</span> Destination destination = <span class="keyword">null</span>;      </div><div class="line">    <span class="keyword">private</span> Connection connection = <span class="keyword">null</span>;      </div><div class="line">    <span class="keyword">private</span> Session session = <span class="keyword">null</span>;      </div><div class="line">    <span class="keyword">private</span> MessageProducer producer = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">// 初始化      </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> JMSException, Exception </span>&#123;      </div><div class="line">        ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(      </div><div class="line">                user, password, url);      </div><div class="line">        connection = connectionFactory.createConnection();      </div><div class="line">        session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);      </div><div class="line">        destination = session.createTopic(subject);      </div><div class="line">        producer = session.createProducer(destination);      </div><div class="line">        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);      </div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 发送消息      </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> JMSException, Exception </span>&#123;      </div><div class="line">        initialize();      </div><div class="line">        TextMessage msg = session.createTextMessage(message);      </div><div class="line">        connection.start();      </div><div class="line">        System.out.println(<span class="string">"Producer:-&gt;Sending message: "</span> + message);      </div><div class="line">        producer.send(msg);      </div><div class="line">        System.out.println(<span class="string">"Producer:-&gt;Message sent complete!"</span>);      </div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 关闭连接      </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;      </div><div class="line">        System.out.println(<span class="string">"Producer:-&gt;Closing connection"</span>);      </div><div class="line">        <span class="keyword">if</span> (producer != <span class="keyword">null</span>)      </div><div class="line">            producer.close();      </div><div class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>)      </div><div class="line">            session.close();      </div><div class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)      </div><div class="line">            connection.close();      </div><div class="line">    &#125;      </div><div class="line">&#125;        </div><div class="line"></div><div class="line">----------------------------------------------------------</div><div class="line"><span class="keyword">package</span> cn.itcast_03_mq.topic;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.jms.JMSException;      </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTest</span> </span>&#123;      </div><div class="line">     </div><div class="line">    <span class="comment">/**    </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> args    </span></div><div class="line"><span class="comment">     */</span>     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, Exception </span>&#123;      </div><div class="line">        ProducerTool producer = <span class="keyword">new</span> ProducerTool(); </div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</div><div class="line">        	</div><div class="line">        	Thread.sleep(random.nextInt(<span class="number">10</span>)*<span class="number">1000</span>);</div><div class="line">        	</div><div class="line">        	producer.produceMessage(<span class="string">"Hello, world!--"</span>+i);      </div><div class="line">        	producer.close();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;      </div><div class="line">&#125;      </div><div class="line"></div><div class="line">----------------------------------------------------------</div><div class="line"><span class="keyword">package</span> cn.itcast_03_mq.topic;</div><div class="line"><span class="keyword">import</span> javax.jms.Connection;      </div><div class="line"><span class="keyword">import</span> javax.jms.Destination;      </div><div class="line"><span class="keyword">import</span> javax.jms.ExceptionListener;</div><div class="line"><span class="keyword">import</span> javax.jms.JMSException;      </div><div class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;      </div><div class="line"><span class="keyword">import</span> javax.jms.Session;      </div><div class="line"><span class="keyword">import</span> javax.jms.MessageListener;      </div><div class="line"><span class="keyword">import</span> javax.jms.Message;      </div><div class="line"><span class="keyword">import</span> javax.jms.TextMessage;      </div><div class="line">     </div><div class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnection;      </div><div class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;      </div><div class="line">     </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTool</span> <span class="keyword">implements</span> <span class="title">MessageListener</span>,<span class="title">ExceptionListener</span> </span>&#123;      </div><div class="line">    <span class="keyword">private</span> String user = ActiveMQConnection.DEFAULT_USER;      </div><div class="line">    <span class="keyword">private</span> String password = ActiveMQConnection.DEFAULT_PASSWORD;      </div><div class="line">    <span class="keyword">private</span> String url =ActiveMQConnection.DEFAULT_BROKER_URL;      </div><div class="line">    <span class="keyword">private</span> String subject = <span class="string">"mytopic"</span>;      </div><div class="line">    <span class="keyword">private</span> Destination destination = <span class="keyword">null</span>;      </div><div class="line">    <span class="keyword">private</span> Connection connection = <span class="keyword">null</span>;      </div><div class="line">    <span class="keyword">private</span> Session session = <span class="keyword">null</span>;      </div><div class="line">    <span class="keyword">private</span> MessageConsumer consumer = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean isconnection=<span class="keyword">false</span>;</div><div class="line">    <span class="comment">// 初始化      </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> JMSException, Exception </span>&#123;      </div><div class="line">        ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(      </div><div class="line">                user, password, url);      </div><div class="line">        connection = connectionFactory.createConnection();      </div><div class="line">        session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);      </div><div class="line">        destination = session.createTopic(subject);      </div><div class="line">        consumer = session.createConsumer(destination);     </div><div class="line">    &#125;      </div><div class="line">     </div><div class="line">    <span class="comment">// 消费消息      </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">()</span> <span class="keyword">throws</span> JMSException, Exception </span>&#123;      </div><div class="line">        initialize();      </div><div class="line">        connection.start();</div><div class="line">        consumer.setMessageListener(<span class="keyword">this</span>);    </div><div class="line">        connection.setExceptionListener(<span class="keyword">this</span>);</div><div class="line">        isconnection=<span class="keyword">true</span>;</div><div class="line">        System.out.println(<span class="string">"Consumer:-&gt;Begin listening..."</span>);      </div><div class="line">        <span class="comment">// 开始监听  </span></div><div class="line">        <span class="comment">// Message message = consumer.receive();      </span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 关闭连接      </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;      </div><div class="line">        System.out.println(<span class="string">"Consumer:-&gt;Closing connection"</span>);      </div><div class="line">        <span class="keyword">if</span> (consumer != <span class="keyword">null</span>)      </div><div class="line">            consumer.close();      </div><div class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>)      </div><div class="line">            session.close();      </div><div class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)      </div><div class="line">            connection.close();      </div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 消息处理函数      </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;      </div><div class="line">        <span class="keyword">try</span> &#123;      </div><div class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> TextMessage) &#123;      </div><div class="line">                TextMessage txtMsg = (TextMessage) message;      </div><div class="line">                String msg = txtMsg.getText();      </div><div class="line">                System.out.println(<span class="string">"Consumer:-&gt;Received: "</span> + msg);      </div><div class="line">            &#125; <span class="keyword">else</span> &#123;      </div><div class="line">                System.out.println(<span class="string">"Consumer:-&gt;Received: "</span> + message);      </div><div class="line">            &#125;      </div><div class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;      </div><div class="line">            <span class="comment">// TODO Auto-generated catch block      </span></div><div class="line">            e.printStackTrace();      </div><div class="line">        &#125;      </div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(JMSException arg0)</span> </span>&#123;</div><div class="line">		isconnection=<span class="keyword">false</span>;</div><div class="line">	&#125;      </div><div class="line">&#125;      </div><div class="line">----------------------------------------------------------     </div><div class="line"><span class="keyword">package</span> cn.itcast_03_mq.topic;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.jms.JMSException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> Thread t1 = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> JMSException</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">		t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ConsumerTest());</div><div class="line">		t1.setDaemon(<span class="keyword">false</span>);</div><div class="line">		t1.start();</div><div class="line">		<span class="comment">/**</span></div><div class="line"><span class="comment">		 * 如果发生异常，则重启consumer</span></div><div class="line"><span class="comment">		 */</span></div><div class="line">		<span class="comment">/*while (true) &#123;</span></div><div class="line"><span class="comment">			System.out.println(t1.isAlive());</span></div><div class="line"><span class="comment">			if (!t1.isAlive()) &#123;</span></div><div class="line"><span class="comment">				t1 = new Thread(new ConsumerTest());</span></div><div class="line"><span class="comment">				t1.start();</span></div><div class="line"><span class="comment">				System.out.println("重新启动");</span></div><div class="line"><span class="comment">			&#125;</span></div><div class="line"><span class="comment">			Thread.sleep(5000);</span></div><div class="line"><span class="comment">		&#125;*/</span></div><div class="line">		<span class="comment">// 延时500毫秒之后停止接受消息</span></div><div class="line">		<span class="comment">// Thread.sleep(500);</span></div><div class="line">		<span class="comment">// consumer.close();</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ConsumerTool consumer = <span class="keyword">new</span> ConsumerTool();</div><div class="line">			consumer.consumeMessage();</div><div class="line">			<span class="keyword">while</span> (ConsumerTool.isconnection) &#123;	</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java-JMS技术&quot;&gt;&lt;a href=&quot;#java-JMS技术&quot; class=&quot;headerlink&quot; title=&quot;java JMS技术&quot;&gt;&lt;/a&gt;java JMS技术&lt;/h1&gt;&lt;h2 id=&quot;什么是JMS&quot;&gt;&lt;a href=&quot;#什么是JMS&quot; class=&quot;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="java" scheme="https://blog.signalfire2017.com/tags/java/"/>
    
      <category term="JMS" scheme="https://blog.signalfire2017.com/tags/JMS/"/>
    
      <category term="activeMQ" scheme="https://blog.signalfire2017.com/tags/activeMQ/"/>
    
  </entry>
  
  <entry>
    <title>大数据0401-java多线程并发</title>
    <link href="https://blog.signalfire2017.com/2017/12/01/%E5%A4%A7%E6%95%B0%E6%8D%AE0401-java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/"/>
    <id>https://blog.signalfire2017.com/2017/12/01/大数据0401-java多线程并发/</id>
    <published>2017-12-01T14:59:38.000Z</published>
    <updated>2017-12-03T08:23:15.948Z</updated>
    
    <content type="html"><![CDATA[<p>内容包含</p>
<ol>
<li>掌握多线程</li>
<li>掌握并发包下的队列</li>
</ol>
<p>做个笔记，方便查看<br><a id="more"></a></p>
<h1 id="java多线程增强"><a href="#java多线程增强" class="headerlink" title="java多线程增强"></a>java多线程增强</h1><h2 id="进程介绍"><a href="#进程介绍" class="headerlink" title="进程介绍"></a>进程介绍</h2><p>不管是我们开发的应用程序，还是我们运行的其他的应用程序，都需要先把程序安装在本地的硬盘上。然后找到这个程序的启动文件，启动程序的时候，其实是电脑把当前的这个程序加载到内存中，在<font color="red">内存中需要给当前的程序分配一段独立的运行空间</font>。这片空间就专门负责当前这个程序的运行。  </p>
<p>不同的应用程序运行的过程中都需要在内存中分配自己独立的运行空间，彼此之间不会相互的影响。我们把每个独立应用程序在内存的独立空间称为当前应用程序运行的一个进程。  </p>
<p>进程：它是内存中的一段独立的空间，可以负责当前应用程序的运行。当前这个进程负责调度当前程序中的所有运行细节。</p>
<h2 id="线程介绍"><a href="#线程介绍" class="headerlink" title="线程介绍"></a>线程介绍</h2><p>在一个进程中，每个独立的功能都需要独立的去运行，这时又需要把当前这个进程划分成多个运行区域，每个独立的小区域（小单元）称为一个线程。</p>
<p>线程：它是位于进程中，负责当前进程中的某个具备独立运行资格的空间。<br>进程是负责整个程序的运行，而线程是程序中具体的某个独立功能的运行。一个进程中至少应该有一个线程。</p>
<h2 id="多线程介绍"><a href="#多线程介绍" class="headerlink" title="多线程介绍"></a>多线程介绍</h2><p>多线程：<font color="red">在一个进程中，我们同时开启多个线程，让多个线程同时去完成某些任务（功能）。<br>(比如后台服务系统，就可以用多个线程同时响应多个客户的请求)</font><br>多线程的目的：提高程序的运行效率。</p>
<h2 id="多线程运行的原理"><a href="#多线程运行的原理" class="headerlink" title="多线程运行的原理"></a>多线程运行的原理</h2><p>cpu在线程中做时间片的切换。</p>
<p>其实真正电脑中的程序的运行不是同时在运行的。CPU负责程序的运行，而CPU在运行程序的过程中某个时刻点上，它其实只能运行一个程序。而不是多个程序。而CPU它可以在多个程序之间进行高速的切换。而切换频率和速度太快，导致人的肉眼看不到。<br>每个程序就是进程， 而每个进程中会有多个线程，而CPU是在这些线程之间进行切换。<br>了解了CPU对一个任务的执行过程，我们就必须知道，多线程可以提高程序的运行效率，但不能无限制的开线程。  </p>
<h2 id="实现线程的两种方式"><a href="#实现线程的两种方式" class="headerlink" title="实现线程的两种方式"></a>实现线程的两种方式</h2><h3 id="继承Thread的方式"><a href="#继承Thread的方式" class="headerlink" title="继承Thread的方式"></a>继承Thread的方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.testThread;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadWithExtends</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	String flag;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThreadWithExtends</span><span class="params">(String flag)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.flag = flag;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		String tname = Thread.currentThread().getName();</div><div class="line">		System.out.println(tname+<span class="string">"线程的run方法被调用……"</span>);</div><div class="line">		Random random = <span class="keyword">new</span> Random();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(random.nextInt(<span class="number">10</span>)*<span class="number">100</span>);</div><div class="line">				System.out.println(tname+ <span class="string">"...."</span>+ flag);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Thread thread1 = <span class="keyword">new</span> MyThreadWithExtends(<span class="string">"a"</span>);</div><div class="line">		Thread thread2 = <span class="keyword">new</span> MyThreadWithExtends(<span class="string">"b"</span>);</div><div class="line">		thread1.start();</div><div class="line">		thread2.start();</div><div class="line">		<span class="comment">/**</span></div><div class="line"><span class="comment">		 * 如果是调用thread的run方法，则只是一个普通的方法调用，不会开启新的线程</span></div><div class="line"><span class="comment">		 */</span></div><div class="line"><span class="comment">//		thread1.run();</span></div><div class="line"><span class="comment">//		thread2.run();</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="声明实现-Runnable-接口的方式"><a href="#声明实现-Runnable-接口的方式" class="headerlink" title="声明实现 Runnable 接口的方式"></a>声明实现 Runnable 接口的方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.testThread;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadWithImpliment</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> x;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThreadWithImpliment</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.x = x;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		String name = Thread.currentThread().getName();</div><div class="line">		System.out.println(<span class="string">"线程"</span> + name + <span class="string">"的run方法被调用……"</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.println(x);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">100</span>);</div><div class="line">				</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThreadWithImpliment(<span class="number">1</span>), <span class="string">"thread-1"</span>);</div><div class="line">		Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThreadWithImpliment(<span class="number">2</span>), <span class="string">"thread-2"</span>);</div><div class="line">		 thread1.start();</div><div class="line">		 thread2.start();</div><div class="line">		<span class="comment">// 注意调用run和调用start的区别,直接调用run，则都运行在main线程中</span></div><div class="line"><span class="comment">//		thread1.run();</span></div><div class="line"><span class="comment">//		thread2.run();</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="java同步关键词解释"><a href="#java同步关键词解释" class="headerlink" title="java同步关键词解释"></a>java同步关键词解释</h1><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><h3 id="加同步格式："><a href="#加同步格式：" class="headerlink" title="加同步格式："></a>加同步格式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">synchronized( 需要一个任意的对象（锁） )&#123;</div><div class="line">	代码块中放操作共享数据的代码。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.testThread;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySynchronized</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> MySynchronized mySynchronized = <span class="keyword">new</span> MySynchronized();</div><div class="line">		<span class="keyword">final</span> MySynchronized mySynchronized2 = <span class="keyword">new</span> MySynchronized();</div><div class="line">		<span class="keyword">new</span> Thread(<span class="string">"thread1"</span>) &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">synchronized</span> (mySynchronized) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					System.out.println(<span class="keyword">this</span>.getName()+<span class="string">" start"</span>);</div><div class="line">					<span class="keyword">int</span> i =<span class="number">1</span>/<span class="number">0</span>;   <span class="comment">//如果发生异常，jvm会将锁释放</span></div><div class="line">					Thread.sleep(<span class="number">5000</span>);</div><div class="line">					System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"醒了"</span>);</div><div class="line">					System.out.println(<span class="keyword">this</span>.getName()+<span class="string">" end"</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;.start();</div><div class="line">		<span class="keyword">new</span> Thread(<span class="string">"thread2"</span>) &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">synchronized</span> (mySynchronized) &#123;         <span class="comment">//争抢同一把锁时，线程1没释放之前，线程2只能等待</span></div><div class="line"><span class="comment">//					synchronized (mySynchronized2) &#123;    //如果不是一把锁，可以看到两句话同时打印</span></div><div class="line">					System.out.println(<span class="keyword">this</span>.getName()+<span class="string">" start"</span>);</div><div class="line">					System.out.println(<span class="keyword">this</span>.getName()+<span class="string">" end"</span>);</div><div class="line">					</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="synchronized的缺陷"><a href="#synchronized的缺陷" class="headerlink" title="synchronized的缺陷"></a>synchronized的缺陷</h3><p>synchronized是java中的一个关键字，也就是说是Java语言内置的特性。<br>如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：</p>
<ol>
<li>获取锁的线程执行完了该代码块，然后线程释放对锁的占有；</li>
<li>线程执行发生异常，此时JVM会让线程自动释放锁。</li>
</ol>
<p>例子1：<br>如果这个获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。<br>因此就需要有一种机制<font color="red">可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间或者能够响应中断），通过Lock就可以办到。</font></p>
<p>例子2：<br>当有多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作会发生冲突现象，但是读操作和读操作不会发生冲突现象。<br>但是采用synchronized关键字来实现同步的话，就会导致一个问题：<br>如果多个线程都只是进行读操作，当一个线程在进行读操作时，其他线程只能等待无法进行读操作。  </p>
<p>因此就需要一种机制来使得多个线程都只是进行读操作时，线程之间不会发生冲突，通过Lock就可以办到。<br>另外，通过Lock可以知道线程有没有成功获取到锁。这个是synchronized无法办到的。<br>总的来说，也就是说Lock提供了比synchronized更多的功能。  </p>
<h2 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h2><h3 id="lock和synchronized的区别"><a href="#lock和synchronized的区别" class="headerlink" title="lock和synchronized的区别"></a>lock和synchronized的区别</h3><ol>
<li>Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；</li>
<li>Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。<h3 id="java-util-concurrent-locks包下常用的类"><a href="#java-util-concurrent-locks包下常用的类" class="headerlink" title="java.util.concurrent.locks包下常用的类"></a>java.util.concurrent.locks包下常用的类</h3><h4 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h4>首先要说明的就是Lock，通过查看Lock的源码可知，Lock是一个接口：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>获取锁：lock()，lockInterruptibly()， tryLock()，tryLock(long time, TimeUnit unit)<br>释放锁：unlock()</p>
<p>区别： </p>
<ul>
<li><p>lock()<br>平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。<br>由于在前面讲到如果采用Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用Lock必须在try{}catch{}块中进行，并且将释放锁的操作放在finally块中进行，以保证锁一定被被释放，防止死锁的发生。</p>
</li>
<li><p>tryLock()<br>有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。</p>
</li>
<li><p>tryLock(long time, TimeUnit unit)<br>和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。</p>
</li>
<li><p>lockInterruptibly()<br>比较特殊，当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就使说，当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程。<br>注意，当一个线程获取了锁之后，是不会被interrupt()方法中断的。<br>因此当通过lockInterruptibly()方法获取某个锁时，如果不能获取到，只有进行等待的情况下，是可以响应中断的。<br>而用synchronized修饰的话，当一个线程处于等待某个锁的状态，是无法被中断的，只有一直等待下去。  </p>
</li>
</ul>
<h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><p>直接使用lock接口的话，我们需要实现很多方法，不太方便，ReentrantLock是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法，ReentrantLock，意思是“可重入锁”。</p>
<ul>
<li><p>lock()的正确使用方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.lock;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLockTest</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 注意这个地方</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Thread thread = Thread.currentThread();</div><div class="line">				lock.lock();</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					System.out.println(thread.getName() + <span class="string">"得到了锁"</span>);</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">						arrayList.add(i);</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					System.out.println(thread.getName() + <span class="string">"释放了锁"</span>);</div><div class="line">					lock.unlock();</div><div class="line">				&#125;</div><div class="line">			&#125;;</div><div class="line">		&#125;.start();</div><div class="line">		</div><div class="line">		<span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Thread thread = Thread.currentThread();</div><div class="line">				lock.lock();</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					System.out.println(thread.getName() + <span class="string">"得到了锁"</span>);</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">						arrayList.add(i);</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					System.out.println(thread.getName() + <span class="string">"释放了锁"</span>);</div><div class="line">					lock.unlock();</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;;</div><div class="line">		&#125;.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>tryLock()的使用方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.lock;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 观察现象：一个线程获得锁后，另一个线程取不到锁，不会一直等待</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span></span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTryLock</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 注意这个地方</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Thread thread = Thread.currentThread();</div><div class="line">				<span class="keyword">boolean</span> tryLock = lock.tryLock();</div><div class="line">				System.out.println(thread.getName()+<span class="string">" "</span>+tryLock);</div><div class="line">				<span class="keyword">if</span> (tryLock) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						System.out.println(thread.getName() + <span class="string">"得到了锁"</span>);</div><div class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">							arrayList.add(i);</div><div class="line">						&#125;</div><div class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">					&#125; <span class="keyword">finally</span> &#123;</div><div class="line">						System.out.println(thread.getName() + <span class="string">"释放了锁"</span>);</div><div class="line">						lock.unlock();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;;</div><div class="line">		&#125;.start();</div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Thread thread = Thread.currentThread();</div><div class="line">				<span class="keyword">boolean</span> tryLock = lock.tryLock();</div><div class="line">				System.out.println(thread.getName()+<span class="string">" "</span>+tryLock);</div><div class="line">				<span class="keyword">if</span> (tryLock) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						System.out.println(thread.getName() + <span class="string">"得到了锁"</span>);</div><div class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">							arrayList.add(i);</div><div class="line">						&#125;</div><div class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">					&#125; <span class="keyword">finally</span> &#123;</div><div class="line">						System.out.println(thread.getName() + <span class="string">"释放了锁"</span>);</div><div class="line">						lock.unlock();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;;</div><div class="line">		&#125;.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>lockInterruptibly()响应中断的使用方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 观察现象：如果thread-0得到了锁，阻塞。。。thread-1尝试获取锁，如果拿不到，则可以被中断等待</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span></span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterruptibly</span> </span>&#123;</div><div class="line">	 <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();  </div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">	    	MyInterruptibly test = <span class="keyword">new</span> MyInterruptibly();</div><div class="line">	        MyThread thread0 = <span class="keyword">new</span> MyThread(test);</div><div class="line">	        MyThread thread1 = <span class="keyword">new</span> MyThread(test);</div><div class="line">	        thread0.start();</div><div class="line">	        thread1.start();</div><div class="line">	         </div><div class="line">	        <span class="keyword">try</span> &#123;</div><div class="line">	            Thread.sleep(<span class="number">2000</span>);</div><div class="line">	        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">	            e.printStackTrace();</div><div class="line">	        &#125;</div><div class="line">	        thread1.interrupt();</div><div class="line">	        System.out.println(<span class="string">"====================="</span>);</div><div class="line">	    &#125;  </div><div class="line">	     </div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">	        lock.lockInterruptibly();   <span class="comment">//注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出</span></div><div class="line">	        <span class="keyword">try</span> &#123;  </div><div class="line">	            System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</div><div class="line">	            <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">	            <span class="keyword">for</span>(    ;     ;) &#123;</div><div class="line">	                <span class="keyword">if</span>(System.currentTimeMillis() - startTime &gt;= Integer.MAX_VALUE)</div><div class="line">	                    <span class="keyword">break</span>;</div><div class="line">	                <span class="comment">//插入数据</span></div><div class="line">	            &#125;</div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">finally</span> &#123;</div><div class="line">	            System.out.println(Thread.currentThread().getName()+<span class="string">"执行finally"</span>);</div><div class="line">	            lock.unlock();</div><div class="line">	            System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</div><div class="line">	        &#125;  </div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	    <span class="keyword">private</span> MyInterruptibly test = <span class="keyword">null</span>;</div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(MyInterruptibly test)</span> </span>&#123;</div><div class="line">	        <span class="keyword">this</span>.test = test;</div><div class="line">	    &#125;</div><div class="line">	    <span class="meta">@Override</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	         </div><div class="line">	        <span class="keyword">try</span> &#123;</div><div class="line">	            test.insert(Thread.currentThread());</div><div class="line">	        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">	            System.out.println(Thread.currentThread().getName()+<span class="string">"被中断"</span>);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h4><p>ReadWriteLock也是一个接口，在它里面只定义了两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the lock used for reading.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for reading.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the lock used for writing.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for writing.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。下面的ReentrantReadWriteLock实现了ReadWriteLock接口。</p>
<h4 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h4><p>ReentrantReadWriteLock里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和writeLock()用来获取读锁和写锁。</p>
<p>ReentrantReadWriteLock具体用法</p>
<p>假如有多个线程要同时进行读操作的话，先看一下synchronized达到的效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.lock;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 一个线程又要读又要写，用synchronize来实现的话，读写操作都只能锁住后一个线程一个线程地进行</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span></span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySynchronizedReadWrite</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        <span class="keyword">final</span> MySynchronizedReadWrite test = <span class="keyword">new</span> MySynchronizedReadWrite();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.get(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.get(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">         </div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</div><div class="line">        	i++;</div><div class="line">        	<span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">0</span>)&#123;</div><div class="line">            System.out.println(thread.getName()+<span class="string">"正在进行写操作"</span>);</div><div class="line">        	&#125;<span class="keyword">else</span> &#123;</div><div class="line">        		System.out.println(thread.getName()+<span class="string">"正在进行读操作"</span>);	</div><div class="line">			&#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(thread.getName()+<span class="string">"读写操作完毕"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>改成用读写锁的话：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.thread.lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 使用读写锁，可以实现读写分离锁定，读操作并发进行，写操作锁定单个线程</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * 如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。</span></div><div class="line"><span class="comment"> * 如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span></span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReentrantReadWriteLock</span> </span>&#123;</div><div class="line">	 <span class="keyword">private</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line">     </div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">	        <span class="keyword">final</span> MyReentrantReadWriteLock test = <span class="keyword">new</span> MyReentrantReadWriteLock();</div><div class="line">	         </div><div class="line">	        <span class="keyword">new</span> Thread()&#123;</div><div class="line">	            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	                test.get(Thread.currentThread());</div><div class="line">	                test.write(Thread.currentThread());</div><div class="line">	            &#125;;</div><div class="line">	        &#125;.start();</div><div class="line">	         </div><div class="line">	        <span class="keyword">new</span> Thread()&#123;</div><div class="line">	            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	                test.get(Thread.currentThread());</div><div class="line">	                test.write(Thread.currentThread());</div><div class="line">	            &#125;;</div><div class="line">	        &#125;.start();</div><div class="line">	    &#125;  </div><div class="line">	    </div><div class="line">	    <span class="comment">/**</span></div><div class="line"><span class="comment">	     * 读操作,用读锁来锁定</span></div><div class="line"><span class="comment">	     * <span class="doctag">@param</span> thread</span></div><div class="line"><span class="comment">	     */</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">	        rwl.readLock().lock();</div><div class="line">	        <span class="keyword">try</span> &#123;</div><div class="line">	            <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">	             </div><div class="line">	            <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</div><div class="line">	                System.out.println(thread.getName()+<span class="string">"正在进行读操作"</span>);</div><div class="line">	            &#125;</div><div class="line">	            System.out.println(thread.getName()+<span class="string">"读操作完毕"</span>);</div><div class="line">	        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">	            rwl.readLock().unlock();</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line"></div><div class="line">	    <span class="comment">/**</span></div><div class="line"><span class="comment">	     * 写操作，用写锁来锁定</span></div><div class="line"><span class="comment">	     * <span class="doctag">@param</span> thread</span></div><div class="line"><span class="comment">	     */</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">	        rwl.writeLock().lock();;</div><div class="line">	        <span class="keyword">try</span> &#123;</div><div class="line">	            <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">	            <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</div><div class="line">	                System.out.println(thread.getName()+<span class="string">"正在进行写操作"</span>);</div><div class="line">	            &#125;</div><div class="line">	            System.out.println(thread.getName()+<span class="string">"写操作完毕"</span>);</div><div class="line">	        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">	            rwl.writeLock().unlock();</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：</p>
<ul>
<li>不过要注意的是，如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。</li>
<li>如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</li>
</ul>
</blockquote>
<h2 id="Lock和synchronized的选择"><a href="#Lock和synchronized的选择" class="headerlink" title="Lock和synchronized的选择"></a>Lock和synchronized的选择</h2><ol>
<li>Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现；</li>
<li>synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；</li>
<li>Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；</li>
<li>通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。</li>
<li>Lock可以提高多个线程进行读操作的效率。</li>
</ol>
<p>在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。</p>
<h1 id="java并发包"><a href="#java并发包" class="headerlink" title="java并发包"></a>java并发包</h1><h2 id="java并发包介绍"><a href="#java并发包介绍" class="headerlink" title="java并发包介绍"></a>java并发包介绍</h2><p>JDK5.0 以后的版本都引入了高级并发特性，大多数的特性在java.util.concurrent 包中，是专门用于多线程发编程的，充分利用了现代多处理器和多核心系统的功能以编写大规模并发应用程序。主要包含<font color="red">原子量、并发集合、同步器、</font>可重入锁，并对线程池的构造提供了强力的支持。</p>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h4><p>五种创建方式</p>
<h5 id="Single-Thread-Executor"><a href="#Single-Thread-Executor" class="headerlink" title="Single Thread Executor"></a>Single Thread Executor</h5><p>只有一个线程的线程池，因此所有提交的任务是顺序执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### Cached Thread Pool </div><div class="line">线程池里有很多线程需要同时执行，老的可用线程将被新的任务触发重新执行，&lt;font color=&quot;red&quot;&gt;如果线程超过60秒内没执行，那么将被终止并从池中删除&lt;/font&gt;  </div><div class="line">```Executors.newCachedThreadPool()</div></pre></td></tr></table></figure></p>
<h5 id="Fixed-Thread-Pool"><a href="#Fixed-Thread-Pool" class="headerlink" title="Fixed Thread Pool"></a>Fixed Thread Pool</h5><p><font color="red">拥有固定线程数的线程池，如果没有任务执行，那么线程会一直等待</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在构造函数中的参数4是线程池的大小，你可以随意设置，也可以和cpu的核数量保持一致，获取cpu的核数量  </div><div class="line">```int cpuNums = Runtime.getRuntime().availableProcessors();</div></pre></td></tr></table></figure></p>
<h5 id="Scheduled-Thread-Pool"><a href="#Scheduled-Thread-Pool" class="headerlink" title="Scheduled Thread Pool"></a>Scheduled Thread Pool</h5><p>用来调度即将执行的任务的线程池，可能是不是直接执行, 每隔多久执行一次… 策略型的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### Single Thread Scheduled Pool </div><div class="line">只有一个线程，用来调度任务在指定时间执行</div><div class="line">```Executors.newSingleThreadScheduledExecutor()</div></pre></td></tr></table></figure></p>
<h3 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h3><p>提交 Runnable ，任务完成后 Future 对象返回 null<br>调用excute,提交任务, 匿名Runable重写run方法, run方法里是业务逻辑<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.pool;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolWithRunable</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 通过线程池执行线程</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//创建一个线程池</span></div><div class="line">		ExecutorService pool = Executors.newCachedThreadPool();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">			pool.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					System.out.println(<span class="string">"thread name: "</span> + Thread.currentThread().getName());</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep(<span class="number">1000</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">		pool.shutdown();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提交 Callable，该方法返回一个 Future 实例表示任务的状态<br>调用submit提交任务, 匿名Callable,重写call方法, 有返回值, 获取返回值会阻塞,一直要等到线程任务返回结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_01_mythread.pool;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Future;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * callable 跟runnable的区别：</span></div><div class="line"><span class="comment"> * runnable的run方法不会有任何返回结果，所以主线程无法获得任务线程的返回值</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * callable的call方法可以返回结果，但是主线程在获取时是被阻塞，需要等待任务线程返回才能拿到结果</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span></span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolWithcallable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class="line">		ExecutorService pool = Executors.newFixedThreadPool(<span class="number">4</span>); </div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">			Future&lt;String&gt; submit = pool.submit(<span class="keyword">new</span> Callable&lt;String&gt;()&#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">					<span class="comment">//System.out.println("a");</span></div><div class="line">					Thread.sleep(<span class="number">5000</span>);</div><div class="line">					<span class="keyword">return</span> <span class="string">"b--"</span>+Thread.currentThread().getName();</div><div class="line">				&#125;			   </div><div class="line">			   &#125;);</div><div class="line">			<span class="comment">//从Future中get结果，这个方法是会被阻塞的，一直要等到线程任务返回结果</span></div><div class="line">			System.out.println(submit.get());</div><div class="line">		&#125; </div><div class="line">			pool.shutdown();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="java并发包消息队列及在开源软件中的应用"><a href="#java并发包消息队列及在开源软件中的应用" class="headerlink" title="java并发包消息队列及在开源软件中的应用"></a>java并发包消息队列及在开源软件中的应用</h2><h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3><p>也是java.util.concurrent下的主要用来<font color="red">控制线程同步的工具</font>。<br>主要的方法是：put、take一对阻塞存取；add、poll一对非阻塞存取。  </p>
<ul>
<li>插入:<ol>
<li>add(anObject):把anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则抛出异常,不好</li>
<li>offer(anObject):表示如果可能的话,将anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则返回false.</li>
<li>put(anObject):把anObject加到BlockingQueue里,如果BlockQueue没有空间,则调用此方法的线程被阻断直到BlockingQueue里面有空间再继续, 有阻塞, 放不进去就等待</li>
</ol>
</li>
<li>读取：<ol>
<li>poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间,取不到时返回null; 取不到返回null</li>
<li>take():取走BlockingQueue里排在首位的对象,若BlockingQueue为空,阻断进入等待状态直到Blocking有新的对象被加入为止; <font color="red">阻塞, 取不到就一直等</font></li>
</ol>
</li>
<li>其他<ol>
<li>int remainingCapacity();返回队列剩余的容量，在队列插入和获取的时候，<font color="red">不要瞎搞，数据可能不准, 不能保证数据的准确性</font></li>
<li>boolean remove(Object o); 从队列移除元素，如果存在，即移除一个或者更多，队列改    变了返回true</li>
<li>public boolean contains(Object o); 查看队列是否存在这个元素，存在返回true</li>
<li>int drainTo(Collection&lt;? super E&gt; c); //移除此队列中所有可用的元素,并将它们添加到给定 collection 中。<font color="red">取出放到集合中</font></li>
<li>int drainTo(Collection&lt;? super E&gt; c, int maxElements); 和上面方法的区别在于，指定了移动的数量;取出指定个数放到集合</li>
</ol>
</li>
</ul>
<p>BlockingQueue有四个具体的实现类,常用的两种实现类为：</p>
<h3 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h3><p>一个由数组支持的有界阻塞队列，规定大小的BlockingQueue,其构造函数必须带一个int参数来指明其大小.其所含的对象是以FIFO(先入先出)顺序排序的。</p>
<h3 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h3><p>大小不定的BlockingQueue,若其构造函数带一个规定大小的参数,生成的BlockingQueue有大小限制,若不带大小参数,所生成的BlockingQueue的大小由Integer.MAX_VALUE来决定.其所含的对象是以FIFO(先入先出)顺序排序的。<br>LinkedBlockingQueue 可以指定容量，也可以不指定，不指定的话，默认最大是Integer.MAX_VALUE,其中主要用到put和take方法，put方法在队列满的时候会阻塞直到有队列成员被消费，take方法在队列空的时候会阻塞，直到有队列成员被放进来。</p>
<h3 id="LinkedBlockingQueue和ArrayBlockingQueue区别"><a href="#LinkedBlockingQueue和ArrayBlockingQueue区别" class="headerlink" title="LinkedBlockingQueue和ArrayBlockingQueue区别"></a>LinkedBlockingQueue和ArrayBlockingQueue区别</h3><p>LinkedBlockingQueue和ArrayBlockingQueue比较起来,它们背后所用的数据结构不一样,导致LinkedBlockingQueue的数据吞吐量要大于ArrayBlockingQueue,但在线程数量很大时其性能的可预见性低于ArrayBlockingQueue.</p>
<p>生产者消费者的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast_02_blockingqueue.main;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class="line"><span class="keyword">import</span> cn.itcast_02_blockingqueue.consumer.Consumer;</div><div class="line"><span class="keyword">import</span> cn.itcast_02_blockingqueue.producer.Producer;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> LinkedBlockingQueue&lt;String&gt;(<span class="number">2</span>);</div><div class="line">		<span class="comment">// BlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;String&gt;();</span></div><div class="line">		<span class="comment">// 不设置的话，LinkedBlockingQueue默认大小为Integer.MAX_VALUE</span></div><div class="line">		<span class="comment">// BlockingQueue&lt;String&gt; queue = new ArrayBlockingQueue&lt;String&gt;(2);</span></div><div class="line">		Consumer consumer = <span class="keyword">new</span> Consumer(queue);</div><div class="line">		Producer producer = <span class="keyword">new</span> Producer(queue);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">			<span class="keyword">new</span> Thread(producer, <span class="string">"Producer"</span> + (i + <span class="number">1</span>)).start();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">			<span class="keyword">new</span> Thread(consumer, <span class="string">"Consumer"</span> + (i + <span class="number">1</span>)).start();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">new</span> Thread(producer, <span class="string">"Producer"</span> + (<span class="number">5</span>)).start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">=====================================================================</div><div class="line"><span class="keyword">package</span> cn.itcast_02_blockingqueue.main;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBlockingQueue</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> LinkedBlockingQueue&lt;String&gt;(<span class="number">2</span>);</div><div class="line">		<span class="comment">// BlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;String&gt;();</span></div><div class="line">		<span class="comment">// 不设置的话，LinkedBlockingQueue默认大小为Integer.MAX_VALUE</span></div><div class="line">		<span class="comment">// BlockingQueue&lt;String&gt; queue = new ArrayBlockingQueue&lt;String&gt;(2);</span></div><div class="line">		TestBlockingQueueConsumer consumer = <span class="keyword">new</span> TestBlockingQueueConsumer(queue);</div><div class="line">		TestBlockingQueueProducer producer = <span class="keyword">new</span> TestBlockingQueueProducer(queue);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">			<span class="keyword">new</span> Thread(producer, <span class="string">"Producer"</span> + (i + <span class="number">1</span>)).start();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">			<span class="keyword">new</span> Thread(consumer, <span class="string">"Consumer"</span> + (i + <span class="number">1</span>)).start();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">new</span> Thread(producer, <span class="string">"Producer"</span> + (<span class="number">5</span>)).start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">=====================================================================</div><div class="line"><span class="keyword">package</span> cn.itcast_02_blockingqueue.main;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBlockingQueueConsumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;  </div><div class="line">    BlockingQueue&lt;String&gt; queue; </div><div class="line">    Random random = <span class="keyword">new</span> Random();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestBlockingQueueConsumer</span><span class="params">(BlockingQueue&lt;String&gt; queue)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.queue = queue;  </div><div class="line">    &#125;        </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">        	Thread.sleep(random.nextInt(<span class="number">10</span>));</div><div class="line">        	System.out.println(Thread.currentThread().getName()+ <span class="string">"trying..."</span>);</div><div class="line">            String temp = queue.take();<span class="comment">//如果队列为空，会阻塞当前线程  </span></div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" get a job "</span> +temp);  </div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line">=====================================================================</div><div class="line"><span class="keyword">package</span> cn.itcast_02_blockingqueue.main;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBlockingQueueProducer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	BlockingQueue&lt;String&gt; queue;</div><div class="line">	Random random = <span class="keyword">new</span> Random();</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TestBlockingQueueProducer</span><span class="params">(BlockingQueue&lt;String&gt; queue)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.queue = queue;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(random.nextInt(<span class="number">10</span>));</div><div class="line">				String task = Thread.currentThread().getName() + <span class="string">" made a product "</span> + i;</div><div class="line">				System.out.println(task);</div><div class="line">				queue.put(task);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">=====================================================================</div><div class="line"><span class="keyword">package</span> cn.itcast_02_blockingqueue.producer;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </div><div class="line">    BlockingQueue&lt;String&gt; queue;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BlockingQueue&lt;String&gt; queue)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.queue = queue;  </div><div class="line">    &#125;    </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            </div><div class="line">            System.out.println(<span class="string">"I have made a product:"</span>  </div><div class="line">                    + Thread.currentThread().getName()); </div><div class="line">            String temp = <span class="string">"A Product, 生产线程："</span>  </div><div class="line">                    + Thread.currentThread().getName();  </div><div class="line">            queue.put(temp);<span class="comment">//如果队列是满的话，会阻塞当前线程  </span></div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;    </div><div class="line">&#125;  </div><div class="line">=====================================================================</div><div class="line"><span class="keyword">package</span> cn.itcast_02_blockingqueue.consumer;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;  </div><div class="line">    BlockingQueue&lt;String&gt; queue; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue&lt;String&gt; queue)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.queue = queue;  </div><div class="line">    &#125;        </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">        	String consumer = Thread.currentThread().getName();</div><div class="line">        	System.out.println(consumer);  </div><div class="line">            String temp = queue.take();<span class="comment">//如果队列为空，会阻塞当前线程  </span></div><div class="line">            System.out.println(consumer+<span class="string">"get a product:"</span>+temp);  </div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="java并发编程的一些总结"><a href="#java并发编程的一些总结" class="headerlink" title="java并发编程的一些总结"></a>java并发编程的一些总结</h1><h2 id="不应用线程池的缺点"><a href="#不应用线程池的缺点" class="headerlink" title="不应用线程池的缺点"></a>不应用线程池的缺点</h2><p>有些开发者图省事，遇到需要多线程处理的地方，直接new Thread(…).start()，对于一般场景是没问题的，但如果是在并发请求很高的情况下，就会有些隐患：</p>
<ul>
<li>新建线程的开销。线程虽然比进程要轻量许多，但对于JVM来说，新建一个线程的代价还是挺大的，决不同于新建一个对象</li>
<li>资源消耗量。没有一个池来限制线程的数量，会导致线程的数量直接取决于应用的并发量，这样有潜在的线程数据巨大的可能，那么资源消耗量将是巨大的</li>
<li>稳定性。当线程数量超过系统资源所能承受的程度，稳定性就会成问题<h2 id="制定执行策略"><a href="#制定执行策略" class="headerlink" title="制定执行策略"></a>制定执行策略</h2>在每个需要多线程处理的地方，不管并发量有多大，需要考虑线程的执行策略</li>
<li>任务以什么顺序执行</li>
<li>可以有多少个任务并发执行</li>
<li>可以有多少个任务进入等待执行队列</li>
<li>系统过载的时候，应该放弃哪些任务？如何通知到应用程序？</li>
<li>一个任务的执行前后应该做什么处理</li>
</ul>
<h2 id="线程池的类型"><a href="#线程池的类型" class="headerlink" title="线程池的类型"></a>线程池的类型</h2><p>不管是通过Executors创建线程池，还是通过Spring来管理，都得清楚知道有哪几种线程池：</p>
<ul>
<li>FixedThreadPool：定长线程池，提交任务时创建线程，直到池的最大容量，如果有线程非预期结束，会补充新线程</li>
<li>CachedThreadPool：可变线程池，它犹如一个弹簧，如果没有任务需求时，它回收空闲线程，如果需求增加，则按需增加线程，不对池的大小做限制</li>
<li>SingleThreadExecutor：单线程。处理不过来的任务会进入FIFO队列等待执行</li>
<li>SecheduledThreadPool：周期性线程池。支持执行周期性线程任务<br>其实，这些不同类型的线程池都是通过构建一个ThreadPoolExecutor来完成的，所不同的是corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,threadFactory这么几个参数。具体可以参见JDK DOC。</li>
</ul>
<h2 id="线程池饱和策略"><a href="#线程池饱和策略" class="headerlink" title="线程池饱和策略"></a>线程池饱和策略</h2><p>由以上线程池类型可知，除了CachedThreadPool其他线程池都有饱和的可能，当饱和以后就需要相应的策略处理请求线程的任务，比如，达到上限时通过ThreadPoolExecutor.setRejectedExecutionHandler方法设置一个拒绝任务的策略，JDK提供了AbortPolicy、CallerRunsPolicy、DiscardPolicy、DiscardOldestPolicy几种策略，具体差异可见JDK DOC</p>
<h2 id="线程无依赖性"><a href="#线程无依赖性" class="headerlink" title="线程无依赖性"></a>线程无依赖性</h2><p><font color="red">多线程任务设计上尽量使得各任务是独立无依赖的</font>，所谓依赖性可两个方面：</p>
<ul>
<li>线程之间的依赖性。如果线程有依赖可能会造成死锁或饥饿</li>
<li>调用者与线程的依赖性。调用者得监视线程的完成情况，影响可并发量<br>当然，在有些业务里确实需要一定的依赖性，比如调用者需要得到线程完成后结果，传统的Thread是不便完成的，因为run方法无返回值，只能通过一些共享的变量来传递结果，但在Executor框架里可以通过Future和Callable实现需要有返回值的任务，当然线程的异步性导致需要有相应机制来保证调用者能等待任务完成，关于Future和Callable的用法前文已讲解；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容包含&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;掌握多线程&lt;/li&gt;
&lt;li&gt;掌握并发包下的队列&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;做个笔记，方便查看&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="java" scheme="https://blog.signalfire2017.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>大数据03-06-系统服务器上下线感知程序</title>
    <link href="https://blog.signalfire2017.com/2017/11/26/%E5%A4%A7%E6%95%B0%E6%8D%AE03-06-%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%B8%8B%E7%BA%BF%E6%84%9F%E7%9F%A5%E7%A8%8B%E5%BA%8F/"/>
    <id>https://blog.signalfire2017.com/2017/11/26/大数据03-06-系统服务器上下线感知程序/</id>
    <published>2017-11-25T17:10:58.000Z</published>
    <updated>2017-11-26T10:36:18.352Z</updated>
    
    <content type="html"><![CDATA[<p>分布式服务注册，客户端获取等<br><a id="more"></a></p>
<h1 id="zookeeper动态感知节点的示意图"><a href="#zookeeper动态感知节点的示意图" class="headerlink" title="zookeeper动态感知节点的示意图"></a>zookeeper动态感知节点的示意图</h1><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/2017112604948.png" alt="2017112604948"></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast.bigdata.zkdist;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedClient</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String connectString = <span class="string">"mini1:2181,mini2:2181,mini3:2181"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String parentNode = <span class="string">"/servers"</span>;</div><div class="line">	<span class="comment">// 注意:加volatile的意义何在？</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> List&lt;String&gt; serverList;</div><div class="line">	<span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 创建到zk的客户端连接</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		zk = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">				<span class="comment">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</span></div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					<span class="comment">//重新更新服务器列表，并且注册了监听</span></div><div class="line">					getServerList();</div><div class="line"></div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 获取服务器信息列表</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getServerList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 获取服务器子节点信息，并且对父节点进行监听</span></div><div class="line">		List&lt;String&gt; children = zk.getChildren(parentNode, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 先创建一个局部的list来存服务器信息</span></div><div class="line">		List&lt;String&gt; servers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		<span class="keyword">for</span> (String child : children) &#123;</div><div class="line">			<span class="comment">// child只是子节点的节点名</span></div><div class="line">			<span class="keyword">byte</span>[] data = zk.getData(parentNode + <span class="string">"/"</span> + child, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">			servers.add(<span class="keyword">new</span> String(data));</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 把servers赋值给成员变量serverList，已提供给各业务线程使用</span></div><div class="line">		serverList = servers;</div><div class="line">		</div><div class="line">		<span class="comment">//打印服务器列表</span></div><div class="line">		System.out.println(serverList);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 业务功能</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleBussiness</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		System.out.println(<span class="string">"client start working....."</span>);</div><div class="line">		Thread.sleep(Long.MAX_VALUE);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 获取zk连接</span></div><div class="line">		DistributedClient client = <span class="keyword">new</span> DistributedClient();</div><div class="line">		client.getConnect();</div><div class="line">		<span class="comment">// 获取servers的子节点信息（并监听），从中获取服务器信息列表</span></div><div class="line">		client.getServerList();</div><div class="line"></div><div class="line">		<span class="comment">// 业务线程启动</span></div><div class="line">		client.handleBussiness();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast.bigdata.zkdist;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs.Ids;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedServer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String connectString = <span class="string">"mini1:2181,mini2:2181,mini3:2181"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String parentNode = <span class="string">"/servers"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 创建到zk的客户端连接</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		zk = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">				<span class="comment">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</span></div><div class="line">				System.out.println(event.getType() + <span class="string">"---"</span> + event.getPath());</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					zk.getChildren(<span class="string">"/"</span>, <span class="keyword">true</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 向zk集群注册服务器信息</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> hostname</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerServer</span><span class="params">(String hostname)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		String create = zk.create(parentNode + <span class="string">"/server"</span>, hostname.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class="line">		System.out.println(hostname + <span class="string">"is online.."</span> + create);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 业务功能</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleBussiness</span><span class="params">(String hostname)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		System.out.println(hostname + <span class="string">"start working....."</span>);</div><div class="line">		Thread.sleep(Long.MAX_VALUE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 获取zk连接</span></div><div class="line">		DistributedServer server = <span class="keyword">new</span> DistributedServer();</div><div class="line">		server.getConnect();</div><div class="line"></div><div class="line">		<span class="comment">// 利用zk连接注册服务器信息</span></div><div class="line">		server.registerServer(args[<span class="number">0</span>]);</div><div class="line"></div><div class="line">		<span class="comment">// 启动业务功能</span></div><div class="line">		server.handleBussiness(args[<span class="number">0</span>]);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布式服务注册，客户端获取等&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="zookeeper" scheme="https://blog.signalfire2017.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>大数据03-05-java api</title>
    <link href="https://blog.signalfire2017.com/2017/11/26/%E5%A4%A7%E6%95%B0%E6%8D%AE03-05-java-api/"/>
    <id>https://blog.signalfire2017.com/2017/11/26/大数据03-05-java-api/</id>
    <published>2017-11-25T17:10:40.000Z</published>
    <updated>2017-11-26T10:37:50.160Z</updated>
    
    <content type="html"><![CDATA[<p>java api</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast.bigdata.zk;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs.Ids;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleZkClient</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String connectString = <span class="string">"mini1:2181,mini2:2181,mini3:2181"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</div><div class="line"></div><div class="line">	ZooKeeper zkClient = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="meta">@Before</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		zkClient = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">				<span class="comment">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</span></div><div class="line">				System.out.println(event.getType() + <span class="string">"---"</span> + event.getPath());</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					zkClient.getChildren(<span class="string">"/"</span>, <span class="keyword">true</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 数据的增删改查</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> KeeperException</span></div><div class="line"><span class="comment">	 */</span></div><div class="line"></div><div class="line">	<span class="comment">// 创建数据节点到zk中</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</div><div class="line">		<span class="comment">// 参数1：要创建的节点的路径 参数2：节点大数据 参数3：节点的权限 参数4：节点的类型</span></div><div class="line">		String nodeCreated = zkClient.create(<span class="string">"/eclipse"</span>, <span class="string">"hellozk"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</div><div class="line">		<span class="comment">//上传的数据可以是任何类型，但都要转成byte[]</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//判断znode是否存在</span></div><div class="line">	<span class="meta">@Test</span>	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExist</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		Stat stat = zkClient.exists(<span class="string">"/eclipse"</span>, <span class="keyword">false</span>);</div><div class="line">		System.out.println(stat==<span class="keyword">null</span>?<span class="string">"not exist"</span>:<span class="string">"exist"</span>);</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 获取子节点</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getChildren</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		List&lt;String&gt; children = zkClient.getChildren(<span class="string">"/"</span>, <span class="keyword">true</span>);</div><div class="line">		<span class="keyword">for</span> (String child : children) &#123;</div><div class="line">			System.out.println(child);</div><div class="line">		&#125;</div><div class="line">		Thread.sleep(Long.MAX_VALUE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//获取znode的数据</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">byte</span>[] data = zkClient.getData(<span class="string">"/eclipse"</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">		System.out.println(<span class="keyword">new</span> String(data));</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//删除znode</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteZnode</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//参数2：指定要删除的版本，-1表示删除所有版本</span></div><div class="line">		zkClient.delete(<span class="string">"/eclipse"</span>, -<span class="number">1</span>);</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//删除znode</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		zkClient.setData(<span class="string">"/app1"</span>, <span class="string">"imissyou angelababy"</span>.getBytes(), -<span class="number">1</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">byte</span>[] data = zkClient.getData(<span class="string">"/app1"</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">		System.out.println(<span class="keyword">new</span> String(data));</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java api&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="zookeeper" scheme="https://blog.signalfire2017.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>大数据03-04-zookeeper集群自动启动脚本及export变量作用域的解析</title>
    <link href="https://blog.signalfire2017.com/2017/11/21/%E5%A4%A7%E6%95%B0%E6%8D%AE03-04-zookeeper%E9%9B%86%E7%BE%A4%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC%E5%8F%8Aexport%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E8%A7%A3%E6%9E%90/"/>
    <id>https://blog.signalfire2017.com/2017/11/21/大数据03-04-zookeeper集群自动启动脚本及export变量作用域的解析/</id>
    <published>2017-11-21T15:22:14.000Z</published>
    <updated>2017-11-25T17:09:36.081Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>export A=1 定义的变量，会对自己所在的shell进程及其子进程生效</li>
<li>B=1 定义的变量，只对自己所在的shell进程生效</li>
<li>在script.sh中定义的变量，在当前登录的shell进程中 source script.sh 时，脚本中定义的变量也会进入当前登录的进程<a id="more"></a>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"start zkServer..."</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 1 2 3</div><div class="line"><span class="keyword">do</span> </div><div class="line">ssh zk<span class="variable">$i</span> <span class="string">"source /etc/profile;/home/vagrant/apps/zookeeper/bin/zkServer.sh start"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<ol>
<li><p>提示输入密码，配置免密登录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-keygen </div><div class="line">ssh-copy-id zk1</div></pre></td></tr></table></figure>
</li>
<li><p>可以放到/root/bin 目录下，该目录直接就在环境变量中，不需要配置，可以在其他位置执行了</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;export A=1 定义的变量，会对自己所在的shell进程及其子进程生效&lt;/li&gt;
&lt;li&gt;B=1 定义的变量，只对自己所在的shell进程生效&lt;/li&gt;
&lt;li&gt;在script.sh中定义的变量，在当前登录的shell进程中 source script.sh 时，脚本中定义的变量也会进入当前登录的进程
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="zookeeper" scheme="https://blog.signalfire2017.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>大数据03-03-zookeeper-命令行客户端及znode数据结构类型监听等功能</title>
    <link href="https://blog.signalfire2017.com/2017/11/19/%E5%A4%A7%E6%95%B0%E6%8D%AE03-03-zookeeper-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%8Aznode%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E7%9B%91%E5%90%AC%E7%AD%89%E5%8A%9F%E8%83%BD/"/>
    <id>https://blog.signalfire2017.com/2017/11/19/大数据03-03-zookeeper-命令行客户端及znode数据结构类型监听等功能/</id>
    <published>2017-11-19T15:54:06.000Z</published>
    <updated>2017-11-21T15:31:47.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进入客户端"><a href="#进入客户端" class="headerlink" title="进入客户端"></a>进入客户端</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin/zkCli.sh (连到本机)</div><div class="line">connect zk2:2181（连到zk2机器上）</div><div class="line"></div><div class="line">[zk: zk2:2181(CONNECTED) 3]</div></pre></td></tr></table></figure>
<h1 id="zookeeper结构"><a href="#zookeeper结构" class="headerlink" title="zookeeper结构"></a>zookeeper结构</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li>Zookeeper：一个leader，多个follower组成的集群</li>
<li>全局数据一致：每个server保存一份相同的数据副本，client无论连接到哪个server，数据都是一致的</li>
<li>分布式读写，更新请求转发，由leader实施</li>
<li>更新请求顺序进行，来自同一个client的更新请求按其发送顺序依次执行</li>
<li>数据更新原子性，一次数据更新要么成功，要么失败</li>
<li>实时性，在一定时间范围内，client能读到最新数据</li>
</ol>
<a id="more"></a>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ol>
<li>层次化的目录结构，命名符合常规文件系统规范(见下图)</li>
<li>每个节点在zookeeper中叫做znode,并且其有一个唯一的路径标识</li>
<li>节点Znode可以包含数据和子节点（但是EPHEMERAL类型的节点不能有子节点，下一页详细讲解）</li>
<li>客户端应用可以在节点上设置监视器（后续详细讲解）    </li>
</ol>
<h2 id="数据结构图"><a href="#数据结构图" class="headerlink" title="数据结构图"></a>数据结构图</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/20171119232757.png" alt="20171119232757"></p>
<h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><ol>
<li>Znode有两种类型：<ul>
<li>短暂（ephemeral）（断开连接自己删除）</li>
<li>持久（persistent）（断开连接不删除）</li>
</ul>
</li>
<li>Znode有四种形式的目录节点（默认是persistent ）<ul>
<li>PERSISTENT</li>
<li>PERSISTENT_SEQUENTIAL（持久序列/test0000000019 ）</li>
<li>EPHEMERAL</li>
<li>EPHEMERAL_SEQUENTIAL</li>
</ul>
</li>
<li>创建znode时设置顺序标识，znode名称后会附加一个值，顺序号是一个单调递增的计数器，由父节点维护</li>
<li>在分布式系统中，顺序号可以被用于为所有的事件进行全局排序，这样客户端可以通过顺序号推断事件的顺序</li>
</ol>
<h1 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h1><blockquote>
<p>运行 zkCli.sh –server <ip>进入命令行工具</ip></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[zk: zk2:2181(CONNECTED) 2] help</div><div class="line">ZooKeeper -server host:port cmd args</div><div class="line">        connect host:port</div><div class="line">        get path [watch]</div><div class="line">        ls path [watch]</div><div class="line">        set path data [version]</div><div class="line">        rmr path</div><div class="line">        delquota [-n|-b] path</div><div class="line">        quit </div><div class="line">        printwatches on|off</div><div class="line">        create [-s] [-e] path data acl</div><div class="line">        stat path [watch]</div><div class="line">        close </div><div class="line">        ls2 path [watch]</div><div class="line">        history </div><div class="line">        listquota path</div><div class="line">        setAcl path acl</div><div class="line">        getAcl path</div><div class="line">        sync path</div><div class="line">        redo cmdno</div><div class="line">        addauth scheme auth</div><div class="line">        delete path [version]</div><div class="line">        setquota -n|-b val path</div></pre></td></tr></table></figure>
<ol>
<li><p>使用 ls 命令来查看当前 ZooKeeper 中所包含的内容：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[zk: zk2:2181(CONNECTED) 3] ls /</div><div class="line">[zookeeper]</div></pre></td></tr></table></figure>
</li>
<li><p>创建一个新的 znode ，使用 create /zk myData 。这个命令创建了一个新的 znode 节点“ zk ”以及与它<strong>关联的</strong>字符串：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[zk: zk2:2181(CONNECTED) 4] create /app 1234</div><div class="line">Created /app</div></pre></td></tr></table></figure>
</li>
<li><p>我们运行 get 命令来确认 znode 是否包含我们所创建的字符串：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[zk: zk2:2181(CONNECTED) 5] get /app</div><div class="line">1234</div><div class="line">cZxid = 0x300000004</div><div class="line">ctime = Sun Nov 19 15:48:32 UTC 2017</div><div class="line">mZxid = 0x300000004</div><div class="line">mtime = Sun Nov 19 15:48:32 UTC 2017</div><div class="line">pZxid = 0x300000004</div><div class="line">cversion = 0</div><div class="line">dataVersion = 0</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 4</div><div class="line">numChildren = 0</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[zk: localhost:2181(CONNECTED) 4] get /app watch</div><div class="line">#监听这个节点的变化,当另外一个客户端改变/app,它会打出下面的</div><div class="line">#WATCHER::</div><div class="line">#WatchedEvent state:SyncConnected type:NodeDataChanged path:/app</div></pre></td></tr></table></figure>
</li>
<li><p>下面我们通过 set 命令来对 zk 所关联的字符串进行设置：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[zk: zk2:2181(CONNECTED) 6] set /app 222</div><div class="line">cZxid = 0x300000004</div><div class="line">ctime = Sun Nov 19 15:48:32 UTC 2017</div><div class="line">mZxid = 0x300000005</div><div class="line">mtime = Sun Nov 19 15:50:46 UTC 2017</div><div class="line">pZxid = 0x300000004</div><div class="line">cversion = 0</div><div class="line">dataVersion = 1</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 3</div><div class="line">numChildren = 0</div><div class="line"></div><div class="line">[zk: zk2:2181(CONNECTED) 7] get /app</div><div class="line">222</div><div class="line">cZxid = 0x300000004</div><div class="line">ctime = Sun Nov 19 15:48:32 UTC 2017</div><div class="line">mZxid = 0x300000005</div><div class="line">mtime = Sun Nov 19 15:50:46 UTC 2017</div><div class="line">pZxid = 0x300000004</div><div class="line">cversion = 0</div><div class="line">dataVersion = 1</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 3</div><div class="line">numChildren = 0</div></pre></td></tr></table></figure>
</li>
<li><p>下面我们将刚才创建的 znode 删除：只能删除没有子节点的节点</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[zk: zk2:2181(CONNECTED) 8] delete /app</div><div class="line">[zk: zk2:2181(CONNECTED) 9] ls /</div><div class="line">[zookeeper]</div></pre></td></tr></table></figure>
</li>
<li><p>删除节点：rmr 删除节点及其子节点</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[zk: zk2:2181(CONNECTED) 11] create /app2 12</div><div class="line">Created /app2</div><div class="line">[zk: zk2:2181(CONNECTED) 12] rmr /app2</div><div class="line">[zk: zk2:2181(CONNECTED) 13] ls /           </div><div class="line">[zookeeper]</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;进入客户端&quot;&gt;&lt;a href=&quot;#进入客户端&quot; class=&quot;headerlink&quot; title=&quot;进入客户端&quot;&gt;&lt;/a&gt;进入客户端&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bin/zkCli.sh (连到本机)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;connect zk2:2181（连到zk2机器上）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[zk: zk2:2181(CONNECTED) 3]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;zookeeper结构&quot;&gt;&lt;a href=&quot;#zookeeper结构&quot; class=&quot;headerlink&quot; title=&quot;zookeeper结构&quot;&gt;&lt;/a&gt;zookeeper结构&lt;/h1&gt;&lt;h2 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Zookeeper：一个leader，多个follower组成的集群&lt;/li&gt;
&lt;li&gt;全局数据一致：每个server保存一份相同的数据副本，client无论连接到哪个server，数据都是一致的&lt;/li&gt;
&lt;li&gt;分布式读写，更新请求转发，由leader实施&lt;/li&gt;
&lt;li&gt;更新请求顺序进行，来自同一个client的更新请求按其发送顺序依次执行&lt;/li&gt;
&lt;li&gt;数据更新原子性，一次数据更新要么成功，要么失败&lt;/li&gt;
&lt;li&gt;实时性，在一定时间范围内，client能读到最新数据&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="zookeeper" scheme="https://blog.signalfire2017.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>大数据03-02-zookeeper 简介</title>
    <link href="https://blog.signalfire2017.com/2017/11/19/%E5%A4%A7%E6%95%B0%E6%8D%AE03-02-zookeeper-%E7%AE%80%E4%BB%8B/"/>
    <id>https://blog.signalfire2017.com/2017/11/19/大数据03-02-zookeeper-简介/</id>
    <published>2017-11-19T12:22:13.000Z</published>
    <updated>2017-11-19T12:28:24.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学软件，框架"><a href="#学软件，框架" class="headerlink" title="学软件，框架"></a>学软件，框架</h1><p>需要明白三点</p>
<ol>
<li>应用场景：干什么的 在哪里用的</li>
<li>核心工作机制流程功能：组成，角色</li>
<li>怎么用</li>
<li>再深一层，原理细节：选择性的深入了解，重要框架<a id="more"></a>
</li>
</ol>
<h1 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h1><p>zookeeper会用</p>
<h1 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h1><p>分布式<strong>协调服务</strong>，</p>
<ul>
<li>zookeeper是为别的分布式程序服务的</li>
<li>Zookeeper<strong>本身就是一个分布式程序</strong>（只要有半数以上节点存活，zk就能正常服务）</li>
<li>Zookeeper所提供的服务涵盖：主从协调、服务器节点动态上下线、统一配置管理、分布式共享锁、统一名称服务……</li>
<li>虽然说可以提供各种服务，但是zookeeper在底层其实只提供了两个功能：<ul>
<li><strong>管理(存储，读取)用户程序提交的数据；</strong></li>
<li><strong>并为用户程序提供数据节点监听服务；</strong></li>
</ul>
</li>
</ul>
<h2 id="zookeeper一些应用场景"><a href="#zookeeper一些应用场景" class="headerlink" title="zookeeper一些应用场景"></a>zookeeper一些应用场景</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/20171118194439.png" alt="20171118194439"></p>
<h2 id="集群角色分配原理"><a href="#集群角色分配原理" class="headerlink" title="集群角色分配原理"></a>集群角色分配原理</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/20171118201716.png" alt="20171118201716"></p>
<h2 id="集群机制"><a href="#集群机制" class="headerlink" title="集群机制"></a>集群机制</h2><p>半数机制：集群中半数以上机器存活，集群可用。<br>zookeeper适合装在奇数台机器上！！！</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zookeeper-3.4.5.tar.gz</div></pre></td></tr></table></figure>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf zookeeper-3.4.5.tar.gz</div></pre></td></tr></table></figure>
<h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv zookeeper-3.4.5 zookeeper（重命名文件夹zookeeper-3.4.5为zookeeper）</div></pre></td></tr></table></figure>
<h3 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h3><ol>
<li>su root (切换到root用户)</li>
<li>vi /etc/profile (修改文件)</li>
<li><p>添加内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export ZOOKEEPER_HOME=/home/hadoop/zookeeper</div><div class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</div></pre></td></tr></table></figure>
</li>
<li><p>重新编译文件：<br>source /etc/profile</p>
</li>
<li>注意：3台zookeeper都需要修改</li>
<li>修改完成后切换回hadoop用户：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su - hadoop</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ol>
<li><p>用hadoop用户操作</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd zookeeper/conf</div><div class="line">cp zoo_sample.cfg zoo.cfg</div></pre></td></tr></table></figure>
</li>
<li><p>vi zoo.cfg</p>
</li>
<li>添加内容： <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dataDir=/home/hadoop/zookeeper/data</div><div class="line">dataLogDir=/home/hadoop/zookeeper/log</div><div class="line">server.1=zk1:2888:3888 (主机名, 心跳端口、数据端口)</div><div class="line">server.2=zk2:2888:3888</div><div class="line">server.3=zk3:2888:3888</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /home/hadoop/zookeeper/</div><div class="line">mkdir -m 755 data</div><div class="line">mkdir -m 755 log</div></pre></td></tr></table></figure>
<h3 id="在data文件夹下新建myid文件，myid的文件内容为："><a href="#在data文件夹下新建myid文件，myid的文件内容为：" class="headerlink" title="在data文件夹下新建myid文件，myid的文件内容为："></a>在data文件夹下新建myid文件，myid的文件内容为：</h3><p>cd data<br>vi myid<br>添加内容：（数字递增）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1</div></pre></td></tr></table></figure></p>
<p>上面的操作都是所有机器一起操作的，如果是单台操作需要把内容复制到其他的机器上</p>
<h4 id="将集群下发到其他机器上"><a href="#将集群下发到其他机器上" class="headerlink" title="将集群下发到其他机器上"></a>将集群下发到其他机器上</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scp -r /home/hadoop/zookeeper hadoop@slave2:/home/hadoop/</div><div class="line">scp -r /home/hadoop/zookeeper hadoop@slave3:/home/hadoop/</div></pre></td></tr></table></figure>
<h4 id="修改其他机器的配置文件"><a href="#修改其他机器的配置文件" class="headerlink" title="修改其他机器的配置文件"></a>修改其他机器的配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">到slave2上：修改myid为：2</div><div class="line">到slave3上：修改myid为：3</div></pre></td></tr></table></figure>
<h3 id="启动每台机器"><a href="#启动每台机器" class="headerlink" title="启动每台机器"></a>启动每台机器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/root/zookeeper/bin/zkServer.sh start</div></pre></td></tr></table></figure>
<h3 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h3><ul>
<li>jps（查看进程）</li>
<li>zkServer.sh status（查看集群状态，主从信息）</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问"><a href="#一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问" class="headerlink" title="一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问"></a>一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service iptables stop</div><div class="line">chkconfig iptables off</div></pre></td></tr></table></figure>
<h2 id="遇到错误启动不了"><a href="#遇到错误启动不了" class="headerlink" title="遇到错误启动不了"></a>遇到错误启动不了</h2><p>查看bin下的 zookeeper.out</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>conf/zoo.cfg中节点ID必须与myid文件中的id相对应</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;学软件，框架&quot;&gt;&lt;a href=&quot;#学软件，框架&quot; class=&quot;headerlink&quot; title=&quot;学软件，框架&quot;&gt;&lt;/a&gt;学软件，框架&lt;/h1&gt;&lt;p&gt;需要明白三点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应用场景：干什么的 在哪里用的&lt;/li&gt;
&lt;li&gt;核心工作机制流程功能：组成，角色&lt;/li&gt;
&lt;li&gt;怎么用&lt;/li&gt;
&lt;li&gt;再深一层，原理细节：选择性的深入了解，重要框架
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="zookeeper" scheme="https://blog.signalfire2017.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>hexo-next 本地搜索</title>
    <link href="https://blog.signalfire2017.com/2017/11/14/hexo-next-%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/"/>
    <id>https://blog.signalfire2017.com/2017/11/14/hexo-next-本地搜索/</id>
    <published>2017-11-14T15:46:14.000Z</published>
    <updated>2017-11-19T11:37:54.840Z</updated>
    
    <content type="html"><![CDATA[<p>之前用的algolia用不了了，应该是收费。查找了帖子做了本地搜索，感觉也很不错，主要是不用担心不好使了。</p>
<h1 id="local-search"><a href="#local-search" class="headerlink" title="local search"></a>local search</h1><h2 id="安装hexo-generator-searchdb"><a href="#安装hexo-generator-searchdb" class="headerlink" title="安装hexo-generator-searchdb"></a>安装hexo-generator-searchdb</h2><p>在站点根目录通过gitbash安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="添加search字段"><a href="#添加search字段" class="headerlink" title="添加search字段"></a>添加search字段</h2><p>在站点下_config.yml中添加search字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">  format: html</div><div class="line">  limit: 10000</div></pre></td></tr></table></figure></p>
<h2 id="在themes-next-config-yml主题配置中找到"><a href="#在themes-next-config-yml主题配置中找到" class="headerlink" title="在themes\next_config.yml主题配置中找到"></a>在themes\next_config.yml主题配置中找到</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">local_search:</div><div class="line">  enable: true</div></pre></td></tr></table></figure>
<p>将enable的值改成true</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/syd192/p/6074323.html" target="_blank" rel="external">Hexo的Next主题配置</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用的algolia用不了了，应该是收费。查找了帖子做了本地搜索，感觉也很不错，主要是不用担心不好使了。&lt;/p&gt;
&lt;h1 id=&quot;local-search&quot;&gt;&lt;a href=&quot;#local-search&quot; class=&quot;headerlink&quot; title=&quot;local search&quot;&gt;&lt;/a&gt;local search&lt;/h1&gt;&lt;h2 id=&quot;安装hexo-generator-searchdb&quot;&gt;&lt;a href=&quot;#安装hexo-generator-searchdb&quot; class=&quot;headerlink&quot; title=&quot;安装hexo-generator-searchdb&quot;&gt;&lt;/a&gt;安装hexo-generator-searchdb&lt;/h2&gt;&lt;p&gt;在站点根目录通过gitbash安装&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install hexo-generator-searchdb --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="hexo" scheme="https://blog.signalfire2017.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>大数据03-01-自动化部署脚本</title>
    <link href="https://blog.signalfire2017.com/2017/11/14/%E5%A4%A7%E6%95%B0%E6%8D%AE03-01-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <id>https://blog.signalfire2017.com/2017/11/14/大数据03-01-自动化部署脚本/</id>
    <published>2017-11-14T14:43:45.000Z</published>
    <updated>2017-11-14T15:06:55.689Z</updated>
    
    <content type="html"><![CDATA[<p>实现ssh免密登录及jdk的自动安装</p>
<h1 id="boot-sh"><a href="#boot-sh" class="headerlink" title="boot.sh"></a>boot.sh</h1><p>免密登录 及复制安装脚本到目标机器<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">SERVERS=<span class="string">"node-3.itcast.cn node-4.itcast.cn"</span></div><div class="line">PASSWORD=123456</div><div class="line">BASE_SERVER=172.16.203.100</div><div class="line"></div><div class="line"><span class="function"><span class="title">auto_ssh_copy_id</span></span>() &#123;</div><div class="line">    expect -c <span class="string">"set timeout -1;</span></div><div class="line"><span class="string">        spawn ssh-copy-id <span class="variable">$1</span>;</span></div><div class="line"><span class="string">        expect &#123;</span></div><div class="line"><span class="string">            *(yes/no)* &#123;send -- yes\r;exp_continue;&#125;</span></div><div class="line"><span class="string">            *assword:* &#123;send -- <span class="variable">$2</span>\r;exp_continue;&#125;</span></div><div class="line"><span class="string">            eof        &#123;exit 0;&#125;</span></div><div class="line"><span class="string">        &#125;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">ssh_copy_id_to_all</span></span>() &#123;</div><div class="line">    <span class="keyword">for</span> SERVER <span class="keyword">in</span> <span class="variable">$SERVERS</span></div><div class="line">    <span class="keyword">do</span></div><div class="line">        auto_ssh_copy_id <span class="variable">$SERVER</span> <span class="variable">$PASSWORD</span></div><div class="line">    <span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">ssh_copy_id_to_all</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> SERVER <span class="keyword">in</span> <span class="variable">$SERVERS</span></div><div class="line"><span class="keyword">do</span></div><div class="line">    scp install.sh root@<span class="variable">$SERVER</span>:/root</div><div class="line">    ssh root@<span class="variable">$SERVER</span> /root/install.sh</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<h1 id="install-everyone-sh"><a href="#install-everyone-sh" class="headerlink" title="install_everyone.sh"></a>install_everyone.sh</h1><p>安装jdk<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">BASE_SERVER=mini4</div><div class="line">yum install -y wget</div><div class="line">wget <span class="variable">$BASE_SERVER</span>/soft/jdk-7u45-linux-x64.tar.gz</div><div class="line">tar -zxvf jdk-7u45-linux-x64.tar.gz -C /usr/<span class="built_in">local</span></div><div class="line">cat &gt;&gt; /etc/profile &lt;&lt; EOF</div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.7.0_45</div><div class="line"><span class="built_in">export</span> PATH=\<span class="variable">$PATH</span>:\<span class="variable">$JAVA_HOME</span>/bin</div><div class="line">EOF</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>expect 模拟人机交互</li>
<li>EOF临时文本输入</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现ssh免密登录及jdk的自动安装&lt;/p&gt;
&lt;h1 id=&quot;boot-sh&quot;&gt;&lt;a href=&quot;#boot-sh&quot; class=&quot;headerlink&quot; title=&quot;boot.sh&quot;&gt;&lt;/a&gt;boot.sh&lt;/h1&gt;&lt;p&gt;免密登录 及复制安装脚本到目标机器&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="linux" scheme="https://blog.signalfire2017.com/tags/linux/"/>
    
      <category term="centos7" scheme="https://blog.signalfire2017.com/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>大数据02-01-1 linux本地yum库</title>
    <link href="https://blog.signalfire2017.com/2017/11/14/%E5%A4%A7%E6%95%B0%E6%8D%AE02-01-1-linux%E6%9C%AC%E5%9C%B0yum%E5%BA%93/"/>
    <id>https://blog.signalfire2017.com/2017/11/14/大数据02-01-1-linux本地yum库/</id>
    <published>2017-11-14T13:58:01.000Z</published>
    <updated>2017-11-14T15:07:55.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地yum仓库的安装配置"><a href="#本地yum仓库的安装配置" class="headerlink" title="本地yum仓库的安装配置"></a>本地yum仓库的安装配置</h1><h2 id="两种方式："><a href="#两种方式：" class="headerlink" title="两种方式："></a>两种方式：</h2><h3 id="每一台机器都配一个本地文件系统上的yum仓库-file-packege-path"><a href="#每一台机器都配一个本地文件系统上的yum仓库-file-packege-path" class="headerlink" title="每一台机器都配一个本地文件系统上的yum仓库 file:///packege/path/"></a>每一台机器都配一个本地文件系统上的yum仓库 file:///packege/path/</h3><h3 id="在局域网内部配置一台节点-server-base-的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http-server-base-pagekege-path"><a href="#在局域网内部配置一台节点-server-base-的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http-server-base-pagekege-path" class="headerlink" title="在局域网内部配置一台节点(server-base)的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http://server-base/pagekege/path/"></a>在局域网内部配置一台节点(server-base)的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过<a href="http://server-base/pagekege/path/" target="_blank" rel="external">http://server-base/pagekege/path/</a></h3><a id="more"></a>
<ul>
<li>制作流程：  </li>
<li>先挑选一台机器mini4，挂载一个系统光盘到本地目录/mnt/cdrom，</li>
<li>然后启动一个httpd服务器，</li>
<li>将/mnt/cdrom 软连接到httpd服务器的/var/www/html目录中 (cd /var/www/html; ln -s /mnt/cdrom ./centos )</li>
<li>然后通过网页访问测试一下：  <a href="http://mini4/centos" target="_blank" rel="external">http://mini4/centos</a>   会看到光盘的目录内容</li>
</ul>
<p>至此：网络版yum私有仓库已经建立完毕<br>剩下就是去各台yum的客户端配置这个http地址到repo配置文件中</p>
<h1 id="无论哪种配置，都需要先将光盘挂在到本地文件目录中"><a href="#无论哪种配置，都需要先将光盘挂在到本地文件目录中" class="headerlink" title="无论哪种配置，都需要先将光盘挂在到本地文件目录中"></a>无论哪种配置，都需要先将光盘挂在到本地文件目录中</h1><blockquote>
<p>mount -t iso9660 /dev/cdrom   /mnt/cdrom</p>
</blockquote>
<p>为了避免每次重启后都要手动mount，可以在/etc/fstab中加入一行挂载配置，即可自动挂载</p>
<pre><code>vi  /etc/fstab
/dev/cdrom              /mnt/cdrom              iso9660 defaults        0 0
</code></pre><h1 id="minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖"><a href="#minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖" class="headerlink" title="minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖"></a>minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖</h1><p>scp命令都没有：yum install -y openssh-clients<br>每台机器上都要安装才行</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;本地yum仓库的安装配置&quot;&gt;&lt;a href=&quot;#本地yum仓库的安装配置&quot; class=&quot;headerlink&quot; title=&quot;本地yum仓库的安装配置&quot;&gt;&lt;/a&gt;本地yum仓库的安装配置&lt;/h1&gt;&lt;h2 id=&quot;两种方式：&quot;&gt;&lt;a href=&quot;#两种方式：&quot; class=&quot;headerlink&quot; title=&quot;两种方式：&quot;&gt;&lt;/a&gt;两种方式：&lt;/h2&gt;&lt;h3 id=&quot;每一台机器都配一个本地文件系统上的yum仓库-file-packege-path&quot;&gt;&lt;a href=&quot;#每一台机器都配一个本地文件系统上的yum仓库-file-packege-path&quot; class=&quot;headerlink&quot; title=&quot;每一台机器都配一个本地文件系统上的yum仓库 file:///packege/path/&quot;&gt;&lt;/a&gt;每一台机器都配一个本地文件系统上的yum仓库 file:///packege/path/&lt;/h3&gt;&lt;h3 id=&quot;在局域网内部配置一台节点-server-base-的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http-server-base-pagekege-path&quot;&gt;&lt;a href=&quot;#在局域网内部配置一台节点-server-base-的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http-server-base-pagekege-path&quot; class=&quot;headerlink&quot; title=&quot;在局域网内部配置一台节点(server-base)的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http://server-base/pagekege/path/&quot;&gt;&lt;/a&gt;在局域网内部配置一台节点(server-base)的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过&lt;a href=&quot;http://server-base/pagekege/path/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://server-base/pagekege/path/&lt;/a&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="linux" scheme="https://blog.signalfire2017.com/tags/linux/"/>
    
      <category term="centos7" scheme="https://blog.signalfire2017.com/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>大数据02-05-shell编程-awk命令</title>
    <link href="https://blog.signalfire2017.com/2017/11/06/%E5%A4%A7%E6%95%B0%E6%8D%AE02-05-shell%E7%BC%96%E7%A8%8B-awk%E5%91%BD%E4%BB%A4/"/>
    <id>https://blog.signalfire2017.com/2017/11/06/大数据02-05-shell编程-awk命令/</id>
    <published>2017-11-06T15:25:05.000Z</published>
    <updated>2017-11-14T15:08:18.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>
<p>awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。</p>
<p>awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。<br><a id="more"></a></p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><blockquote>
<p><code>awk &#39;{pattern + action}&#39; {filenames}</code></p>
</blockquote>
<p>尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</p>
<p>awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。</p>
<p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p>
<h2 id="调用awk"><a href="#调用awk" class="headerlink" title="调用awk"></a>调用awk</h2><p>有三种方式调用awk</p>
<h3 id="1-命令行方式"><a href="#1-命令行方式" class="headerlink" title="1.命令行方式"></a>1.命令行方式</h3><blockquote>
<p>awk [-F  field-separator]  ‘commands’  input-file(s)<br>其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。<br>在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。</p>
</blockquote>
<h3 id="2-shell脚本方式"><a href="#2-shell脚本方式" class="headerlink" title="2.shell脚本方式"></a>2.shell脚本方式</h3><p>将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。<br>相当于shell脚本首行的：#!/bin/sh<br>可以换成：#!/bin/awk</p>
<h3 id="3-将所有的awk命令插入一个单独文件，然后调用："><a href="#3-将所有的awk命令插入一个单独文件，然后调用：" class="headerlink" title="3.将所有的awk命令插入一个单独文件，然后调用："></a>3.将所有的awk命令插入一个单独文件，然后调用：</h3><blockquote>
<p>awk -f awk-script-file input-file(s)<br>其中，-f选项加载awk-script-file中的awk脚本，input-file(s)跟上面的是一样的。</p>
</blockquote>
<p> 本章重点介绍命令行方式。</p>
<h2 id="入门实例"><a href="#入门实例" class="headerlink" title="入门实例"></a>入门实例</h2><p>假设last -n 5的输出如下</p>
<blockquote>
<p>[root@www ~]# last -n 5 &lt;==仅取出前五行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root     pts/1   192.168.1.100  Tue Feb 10 11:21   still logged in</div><div class="line">root     pts/1   192.168.1.100  Tue Feb 10 00:46 - 02:28  (01:41)</div><div class="line">root     pts/1   192.168.1.100  Mon Feb  9 11:41 - 18:30  (06:48)</div><div class="line">dmtsai   pts/1   192.168.1.100  Mon Feb  9 11:41 - 11:41  (00:00)</div><div class="line">root     tty1                   Fri Sep  5 14:09 - 14:10  (00:01)</div></pre></td></tr></table></figure>
<p>如果只是显示最近登录的5个帐号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#last -n 5 | awk  &apos;&#123;print $1&#125;&apos;</div><div class="line">root</div><div class="line">root</div><div class="line">root</div><div class="line">dmtsai</div><div class="line">root</div></pre></td></tr></table></figure>
<p>awk工作流程是这样的：读入有’\n’换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是”空白键” 或 “[tab]键”,所以$1表示登录用户，$3表示登录用户ip,以此类推。</p>
<p>如果只是显示/etc/passwd的账户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#cat /etc/passwd |awk  -F &apos;:&apos;  &apos;&#123;print $1&#125;&apos;  </div><div class="line">root</div><div class="line">daemon</div><div class="line">bin</div><div class="line">sys</div></pre></td></tr></table></figure>
<p>这种是awk+action的示例，每行都会执行action{print $1}。</p>
<blockquote>
<p>-F指定域分隔符为’:’。</p>
</blockquote>
<p>如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#cat /etc/passwd |awk  -F &apos;:&apos;  &apos;&#123;print $1&quot;\t&quot;$7&#125;&apos;</div><div class="line">root    /bin/bash</div><div class="line">daemon  /bin/sh</div><div class="line">bin     /bin/sh</div><div class="line">sys     /bin/sh</div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line">如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加&quot;blue,/bin/nosh&quot;。</div></pre></td></tr></table></figure>
<p>cat /etc/passwd |awk  -F ‘:’  ‘BEGIN {print “name,shell”}  {print $1”,”$7} END {print “blue,/bin/nosh”}’<br>name,shell<br>root,/bin/bash<br>daemon,/bin/sh<br>bin,/bin/sh<br>sys,/bin/sh<br>….<br>blue,/bin/nosh</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">搜索/etc/passwd有root关键字的所有行</div><div class="line"></div><div class="line">&gt; #awk -F: &apos;/root/&apos; /etc/passwd</div><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。</div><div class="line"></div><div class="line">搜索支持正则，例如找root开头的: ```awk -F: &apos;/^root/&apos; /etc/passwd</div></pre></td></tr></table></figure>
<p>搜索/etc/passwd有root关键字的所有行，并显示对应的shell</p>
<blockquote>
<h1 id="awk-F-‘-root-print-7-’-etc-passwd"><a href="#awk-F-‘-root-print-7-’-etc-passwd" class="headerlink" title="awk -F: ‘/root/{print $7}’ /etc/passwd"></a>awk -F: ‘/root/{print $7}’ /etc/passwd</h1><p>/bin/bash<br> 这里指定了action{print $7}</p>
</blockquote>
<h2 id="awk内置变量"><a href="#awk内置变量" class="headerlink" title="awk内置变量"></a>awk内置变量</h2><p>awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。</p>
<pre><code>ARGC               命令行参数个数
ARGV               命令行参数排列
ENVIRON            支持队列中系统环境变量的使用
FILENAME           awk浏览的文件名
FNR                浏览文件的记录数
FS                 设置输入域分隔符，等价于命令行 -F选项
NF                 浏览记录的域的个数
NR                 已读的记录数
OFS                输出域分隔符
ORS                输出记录分隔符
RS                 控制记录分隔符
</code></pre><p> 此外,$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,……以此类推。</p>
<p>统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:</p>
<blockquote>
<p>#awk  -F ‘:’  ‘{print “filename:” FILENAME “,linenumber:” NR “,columns:” NF “,linecontent:”$0}’ /etc/passwd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">filename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash</div><div class="line">filename:/etc/passwd,linenumber:2,columns:7,linecontent:daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class="line">filename:/etc/passwd,linenumber:3,columns:7,linecontent:bin:x:2:2:bin:/bin:/bin/sh</div><div class="line">filename:/etc/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev:/bin/sh</div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line">使用printf替代print,可以让代码更加简洁，易读</div><div class="line"></div><div class="line"> &gt; awk  -F &apos;:&apos;  &apos;&#123;printf(&quot;filename:%s,linenumber:%s,columns:%s,linecontent:%s\n&quot;,FILENAME,NR,NF,$0)&#125;&apos; /etc/passwd</div><div class="line"> </div><div class="line"></div><div class="line">## print和printf</div><div class="line">awk中同时提供了print和printf两种打印输出的函数。</div><div class="line"></div><div class="line">其中print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。</div><div class="line"></div><div class="line">printf函数，其用法和c语言中printf基本相似,可以格式化字符串,输出复杂时，printf更加好用，代码更易懂。</div><div class="line"></div><div class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% </div><div class="line"></div><div class="line">#  awk编程</div><div class="line"> 变量和赋值</div><div class="line"></div><div class="line">除了awk的内置变量，awk还可以自定义变量。</div><div class="line"></div><div class="line">## 下面统计/etc/passwd的账户人数</div></pre></td></tr></table></figure></p>
</blockquote>
<p>awk ‘{count++;print $0;} END{print “user count is “, count}’ /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>……<br>user count is  40</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">count是自定义变量。之前的action&#123;&#125;里都是只有一个print,其实print只是一个语句，而action&#123;&#125;可以有多个语句，以;号隔开。</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:</div></pre></td></tr></table></figure>
<p>awk ‘BEGIN {count=0;print “[start]user count is “, count} {count=count+1;print $0;} END{print “[end]user count is “, count}’ /etc/passwd<br>[start]user count is  0<br>root:x:0:0:root:/root:/bin/bash<br>…<br>[end]user count is  40</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">统计某个文件夹下的文件占用的字节数</div></pre></td></tr></table></figure>
<p>ls -l |awk ‘BEGIN {size=0;} {size=size+$5;} END{print “[end]size is “, size}’<br>[end]size is  8657198</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">如果以M为单位显示:</div></pre></td></tr></table></figure>
<p>ls -l |awk ‘BEGIN {size=0;} {size=size+$5;} END{print “[end]size is “, size/1024/1024,”M”}’<br>[end]size is  8.25889 M</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">注意，统计不包括文件夹的子目录。</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">### 条件语句</div><div class="line"></div><div class="line"> awk中的条件语句是从C语言中借鉴来的，见如下声明方式：</div></pre></td></tr></table></figure>
<p>if (expression) {<br>    statement;<br>    statement;<br>    … …<br>}</p>
<p>if (expression) {<br>    statement;<br>} else {<br>    statement2;<br>}</p>
<p>if (expression) {<br>    statement1;<br>} else if (expression1) {<br>    statement2;<br>} else {<br>    statement3;<br>}</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):</div></pre></td></tr></table></figure>
<p>ls -l |awk ‘BEGIN {size=0;print “[start]size is “, size} {if($5!=4096){size=size+$5;}} END{print “[end]size is “, size/1024/1024,”M”}’<br>[end]size is  8.22339 M</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 循环语句</div><div class="line"></div><div class="line">awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">### 数组</div><div class="line"></div><div class="line">  因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">显示/etc/passwd的账户</div></pre></td></tr></table></figure>
<p>awk -F ‘:’ ‘BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i &lt; NR; i++) print i, name[i]}’ /etc/passwd<br>0 root<br>1 daemon<br>2 bin<br>3 sys<br>4 sync<br>5 games<br>……</p>
<p>```<br>这里使用for循环遍历数组</p>
<p>awk编程的内容极多，这里只罗列简单常用的用法，更多请参考 <a href="http://www.gnu.org/software/gawk/manual/gawk.html" target="_blank" rel="external">http://www.gnu.org/software/gawk/manual/gawk.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。&lt;/p&gt;
&lt;p&gt;awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。&lt;/p&gt;
&lt;p&gt;awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="linux" scheme="https://blog.signalfire2017.com/tags/linux/"/>
    
      <category term="centos7" scheme="https://blog.signalfire2017.com/tags/centos7/"/>
    
      <category term="linux命令" scheme="https://blog.signalfire2017.com/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>大数据02-04-shell编程-sed命令</title>
    <link href="https://blog.signalfire2017.com/2017/11/06/%E5%A4%A7%E6%95%B0%E6%8D%AE02-04-shell%E7%BC%96%E7%A8%8B-sed%E5%91%BD%E4%BB%A4/"/>
    <id>https://blog.signalfire2017.com/2017/11/06/大数据02-04-shell编程-sed命令/</id>
    <published>2017-11-06T15:02:56.000Z</published>
    <updated>2017-11-06T16:13:52.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sed简介"><a href="#Sed简介" class="headerlink" title="Sed简介"></a>Sed简介</h1><p>sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。以下介绍的是Gnu版本的Sed 3.02。做备份,以后速查用.<br><a id="more"></a></p>
<h2 id="定址"><a href="#定址" class="headerlink" title="定址"></a>定址</h2><p>可以通过定址来定位你所希望编辑的行，该地址用数字构成，用逗号分隔的两个行数表示以这两行为起止的行的范围（包括行数表示的那两行）。如1，3表示1，2，3行，美元符号($)表示最后一行。范围可以通过数据，正则表达式或者二者结合的方式确定 。</p>
<h2 id="Sed命令"><a href="#Sed命令" class="headerlink" title="Sed命令"></a>Sed命令</h2><p>调用sed命令有两种形式：</p>
<ul>
<li>sed [options] ‘command’ file(s)</li>
<li>sed [options] -f scriptfile file(s)<ul>
<li>a<br>在当前行后面加入一行文本。</li>
<li>b lable<br>分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。</li>
<li>c<br>用新的文本改变本行的文本。</li>
<li>d<br>从模板块（Pattern space）位置删除行。</li>
<li>D<br>删除模板块的第一行。</li>
<li>i<br>在当前行上面插入文本。</li>
<li>h<br>拷贝模板块的内容到内存中的缓冲区。</li>
<li>H<br>追加模板块的内容到内存中的缓冲区</li>
<li>g<br>获得内存缓冲区的内容，并替代当前模板块中的文本。</li>
<li>G<br>获得内存缓冲区的内容，并追加到当前模板块文本的后面。</li>
<li>l<br>列表不能打印字符的清单。</li>
<li>n<br>读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。</li>
<li>N<br>追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。</li>
<li>p<br>打印模板块的行。</li>
<li>P（大写）<br>打印模板块的第一行。</li>
<li>q<br>退出Sed。</li>
<li>r file<br>从file中读行。</li>
<li>t label<br>if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</li>
<li>T label<br>错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</li>
<li>w file<br>写并追加模板块到file末尾。</li>
<li>W file<br>写并追加模板块的第一行到file末尾。</li>
<li>!<br>表示后面的命令对所有没有被选定的行发生作用。</li>
<li>s/re/string<br>用string替换正则表达式re。</li>
<li>=<br>打印当前行号码。</li>
<li>#把注释扩展到下一个换行符以前。<h3 id="以下的是替换标记"><a href="#以下的是替换标记" class="headerlink" title="以下的是替换标记"></a>以下的是替换标记</h3></li>
</ul>
</li>
<li>g表示行内全面替换。</li>
<li>p表示打印行。</li>
<li>w表示把行写入一个文件。</li>
<li>x表示互换模板块中的文本和缓冲区中的文本。</li>
<li>y表示把一个字符翻译为另外的字符（但是不用于正则表达式）</li>
</ul>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><p><code>-e command, --expression=command</code><br>允许多台编辑。</p>
<ul>
<li>-h, –help<br>打印帮助，并显示bug列表的地址。</li>
<li>-n, –quiet, –silent<br>取消默认输出。</li>
<li>-f, –filer=script-file<br>引导sed脚本文件名。</li>
<li>-V, –version<br>打印版本和版权信息。</li>
</ul>
<h2 id="元字符集"><a href="#元字符集" class="headerlink" title="元字符集^"></a>元字符集^</h2><p>锚定行的开始 如：/^sed/匹配所有以sed开头的行。<br>$</p>
<ul>
<li>锚定行的结束 如：/sed$/匹配所有以sed结尾的行。<br>.</li>
<li>匹配一个非换行符的字符 如：/s.d/匹配s后接一个任意字符，然后是d。<br>*</li>
<li>匹配零或多个字符 如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。<br>[]</li>
<li>匹配一个指定范围内的字符，如/[Ss]ed/匹配sed和Sed。<br>[^]</li>
<li>匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。<br>(..)</li>
<li>保存匹配的字符，如s/(love)able/\1rs，loveable被替换成lovers。<br>&amp;</li>
<li>保存搜索字符用来替换其他字符，如s/love/<strong>&amp;</strong>/，love这成<strong>love</strong>。<br>\&lt;</li>
<li>锚定单词的开始，如:/\<love 匹配包含以love开头的单词的行。="" \=""></love></li>
<li>锚定单词的结束，如/love>/匹配包含以love结尾的单词的行。<br>x{m}</li>
<li>重复字符x，m次，如：/o{5}/匹配包含5个o的行。<br>x{m,}</li>
<li>重复字符x,至少m次，如：/o{5,}/匹配至少有5个o的行。<br>x{m,n}</li>
<li>重复字符x，至少m次，不多于n次，如：/o{5,10}/匹配5–10个o的行。<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="删除：d命令"><a href="#删除：d命令" class="headerlink" title="删除：d命令"></a>删除：d命令</h3></li>
<li>$ sed ‘2d’ example—–删除example文件的第二行。</li>
<li>$ sed ‘2,$d’ example—–删除example文件的第二行到末尾所有行。</li>
<li>$ sed ‘$d’ example—–删除example文件的最后一行。</li>
<li>$ sed ‘/test/‘d example—–删除example文件所有包含test的行。<h3 id="替换：s命令"><a href="#替换：s命令" class="headerlink" title="替换：s命令"></a>替换：s命令</h3></li>
<li>$ sed ‘s/test/mytest/g’ example—–在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。</li>
<li>$ sed -n ‘s/^test/mytest/p’ example—–(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。</li>
<li>$ sed ‘s/^192.168.0.1/&amp;localhost/‘ example—–&amp;符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加 localhost，变成192.168.0.1localhost。</li>
<li>$ sed -n ‘s/(love)able/\1rs/p’ example—–love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。</li>
<li>$ sed ‘s#10#100#g’ example—–不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。<br>选定行的范围：逗号</li>
<li>$ sed -n ‘/test/,/check/p’ example—–所有在模板test和check所确定的范围内的行都被打印。</li>
<li>$ sed -n ‘5,/^test/p’ example—–打印从第五行开始到第一个包含以test开始的行之间的所有行。</li>
<li>$ sed ‘/test/,/check/s/$/sed test/‘ example—–对于模板test和west之间的行，每行的末尾用字符串sed test替换。<h3 id="多点编辑：e命令"><a href="#多点编辑：e命令" class="headerlink" title="多点编辑：e命令"></a>多点编辑：e命令</h3></li>
<li>$ sed -e ‘1,5d’ -e ‘s/test/check/‘ example—–(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执 行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</li>
<li>$ sed –expression=’s/test/check/‘ –expression=’/love/d’ example—–一个比-e更好的命令是–expression。它能给sed表达式赋值。<h3 id="从文件读入：r命令"><a href="#从文件读入：r命令" class="headerlink" title="从文件读入：r命令"></a>从文件读入：r命令</h3></li>
<li>$ sed ‘/test/r file’ example—–file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。<h3 id="写入文件：w命令"><a href="#写入文件：w命令" class="headerlink" title="写入文件：w命令"></a>写入文件：w命令</h3></li>
<li><p>$ sed -n ‘/test/w file’ example—–在example中所有包含test的行都被写入file里。</p>
<h3 id="追加命令：a命令"><a href="#追加命令：a命令" class="headerlink" title="追加命令：a命令"></a>追加命令：a命令</h3></li>
<li><p>$ sed ‘/^test/a\—&gt;this is a example’ example    ‘—–&gt;this is a example’被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。</p>
<h3 id="插入：i命令"><a href="#插入：i命令" class="headerlink" title="插入：i命令"></a>插入：i命令</h3></li>
<li>$ sed ‘/test/i\<br>new line<br>————————-‘ example<br>如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。<br>下一个：n命令</li>
<li><p>$ sed ‘/test/{ n; s/aa/bb/; }’ example—–如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。<br>变形：y命令</p>
</li>
<li><p>$ sed ‘1,10y/abcde/ABCDE/‘ example—–把1–10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。<br>退出：q命令</p>
</li>
<li>$ sed ‘10q’ example—–打印完第10行后，退出sed。<br>保持和获取：h命令和G命令</li>
<li>$ sed -e ‘/test/h’ -e ‘$G example—–在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保 持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中 的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。<br>保持和互换：h命令和x命令</li>
<li>$ sed -e ‘/test/h’ -e ‘/check/x’ example —–互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3>Sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Sed简介&quot;&gt;&lt;a href=&quot;#Sed简介&quot; class=&quot;headerlink&quot; title=&quot;Sed简介&quot;&gt;&lt;/a&gt;Sed简介&lt;/h1&gt;&lt;p&gt;sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。以下介绍的是Gnu版本的Sed 3.02。做备份,以后速查用.&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="linux" scheme="https://blog.signalfire2017.com/tags/linux/"/>
    
      <category term="centos7" scheme="https://blog.signalfire2017.com/tags/centos7/"/>
    
      <category term="linux命令" scheme="https://blog.signalfire2017.com/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>大数据02-03 shell编程语法讲解</title>
    <link href="https://blog.signalfire2017.com/2017/11/06/%E5%A4%A7%E6%95%B0%E6%8D%AE02-03%20shell%E7%BC%96%E7%A8%8B%E8%AF%AD%E6%B3%95%E8%AE%B2%E8%A7%A3/"/>
    <id>https://blog.signalfire2017.com/2017/11/06/大数据02-03 shell编程语法讲解/</id>
    <published>2017-11-06T15:02:36.000Z</published>
    <updated>2017-12-05T16:01:22.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><ul>
<li>$HOME</li>
<li>$PWD</li>
<li>$SHELL</li>
<li>$USER<br>显示当前shell中所有变量</li>
</ul>
<p>set</p>
<a id="more"></a>
<h2 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h2><p>定义变量</p>
<blockquote>
<p>STR=”hello world”</p>
<p>A=9</p>
<p>unset A 撤销变量 A</p>
<p>readonly B=2 声明静态的变量 B=2 ，不能 unset</p>
<p>export 变量名 可把变量提升为全局环境变量，可供其他shell程序使用</p>
</blockquote>
<p>将命令的返回值赋给变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A=`ls -la` 反引号，运行里面的命令，并把结果返回给变量A</div><div class="line">A=$(ls -la) 等价于反引号</div></pre></td></tr></table></figure>
<h2 id="shell中的特殊变量"><a href="#shell中的特殊变量" class="headerlink" title="shell中的特殊变量"></a>shell中的特殊变量</h2><ul>
<li>$? 表示上一个命令退出的状态  true 0 false 1 错误127</li>
<li>$$ 表示当前进程编号</li>
<li>$0 表示当前脚本名称</li>
<li>$n 表示n位置的输入参数（n代表数字，n&gt;=1）</li>
<li>$#     表示参数的个数，常用于循环</li>
<li>$*和$@ 都表示参数列表 <h3 id="与-区别"><a href="#与-区别" class="headerlink" title="$*与$@区别"></a>$*与$@区别</h3></li>
<li>$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号” “包含时，都以$1  $2  … $n 的形式输出所有参数  </li>
<li>当它们被双引号” “包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><blockquote>
<p>格式 :expr m + n 或$((m+n)) 注意expr运算符间要有空格</p>
</blockquote>
<p>例如计算（2 ＋3 ）×4 的值<br>1 .分步计算    S=<code>expr 2 + 3</code>    expr $S * 4<br>2.一步完成计算<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">expr `expr 2 + 3 ` \* 4</div><div class="line"><span class="built_in">echo</span> `expr \`expr 2 + 3\` \* 4`</div><div class="line">或</div><div class="line">$(((2+3)*4))</div></pre></td></tr></table></figure></p>
<h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><h2 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> N <span class="keyword">in</span> 1 2 3</div><div class="line"><span class="keyword">do</span></div><div class="line">	<span class="built_in">echo</span> <span class="variable">$N</span></div><div class="line"><span class="keyword">done</span></div><div class="line">或</div><div class="line"><span class="keyword">for</span> N <span class="keyword">in</span> 1 2 3; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$N</span>; <span class="keyword">done</span></div><div class="line">或</div><div class="line"><span class="keyword">for</span> N <span class="keyword">in</span> &#123;1..3&#125;; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$N</span>; <span class="keyword">done</span></div></pre></td></tr></table></figure>
<h2 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ((i = 0; i &lt;= 5; i++))</div><div class="line"><span class="keyword">do</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"welcome <span class="variable">$i</span> times"</span></div><div class="line"><span class="keyword">done</span></div><div class="line">或</div><div class="line"><span class="keyword">for</span> ((i = 0; i &lt;= 5; i++)); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"welcome <span class="variable">$i</span> times"</span>; <span class="keyword">done</span></div></pre></td></tr></table></figure>
<h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> expression</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">command</span></div><div class="line">…</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">i=1</div><div class="line"><span class="keyword">while</span> ((i&lt;=3))</div><div class="line"><span class="keyword">do</span></div><div class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></div><div class="line">  <span class="built_in">let</span> i++</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<h1 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h1><p>格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></div><div class="line">start)</div><div class="line">	<span class="built_in">echo</span> <span class="string">"starting"</span></div><div class="line">	;;</div><div class="line">stop)</div><div class="line">	<span class="built_in">echo</span> <span class="string">"stoping"</span></div><div class="line">	;;</div><div class="line">*)</div><div class="line">	<span class="built_in">echo</span> <span class="string">"Usage: &#123;start|stop&#125; “</span></div><div class="line"><span class="string">esac</span></div></pre></td></tr></table></figure></p>
<h1 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h1><p>read -p(提示语句)-n(字符个数) -t(等待时间)<br>    read -p “please input your name: “ NAME</p>
<p>使用示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[vagrant@mysql1 ~]$ read -p &quot;please enter a number:&quot; numb</div><div class="line">please enter a number:1</div><div class="line">[vagrant@mysql1 ~]$ echo $numb</div><div class="line">1</div><div class="line">[vagrant@mysql1 ~]$</div></pre></td></tr></table></figure></p>
<h1 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h1><p>语法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> condition </div><div class="line"><span class="keyword">then</span> </div><div class="line">    statements</div><div class="line">[<span class="keyword">elif</span> condition </div><div class="line">    <span class="keyword">then</span> statements. ..] </div><div class="line">[<span class="keyword">else</span> </div><div class="line">    statements ] </div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p>
<h1 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h1><p>[ condition ] <strong>(注意condition前后要有空格)</strong></p>
<p>#非空返回true，可使用$?验证（0为true，&gt;1为false）<br>[ test ]</p>
<p>#空返回false<br>[  ]</p>
<blockquote>
<p>[ condition ] &amp;&amp; echo OK || echo notok</p>
</blockquote>
<p>条件满足，执行后面的语句 不满足执行 || 后面的语句</p>
<h1 id="常用判断条件"><a href="#常用判断条件" class="headerlink" title="常用判断条件"></a>常用判断条件</h1><ul>
<li>= 字符串比较</li>
<li>-lt 小于</li>
<li>-le 小于等于</li>
<li>-eq 等于</li>
<li>-gt 大于</li>
<li>-ge 大于等于</li>
<li><p>-ne 不等于</p>
</li>
<li><p>-r 有读的权限</p>
</li>
<li>-w 有写的权限</li>
<li>-x 有执行的权限</li>
<li><strong>-f 文件存在并且是一个常规的文件</strong></li>
<li>-s 文件存在且不为空</li>
<li>-d 文件存在并是一个目录</li>
<li>-b文件存在并且是一个块设备</li>
<li>-L 文件存在并且是一个链接</li>
</ul>
<h1 id="Shell自定义函数"><a href="#Shell自定义函数" class="headerlink" title="Shell自定义函数"></a>Shell自定义函数</h1><p>语法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> [ <span class="keyword">function</span> ] funname [()]</div><div class="line">&#123;</div><div class="line">    action;</div><div class="line">    [<span class="built_in">return</span> int;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>三种声明方式:</p>
<ul>
<li>function start()  </li>
<li>function start </li>
<li>start()</li>
</ul>
<p>注意</p>
<ol>
<li>必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先预编译</li>
<li>函数返回值，只能通过$? 系统变量获得，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</li>
</ol>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">fSum 3 2;</div><div class="line"><span class="keyword">function</span> fSum()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">echo</span> <span class="variable">$1</span>,<span class="variable">$2</span>;</div><div class="line">    <span class="built_in">return</span> $((<span class="variable">$1</span>+<span class="variable">$2</span>));</div><div class="line">&#125;</div><div class="line">fSum 5 7;</div><div class="line">total=$?;</div><div class="line"><span class="built_in">echo</span> <span class="variable">$total</span>,$?;</div></pre></td></tr></table></figure>
<p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[vagrant@mysql1 ~]$ sh test </div><div class="line">test: line 2: fSum: command not found</div><div class="line">5,7</div><div class="line">12,0</div></pre></td></tr></table></figure></p>
<h1 id="脚本调试"><a href="#脚本调试" class="headerlink" title="脚本调试"></a>脚本调试</h1><ul>
<li>sh -vx helloWorld.sh</li>
<li>或者在脚本中增加set -x</li>
</ul>
<h1 id="cut命令"><a href="#cut命令" class="headerlink" title="cut命令"></a>cut命令</h1><p>cut命令可以从一个文本文件或者文本流中提取文本列。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cut -d&apos;分隔字符&apos; -f fields &lt;==用于有特定分隔字符</div><div class="line">cut -c 字符区间            &lt;==用于排列整齐的信息</div></pre></td></tr></table></figure>
<ul>
<li>-d  ：后面接分隔字符。与 -f 一起使用；</li>
<li>-f  ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思；</li>
<li>-c  ：以字符 (characters) 的单位取出固定字符区间；</li>
</ul>
<h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><h3 id="PATH-变量如下"><a href="#PATH-变量如下" class="headerlink" title="PATH 变量如下"></a>PATH 变量如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@www ~]# echo $PATH</div><div class="line">/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games</div><div class="line"># 1 | 2       | 3   | 4       | 5            | 6            | 7</div></pre></td></tr></table></figure>
<h3 id="将-PATH-变量取出，我要找出第五个路径。"><a href="#将-PATH-变量取出，我要找出第五个路径。" class="headerlink" title="将 PATH 变量取出，我要找出第五个路径。"></a>将 PATH 变量取出，我要找出第五个路径。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#echo $PATH | cut -d &apos;:&apos; -f 5</div><div class="line">/usr/local/bin</div></pre></td></tr></table></figure>
<h3 id="将-PATH-变量取出，我要找出第三和第五个路径。"><a href="#将-PATH-变量取出，我要找出第三和第五个路径。" class="headerlink" title="将 PATH 变量取出，我要找出第三和第五个路径。"></a>将 PATH 变量取出，我要找出第三和第五个路径。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#echo $PATH | cut -d &apos;:&apos; -f 3,5</div><div class="line">/sbin:/usr/local/bin</div></pre></td></tr></table></figure>
<h3 id="将-PATH-变量取出，我要找出第三到最后一个路径。"><a href="#将-PATH-变量取出，我要找出第三到最后一个路径。" class="headerlink" title="将 PATH 变量取出，我要找出第三到最后一个路径。"></a>将 PATH 变量取出，我要找出第三到最后一个路径。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo $PATH | cut -d &apos;:&apos; -f 3-</div><div class="line">/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games</div></pre></td></tr></table></figure>
<h3 id="将-PATH-变量取出，我要找出第一到第三个路径。"><a href="#将-PATH-变量取出，我要找出第一到第三个路径。" class="headerlink" title="将 PATH 变量取出，我要找出第一到第三个路径。"></a>将 PATH 变量取出，我要找出第一到第三个路径。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#echo $PATH | cut -d &apos;:&apos; -f 1-3</div><div class="line">/bin:/usr/bin:/sbin:</div></pre></td></tr></table></figure>
<h3 id="将-PATH-变量取出，我要找出第一到第三，还有第五个路径。"><a href="#将-PATH-变量取出，我要找出第一到第三，还有第五个路径。" class="headerlink" title="将 PATH 变量取出，我要找出第一到第三，还有第五个路径。"></a>将 PATH 变量取出，我要找出第一到第三，还有第五个路径。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo $PATH | cut -d &apos;:&apos; -f 1-3,5</div><div class="line">/bin:/usr/bin:/sbin:/usr/local/bin</div></pre></td></tr></table></figure>
<h2 id="实用例子-只显示-etc-passwd的用户和shell"><a href="#实用例子-只显示-etc-passwd的用户和shell" class="headerlink" title="实用例子:只显示/etc/passwd的用户和shell"></a>实用例子:只显示/etc/passwd的用户和shell</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#cat /etc/passwd | cut -d &apos;:&apos; -f 1,7 </div><div class="line">root:/bin/bash</div><div class="line">daemon:/bin/sh</div><div class="line">bin:/bin/sh</div></pre></td></tr></table></figure>
<h1 id="sort命令"><a href="#sort命令" class="headerlink" title="sort命令"></a>sort命令</h1><p>sort 命令对 File 参数指定的文件中的行排序，并将结果写到标准输出。如果 File 参数指定多个文件，那么 sort 命令将这些文件连接起来，并当作一个文件进行排序。</p>
<h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p><code>[root@www ~]# sort [-fbMnrtuk] [file or stdin]</code><br>选项与参数：</p>
<ul>
<li>-f  ：忽略大小写的差异，例如 A 与 a 视为编码相同；</li>
<li>-b  ：忽略最前面的空格符部分；</li>
<li>-M  ：以月份的名字来排序，例如 JAN, DEC 等等的排序方法；</li>
<li>-n  ：使用『纯数字』进行排序(默认是以文字型态来排序的)；</li>
<li>-r  ：反向排序；</li>
<li>-u  ：就是 uniq ，相同的数据中，仅出现一行代表；</li>
<li>-t  ：分隔符，默认是用 [tab] 键来分隔；</li>
<li>-k  ：以那个区间 (field) 来进行排序的意思</li>
</ul>
<h2 id="对-etc-passwd-的账号进行排序"><a href="#对-etc-passwd-的账号进行排序" class="headerlink" title="对/etc/passwd 的账号进行排序"></a>对/etc/passwd 的账号进行排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@www ~]<span class="comment"># cat /etc/passwd | sort</span></div><div class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</div><div class="line">apache:x:48:48:Apache:/var/www:/sbin/nologin</div><div class="line">bin:x:1:1:bin:/bin:/sbin/nologin</div><div class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</div></pre></td></tr></table></figure>
<p>sort 是默认以第一个数据来排序，而且默认是以字符串形式来排序,所以由字母 a 开始升序排序。</p>
<h2 id="etc-passwd-内容是以-来分隔的，我想以第三栏来排序，该如何"><a href="#etc-passwd-内容是以-来分隔的，我想以第三栏来排序，该如何" class="headerlink" title="/etc/passwd 内容是以 : 来分隔的，我想以第三栏来排序，该如何"></a>/etc/passwd 内容是以 : 来分隔的，我想以第三栏来排序，该如何</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@www ~]# cat /etc/passwd | sort -t &apos;:&apos; -k 3</div><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">bin:x:1:1:bin:/bin:/sbin/nologin</div><div class="line">games:x:12:100:games:/usr/games:/sbin/nologin</div></pre></td></tr></table></figure>
<h2 id="默认是以字符串来排序的，如果想要使用数字排序："><a href="#默认是以字符串来排序的，如果想要使用数字排序：" class="headerlink" title="默认是以字符串来排序的，如果想要使用数字排序："></a>默认是以字符串来排序的，如果想要使用数字排序：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd | sort -t &apos;:&apos; -k 3n</div><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class="line">bin:x:2:2:bin:/bin:/bin/sh</div></pre></td></tr></table></figure>
<h2 id="默认是升序排序，如果要倒序排序，如下"><a href="#默认是升序排序，如果要倒序排序，如下" class="headerlink" title="默认是升序排序，如果要倒序排序，如下"></a>默认是升序排序，如果要倒序排序，如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd | sort -t &apos;:&apos; -k 3nr</div><div class="line">nobody:x:65534:65534:nobody:/nonexistent:/bin/sh</div><div class="line">ntp:x:106:113::/home/ntp:/bin/false</div><div class="line">messagebus:x:105:109::/var/run/dbus:/bin/false</div><div class="line">sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin</div></pre></td></tr></table></figure>
<h2 id="如果要对-etc-passwd-先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。"><a href="#如果要对-etc-passwd-先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。" class="headerlink" title="如果要对/etc/passwd,先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。"></a>如果要对/etc/passwd,先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd |  sort -t&apos;:&apos; -k 6.2,6.4 -k 1r      </div><div class="line">sync:x:4:65534:sync:/bin:/bin/sync</div><div class="line">proxy:x:13:13:proxy:/bin:/bin/sh</div><div class="line">bin:x:2:2:bin:/bin:/bin/sh</div><div class="line">sys:x:3:3:sys:/dev:/bin/sh</div></pre></td></tr></table></figure>
<h2 id="查看-etc-passwd有多少个shell-对-etc-passwd的第七个域进行排序，然后去重"><a href="#查看-etc-passwd有多少个shell-对-etc-passwd的第七个域进行排序，然后去重" class="headerlink" title="查看/etc/passwd有多少个shell:对/etc/passwd的第七个域进行排序，然后去重:"></a>查看/etc/passwd有多少个shell:对/etc/passwd的第七个域进行排序，然后去重:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd |  sort -t&apos;:&apos; -k 7 -u</div><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">syslog:x:101:102::/home/syslog:/bin/false</div><div class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class="line">sync:x:4:65534:sync:/bin:/bin/sync</div><div class="line">sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin</div></pre></td></tr></table></figure>
<h1 id="uniq去重命令"><a href="#uniq去重命令" class="headerlink" title="uniq去重命令"></a>uniq去重命令</h1><p> uniq命令可以去除排序过的文件中的重复行，因此uniq经常和sort合用。也就是说，为了使uniq起作用，所有的重复行必须是相邻的。</p>
<h2 id="uniq语法"><a href="#uniq语法" class="headerlink" title="uniq语法"></a>uniq语法</h2><p><code>[root@www ~]# uniq [-icu]</code><br>选项与参数：</p>
<ul>
<li>-i   ：忽略大小写字符的不同；</li>
<li>-c  ：进行计数</li>
<li>-u  ：只显示唯一的行</li>
</ul>
<p>testfile的内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cat testfile</div><div class="line">hello</div><div class="line">world</div><div class="line">friend</div><div class="line">hello</div><div class="line">world</div><div class="line">hello</div></pre></td></tr></table></figure></p>
<p>直接删除未经排序的文件，将会发现没有任何行被删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#uniq testfile  </div><div class="line">hello</div><div class="line">world</div><div class="line">friend</div><div class="line">hello</div><div class="line">world</div><div class="line">hello</div></pre></td></tr></table></figure></p>
<p>排序文件，默认是去重<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#cat testfile | sort |uniq</div><div class="line">friend</div><div class="line">hello</div><div class="line">world</div></pre></td></tr></table></figure></p>
<p>排序之后删除了重复行，同时在行首位置输出该行重复的次数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#sort testfile | uniq -c</div><div class="line">1 friend</div><div class="line">3 hello</div><div class="line">2 world</div></pre></td></tr></table></figure></p>
<p>仅显示存在重复的行，并在行首显示该行重复的次数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#sort testfile | uniq -dc</div><div class="line">3 hello</div><div class="line">2 world</div></pre></td></tr></table></figure></p>
<p>仅显示不重复的行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sort testfile | uniq -u</div><div class="line">friend</div></pre></td></tr></table></figure></p>
<h1 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h1><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p><code>[root@www ~]# wc [-lwm]</code><br>选项与参数：</p>
<ul>
<li>-l  ：仅列出行；</li>
<li>-w  ：仅列出多少字(英文单字)；</li>
<li>-m  ：多少字符；<h2 id="默认使用wc统计-etc-passwd"><a href="#默认使用wc统计-etc-passwd" class="headerlink" title="默认使用wc统计/etc/passwd"></a>默认使用wc统计/etc/passwd</h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#wc /etc/passwd</div><div class="line">40   45 1719 /etc/passwd</div><div class="line">40是行数，45是单词数，1719是字节数</div></pre></td></tr></table></figure>
<p>wc的命令比较简单使用，每个参数使用如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#wc -l /etc/passwd   #统计行数，在对记录数时，很常用</div><div class="line">40 /etc/passwd       #表示系统有40个账户</div><div class="line"></div><div class="line">#wc -w /etc/passwd  #统计单词出现次数</div><div class="line">45 /etc/passwd</div><div class="line"></div><div class="line">#wc -m /etc/passwd  #统计文件的字符数</div><div class="line">1719</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h1&gt;&lt;h2 id=&quot;系统变量&quot;&gt;&lt;a href=&quot;#系统变量&quot; class=&quot;headerlink&quot; title=&quot;系统变量&quot;&gt;&lt;/a&gt;系统变量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;$HOME&lt;/li&gt;
&lt;li&gt;$PWD&lt;/li&gt;
&lt;li&gt;$SHELL&lt;/li&gt;
&lt;li&gt;$USER&lt;br&gt;显示当前shell中所有变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;set&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="大数据" scheme="https://blog.signalfire2017.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="linux" scheme="https://blog.signalfire2017.com/tags/linux/"/>
    
      <category term="centos7" scheme="https://blog.signalfire2017.com/tags/centos7/"/>
    
      <category term="linux命令" scheme="https://blog.signalfire2017.com/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记-修改语言</title>
    <link href="https://blog.signalfire2017.com/2017/11/05/linux%E7%AC%94%E8%AE%B0-%E4%BF%AE%E6%94%B9%E8%AF%AD%E8%A8%80/"/>
    <id>https://blog.signalfire2017.com/2017/11/05/linux笔记-修改语言/</id>
    <published>2017-11-05T15:39:47.000Z</published>
    <updated>2017-11-14T15:11:26.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>centos7</p>
<h1 id="查看系统是否有安装中文语言包-（列出所有可用的公共语言环境的名称，包含有zh-CN）"><a href="#查看系统是否有安装中文语言包-（列出所有可用的公共语言环境的名称，包含有zh-CN）" class="headerlink" title="查看系统是否有安装中文语言包 （列出所有可用的公共语言环境的名称，包含有zh_CN）"></a>查看系统是否有安装中文语言包 （列出所有可用的公共语言环境的名称，包含有zh_CN）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[vagrant@mysql1 ~]$ locale -a |grep &quot;zh_CN&quot;</div><div class="line">zh_CN</div><div class="line">zh_CN.gb18030</div><div class="line">zh_CN.gb2312</div><div class="line">zh_CN.gbk</div><div class="line">zh_CN.utf8</div></pre></td></tr></table></figure>
<p>若发现以上几项，说明系统已安装中文语言包，无需再安装<br><a id="more"></a></p>
<h1 id="安装中文包"><a href="#安装中文包" class="headerlink" title="安装中文包"></a>安装中文包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@iZj6cbstl2n6r280a27eppZ tmp]# yum groupinstall &quot;fonts&quot;</div></pre></td></tr></table></figure>
<h1 id="修改i18n国际化和locale-conf本土化配置文件"><a href="#修改i18n国际化和locale-conf本土化配置文件" class="headerlink" title="修改i18n国际化和locale.conf本土化配置文件"></a>修改i18n国际化和locale.conf本土化配置文件</h1><h2 id="先查看系统语言环境"><a href="#先查看系统语言环境" class="headerlink" title="先查看系统语言环境"></a>先查看系统语言环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[vagrant@mysql1 ~]$ locale</div><div class="line">LANG=en_US.UTF-8</div><div class="line">LC_CTYPE=&quot;en_US.UTF-8&quot;</div><div class="line">LC_NUMERIC=&quot;en_US.UTF-8&quot;</div><div class="line">LC_TIME=&quot;en_US.UTF-8&quot;</div><div class="line">LC_COLLATE=&quot;en_US.UTF-8&quot;</div><div class="line">LC_MONETARY=&quot;en_US.UTF-8&quot;</div><div class="line">LC_MESSAGES=&quot;en_US.UTF-8&quot;</div><div class="line">LC_PAPER=&quot;en_US.UTF-8&quot;</div><div class="line">LC_NAME=&quot;en_US.UTF-8&quot;</div><div class="line">LC_ADDRESS=&quot;en_US.UTF-8&quot;</div><div class="line">LC_TELEPHONE=&quot;en_US.UTF-8&quot;</div><div class="line">LC_MEASUREMENT=&quot;en_US.UTF-8&quot;</div><div class="line">LC_IDENTIFICATION=&quot;en_US.UTF-8&quot;</div><div class="line">LC_ALL=</div></pre></td></tr></table></figure>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/locale.conf </div><div class="line">或</div><div class="line">vi /etc/sysconfig/i18n (有些帖子上说修改这个,但是我的linux没有这个文件)</div></pre></td></tr></table></figure>
<p>虽然安装了中文语言包但本机的语言环境并不是中文，先修改i18n配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@iZj6cbstl2n6r280a27eppZ sysconfig]# vim /etc/sysconfig/i18n</div><div class="line"></div><div class="line">LANG=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_ALL=&quot;zh_CN.UTF-8&quot;</div><div class="line"></div><div class="line">[root@iZj6cbstl2n6r280a27eppZ sysconfig]# source /etc/sysconfig/i18n</div><div class="line"></div><div class="line">[root@iZj6cbstl2n6r280a27eppZ sysconfig]# vim /etc/locale.conf</div><div class="line"></div><div class="line">LANG=&quot;zh_CN.UTF-8&quot;</div><div class="line"></div><div class="line"> [root@iZj6cbstl2n6r280a27eppZ sysconfig]# source   /etc/locale.conf</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h1&gt;&lt;p&gt;centos7&lt;/p&gt;
&lt;h1 id=&quot;查看系统是否有安装中文语言包-（列出所有可用的公共语言环境的名称，包含有zh-CN）&quot;&gt;&lt;a href=&quot;#查看系统是否有安装中文语言包-（列出所有可用的公共语言环境的名称，包含有zh-CN）&quot; class=&quot;headerlink&quot; title=&quot;查看系统是否有安装中文语言包 （列出所有可用的公共语言环境的名称，包含有zh_CN）&quot;&gt;&lt;/a&gt;查看系统是否有安装中文语言包 （列出所有可用的公共语言环境的名称，包含有zh_CN）&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[vagrant@mysql1 ~]$ locale -a |grep &amp;quot;zh_CN&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zh_CN&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zh_CN.gb18030&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zh_CN.gb2312&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zh_CN.gbk&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zh_CN.utf8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若发现以上几项，说明系统已安装中文语言包，无需再安装&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="https://blog.signalfire2017.com/tags/linux/"/>
    
      <category term="centos7" scheme="https://blog.signalfire2017.com/tags/centos7/"/>
    
  </entry>
  
</feed>
