<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>名字待定</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.signalfire2017.com/"/>
  <updated>2018-02-11T08:26:36.512Z</updated>
  <id>https://blog.signalfire2017.com/</id>
  
  <author>
    <name>signalFire</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里java规约-名词.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/11/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6-%E5%90%8D%E8%AF%8D/"/>
    <id>https://blog.signalfire2017.com/2018/02/11/阿里java规约/阿里java规约-名词/</id>
    <published>2018-02-11T09:59:39.000Z</published>
    <updated>2018-02-11T08:26:36.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="名词-10"><a href="#名词-10" class="headerlink" title="名词(10)"></a>名词(10)</h1><ol>
<li>POJO（ Plain Ordinary Java Object） : 在本手册中， POJO 专指只有 setter / getter/ toString 的简单类，包括 DO/DTO/BO/VO 等。</li>
<li>GAV（ GroupId、 ArtifactctId、 Version） : Maven 坐标，是用来唯一标识 jar 包。</li>
<li>OOP（ Object Oriented Programming） : 本手册泛指类、对象的编程处理方式。</li>
<li>ORM（ Object Relation Mapping） : 对象关系映射，对象领域模型与底层数据之间的转换，本文泛指 iBATIS, mybatis 等框架。</li>
<li>NPE（ java.lang.NullPointerException） : 空指针异常。</li>
<li>SOA（ Service-Oriented Architecture） : 面向服务架构，它可以根据需求通过网络对松散耦合的粗粒度应用组件进行分布式部署、组合和使用， 有利于提升组件可重用性，可维护性。</li>
<li>一方库: 本工程内部子项目模块依赖的库（ jar 包） 。</li>
<li>二方库: 公司内部发布到中央仓库，可供公司内部其它应用依赖的库（ jar 包） 。</li>
<li>三方库: 公司之外的开源库（ jar 包） 。</li>
<li>IDE（ Integrated Development Environment） : 用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具， 本《 手册》 泛指 IntelliJ IDEA和 eclipse。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;名词-10&quot;&gt;&lt;a href=&quot;#名词-10&quot; class=&quot;headerlink&quot; title=&quot;名词(10)&quot;&gt;&lt;/a&gt;名词(10)&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;POJO（ Plain Ordinary Java Object） : 在本手册中， POJO 专指
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(六)-工程结构(3)-服务器.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/11/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E5%85%AD)-%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84(3)-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://blog.signalfire2017.com/2018/02/11/阿里java规约/阿里java规约(六)-工程结构(3)-服务器/</id>
    <published>2018-02-11T09:59:37.000Z</published>
    <updated>2018-02-11T08:24:53.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器-5"><a href="#服务器-5" class="headerlink" title="服务器(5)"></a>服务器(5)</h1><h2 id="推荐-4"><a href="#推荐-4" class="headerlink" title="推荐(4)"></a>推荐(4)</h2><ol>
<li><p>【推荐】高并发服务器建议调小 TCP 协议的 time_wait 超时时间。</p>
<ul>
<li>说明： 操作系统默认 240 秒后，才会关闭处于 time_wait 状态的连接，在高并发访问下，服务器端会因为处于 time_wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。</li>
<li>正例： 在 linux 服务器上请通过变更/etc/sysctl.conf 文件去修改该缺省值（ 秒） ：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net.ipv4.tcp_fin_timeout = 30</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】调大服务器所支持的最大文件句柄数（ File Descriptor，简写为 fd） 。</p>
<ul>
<li>说明： 主流操作系统的设计是将 TCP/UDP 连接采用与文件一样的方式去管理，即一个连接对应于一个 fd。 主流的 linux 服务器默认所支持最大 fd 数量为 1024，当并发连接数很大时很容易因为 fd 不足而出现“open too many files”错误，导致新的连接无法建立。 建议将 linux服务器所支持的最大句柄数调高数倍（ 与服务器的内存数量相关） 。</li>
</ul>
</li>
<li>【推荐】给JVM 设置-XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出dump 信息。<ul>
<li>说明：OOM 的发生是有概率的，甚至有规律地相隔数月才出现一例，出现时的现场信息对查错非常有价值。</li>
</ul>
</li>
<li>【推荐】在线上生产环境， JVM 的 Xms 和 Xmx 设置一样大小的内存容量， 避免在 GC 后调整堆大小带来的压力。</li>
</ol>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考(1)"></a>参考(1)</h2><ol>
<li>【参考】服务器内部重定向使用 forward； 外部重定向地址使用 URL 拼装工具类来生成， 否则会带来 URL 维护不一致的问题和潜在的安全风险。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;服务器-5&quot;&gt;&lt;a href=&quot;#服务器-5&quot; class=&quot;headerlink&quot; title=&quot;服务器(5)&quot;&gt;&lt;/a&gt;服务器(5)&lt;/h1&gt;&lt;h2 id=&quot;推荐-4&quot;&gt;&lt;a href=&quot;#推荐-4&quot; class=&quot;headerlink&quot; title=&quot;推荐(
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(六)-工程结构(2)-二方库依赖.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/11/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E5%85%AD)-%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84(2)-%E4%BA%8C%E6%96%B9%E5%BA%93%E4%BE%9D%E8%B5%96/"/>
    <id>https://blog.signalfire2017.com/2018/02/11/阿里java规约/阿里java规约(六)-工程结构(2)-二方库依赖/</id>
    <published>2018-02-11T09:59:36.000Z</published>
    <updated>2018-02-11T08:24:47.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二方库依赖-10"><a href="#二方库依赖-10" class="headerlink" title="二方库依赖(10)"></a>二方库依赖(10)</h1><h2 id="强制-7"><a href="#强制-7" class="headerlink" title="强制(7)"></a>强制(7)</h2><ol>
<li>【强制】定义 GAV 遵从以下规则：<ul>
<li>1） GroupID 格式： com.{公司/BU }.业务线.[子业务线]，最多 4 级。<ul>
<li>说明： {公司/BU} 例如： alibaba/taobao/tmall/aliexpress 等 BU 一级； 子业务线可选。</li>
<li>正例： com.taobao.jstorm 或 com.alibaba.dubbo.register</li>
</ul>
</li>
<li>2） ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。<ul>
<li>正例： dubbo-client / fastjson-api / jstorm-tool</li>
</ul>
</li>
<li>3） Version：详细规定参考下方。</li>
</ul>
</li>
<li>【强制】二方库版本号命名方式：主版本号.次版本号.修订号<ul>
<li>1） 主版本号： 产品方向改变， 或者大规模 API 不兼容， 或者架构不兼容升级。</li>
<li>2） 次版本号： 保持相对兼容性，增加主要功能特性， 影响范围极小的 API 不兼容修改。</li>
<li>3） 修订号： 保持完全兼容性， 修复 BUG、 新增次要功能特性等。</li>
<li>说明： 注意起始版本号必须为： 1.0.0，而不是 0.0.1 正式发布的类库必须先去中央仓库进行查证，使版本号有延续性， 正式版本号不允许覆盖升级。如当前版本： 1.3.3， 那么下一个合理的版本号： 1.3.4 或 1.4.0 或 2.0.0</li>
</ul>
</li>
<li>【强制】线上应用不要依赖 SNAPSHOT 版本（ 安全包除外） 。<ul>
<li>说明： 不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</li>
</ul>
</li>
<li>【强制】二方库的新增或升级，保持除功能点之外的其它 jar 包仲裁结果不变。如果有改变，必须明确评估和验证， 建议进行 dependency:resolve 前后信息比对，如果仲裁结果完全不一致，那么通过 dependency:tree 命令，找出差异点，进行<excludes>排除 jar 包。</excludes></li>
<li>【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。</li>
<li>【强制】依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。<ul>
<li>说明： 依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一个变量来保存版本： ${spring.version}，定义依赖的时候，引用该版本。</li>
</ul>
</li>
<li>【强制】禁止在子项目的 pom 依赖中出现相同的 GroupId，相同的 ArtifactId，但是不同的Version。<ul>
<li>说明： 在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号出现在最后的 lib 目录中。 可能出现线下调试是正确的，发布到线上却出故障的问题。</li>
</ul>
</li>
</ol>
<h2 id="推荐-2"><a href="#推荐-2" class="headerlink" title="推荐(2)"></a>推荐(2)</h2><ol>
<li>【推荐】所有 pom 文件中的依赖声明放在<dependencies>语句块中，所有版本仲裁放在<dependencymanagement>语句块中。<ul>
<li>说明： <dependencymanagement>里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖， version 和 scope 都读取自父 pom。而<dependencies>所有声明在主 pom 的<dependencies>里的依赖都会自动引入，并默认被所有的子项目继承。</dependencies></dependencies></dependencymanagement></li>
</ul>
</dependencymanagement></dependencies></li>
<li>【推荐】二方库不要有配置项，最低限度不要再增加配置项。</li>
</ol>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考(1)"></a>参考(1)</h2><ol>
<li>【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：<ul>
<li>1） 精简可控原则。移除一切不必要的 API 和依赖，只包含 Service API、必要的领域模型对象、 Utils 类、常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用者去依赖具体版本号； 无 log 具体实现，只依赖日志框架。</li>
<li>2） 稳定可追溯原则。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;二方库依赖-10&quot;&gt;&lt;a href=&quot;#二方库依赖-10&quot; class=&quot;headerlink&quot; title=&quot;二方库依赖(10)&quot;&gt;&lt;/a&gt;二方库依赖(10)&lt;/h1&gt;&lt;h2 id=&quot;强制-7&quot;&gt;&lt;a href=&quot;#强制-7&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(六)-工程结构(1)-应用分层.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/11/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E5%85%AD)-%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84(1)-%E5%BA%94%E7%94%A8%E5%88%86%E5%B1%82/"/>
    <id>https://blog.signalfire2017.com/2018/02/11/阿里java规约/阿里java规约(六)-工程结构(1)-应用分层/</id>
    <published>2018-02-11T09:59:35.000Z</published>
    <updated>2018-02-11T08:24:40.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用分层-3"><a href="#应用分层-3" class="headerlink" title="应用分层(3)"></a>应用分层(3)</h1><h2 id="强制-1"><a href="#强制-1" class="headerlink" title="强制(1)"></a>强制(1)</h2><ol>
<li><p>【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于Web 层，也可以直接依赖于 Service 层，依此类推：</p>
<p> <img src="http://ovasdkxqr.bkt.clouddn.com/image/work/阿里java规约(六" alt="阿里java规约(六)-工程结构(1)-应用分层-201821116042">-工程结构(1)-应用分层-201821116042.png)</p>
<ul>
<li>开放接口层：可直接封装 Service 方法暴露成 RPC 接口； 通过 Web 封装成 http 接口； 进行网关安全控制、 流量控制等。</li>
<li>终端显示层：各个端的模板渲染并执行显示的层。 当前主要是 velocity 渲染， JS 渲染，JSP 渲染，移动端展示等。</li>
<li>Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li>
<li>Service 层：相对具体的业务逻辑服务层。</li>
<li>Manager 层：通用业务处理层，它有如下特征：<ul>
<li>1） 对第三方平台封装的层，预处理返回结果及转化异常信息；</li>
<li>2） 对 Service 层通用能力的下沉，如缓存方案、 中间件通用处理；</li>
<li>3） 与 DAO 层交互，对多个 DAO 的组合复用。</li>
</ul>
</li>
<li>DAO 层：数据访问层，与底层 MySQL、 Oracle、 Hbase 等进行数据交互。</li>
<li>外部接口或第三方平台：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li>
</ul>
</li>
</ol>
<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考(2)"></a>参考(2)</h2><ol>
<li>【参考】 （ 分层异常处理规约） 在 DAO 层，产生的异常类型有很多，无法用细粒度的异常进行 catch，使用 catch(Exception e)方式，并 throw new DAOException(e)，不需要打印日志，因为日志在 Manager/Service 层一定需要捕获并打印到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在 Service 层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护案发现场。如果 Manager 层与 Service 同机部署，日志方式与 DAO层处理一致，如果是单独部署，则采用与 Service 一致的处理方式。 Web 层绝不应该继续往上抛异常，因为已经处于顶层，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面， 加上用户容易理解的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。</li>
<li>【参考】分层领域模型规约：<ul>
<li>DO（ Data Object） ：与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</li>
<li>DTO（ Data Transfer Object） ：数据传输对象， Service 或 Manager 向外传输的对象。</li>
<li>BO（ Business Object） ：业务对象。 由 Service 层输出的封装业务逻辑的对象。</li>
<li>AO（ Application Object）： 应用对象。 在 Web 层与 Service 层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</li>
<li>VO（ View Object） ： 显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</li>
<li>Query：数据查询对象，各层接收上层的查询请求。 注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;应用分层-3&quot;&gt;&lt;a href=&quot;#应用分层-3&quot; class=&quot;headerlink&quot; title=&quot;应用分层(3)&quot;&gt;&lt;/a&gt;应用分层(3)&lt;/h1&gt;&lt;h2 id=&quot;强制-1&quot;&gt;&lt;a href=&quot;#强制-1&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(五)-MySQL数据库(4)-ORM映射.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/11/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%BA%94)-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93(4)-ORM%E6%98%A0%E5%B0%84/"/>
    <id>https://blog.signalfire2017.com/2018/02/11/阿里java规约/阿里java规约(五)-MySQL数据库(4)-ORM映射/</id>
    <published>2018-02-11T09:59:34.000Z</published>
    <updated>2018-02-11T08:24:32.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ORM映射-11"><a href="#ORM映射-11" class="headerlink" title="ORM映射(11)"></a>ORM映射(11)</h1><h2 id="强制-4"><a href="#强制-4" class="headerlink" title="强制(4)"></a>强制(4)</h2><ol>
<li>【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。<ul>
<li>说明：<ul>
<li>1） 增加查询分析器解析成本。</li>
<li>2） 增减字段容易与 resultMap 配置不一致。</li>
</ul>
</li>
</ul>
</li>
<li>【强制】 POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。<ul>
<li>说明： 参见定义 POJO 类以及数据库字段定义规定，在<resultmap>中增加映射，是必须的。在 MyBatis Generator 生成的代码中，需要进行对应的修改。</resultmap></li>
</ul>
</li>
<li>【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义； 反过来，每一个表也必然有一个与之对应。<ul>
<li>说明： 配置映射关系，使字段与 DO 类解耦，方便维护。</li>
</ul>
</li>
<li>【强制】sql.xml 配置参数使用： #{}， #param# 不要使用${} 此种方式容易出现 SQL 注入。</li>
<li><p>【强制】 iBATIS 自带的 queryForList(String statementName,int start,int size)不推荐使用。</p>
<ul>
<li>说明：其实现方式是在数据库取到 statementName对应的SQL语句的所有记录，再通过 subList取 start,size 的子集合。</li>
<li>正例：   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">map.put(<span class="string">"start"</span>, start);</div><div class="line">map.put(<span class="string">"size"</span>, size);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</p>
<ul>
<li>说明： resultClass=”Hashtable”， 会置入字段名和属性值，但是值的类型不可控。</li>
</ul>
</li>
<li>【强制】更新数据表记录时，必须同时更新记录对应的 gmt_modified 字段值为当前时间。</li>
</ol>
<h2 id="推荐-1"><a href="#推荐-1" class="headerlink" title="推荐(1)"></a>推荐(1)</h2><ol>
<li>【推荐】不要写一个大而全的数据更新接口。 传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3; 这是不对的。执行 SQL时， 不要更新无改动的字段，一是易出错； 二是效率低； 三是增加 binlog 存储。</li>
</ol>
<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考(2)"></a>参考(2)</h2><ol>
<li>【参考】 @Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</li>
<li>【参考】 <isequal>中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件； <isnotempty>表示不为空且不为 null 时执行； <isnotnull>表示不为 null 值时执行。</isnotnull></isnotempty></isequal></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ORM映射-11&quot;&gt;&lt;a href=&quot;#ORM映射-11&quot; class=&quot;headerlink&quot; title=&quot;ORM映射(11)&quot;&gt;&lt;/a&gt;ORM映射(11)&lt;/h1&gt;&lt;h2 id=&quot;强制-4&quot;&gt;&lt;a href=&quot;#强制-4&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(五)-MySQL数据库(3)-SQL语句.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/11/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%BA%94)-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93(3)-SQL%E8%AF%AD%E5%8F%A5/"/>
    <id>https://blog.signalfire2017.com/2018/02/11/阿里java规约/阿里java规约(五)-MySQL数据库(3)-SQL语句/</id>
    <published>2018-02-11T09:59:33.000Z</published>
    <updated>2018-02-11T08:24:23.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="索引规约-11"><a href="#索引规约-11" class="headerlink" title="索引规约(11)"></a>索引规约(11)</h1><h2 id="强制-4"><a href="#强制-4" class="headerlink" title="强制(4)"></a>强制(4)</h2><ol>
<li>【强制】业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。<ul>
<li>说明： 不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的； 另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</li>
</ul>
</li>
<li>【强制】超过三个表禁止 join。需要 join 的字段，数据类型必须绝对一致； 多表关联查询时，保证被关联的字段需要有索引。<ul>
<li>说明： 即使双表 join 也要注意表索引、 SQL 性能。</li>
</ul>
</li>
<li>【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。<ul>
<li>说明： 索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct left(列名, 索引长度))/count(*)的区分度来确定。</li>
</ul>
</li>
<li>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。<ul>
<li>说明： 索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</li>
</ul>
</li>
</ol>
<h2 id="推荐-6"><a href="#推荐-6" class="headerlink" title="推荐(6)"></a>推荐(6)</h2><ol>
<li>【推荐】如果有 order by 的场景，请注意利用索引的有序性。 order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。<ul>
<li>正例： where a=? and b=? order by c; 索引： a_b_c</li>
<li>反例： 索引中有范围查找，那么索引有序性无法利用，如： WHERE a&gt;10 ORDER BY b; 索引a_b 无法排序。</li>
</ul>
</li>
<li>【推荐】利用覆盖索引来进行查询操作， 避免回表。<ul>
<li>说明： 如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。</li>
<li>正例： 能够建立索引的种类分为主键索引、唯一索引、普通索引三种，而覆盖索引只是一种查询的一种效果，用 explain 的结果， extra 列会出现： using index。</li>
</ul>
</li>
<li><p>【推荐】利用延迟关联或者子查询优化超多分页场景。</p>
<ul>
<li>说明： MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。</li>
<li>正例： 先快速定位需要获取的 id 段，然后再关联：  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> a.* <span class="keyword">FROM</span> 表 <span class="number">1</span> a, (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> 表 <span class="number">1</span> <span class="keyword">where</span> 条件 <span class="keyword">LIMIT</span> <span class="number">100000</span>,<span class="number">20</span> ) b <span class="keyword">where</span> a.id=b.id</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】 SQL 性能优化的目标：至少要达到 range 级别， 要求是 ref 级别， 如果可以是 consts最好。</p>
<ul>
<li>说明：<ul>
<li>1） consts 单表中最多只有一个匹配行（ 主键或者唯一索引） ，在优化阶段即可读取到数据。</li>
<li>2） ref 指的是使用普通的索引（ normal index） 。</li>
<li>3） range 对索引进行范围检索。</li>
</ul>
</li>
<li>反例： explain 表的结果， type=index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全表扫描是小巫见大巫。</li>
</ul>
</li>
<li>【推荐】建组合索引的时候，区分度最高的在最左边。<ul>
<li>正例： 如果 where a=? and b=? ， a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。</li>
<li>说明： 存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如： where a&gt;? and b=? 那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。</li>
</ul>
</li>
<li>【推荐】 防止因字段类型不同造成的隐式转换， 导致索引失效。</li>
<li>【参考】创建索引时避免有如下极端误解：<ul>
<li>1） 宁滥勿缺。 认为一个查询就需要建一个索引。</li>
<li>2） 宁缺勿滥。 认为索引会消耗空间、严重拖慢更新和新增速度。</li>
<li>3） 抵制惟一索引。 认为业务的惟一性一律需要在应用层通过“先查后插”方式解决。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;索引规约-11&quot;&gt;&lt;a href=&quot;#索引规约-11&quot; class=&quot;headerlink&quot; title=&quot;索引规约(11)&quot;&gt;&lt;/a&gt;索引规约(11)&lt;/h1&gt;&lt;h2 id=&quot;强制-4&quot;&gt;&lt;a href=&quot;#强制-4&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(五)-MySQL数据库(2)-索引规约.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/11/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%BA%94)-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93(2)-%E7%B4%A2%E5%BC%95%E8%A7%84%E7%BA%A6/"/>
    <id>https://blog.signalfire2017.com/2018/02/11/阿里java规约/阿里java规约(五)-MySQL数据库(2)-索引规约/</id>
    <published>2018-02-11T09:49:33.000Z</published>
    <updated>2018-02-11T05:45:31.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="索引规约-11"><a href="#索引规约-11" class="headerlink" title="索引规约(11)"></a>索引规约(11)</h1><h2 id="强制-4"><a href="#强制-4" class="headerlink" title="强制(4)"></a>强制(4)</h2><ol>
<li>【强制】业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。<ul>
<li>说明： 不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的； 另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</li>
</ul>
</li>
<li>【强制】超过三个表禁止 join。需要 join 的字段，数据类型必须绝对一致； 多表关联查询时，保证被关联的字段需要有索引。<ul>
<li>说明： 即使双表 join 也要注意表索引、 SQL 性能。</li>
</ul>
</li>
<li>【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。<ul>
<li>说明： 索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct left(列名, 索引长度))/count(*)的区分度来确定。</li>
</ul>
</li>
<li>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。<ul>
<li>说明： 索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</li>
</ul>
</li>
</ol>
<h2 id="推荐-6"><a href="#推荐-6" class="headerlink" title="推荐(6)"></a>推荐(6)</h2><ol>
<li>【推荐】如果有 order by 的场景，请注意利用索引的有序性。 order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。<ul>
<li>正例： where a=? and b=? order by c; 索引： a_b_c</li>
<li>反例： 索引中有范围查找，那么索引有序性无法利用，如： WHERE a&gt;10 ORDER BY b; 索引a_b 无法排序。</li>
</ul>
</li>
<li>【推荐】利用覆盖索引来进行查询操作， 避免回表。<ul>
<li>说明： 如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。</li>
<li>正例： 能够建立索引的种类分为主键索引、唯一索引、普通索引三种，而覆盖索引只是一种查询的一种效果，用 explain 的结果， extra 列会出现： using index。</li>
</ul>
</li>
<li><p>【推荐】利用延迟关联或者子查询优化超多分页场景。</p>
<ul>
<li>说明： MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。</li>
<li>正例： 先快速定位需要获取的 id 段，然后再关联：  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> a.* <span class="keyword">FROM</span> 表 <span class="number">1</span> a, (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> 表 <span class="number">1</span> <span class="keyword">where</span> 条件 <span class="keyword">LIMIT</span> <span class="number">100000</span>,<span class="number">20</span> ) b <span class="keyword">where</span> a.id=b.id</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】 SQL 性能优化的目标：至少要达到 range 级别， 要求是 ref 级别， 如果可以是 consts最好。</p>
<ul>
<li>说明：<ul>
<li>1） consts 单表中最多只有一个匹配行（ 主键或者唯一索引） ，在优化阶段即可读取到数据。</li>
<li>2） ref 指的是使用普通的索引（ normal index） 。</li>
<li>3） range 对索引进行范围检索。</li>
</ul>
</li>
<li>反例： explain 表的结果， type=index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全表扫描是小巫见大巫。</li>
</ul>
</li>
<li>【推荐】建组合索引的时候，区分度最高的在最左边。<ul>
<li>正例： 如果 where a=? and b=? ， a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。</li>
<li>说明： 存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如： where a&gt;? and b=? 那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。</li>
</ul>
</li>
<li>【推荐】 防止因字段类型不同造成的隐式转换， 导致索引失效。</li>
<li>【参考】创建索引时避免有如下极端误解：<ul>
<li>1） 宁滥勿缺。 认为一个查询就需要建一个索引。</li>
<li>2） 宁缺勿滥。 认为索引会消耗空间、严重拖慢更新和新增速度。</li>
<li>3） 抵制惟一索引。 认为业务的惟一性一律需要在应用层通过“先查后插”方式解决。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;索引规约-11&quot;&gt;&lt;a href=&quot;#索引规约-11&quot; class=&quot;headerlink&quot; title=&quot;索引规约(11)&quot;&gt;&lt;/a&gt;索引规约(11)&lt;/h1&gt;&lt;h2 id=&quot;强制-4&quot;&gt;&lt;a href=&quot;#强制-4&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(五)-MySQL数据库(1)-建表规约.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/11/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%BA%94)-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93(1)-%E5%BB%BA%E8%A1%A8%E8%A7%84%E7%BA%A6/"/>
    <id>https://blog.signalfire2017.com/2018/02/11/阿里java规约/阿里java规约(五)-MySQL数据库(1)-建表规约/</id>
    <published>2018-02-11T09:39:33.000Z</published>
    <updated>2018-02-11T02:30:27.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建表规约-15"><a href="#建表规约-15" class="headerlink" title="建表规约(15)"></a>建表规约(15)</h1><h2 id="强制-9"><a href="#强制-9" class="headerlink" title="强制(9)"></a>强制(9)</h2><ol>
<li>【强制】表达<code>是与否</code>概念的字段，必须使用 <code>is_xxx</code> 的方式命名，数据类型是 <code>unsigned tinyint</code>（1 表示是， 0 表示否） 。<ul>
<li>说明： 任何字段如果为非负数，必须是 unsigned。</li>
<li>正例： 表达逻辑删除的字段名 is_deleted， 1 表示删除， 0 表示未删除。</li>
</ul>
</li>
<li>【强制】表名、字段名必须使用<code>小写字母或数字</code>， <code>禁止出现数字开头</code>，<code>禁止两个下划线中间只出现数字</code>。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。<ul>
<li>说明： MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。</li>
<li>正例： aliyun_admin， rdc_config， level3_name</li>
<li>反例： AliyunAdmin， rdcConfig， level_3_name</li>
</ul>
</li>
<li>【强制】表名不使用复数名词。<ul>
<li>说明： 表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</li>
</ul>
</li>
<li>【强制】禁用保留字，如 desc、 range、 match、 delayed 等， 请参考 MySQL 官方保留字。</li>
<li>【强制】 <code>主键索引</code>名为 <code>pk_字段名</code>； <code>唯一索引名</code>为 <code>uk_字段名</code>； <code>普通索引</code>名则为 <code>idx_字段名</code>。<ul>
<li>说明： pk<em> 即 primary key； uk</em> 即 unique key； idx_ 即 index 的简称。</li>
</ul>
</li>
<li>【强制】小数类型为 decimal，禁止使用 float 和 double。<ul>
<li>说明： float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</li>
</ul>
</li>
<li>【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</li>
<li>【强制】 varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</li>
<li>【强制】表必备三字段： id, gmt_create, gmt_modified。<ul>
<li>说明： 其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1。 gmt_create,gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被动更新。</li>
</ul>
</li>
<li>【推荐】表的命名最好是加上“业务名称_表的作用”。<ul>
<li>正例： alipay_task / force_project / trade_config</li>
</ul>
</li>
</ol>
<h2 id="推荐-4"><a href="#推荐-4" class="headerlink" title="推荐(4)"></a>推荐(4)</h2><ol>
<li>【推荐】库名与应用名称尽量一致。</li>
<li>【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</li>
<li>【推荐】字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循：<ul>
<li>1） 不是频繁修改的字段。</li>
<li>2） 不是 varchar 超长字段，更不能是 text 字段。</li>
<li>正例： 商品类目名称使用频率高， 字段长度短，名称基本一成不变， 可在相关联的表中冗余存储类目名称，避免关联查询。</li>
</ul>
</li>
<li>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。<ul>
<li>说明： 如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</li>
</ul>
</li>
</ol>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考(1)"></a>参考(1)</h2><ol>
<li><p>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。<br>正例： 如下表，其中无符号值可以避免误存负数， 且扩大了表示范围。</p>
<p>对象 | 年龄区间 | 类型 | 字节 | 表示范围<br>—|——|—-|—-|—–<br>人 | 150 岁之内 | unsigned tinyint | 1 | 无符号值： 0 到 255<br>龟 | 数百岁 | unsigned smallint | 2 | 无符号值： 0 到 65535<br>恐龙化石 | 数千万年 | unsigned int | 4 | 无符号值： 0 到约 42.9 亿<br>太阳 | 约 50 亿年 | unsigned bigint | 8 | 无符号值： 0 到约 10 的 19 次方</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;建表规约-15&quot;&gt;&lt;a href=&quot;#建表规约-15&quot; class=&quot;headerlink&quot; title=&quot;建表规约(15)&quot;&gt;&lt;/a&gt;建表规约(15)&lt;/h1&gt;&lt;h2 id=&quot;强制-9&quot;&gt;&lt;a href=&quot;#强制-9&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(四)-安全规约.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/11/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E5%9B%9B)-%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6/"/>
    <id>https://blog.signalfire2017.com/2018/02/11/阿里java规约/阿里java规约(四)-安全规约/</id>
    <published>2018-02-11T09:29:33.000Z</published>
    <updated>2018-02-11T02:15:54.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安全规约-8"><a href="#安全规约-8" class="headerlink" title="安全规约(8)"></a>安全规约(8)</h1><h2 id="强制-7"><a href="#强制-7" class="headerlink" title="强制(7)"></a>强制(7)</h2><ol>
<li>【强制】 隶属于用户个人的页面或者功能必须进行权限控制校验。<ul>
<li>说明： 防止没有做水平权限校验就可随意访问、 修改、删除别人的数据，比如查看他人的私信内容、修改他人的订单。</li>
</ul>
</li>
<li>【强制】用户敏感数据禁止直接展示，必须对展示数据进行脱敏。<ul>
<li>说明： 个人手机号码显示为:158<em>**</em>9119，隐藏中间 4 位，防止隐私泄露。</li>
</ul>
</li>
<li>【强制】用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入，禁止字符串拼接 SQL 访问数据库。</li>
<li>【强制】用户请求传入的任何参数必须做有效性验证。<ul>
<li>说明： 忽略参数校验可能导致：</li>
<li>page size 过大导致内存溢出</li>
<li>恶意 order by 导致数据库慢查询</li>
<li>任意重定向</li>
<li>SQL 注入</li>
<li>反序列化注入</li>
<li>正则输入源串拒绝服务 ReDoS<ul>
<li>说明： Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</li>
</ul>
</li>
</ul>
</li>
<li>【强制】禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。</li>
<li>【强制】表单、 AJAX 提交必须执行 CSRF 安全过滤。<ul>
<li>说明： CSRF(Cross-site request forgery)跨站请求伪造是一类常见编程漏洞。对于存在CSRF 漏洞的应用/网站，攻击者可以事先构造好 URL，只要受害者用户一访问，后台便在用户不知情情况下对数据库中用户参数进行相应修改。</li>
</ul>
</li>
<li>【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制，如数量限制、疲劳度控制、验证码校验，避免被滥刷导致资损。<ul>
<li>说明： 如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。</li>
</ul>
</li>
</ol>
<h2 id="推荐-1"><a href="#推荐-1" class="headerlink" title="推荐(1)"></a>推荐(1)</h2><ol>
<li>【推荐】发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安全规约-8&quot;&gt;&lt;a href=&quot;#安全规约-8&quot; class=&quot;headerlink&quot; title=&quot;安全规约(8)&quot;&gt;&lt;/a&gt;安全规约(8)&lt;/h1&gt;&lt;h2 id=&quot;强制-7&quot;&gt;&lt;a href=&quot;#强制-7&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(三)-单元测试.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%89)-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(三)-单元测试/</id>
    <published>2018-02-09T09:29:33.000Z</published>
    <updated>2018-02-09T09:54:15.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单元测试-16"><a href="#单元测试-16" class="headerlink" title="单元测试(16)"></a>单元测试(16)</h1><h2 id="强制-7"><a href="#强制-7" class="headerlink" title="强制(7)"></a>强制(7)</h2><ol>
<li>【强制】好的单元测试必须遵守 AIR 原则。<ul>
<li>说明： 单元测试在线上运行时，感觉像空气（ AIR） 一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</li>
<li>A： Automatic（自动化）</li>
<li>I： Independent（独立性）</li>
<li>R： Repeatable（可重复）</li>
</ul>
</li>
<li>【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</li>
<li>【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。<ul>
<li>反例： method2 需要依赖 method1 的执行， 将执行结果作为 method2 的输入。</li>
</ul>
</li>
<li>【强制】单元测试是可以重复执行的，不能受到外界环境的影响。<ul>
<li>说明： 单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等） 有依赖，容易导致持续集成机制的不可用。</li>
<li>正例： 为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。</li>
</ul>
</li>
<li>【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。<ul>
<li>说明： 只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。</li>
</ul>
</li>
<li>【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。<ul>
<li>说明： 新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</li>
</ul>
</li>
<li>【强制】单元测试代码必须写在如下工程目录： src/test/java，不允许写在业务代码目录下。<ul>
<li>说明： 源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。</li>
</ul>
</li>
</ol>
<h2 id="推荐-7"><a href="#推荐-7" class="headerlink" title="推荐(7)"></a>推荐(7)</h2><ol>
<li>【推荐】单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%<ul>
<li>说明： 在工程规约的应用分层中提到的 DAO 层， Manager 层，可重用度高的 Service，都应该进行单元测试。</li>
</ul>
</li>
<li>【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。<ul>
<li>B： Border，边界值测试，包括循环边界、特殊取值、 特殊时间点、数据顺序等。</li>
<li>C： Correct，正确的输入，并得到预期的结果。</li>
<li>D： Design，与设计文档相结合，来编写单元测试。</li>
<li>E： Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。</li>
</ul>
</li>
<li>【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。<ul>
<li>反例： 删除某一行数据的单元测试，在数据库中， 先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则， 导致测试结果异常。</li>
</ul>
</li>
<li>【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。<ul>
<li>正例： 在 RDC 内部单元测试中，使用 RDC_UNIT<em>TEST</em>的前缀标识数据。</li>
</ul>
</li>
<li>【推荐】对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</li>
<li>【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（ UC）。</li>
<li>【推荐】单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。</li>
</ol>
<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考(2)"></a>参考(2)</h2><ol>
<li>【参考】为了更方便地进行单元测试，业务代码应避免以下情况：<ul>
<li>构造方法中做的事情过多。</li>
<li>存在过多的全局变量和静态方法。</li>
<li>存在过多的外部依赖。</li>
<li>存在过多的条件语句。</li>
<li>说明： 多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</li>
</ul>
</li>
<li>【参考】不要对单元测试存在如下误解：<ul>
<li>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。</li>
<li>单元测试代码是多余的。 汽车的整体功能与各单元部件的测试正常与否是强相关的。</li>
<li>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</li>
<li>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单元测试-16&quot;&gt;&lt;a href=&quot;#单元测试-16&quot; class=&quot;headerlink&quot; title=&quot;单元测试(16)&quot;&gt;&lt;/a&gt;单元测试(16)&lt;/h1&gt;&lt;h2 id=&quot;强制-7&quot;&gt;&lt;a href=&quot;#强制-7&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(二)-异常日志(2)-日志规约.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%BA%8C)-%E5%BC%82%E5%B8%B8%E6%97%A5%E5%BF%97(2)-%E6%97%A5%E5%BF%97%E8%A7%84%E7%BA%A6/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(二)-异常日志(2)-日志规约/</id>
    <published>2018-02-09T08:29:33.000Z</published>
    <updated>2018-02-09T08:57:21.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志规约-8"><a href="#日志规约-8" class="headerlink" title="日志规约(8)"></a>日志规约(8)</h1><h2 id="强制-6"><a href="#强制-6" class="headerlink" title="强制(6)"></a>强制(6)</h2><ol>
<li><p>【强制】应用中<code>不可直接使用</code>日志系统（ Log4j、 Logback） 中的 API，而应依赖<code>使用</code>日志框架<code>SLF4J</code> 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Abc.class);</div></pre></td></tr></table></figure>
</li>
<li><p>【强制】日志文件推荐<code>至少</code>保存 <code>15</code> 天，因为有些异常具备以“周”为频次发生的特点。</p>
</li>
<li>【强制】应用中的扩展日志（ 如打点、临时监控、访问日志等） 命名方式：<ul>
<li>appName_logType_logName.log。</li>
<li>logType:日志类型，推荐分类有 stats/monitor/visit 等；</li>
<li>logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</li>
<li>正例： mppserver 应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log</li>
<li>说明： 推荐对日志进行分类， 如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</li>
</ul>
</li>
<li><p>【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。</p>
<ul>
<li>说明： logger.debug(“Processing trade with id: “ + id + “ and symbol: “ + symbol);</li>
<li>如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。</li>
<li><p>正例： （ 条件）</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">    logger.debug(<span class="string">"Processing trade with id: "</span> + id + <span class="string">" and symbol: "</span> + symbol);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>正例： （ 占位符）</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.debug(<span class="string">"Processing trade with id: &#123;&#125; and symbol : &#123;&#125; "</span>, id, symbol);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。</p>
<ul>
<li>正例： <logger name="com.taobao.dubbo.config" additivity="false"></logger></li>
</ul>
</li>
<li>【强制】异常信息应该包括两类信息：<code>案发现场信息</code>和<code>异常堆栈信息</code>。如果不处理，那么通过关键字 throws 往上抛出。<ul>
<li>正例： logger.error(各类参数或者对象 toString + “_” + e.getMessage(), e);</li>
</ul>
</li>
</ol>
<h2 id="推荐-2"><a href="#推荐-2" class="headerlink" title="推荐(2)"></a>推荐(2)</h2><ol>
<li>【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志； 有选择地输出 info 日志； 如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。<ul>
<li>说明： 大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。 记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</li>
</ul>
</li>
<li>【推荐】可以使用 <code>warn</code> 日志级别来记录<code>用户输入参数错误</code>的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。<ul>
<li>说明： 注意日志输出的级别， error 级别只记录系统逻辑出错、异常或者重要的错误信息。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;日志规约-8&quot;&gt;&lt;a href=&quot;#日志规约-8&quot; class=&quot;headerlink&quot; title=&quot;日志规约(8)&quot;&gt;&lt;/a&gt;日志规约(8)&lt;/h1&gt;&lt;h2 id=&quot;强制-6&quot;&gt;&lt;a href=&quot;#强制-6&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(二)-异常日志(1)-异常处理.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%BA%8C)-%E5%BC%82%E5%B8%B8%E6%97%A5%E5%BF%97(1)-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(二)-异常日志(1)-异常处理/</id>
    <published>2018-02-09T08:29:33.000Z</published>
    <updated>2018-02-09T08:45:40.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常处理-13"><a href="#异常处理-13" class="headerlink" title="异常处理(13)"></a>异常处理(13)</h1><h2 id="强制-8"><a href="#强制-8" class="headerlink" title="强制(8)"></a>强制(8)</h2><ol>
<li>【强制】 Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来处理，比如： NullPointerException， IndexOutOfBoundsException 等等。<ul>
<li>说明： 无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。</li>
<li>正例： if (obj != null) {…}</li>
<li>反例： try { obj.method() } catch (NullPointerException e) {…}</li>
</ul>
</li>
<li>【强制】异常不要用来做流程控制，条件控制。<ul>
<li>说明： 异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</li>
</ul>
</li>
<li>【强制】 catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。<ul>
<li>说明： 对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。</li>
<li>正例： 用户注册的场景中，如果用户输入非法字符， 或用户名称已存在， 或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</li>
</ul>
</li>
<li>【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</li>
<li>【强制】有 try 块放到了事务代码中， catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。</li>
<li>【强制】 finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。<ul>
<li>说明： 如果 JDK7 及以上，可以使用 try-with-resources 方式。</li>
</ul>
</li>
<li>【强制】不要在 finally 块中使用 return。<ul>
<li>说明： finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</li>
</ul>
</li>
<li>【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。<ul>
<li>说明： 如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</li>
</ul>
</li>
</ol>
<h2 id="推荐-4"><a href="#推荐-4" class="headerlink" title="推荐(4)"></a>推荐(4)</h2><ol>
<li>【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。<ul>
<li>说明： 本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、 序列化失败、 运行时异常等场景返回null 的情况。</li>
</ul>
</li>
<li>【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：<ul>
<li>1）返回类型为基本数据类型， return 包装数据类型的对象时，自动拆箱有可能产生 NPE。<ul>
<li>反例： public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。</li>
</ul>
</li>
<li>2） 数据库的查询结果可能为 null。</li>
<li>3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。</li>
<li>4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</li>
<li>5） 对于 Session 中获取的数据， 建议 NPE 检查，避免空指针。</li>
<li>6） 级联调用 obj.getA().getB().getC()； 一连串调用，易产生 NPE。</li>
<li>正例： 使用 JDK8 的 Optional 类来防止 NPE 问题。</li>
</ul>
</li>
<li>【推荐】定义时区分 unchecked / checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如： DAOException / ServiceException 等。</li>
</ol>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考(1)"></a>参考(1)</h2><ol>
<li>【 参考】 对于公司外的 <code>http/api 开放接口必须使用“错误码”</code>； 而<code>应用内部推荐异常抛出</code>；跨应用间 <code>RPC</code> 调用优先考虑使用 <code>Result</code> 方式，封装 <code>isSuccess</code>()方法、 <code>“错误码”、</code> <code>“错误简短信息”。</code><ul>
<li>说明： 关于 RPC 方法返回方式使用 Result 方式的理由：</li>
<li>1） 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</li>
<li>2） 如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</li>
</ul>
</li>
<li>【参考】 <code>避免出现重复的代码</code>（ Don’t Repeat Yourself） ，即 DRY 原则。<ul>
<li>说明： 随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。</li>
<li>正例： 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：<ul>
<li>private boolean checkParam(DTO dto) {…}</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;异常处理-13&quot;&gt;&lt;a href=&quot;#异常处理-13&quot; class=&quot;headerlink&quot; title=&quot;异常处理(13)&quot;&gt;&lt;/a&gt;异常处理(13)&lt;/h1&gt;&lt;h2 id=&quot;强制-8&quot;&gt;&lt;a href=&quot;#强制-8&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(9)-其他.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(9)-%E5%85%B6%E4%BB%96/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(9)-其他/</id>
    <published>2018-02-09T08:12:33.000Z</published>
    <updated>2018-02-09T08:44:59.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="其他-8"><a href="#其他-8" class="headerlink" title="其他(8)"></a>其他(8)</h1><h2 id="强制-5"><a href="#强制-5" class="headerlink" title="强制(5)"></a>强制(5)</h2><ol>
<li>【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。<ul>
<li>说明： 不要在方法体内定义： Pattern pattern = Pattern.compile(规则);</li>
</ul>
</li>
<li>【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（ boolean 命名不需要加 is前缀） ，会自动调用 isXxx()方法。<ul>
<li>说明： 注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。</li>
</ul>
</li>
<li>【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。<ul>
<li>说明： 如果 var=null 或者不存在，那么${var}会直接显示在页面上。</li>
</ul>
</li>
<li>【强制】注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x&lt;1（ 能够取到零值，注意除零异常） ，如果想<code>获取整数类型的随机数</code>，不要将 x 放大 10 的若干倍然后取整，直接使用 <code>Random</code> 对象的 <code>nextInt</code> 或者 <code>nextLong</code> 方法。</li>
<li>【强制】获取当前毫秒数 System.currentTimeMillis(); 而不是 new Date().getTime();<ul>
<li>说明： 如果想获取更加精确的纳秒级时间值， 使用 System.nanoTime()的方式。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</li>
</ul>
</li>
</ol>
<h2 id="推荐-3"><a href="#推荐-3" class="headerlink" title="推荐(3)"></a>推荐(3)</h2><ol>
<li>【推荐】 不要在视图模板中加入任何复杂的逻辑。<ul>
<li>说明： 根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。</li>
</ul>
</li>
<li>【推荐】 任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</li>
<li>【推荐】 及时清理不再使用的代码段或配置信息。<ul>
<li>说明： 对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。</li>
<li>正例： 对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///)来说明注释掉代码的理由。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;其他-8&quot;&gt;&lt;a href=&quot;#其他-8&quot; class=&quot;headerlink&quot; title=&quot;其他(8)&quot;&gt;&lt;/a&gt;其他(8)&lt;/h1&gt;&lt;h2 id=&quot;强制-5&quot;&gt;&lt;a href=&quot;#强制-5&quot; class=&quot;headerlink&quot; title=&quot;强制(5)&quot;&gt;
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(8)-注释规约.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(8)-%E6%B3%A8%E9%87%8A%E8%A7%84%E7%BA%A6/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(8)-注释规约/</id>
    <published>2018-02-09T08:02:33.000Z</published>
    <updated>2018-02-09T08:45:01.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注释规约-11"><a href="#注释规约-11" class="headerlink" title="注释规约(11)"></a>注释规约(11)</h1><h2 id="强制-6"><a href="#强制-6" class="headerlink" title="强制(6)"></a>强制(6)</h2><ol>
<li>【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/<em>*内容</em>/格式，不得使用// xxx 方式。<ul>
<li>说明： 在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释； 在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</li>
</ul>
</li>
<li>【强制】所有的抽象方法（ 包括接口中的方法） 必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。<ul>
<li>说明： 对子类的实现要求，或者调用注意事项，请一并说明。</li>
</ul>
</li>
<li>【强制】所有的类都必须添加创建者和创建日期。</li>
<li>【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/<em> </em>/注释，注意与代码对齐。</li>
<li>【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</li>
</ol>
<h2 id="推荐-2"><a href="#推荐-2" class="headerlink" title="推荐(2)"></a>推荐(2)</h2><ol>
<li>【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。<ul>
<li>反例： “TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</li>
</ul>
</li>
<li>【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。<ul>
<li>说明： 代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</li>
</ul>
</li>
</ol>
<h2 id="参考-5"><a href="#参考-5" class="headerlink" title="参考(5)"></a>参考(5)</h2><ol>
<li>【参考】 谨慎注释掉代码。 在上方详细说明，而不是简单地注释掉。 如果无用，则删除。<ul>
<li>说明： 代码被注释掉有两种可能性： <ul>
<li>1） 后续会恢复此段代码逻辑。 </li>
<li>2） 永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（ 代码仓库保存了历史代码） 。</li>
</ul>
</li>
</ul>
</li>
<li>【参考】对于注释的要求：<ul>
<li>第一、能够准确反应设计思想和代码逻辑； </li>
<li>第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。<blockquote>
<p>完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路； 注释也是给继任者看的，使其能够快速接替自己的工作。</p>
</blockquote>
</li>
</ul>
</li>
<li>【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。<ul>
<li>反例：<br>// put elephant into fridge<br>put(elephant, fridge);<br>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</li>
</ul>
</li>
<li>【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。<ul>
<li>1） 待办事宜（ TODO） :（标记人，标记时间， [预计处理时间]）表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法（ 因为它是一个 Javadoc 标签）。</li>
<li>2） 错误，不能工作（ FIXME） :（ 标记人，标记时间， [预计处理时间]）在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注释规约-11&quot;&gt;&lt;a href=&quot;#注释规约-11&quot; class=&quot;headerlink&quot; title=&quot;注释规约(11)&quot;&gt;&lt;/a&gt;注释规约(11)&lt;/h1&gt;&lt;h2 id=&quot;强制-6&quot;&gt;&lt;a href=&quot;#强制-6&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(7)-控制语句.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(7)-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(7)-控制语句/</id>
    <published>2018-02-09T07:22:33.000Z</published>
    <updated>2018-02-09T08:45:06.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="控制语句-10"><a href="#控制语句-10" class="headerlink" title="控制语句(10)"></a>控制语句(10)</h1><h2 id="强制-3"><a href="#强制-3" class="headerlink" title="强制(3)"></a>强制(3)</h2><ol>
<li>【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止； 在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使空代码。</li>
<li>【强制】在 if/else/for/while/do 语句中必须使用大括号。 即使只有一行代码，避免采用单行的编码方式： if (condition) statements;</li>
<li>【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。<ul>
<li>说明： 如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。</li>
<li>反例： 判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数， 这样的话，活动无法终止。</li>
</ul>
</li>
</ol>
<h2 id="推荐-5"><a href="#推荐-5" class="headerlink" title="推荐(5)"></a>推荐(5)</h2><ol>
<li><p>【推荐】表达异常的分支时，少用 if-else 方式，这种方式可以改写成：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">  ...</div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 接着写 else 的业务逻辑代码;</span></div></pre></td></tr></table></figure>
<ul>
<li>说明： 如果非得使用 if()…else if()…else…方式表达逻辑，【强制】 避免后续代码维护困难， 请勿超过 3 层。</li>
<li>正例： 超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">today</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (isBusy()) &#123;</div><div class="line">    System.out.println(“change time.”);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (isFree()) &#123;</div><div class="line">    System.out.println(“go to travel.”);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p>
<ul>
<li>说明： 很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</li>
<li><p>正例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 伪代码如下</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> existed = (file.open(fileName, <span class="string">"w"</span>) != <span class="keyword">null</span>) &amp;&amp; (...) || (...);</div><div class="line"><span class="keyword">if</span> (existed) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>反例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((file.open(fileName, <span class="string">"w"</span>) != <span class="keyword">null</span>) &amp;&amp; (...) || (...)) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】循环体中的语句要考量性能，以下操作<code>尽量移至循环体外</code>处理，如<code>定义对象、变量、获取数据库连接</code>，进行不必要的 <code>try-catch</code> 操作（ 这个 try-catch 是否可以移至循环体外） 。</p>
</li>
<li>【推荐】<code>避免</code>采用取<code>反逻辑运算符</code>。<ul>
<li>说明： 取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。</li>
<li>正例： 使用 if (x &lt; 628) 来表达 x 小于 628。</li>
<li>反例： 使用 if (!(x &gt;= 628)) 来表达 x 小于 628。</li>
</ul>
</li>
<li>【推荐】接口入参保护，这种场景常见的是用作批量操作的接口。</li>
</ol>
<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考(2)"></a>参考(2)</h2><ol>
<li>【参考】下列情形，需要进行参数校验：<ul>
<li>1） 调用频次低的方法。</li>
<li>2） 执行时间开销很大的方法。 此情形中， 参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。</li>
<li>3） 需要极高稳定性和可用性的方法。</li>
<li>4） 对外提供的开放接口，不管是 RPC/API/HTTP 接口。</li>
<li>5） 敏感权限入口。</li>
</ul>
</li>
<li>【参考】下列情形， 不需要进行参数校验：<ul>
<li>1） 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。</li>
<li>2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。</li>
<li>3） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;控制语句-10&quot;&gt;&lt;a href=&quot;#控制语句-10&quot; class=&quot;headerlink&quot; title=&quot;控制语句(10)&quot;&gt;&lt;/a&gt;控制语句(10)&lt;/h1&gt;&lt;h2 id=&quot;强制-3&quot;&gt;&lt;a href=&quot;#强制-3&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(6)-并发处理.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(6)-%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(6)-并发处理/</id>
    <published>2018-02-09T07:16:33.000Z</published>
    <updated>2018-02-09T08:45:08.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发处理-15"><a href="#并发处理-15" class="headerlink" title="并发处理(15)"></a>并发处理(15)</h1><h2 id="强制-9"><a href="#强制-9" class="headerlink" title="强制(9)"></a>强制(9)</h2><ol>
<li>【强制】 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。<ul>
<li>说明： 资源驱动类、工具类、单例工厂类都需要注意。</li>
</ul>
</li>
<li><p>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</p>
<ul>
<li>正例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTaskThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerTaskThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setName(<span class="string">"TimerTaskThread"</span>);</div><div class="line">        ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p>
<ul>
<li>说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</li>
</ul>
</li>
<li>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<ul>
<li>说明： Executors 返回的线程池对象的弊端如下：<ul>
<li>1） <code>FixedThreadPool</code> 和 <code>SingleThreadPool</code>:<ul>
<li>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</li>
</ul>
</li>
<li>2） <code>CachedThreadPool</code> 和 <code>ScheduledThreadPool</code>:<ul>
<li>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>【强制】 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。</p>
<ul>
<li><p>正例： 注意线程安全，使用 DateUtils。亦推荐如下处理：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> DateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>说明： 如果是 JDK8 的应用，可以使用 Instant 代替 Date， LocalDateTime 代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释： simple beautiful strong immutable thread-safe。</p>
</li>
</ul>
</li>
<li>【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁； 能锁区块，就不要锁整个方法体； 能用对象锁，就不要用类锁。<ul>
<li>说明： 尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</li>
</ul>
</li>
<li>【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。<ul>
<li>说明： 线程一需要对表 A、 B、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、 B、 C，否则可能出现死锁。</li>
</ul>
</li>
<li>【强制】并发修改同一记录时，避免更新丢失， 需要加锁。 要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。<ul>
<li>说明： 如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</li>
</ul>
</li>
<li>【强制】多线程并行处理定时任务时， Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</li>
</ol>
<h2 id="推荐-3"><a href="#推荐-3" class="headerlink" title="推荐(3)"></a>推荐(3)</h2><ol>
<li>【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。<ul>
<li>说明： 注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</li>
</ul>
</li>
<li>【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。<ul>
<li>说明： Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。</li>
<li>正例： 在 JDK7 之后，可以直接使用 API ThreadLocalRandom， 而在 JDK7 之前， 需要编码保证每个线程持有一个实例。</li>
</ul>
</li>
<li>【推荐】 在并发场景下， 通过双重检查锁（ double-checked locking） 实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)， 推荐解决方案中较为简单一种（ 适用于 JDK5 及以上版本） ，将目标属性声明为 volatile 型。<ul>
<li>反例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Helper helper = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (helper == <span class="keyword">null</span>) <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (helper == <span class="keyword">null</span>)</div><div class="line">            helper = <span class="keyword">new</span> Helper();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> helper;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// other methods and fields...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="参考-3"><a href="#参考-3" class="headerlink" title="参考(3)"></a>参考(3)</h2><ol>
<li>【参考】 volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现：<br>AtomicInteger count = new AtomicInteger(); count.addAndGet(1);<br>如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（ 减少乐观锁的重试次数）。</li>
<li>【参考】 HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。</li>
<li>【参考】 ThreadLocal 无法解决共享对象的更新问题， ThreadLocal 对象建议使用 static修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;并发处理-15&quot;&gt;&lt;a href=&quot;#并发处理-15&quot; class=&quot;headerlink&quot; title=&quot;并发处理(15)&quot;&gt;&lt;/a&gt;并发处理(15)&lt;/h1&gt;&lt;h2 id=&quot;强制-9&quot;&gt;&lt;a href=&quot;#强制-9&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(5)-集合处理.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(5)-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(5)-集合处理/</id>
    <published>2018-02-09T07:07:33.000Z</published>
    <updated>2018-02-09T08:45:10.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合处理-13"><a href="#集合处理-13" class="headerlink" title="集合处理(13)"></a>集合处理(13)</h1><h2 id="强制-8"><a href="#强制-8" class="headerlink" title="强制(8)"></a>强制(8)</h2><ol>
<li>【强制】 关于 hashCode 和 equals 的处理，遵循如下规则：<ul>
<li>1） 只要重写 equals，就必须重写 hashCode。</li>
<li>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 <code>Set 存储的对象必须重写</code>这两个方法。</li>
<li>3） 如果<code>自定义对象作为 Map 的键</code>，那么<code>必须重写</code> hashCode 和 equals。</li>
<li>说明： String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。</li>
</ul>
</li>
<li>【强制】 ArrayList的subList结果不可强转成ArrayList，否则会抛出 ClassCastException异常， 即 java.util.RandomAccessSubList cannot be cast to java.util.ArrayList.<ul>
<li>说明： subList 返回的是 ArrayList 的内部类 <code>SubList</code>，并不是 ArrayList ，而是<code>ArrayList 的一个视图</code>，对于 SubList 子列表的所有操作<code>最终会反映到原列表</code>上。</li>
</ul>
</li>
<li>【强制】在 subList 场景中， 高度注意对<code>原集合元素个数的修改</code>，<code>会导致子列表的遍历、增加、删除均会产生 ConcurrentModificationException 异常</code>。</li>
<li><p>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一样的数组，大小就是 list.size()。</p>
<ul>
<li>说明： 使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配内存空间，并返回新数组地址； 如果数组元素个数大于实际所需，下标为[ list.size() ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。</li>
<li><p>正例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">2</span>);</div><div class="line">list.add(<span class="string">"guan"</span>);</div><div class="line">list.add(<span class="string">"bao"</span>);</div><div class="line">String[] array = <span class="keyword">new</span> String[list.size()];</div><div class="line">array = list.toArray(array);</div></pre></td></tr></table></figure>
</li>
<li><p>反例： 直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。</p>
</li>
</ul>
</li>
<li><p>【强制】使用工具类 <code>Arrays.asList()</code>把数组<code>转换</code>成<code>集合</code>时，<code>不能使用其修改集合相关的方法</code>，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</p>
<ul>
<li>说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String[] str = <span class="keyword">new</span> String[] &#123; <span class="string">"you"</span>, <span class="string">"wu"</span> &#125;;</div><div class="line">List list = Arrays.asList(str);</div><div class="line">第一种情况： list.add(<span class="string">"yangguanbao"</span>); 运行时异常。</div><div class="line">第二种情况： str[<span class="number">0</span>] = <span class="string">"gujin"</span>; 那么 list.get(<span class="number">0</span>)也会随之修改。</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法， 而&lt;? super T&gt;不能使用 get 方法，作为接口调用赋值时易出错。</p>
<ul>
<li>说明： 扩展说一下 PECS(Producer Extends Consumer Super)原则： 第一、 频繁往外读取内容的，适合用&lt;? extends T&gt;。 第二、 经常往里插入的，适合用&lt;? super T&gt;。</li>
</ul>
</li>
<li><p>【强制】不要在 foreach 循环里进行元素的 remove/add 操作。 <code>remove 元素请使用 Iterator方式</code>，如果<code>并发</code>操作，需要对 Iterator 对象<code>加锁</code>。</p>
<ul>
<li><p>正例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;String&gt; iterator = list.iterator();</div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">    String item = iterator.next();</div><div class="line">    <span class="keyword">if</span> (删除元素的条件) &#123;</div><div class="line">        iterator.remove();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>反例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">list.add(<span class="string">"1"</span>);</div><div class="line">list.add(<span class="string">"2"</span>);</div><div class="line"><span class="keyword">for</span> (String item : list) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="string">"1"</span>.equals(item)) &#123;</div><div class="line">        list.remove(item);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>说明： 以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</p>
</li>
</ul>
</li>
<li>【强制】在 JDK7 版本及以上， Comparator 要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。<ul>
<li>说明： 三个条件如下<ul>
<li>1） x， y 的比较结果和 y， x 的比较结果相反。</li>
<li>2） x&gt;y， y&gt;z， 则 x&gt;z。</li>
<li>3） x=y， 则 x， z 比较结果和 y， z 比较结果相同。</li>
</ul>
</li>
<li>反例： 下例中没有处理相等的情况，实际使用中可能会出现异常：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> o1.getId() &gt; o2.getId() ? <span class="number">1</span> : -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="推荐-3"><a href="#推荐-3" class="headerlink" title="推荐(3)"></a>推荐(3)</h2><ol>
<li>【推荐】集合初始化时， 指定集合初始值大小。<ul>
<li>说明：HashMap 使用 HashMap(int initialCapacity) 初始化，</li>
<li>正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子 （ 即 loaderfactor） 默认为 0.75， 如果暂时无法确定初始值大小，请设置为 16（即默认值） 。</li>
<li>反例： HashMap 需要放置 1024 个元素， 由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大， resize 需要重建 hash 表，严重影响性能。</li>
</ul>
</li>
<li>【推荐】<code>使用 entrySet 遍历 Map 类集合 KV</code>，而不是 keySet 方式进行遍历。<ul>
<li>说明： keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。<code>如果是 JDK8，使用 Map.foreach 方法</code>。</li>
<li>正例： values()返回的是 V 值集合，是一个 list 集合对象； keySet()返回的是 K 值集合，是一个 Set 集合对象； entrySet()返回的是 K-V 值组合集合。</li>
</ul>
</li>
<li><p>【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：</p>
<p>集合类 | Key | Value | Super | 说明<br>—-|—–|——-|——-|—<br>Hashtable | 不允许为null | 不允许为null | Dictionary | 线程安全<br>ConcurrentHashMap | 不允许为null | 不允许为null | AbstractMap | 锁分段技术（ JDK8:CAS）<br>TreeMap | 不允许为null | 允许为null | AbstractMap | 线程不安全<br>HashMap | 允许为null | 允许为null | AbstractMap | 线程不安全</p>
<ul>
<li>反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。</li>
</ul>
</li>
</ol>
<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考(2)"></a>参考(2)</h2><ol>
<li>【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。<ul>
<li>说明： <code>有序性</code>是指遍历的结果是按某种比较规则依次排列的。 <code>稳定性</code>指集合每次遍历的元素次序是一定的。 如： ArrayList 是 order/unsort； HashMap 是 unorder/unsort； TreeSet 是order/sort。</li>
</ul>
</li>
<li>【参考】利用 <code>Set</code> 元素唯一的特性，可以快速对一个集合进行<code>去重操作</code>，避免使用 List 的contains 方法进行遍历、对比、 去重操作。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集合处理-13&quot;&gt;&lt;a href=&quot;#集合处理-13&quot; class=&quot;headerlink&quot; title=&quot;集合处理(13)&quot;&gt;&lt;/a&gt;集合处理(13)&lt;/h1&gt;&lt;h2 id=&quot;强制-8&quot;&gt;&lt;a href=&quot;#强制-8&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(4)-OOP规约.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(4)-OOP%E8%A7%84%E7%BA%A6/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(4)-OOP规约/</id>
    <published>2018-02-09T07:04:34.000Z</published>
    <updated>2018-02-09T08:45:13.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OOP规约-20"><a href="#OOP规约-20" class="headerlink" title="OOP规约(20)"></a>OOP规约(20)</h1><h2 id="强制-12"><a href="#强制-12" class="headerlink" title="强制(12)"></a>强制(12)</h2><ol>
<li>【强制】使用类的<code>静态变量</code>或<code>静态方法</code>，直接用<code>类名</code>访问。</li>
<li>【强制】所有的<code>覆写</code>方法，<code>必须加@Override</code> 注解。<ul>
<li>说明： getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</li>
</ul>
</li>
<li>【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。<ul>
<li>说明： 可变参数必须放置在参数列表的最后。 （ 提倡同学们尽量不用可变参数编程）</li>
<li>正例： public User getUsers(String type, Integer… ids) {…}</li>
</ul>
</li>
<li>【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名， 避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</li>
<li>【强制】不能使用过时的类或方法。<ul>
<li>说明： java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口； 作为调用方来说，有义务去考证过时方法的新实现是什么。</li>
</ul>
</li>
<li>【强制】 Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。<ul>
<li>正例： “test”.equals(object);</li>
<li>反例： object.equals(“test”);</li>
<li>说明： 推荐使用 java.util.Objects#equals（ JDK7 引入的工具类）</li>
</ul>
</li>
<li>【强制】所有的相同类型的包装类对象之间<code>值的比较</code>，全部使用 equals 方法比较。<ul>
<li>说明： 对于 Integer var = ? 在<code>-128</code> 至 <code>127</code> 范围内的赋值， Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</li>
</ul>
</li>
<li>关于基本数据类型与包装数据类型的使用标准如下：<ul>
<li>1） 【强制】 所有的 POJO 类<code>属性必须使用包装数据类型</code>。</li>
<li>2） 【强制】 RPC 方法的返回值和参数必须使用包装数据类型。</li>
<li>3） 【推荐】 所有的<code>局部变量使用基本数据类型</code>。</li>
<li>说明： POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。</li>
<li>正例： 数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</li>
<li>反例： 比如显示成交总额涨跌情况，即正负 x%， x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</li>
</ul>
</li>
<li>【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性<code>默认值</code>。<ul>
<li>反例： POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</li>
</ul>
</li>
<li>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败； 如果完全不兼容升级，避免反序化混乱，那么请修改 serialVersionUID 值。<ul>
<li>说明： 注意 serialVersionUID 不一致会抛出序列化运行时异常。</li>
</ul>
</li>
<li>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</li>
<li>【强制】 POJO 类必须写 toString 方法。使用 IDE 中的工具： source&gt; generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。<ul>
<li>说明： 在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</li>
</ul>
</li>
</ol>
<h2 id="推荐-8"><a href="#推荐-8" class="headerlink" title="推荐(8)"></a>推荐(8)</h2><ol>
<li><p>【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。</p>
<ul>
<li>说明：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"a,b,c,,"</span>;</div><div class="line">String[] ary = str.split(<span class="string">","</span>);</div><div class="line"><span class="comment">// 预期大于 3，结果是 3</span></div><div class="line">System.out.println(ary.length);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于第 15 条规则。</p>
</li>
<li>【推荐】类内方法定义的顺序依次是：<code>公有方法或保护方法 &gt; 私有方法 &gt; getter/setter 方法</code>。<ul>
<li>说明： 公有方法是类的调用者和维护者最关心的方法，首屏展示最好； 保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法； 而私有方法外部一般不需要特别关心，是一个黑盒实现； 因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。</li>
</ul>
</li>
<li><p>【推荐】 setter 方法中，参数名称与类成员变量名称一致， this.成员名 = 参数名。在getter/setter 方法中， 不要增加业务逻辑，增加排查问题的难度。</p>
<ul>
<li>反例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (condition) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data + <span class="number">100</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data - <span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</p>
<ul>
<li>说明： 反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</li>
<li>反例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"start"</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">    str = str + <span class="string">"hello"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】 final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：</p>
<ul>
<li>1） 不允许被继承的类，如： String 类。</li>
<li>2） 不允许修改引用的域对象，如： POJO 类的域变量。</li>
<li>3） 不允许被重写的方法，如： POJO 类的 setter 方法。</li>
<li>4） 不允许运行过程中重新赋值的局部变量。</li>
<li>5） 避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好地进行重构。</li>
</ul>
</li>
<li>【推荐】慎用 Object 的 clone 方法来拷贝对象。<ul>
<li>说明： 对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。</li>
</ul>
</li>
<li>【推荐】类成员与方法访问控制从严：<ul>
<li>1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</li>
<li>2） 工具类不允许有 public 或 default 构造方法。</li>
<li>3） 类非 static 成员变量并且与子类共享，必须是 protected。</li>
<li>4） 类非 static 成员变量并且仅在本类使用，必须是 private。</li>
<li>5） 类 static 成员变量如果仅在本类使用，必须是 private。</li>
<li>6） 若是 static 成员变量，必须考虑是否为 final。</li>
<li>7） 类成员方法只供类内部调用，必须是 private。</li>
<li>8） 类成员方法只对继承类公开，那么限制为 protected。</li>
<li>说明： 任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</li>
<li>思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大， 无限制的到处跑，那么你会担心的。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OOP规约-20&quot;&gt;&lt;a href=&quot;#OOP规约-20&quot; class=&quot;headerlink&quot; title=&quot;OOP规约(20)&quot;&gt;&lt;/a&gt;OOP规约(20)&lt;/h1&gt;&lt;h2 id=&quot;强制-12&quot;&gt;&lt;a href=&quot;#强制-12&quot; class=&quot;headerli
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(3)-代码格式.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(3)-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(3)-代码格式/</id>
    <published>2018-02-09T07:04:33.000Z</published>
    <updated>2018-02-09T08:45:15.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码格式-11"><a href="#代码格式-11" class="headerlink" title="代码格式(11)"></a>代码格式(11)</h1><h2 id="强制-9"><a href="#强制-9" class="headerlink" title="强制(9)"></a>强制(9)</h2><ol>
<li>【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行； 如果是非空代码块则：<ul>
<li>1） 左大括号前不换行。</li>
<li>2） 左大括号后换行。</li>
<li>3） 右大括号前换行。</li>
<li>4） 右大括号后还有 else 等代码则不换行； 表示终止的右大括号后必须换行。</li>
</ul>
</li>
<li>【强制】 左小括号和字符之间不出现空格； 同样，右小括号和字符之间也不出现空格。详见第 5 条下方正例提示。<ul>
<li>反例： if (空格 a == b 空格)</li>
</ul>
</li>
<li>【强制】 if/for/while/switch/do 等保留字与括号之间都必须加空格。</li>
<li>【强制】任何二目、 三目运算符的左右两边都需要加一个空格。<ul>
<li>说明： 运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。</li>
</ul>
</li>
<li><p>【强制】 采用 4 个空格缩进，禁止使用 tab 字符。</p>
<ul>
<li>说明： 如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。 IDEA 设置 tab 为 4 个空格时，</li>
<li>请勿勾选 <code>Use tab character</code>；而在 eclipse 中，必须勾选 <code>insert spaces for tabs</code>。</li>
<li>正例： （ 涉及 1-5 点）  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="comment">// 缩进 4 个空格</span></div><div class="line">    String say = <span class="string">"hello"</span>;</div><div class="line">    <span class="comment">// 运算符的左右必须有一个空格</span></div><div class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号， 0 与右括号不需要空格</span></div><div class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</div><div class="line">        System.out.println(say);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 左大括号前加空格且不换行；左大括号后换行</span></div><div class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</div><div class="line">        System.out.println(<span class="string">"world"</span>);</div><div class="line">        <span class="comment">// 右大括号前换行，右大括号后有 else，不用换行</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        System.out.println(<span class="string">"ok"</span>);</div><div class="line">        <span class="comment">// 在右大括号后直接结束，则必须换行</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】注释的双斜线与注释内容之间有且仅有一个空格。</p>
<ul>
<li>正例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这是示例注释，请注意在双斜线之后有一个空格</span></div><div class="line">String ygb = <span class="keyword">new</span> String();</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p>
<ul>
<li>1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</li>
<li>2） 运算符与下文一起换行。</li>
<li>3） 方法调用的点符号与下文一起换行。</li>
<li>4） 方法调用时，多个参数， 需要换行时， 在逗号后进行。</li>
<li>5） 在括号前不要换行，见反例。</li>
<li><p>正例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line"><span class="comment">// 超过 120 个字符的情况下，换行缩进 4 个空格， 点号和方法名称一起换行</span></div><div class="line">sb.append(<span class="string">"zi"</span>).append(<span class="string">"xin"</span>)...</div><div class="line">    .append(<span class="string">"huang"</span>)...</div><div class="line">    .append(<span class="string">"huang"</span>)...</div><div class="line">    .append(<span class="string">"huang"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>反例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line"><span class="comment">// 超过 120 个字符的情况下，不要在括号前换行</span></div><div class="line">sb.append(<span class="string">"zi"</span>).append(<span class="string">"xin"</span>)...append</div><div class="line">(<span class="string">"huang"</span>);</div><div class="line"><span class="comment">// 参数很多的方法调用可能超过 120 个字符， 不要在逗号前换行</span></div><div class="line">method(args1, args2, args3, ...</div><div class="line">, argsX);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。</p>
<ul>
<li>正例： 下例中实参的”a”,后边必须要有一个空格。  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】 IDE 的 <code>text file encoding</code> 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 Windows 格式。</p>
</li>
</ol>
<h2 id="推荐-2"><a href="#推荐-2" class="headerlink" title="推荐(2)"></a>推荐(2)</h2><ol>
<li><p>【推荐】没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。</p>
<ul>
<li><p>正例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</div><div class="line"><span class="keyword">long</span> b = <span class="number">4L</span>;</div><div class="line"><span class="keyword">float</span> c = <span class="number">5F</span>;</div><div class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div></pre></td></tr></table></figure>
</li>
<li><p>说明： 增加 sb 这个变量，如果需要对齐，则给 a、 b、 c 都要增加几个空格，在变量比较多的情况下，是非常累赘的事情。</p>
</li>
</ul>
</li>
<li>【推荐】 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。<ul>
<li>说明： 没有必要插入<code>多个空行</code>进行隔开。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代码格式-11&quot;&gt;&lt;a href=&quot;#代码格式-11&quot; class=&quot;headerlink&quot; title=&quot;代码格式(11)&quot;&gt;&lt;/a&gt;代码格式(11)&lt;/h1&gt;&lt;h2 id=&quot;强制-9&quot;&gt;&lt;a href=&quot;#强制-9&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(2)-常量定义.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(2)-%E5%B8%B8%E9%87%8F%E5%AE%9A%E4%B9%89/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(2)-常量定义/</id>
    <published>2018-02-09T07:03:33.000Z</published>
    <updated>2018-02-09T08:45:20.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常量定义-5"><a href="#常量定义-5" class="headerlink" title="常量定义(5)"></a>常量定义(5)</h1><h2 id="强制-2"><a href="#强制-2" class="headerlink" title="强制(2)"></a>强制(2)</h2><ol>
<li>【强制】不允许任何魔法值（ 即未经预先定义的常量） 直接出现在代码中。</li>
<li>【强制】 <code>long</code> 或者 <code>Long</code> 初始赋值时， <code>使用大写的 L</code>，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。<ul>
<li>说明： Long a = 2l; 写的是数字的 21，还是 Long 型的 2?</li>
</ul>
</li>
</ol>
<h2 id="推荐-3"><a href="#推荐-3" class="headerlink" title="推荐(3)"></a>推荐(3)</h2><ol>
<li>【推荐】不要使用一个常量类维护所有常量， <code>按常量功能进行归类</code>，分开维护。<ul>
<li>说明： 大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。</li>
<li>正例： 缓存相关常量放在类 CacheConsts 下； 系统配置相关常量放在类 ConfigConsts 下。</li>
</ul>
</li>
<li><p>【推荐】常量的复用层次有五层：<code>跨应用</code>共享常量、<code>应用内</code>共享常量、<code>子工程</code>内共享常量、<code>包</code>内共享常量、<code>类</code>内共享常量。</p>
<ul>
<li>1） <code>跨应用</code>共享常量：放置在<code>二方库</code>中，通常是 client.jar 中的 constant 目录下。</li>
<li><p>2） <code>应用内</code>共享常量：放置在<code>一方库</code>中，通常是子模块中的 constant 目录下。  </p>
<pre><code>反例： 易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：  
类 A 中： public static final String YES = &quot;yes&quot;;  
类 B 中： public static final String YES = &quot;y&quot;;  
A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。
</code></pre></li>
<li><p>3） <code>子工程</code>内部共享常量：即在当前子工程的 constant 目录下。</p>
</li>
<li>4） <code>包</code>内共享常量：即在当前包下单独的 constant 目录下。</li>
<li>5） <code>类</code>内共享常量：直接在类内部 private static final 定义。</li>
</ul>
</li>
<li>【推荐】如果变量值仅在一个固定范围内变化用 enum 类型来定义。<ul>
<li>说明： 如果存在名称之外的延伸属性使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。</li>
<li>正例：<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SeasonEnum &#123;</div><div class="line">    SPRING(<span class="number">1</span>), SUMMER(<span class="number">2</span>), AUTUMN(<span class="number">3</span>), WINTER(<span class="number">4</span>);</div><div class="line">    <span class="keyword">int</span> seq;</div><div class="line">    SeasonEnum(<span class="keyword">int</span> seq)&#123;</div><div class="line">        <span class="keyword">this</span>.seq = seq;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常量定义-5&quot;&gt;&lt;a href=&quot;#常量定义-5&quot; class=&quot;headerlink&quot; title=&quot;常量定义(5)&quot;&gt;&lt;/a&gt;常量定义(5)&lt;/h1&gt;&lt;h2 id=&quot;强制-2&quot;&gt;&lt;a href=&quot;#强制-2&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
</feed>
