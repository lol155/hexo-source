<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>名字待定</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.signalfire2017.com/"/>
  <updated>2018-02-09T09:54:15.921Z</updated>
  <id>https://blog.signalfire2017.com/</id>
  
  <author>
    <name>signalFire</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里java规约(三)-单元测试.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%89)-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(三)-单元测试/</id>
    <published>2018-02-09T09:29:33.000Z</published>
    <updated>2018-02-09T09:54:15.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单元测试-16"><a href="#单元测试-16" class="headerlink" title="单元测试(16)"></a>单元测试(16)</h1><h2 id="强制-7"><a href="#强制-7" class="headerlink" title="强制(7)"></a>强制(7)</h2><ol>
<li>【强制】好的单元测试必须遵守 AIR 原则。<ul>
<li>说明： 单元测试在线上运行时，感觉像空气（ AIR） 一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</li>
<li>A： Automatic（自动化）</li>
<li>I： Independent（独立性）</li>
<li>R： Repeatable（可重复）</li>
</ul>
</li>
<li>【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</li>
<li>【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。<ul>
<li>反例： method2 需要依赖 method1 的执行， 将执行结果作为 method2 的输入。</li>
</ul>
</li>
<li>【强制】单元测试是可以重复执行的，不能受到外界环境的影响。<ul>
<li>说明： 单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等） 有依赖，容易导致持续集成机制的不可用。</li>
<li>正例： 为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。</li>
</ul>
</li>
<li>【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。<ul>
<li>说明： 只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。</li>
</ul>
</li>
<li>【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。<ul>
<li>说明： 新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</li>
</ul>
</li>
<li>【强制】单元测试代码必须写在如下工程目录： src/test/java，不允许写在业务代码目录下。<ul>
<li>说明： 源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。</li>
</ul>
</li>
</ol>
<h2 id="推荐-7"><a href="#推荐-7" class="headerlink" title="推荐(7)"></a>推荐(7)</h2><ol>
<li>【推荐】单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%<ul>
<li>说明： 在工程规约的应用分层中提到的 DAO 层， Manager 层，可重用度高的 Service，都应该进行单元测试。</li>
</ul>
</li>
<li>【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。<ul>
<li>B： Border，边界值测试，包括循环边界、特殊取值、 特殊时间点、数据顺序等。</li>
<li>C： Correct，正确的输入，并得到预期的结果。</li>
<li>D： Design，与设计文档相结合，来编写单元测试。</li>
<li>E： Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。</li>
</ul>
</li>
<li>【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。<ul>
<li>反例： 删除某一行数据的单元测试，在数据库中， 先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则， 导致测试结果异常。</li>
</ul>
</li>
<li>【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。<ul>
<li>正例： 在 RDC 内部单元测试中，使用 RDC_UNIT<em>TEST</em>的前缀标识数据。</li>
</ul>
</li>
<li>【推荐】对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</li>
<li>【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（ UC）。</li>
<li>【推荐】单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。</li>
</ol>
<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考(2)"></a>参考(2)</h2><ol>
<li>【参考】为了更方便地进行单元测试，业务代码应避免以下情况：<ul>
<li>构造方法中做的事情过多。</li>
<li>存在过多的全局变量和静态方法。</li>
<li>存在过多的外部依赖。</li>
<li>存在过多的条件语句。</li>
<li>说明： 多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</li>
</ul>
</li>
<li>【参考】不要对单元测试存在如下误解：<ul>
<li>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。</li>
<li>单元测试代码是多余的。 汽车的整体功能与各单元部件的测试正常与否是强相关的。</li>
<li>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</li>
<li>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单元测试-16&quot;&gt;&lt;a href=&quot;#单元测试-16&quot; class=&quot;headerlink&quot; title=&quot;单元测试(16)&quot;&gt;&lt;/a&gt;单元测试(16)&lt;/h1&gt;&lt;h2 id=&quot;强制-7&quot;&gt;&lt;a href=&quot;#强制-7&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(二)-异常日志(1)-异常处理.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%BA%8C)-%E5%BC%82%E5%B8%B8%E6%97%A5%E5%BF%97(1)-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(二)-异常日志(1)-异常处理/</id>
    <published>2018-02-09T08:29:33.000Z</published>
    <updated>2018-02-09T08:45:40.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常处理-13"><a href="#异常处理-13" class="headerlink" title="异常处理(13)"></a>异常处理(13)</h1><h2 id="强制-8"><a href="#强制-8" class="headerlink" title="强制(8)"></a>强制(8)</h2><ol>
<li>【强制】 Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来处理，比如： NullPointerException， IndexOutOfBoundsException 等等。<ul>
<li>说明： 无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。</li>
<li>正例： if (obj != null) {…}</li>
<li>反例： try { obj.method() } catch (NullPointerException e) {…}</li>
</ul>
</li>
<li>【强制】异常不要用来做流程控制，条件控制。<ul>
<li>说明： 异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</li>
</ul>
</li>
<li>【强制】 catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。<ul>
<li>说明： 对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。</li>
<li>正例： 用户注册的场景中，如果用户输入非法字符， 或用户名称已存在， 或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</li>
</ul>
</li>
<li>【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</li>
<li>【强制】有 try 块放到了事务代码中， catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。</li>
<li>【强制】 finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。<ul>
<li>说明： 如果 JDK7 及以上，可以使用 try-with-resources 方式。</li>
</ul>
</li>
<li>【强制】不要在 finally 块中使用 return。<ul>
<li>说明： finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</li>
</ul>
</li>
<li>【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。<ul>
<li>说明： 如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</li>
</ul>
</li>
</ol>
<h2 id="推荐-4"><a href="#推荐-4" class="headerlink" title="推荐(4)"></a>推荐(4)</h2><ol>
<li>【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。<ul>
<li>说明： 本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、 序列化失败、 运行时异常等场景返回null 的情况。</li>
</ul>
</li>
<li>【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：<ul>
<li>1）返回类型为基本数据类型， return 包装数据类型的对象时，自动拆箱有可能产生 NPE。<ul>
<li>反例： public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。</li>
</ul>
</li>
<li>2） 数据库的查询结果可能为 null。</li>
<li>3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。</li>
<li>4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</li>
<li>5） 对于 Session 中获取的数据， 建议 NPE 检查，避免空指针。</li>
<li>6） 级联调用 obj.getA().getB().getC()； 一连串调用，易产生 NPE。</li>
<li>正例： 使用 JDK8 的 Optional 类来防止 NPE 问题。</li>
</ul>
</li>
<li>【推荐】定义时区分 unchecked / checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如： DAOException / ServiceException 等。</li>
</ol>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考(1)"></a>参考(1)</h2><ol>
<li>【 参考】 对于公司外的 <code>http/api 开放接口必须使用“错误码”</code>； 而<code>应用内部推荐异常抛出</code>；跨应用间 <code>RPC</code> 调用优先考虑使用 <code>Result</code> 方式，封装 <code>isSuccess</code>()方法、 <code>“错误码”、</code> <code>“错误简短信息”。</code><ul>
<li>说明： 关于 RPC 方法返回方式使用 Result 方式的理由：</li>
<li>1） 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</li>
<li>2） 如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</li>
</ul>
</li>
<li>【参考】 <code>避免出现重复的代码</code>（ Don’t Repeat Yourself） ，即 DRY 原则。<ul>
<li>说明： 随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。</li>
<li>正例： 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：<ul>
<li>private boolean checkParam(DTO dto) {…}</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;异常处理-13&quot;&gt;&lt;a href=&quot;#异常处理-13&quot; class=&quot;headerlink&quot; title=&quot;异常处理(13)&quot;&gt;&lt;/a&gt;异常处理(13)&lt;/h1&gt;&lt;h2 id=&quot;强制-8&quot;&gt;&lt;a href=&quot;#强制-8&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(二)-异常日志(2)-日志规约.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%BA%8C)-%E5%BC%82%E5%B8%B8%E6%97%A5%E5%BF%97(2)-%E6%97%A5%E5%BF%97%E8%A7%84%E7%BA%A6/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(二)-异常日志(2)-日志规约/</id>
    <published>2018-02-09T08:29:33.000Z</published>
    <updated>2018-02-09T08:57:21.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志规约-8"><a href="#日志规约-8" class="headerlink" title="日志规约(8)"></a>日志规约(8)</h1><h2 id="强制-6"><a href="#强制-6" class="headerlink" title="强制(6)"></a>强制(6)</h2><ol>
<li><p>【强制】应用中<code>不可直接使用</code>日志系统（ Log4j、 Logback） 中的 API，而应依赖<code>使用</code>日志框架<code>SLF4J</code> 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Abc.class);</div></pre></td></tr></table></figure>
</li>
<li><p>【强制】日志文件推荐<code>至少</code>保存 <code>15</code> 天，因为有些异常具备以“周”为频次发生的特点。</p>
</li>
<li>【强制】应用中的扩展日志（ 如打点、临时监控、访问日志等） 命名方式：<ul>
<li>appName_logType_logName.log。</li>
<li>logType:日志类型，推荐分类有 stats/monitor/visit 等；</li>
<li>logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</li>
<li>正例： mppserver 应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log</li>
<li>说明： 推荐对日志进行分类， 如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</li>
</ul>
</li>
<li><p>【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。</p>
<ul>
<li>说明： logger.debug(“Processing trade with id: “ + id + “ and symbol: “ + symbol);</li>
<li>如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。</li>
<li><p>正例： （ 条件）</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">    logger.debug(<span class="string">"Processing trade with id: "</span> + id + <span class="string">" and symbol: "</span> + symbol);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>正例： （ 占位符）</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.debug(<span class="string">"Processing trade with id: &#123;&#125; and symbol : &#123;&#125; "</span>, id, symbol);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。</p>
<ul>
<li>正例： <logger name="com.taobao.dubbo.config" additivity="false"></logger></li>
</ul>
</li>
<li>【强制】异常信息应该包括两类信息：<code>案发现场信息</code>和<code>异常堆栈信息</code>。如果不处理，那么通过关键字 throws 往上抛出。<ul>
<li>正例： logger.error(各类参数或者对象 toString + “_” + e.getMessage(), e);</li>
</ul>
</li>
</ol>
<h2 id="推荐-2"><a href="#推荐-2" class="headerlink" title="推荐(2)"></a>推荐(2)</h2><ol>
<li>【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志； 有选择地输出 info 日志； 如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。<ul>
<li>说明： 大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。 记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</li>
</ul>
</li>
<li>【推荐】可以使用 <code>warn</code> 日志级别来记录<code>用户输入参数错误</code>的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。<ul>
<li>说明： 注意日志输出的级别， error 级别只记录系统逻辑出错、异常或者重要的错误信息。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;日志规约-8&quot;&gt;&lt;a href=&quot;#日志规约-8&quot; class=&quot;headerlink&quot; title=&quot;日志规约(8)&quot;&gt;&lt;/a&gt;日志规约(8)&lt;/h1&gt;&lt;h2 id=&quot;强制-6&quot;&gt;&lt;a href=&quot;#强制-6&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(9)-其他.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(9)-%E5%85%B6%E4%BB%96/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(9)-其他/</id>
    <published>2018-02-09T08:12:33.000Z</published>
    <updated>2018-02-09T08:44:59.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="其他-8"><a href="#其他-8" class="headerlink" title="其他(8)"></a>其他(8)</h1><h2 id="强制-5"><a href="#强制-5" class="headerlink" title="强制(5)"></a>强制(5)</h2><ol>
<li>【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。<ul>
<li>说明： 不要在方法体内定义： Pattern pattern = Pattern.compile(规则);</li>
</ul>
</li>
<li>【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（ boolean 命名不需要加 is前缀） ，会自动调用 isXxx()方法。<ul>
<li>说明： 注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。</li>
</ul>
</li>
<li>【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。<ul>
<li>说明： 如果 var=null 或者不存在，那么${var}会直接显示在页面上。</li>
</ul>
</li>
<li>【强制】注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x&lt;1（ 能够取到零值，注意除零异常） ，如果想<code>获取整数类型的随机数</code>，不要将 x 放大 10 的若干倍然后取整，直接使用 <code>Random</code> 对象的 <code>nextInt</code> 或者 <code>nextLong</code> 方法。</li>
<li>【强制】获取当前毫秒数 System.currentTimeMillis(); 而不是 new Date().getTime();<ul>
<li>说明： 如果想获取更加精确的纳秒级时间值， 使用 System.nanoTime()的方式。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</li>
</ul>
</li>
</ol>
<h2 id="推荐-3"><a href="#推荐-3" class="headerlink" title="推荐(3)"></a>推荐(3)</h2><ol>
<li>【推荐】 不要在视图模板中加入任何复杂的逻辑。<ul>
<li>说明： 根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。</li>
</ul>
</li>
<li>【推荐】 任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</li>
<li>【推荐】 及时清理不再使用的代码段或配置信息。<ul>
<li>说明： 对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。</li>
<li>正例： 对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///)来说明注释掉代码的理由。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;其他-8&quot;&gt;&lt;a href=&quot;#其他-8&quot; class=&quot;headerlink&quot; title=&quot;其他(8)&quot;&gt;&lt;/a&gt;其他(8)&lt;/h1&gt;&lt;h2 id=&quot;强制-5&quot;&gt;&lt;a href=&quot;#强制-5&quot; class=&quot;headerlink&quot; title=&quot;强制(5)&quot;&gt;
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(8)-注释规约.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(8)-%E6%B3%A8%E9%87%8A%E8%A7%84%E7%BA%A6/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(8)-注释规约/</id>
    <published>2018-02-09T08:02:33.000Z</published>
    <updated>2018-02-09T08:45:01.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注释规约-11"><a href="#注释规约-11" class="headerlink" title="注释规约(11)"></a>注释规约(11)</h1><h2 id="强制-6"><a href="#强制-6" class="headerlink" title="强制(6)"></a>强制(6)</h2><ol>
<li>【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/<em>*内容</em>/格式，不得使用// xxx 方式。<ul>
<li>说明： 在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释； 在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</li>
</ul>
</li>
<li>【强制】所有的抽象方法（ 包括接口中的方法） 必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。<ul>
<li>说明： 对子类的实现要求，或者调用注意事项，请一并说明。</li>
</ul>
</li>
<li>【强制】所有的类都必须添加创建者和创建日期。</li>
<li>【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/<em> </em>/注释，注意与代码对齐。</li>
<li>【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</li>
</ol>
<h2 id="推荐-2"><a href="#推荐-2" class="headerlink" title="推荐(2)"></a>推荐(2)</h2><ol>
<li>【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。<ul>
<li>反例： “TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</li>
</ul>
</li>
<li>【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。<ul>
<li>说明： 代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</li>
</ul>
</li>
</ol>
<h2 id="参考-5"><a href="#参考-5" class="headerlink" title="参考(5)"></a>参考(5)</h2><ol>
<li>【参考】 谨慎注释掉代码。 在上方详细说明，而不是简单地注释掉。 如果无用，则删除。<ul>
<li>说明： 代码被注释掉有两种可能性： <ul>
<li>1） 后续会恢复此段代码逻辑。 </li>
<li>2） 永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（ 代码仓库保存了历史代码） 。</li>
</ul>
</li>
</ul>
</li>
<li>【参考】对于注释的要求：<ul>
<li>第一、能够准确反应设计思想和代码逻辑； </li>
<li>第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。<blockquote>
<p>完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路； 注释也是给继任者看的，使其能够快速接替自己的工作。</p>
</blockquote>
</li>
</ul>
</li>
<li>【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。<ul>
<li>反例：<br>// put elephant into fridge<br>put(elephant, fridge);<br>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</li>
</ul>
</li>
<li>【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。<ul>
<li>1） 待办事宜（ TODO） :（标记人，标记时间， [预计处理时间]）表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法（ 因为它是一个 Javadoc 标签）。</li>
<li>2） 错误，不能工作（ FIXME） :（ 标记人，标记时间， [预计处理时间]）在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注释规约-11&quot;&gt;&lt;a href=&quot;#注释规约-11&quot; class=&quot;headerlink&quot; title=&quot;注释规约(11)&quot;&gt;&lt;/a&gt;注释规约(11)&lt;/h1&gt;&lt;h2 id=&quot;强制-6&quot;&gt;&lt;a href=&quot;#强制-6&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(7)-控制语句.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(7)-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(7)-控制语句/</id>
    <published>2018-02-09T07:22:33.000Z</published>
    <updated>2018-02-09T08:45:06.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="控制语句-10"><a href="#控制语句-10" class="headerlink" title="控制语句(10)"></a>控制语句(10)</h1><h2 id="强制-3"><a href="#强制-3" class="headerlink" title="强制(3)"></a>强制(3)</h2><ol>
<li>【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止； 在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使空代码。</li>
<li>【强制】在 if/else/for/while/do 语句中必须使用大括号。 即使只有一行代码，避免采用单行的编码方式： if (condition) statements;</li>
<li>【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。<ul>
<li>说明： 如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。</li>
<li>反例： 判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数， 这样的话，活动无法终止。</li>
</ul>
</li>
</ol>
<h2 id="推荐-5"><a href="#推荐-5" class="headerlink" title="推荐(5)"></a>推荐(5)</h2><ol>
<li><p>【推荐】表达异常的分支时，少用 if-else 方式，这种方式可以改写成：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">  ...</div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 接着写 else 的业务逻辑代码;</span></div></pre></td></tr></table></figure>
<ul>
<li>说明： 如果非得使用 if()…else if()…else…方式表达逻辑，【强制】 避免后续代码维护困难， 请勿超过 3 层。</li>
<li>正例： 超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">today</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (isBusy()) &#123;</div><div class="line">    System.out.println(“change time.”);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (isFree()) &#123;</div><div class="line">    System.out.println(“go to travel.”);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p>
<ul>
<li>说明： 很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</li>
<li><p>正例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 伪代码如下</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> existed = (file.open(fileName, <span class="string">"w"</span>) != <span class="keyword">null</span>) &amp;&amp; (...) || (...);</div><div class="line"><span class="keyword">if</span> (existed) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>反例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((file.open(fileName, <span class="string">"w"</span>) != <span class="keyword">null</span>) &amp;&amp; (...) || (...)) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】循环体中的语句要考量性能，以下操作<code>尽量移至循环体外</code>处理，如<code>定义对象、变量、获取数据库连接</code>，进行不必要的 <code>try-catch</code> 操作（ 这个 try-catch 是否可以移至循环体外） 。</p>
</li>
<li>【推荐】<code>避免</code>采用取<code>反逻辑运算符</code>。<ul>
<li>说明： 取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。</li>
<li>正例： 使用 if (x &lt; 628) 来表达 x 小于 628。</li>
<li>反例： 使用 if (!(x &gt;= 628)) 来表达 x 小于 628。</li>
</ul>
</li>
<li>【推荐】接口入参保护，这种场景常见的是用作批量操作的接口。</li>
</ol>
<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考(2)"></a>参考(2)</h2><ol>
<li>【参考】下列情形，需要进行参数校验：<ul>
<li>1） 调用频次低的方法。</li>
<li>2） 执行时间开销很大的方法。 此情形中， 参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。</li>
<li>3） 需要极高稳定性和可用性的方法。</li>
<li>4） 对外提供的开放接口，不管是 RPC/API/HTTP 接口。</li>
<li>5） 敏感权限入口。</li>
</ul>
</li>
<li>【参考】下列情形， 不需要进行参数校验：<ul>
<li>1） 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。</li>
<li>2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。</li>
<li>3） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;控制语句-10&quot;&gt;&lt;a href=&quot;#控制语句-10&quot; class=&quot;headerlink&quot; title=&quot;控制语句(10)&quot;&gt;&lt;/a&gt;控制语句(10)&lt;/h1&gt;&lt;h2 id=&quot;强制-3&quot;&gt;&lt;a href=&quot;#强制-3&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(6)-并发处理.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(6)-%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(6)-并发处理/</id>
    <published>2018-02-09T07:16:33.000Z</published>
    <updated>2018-02-09T08:45:08.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发处理-15"><a href="#并发处理-15" class="headerlink" title="并发处理(15)"></a>并发处理(15)</h1><h2 id="强制-9"><a href="#强制-9" class="headerlink" title="强制(9)"></a>强制(9)</h2><ol>
<li>【强制】 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。<ul>
<li>说明： 资源驱动类、工具类、单例工厂类都需要注意。</li>
</ul>
</li>
<li><p>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</p>
<ul>
<li>正例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTaskThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerTaskThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setName(<span class="string">"TimerTaskThread"</span>);</div><div class="line">        ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p>
<ul>
<li>说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</li>
</ul>
</li>
<li>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<ul>
<li>说明： Executors 返回的线程池对象的弊端如下：<ul>
<li>1） <code>FixedThreadPool</code> 和 <code>SingleThreadPool</code>:<ul>
<li>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</li>
</ul>
</li>
<li>2） <code>CachedThreadPool</code> 和 <code>ScheduledThreadPool</code>:<ul>
<li>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>【强制】 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。</p>
<ul>
<li><p>正例： 注意线程安全，使用 DateUtils。亦推荐如下处理：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> DateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>说明： 如果是 JDK8 的应用，可以使用 Instant 代替 Date， LocalDateTime 代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释： simple beautiful strong immutable thread-safe。</p>
</li>
</ul>
</li>
<li>【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁； 能锁区块，就不要锁整个方法体； 能用对象锁，就不要用类锁。<ul>
<li>说明： 尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</li>
</ul>
</li>
<li>【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。<ul>
<li>说明： 线程一需要对表 A、 B、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、 B、 C，否则可能出现死锁。</li>
</ul>
</li>
<li>【强制】并发修改同一记录时，避免更新丢失， 需要加锁。 要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。<ul>
<li>说明： 如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</li>
</ul>
</li>
<li>【强制】多线程并行处理定时任务时， Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</li>
</ol>
<h2 id="推荐-3"><a href="#推荐-3" class="headerlink" title="推荐(3)"></a>推荐(3)</h2><ol>
<li>【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。<ul>
<li>说明： 注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</li>
</ul>
</li>
<li>【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。<ul>
<li>说明： Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。</li>
<li>正例： 在 JDK7 之后，可以直接使用 API ThreadLocalRandom， 而在 JDK7 之前， 需要编码保证每个线程持有一个实例。</li>
</ul>
</li>
<li>【推荐】 在并发场景下， 通过双重检查锁（ double-checked locking） 实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)， 推荐解决方案中较为简单一种（ 适用于 JDK5 及以上版本） ，将目标属性声明为 volatile 型。<ul>
<li>反例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Helper helper = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (helper == <span class="keyword">null</span>) <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (helper == <span class="keyword">null</span>)</div><div class="line">            helper = <span class="keyword">new</span> Helper();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> helper;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// other methods and fields...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="参考-3"><a href="#参考-3" class="headerlink" title="参考(3)"></a>参考(3)</h2><ol>
<li>【参考】 volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现：<br>AtomicInteger count = new AtomicInteger(); count.addAndGet(1);<br>如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（ 减少乐观锁的重试次数）。</li>
<li>【参考】 HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。</li>
<li>【参考】 ThreadLocal 无法解决共享对象的更新问题， ThreadLocal 对象建议使用 static修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;并发处理-15&quot;&gt;&lt;a href=&quot;#并发处理-15&quot; class=&quot;headerlink&quot; title=&quot;并发处理(15)&quot;&gt;&lt;/a&gt;并发处理(15)&lt;/h1&gt;&lt;h2 id=&quot;强制-9&quot;&gt;&lt;a href=&quot;#强制-9&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(5)-集合处理.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(5)-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(5)-集合处理/</id>
    <published>2018-02-09T07:07:33.000Z</published>
    <updated>2018-02-09T08:45:10.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合处理-13"><a href="#集合处理-13" class="headerlink" title="集合处理(13)"></a>集合处理(13)</h1><h2 id="强制-8"><a href="#强制-8" class="headerlink" title="强制(8)"></a>强制(8)</h2><ol>
<li>【强制】 关于 hashCode 和 equals 的处理，遵循如下规则：<ul>
<li>1） 只要重写 equals，就必须重写 hashCode。</li>
<li>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 <code>Set 存储的对象必须重写</code>这两个方法。</li>
<li>3） 如果<code>自定义对象作为 Map 的键</code>，那么<code>必须重写</code> hashCode 和 equals。</li>
<li>说明： String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。</li>
</ul>
</li>
<li>【强制】 ArrayList的subList结果不可强转成ArrayList，否则会抛出 ClassCastException异常， 即 java.util.RandomAccessSubList cannot be cast to java.util.ArrayList.<ul>
<li>说明： subList 返回的是 ArrayList 的内部类 <code>SubList</code>，并不是 ArrayList ，而是<code>ArrayList 的一个视图</code>，对于 SubList 子列表的所有操作<code>最终会反映到原列表</code>上。</li>
</ul>
</li>
<li>【强制】在 subList 场景中， 高度注意对<code>原集合元素个数的修改</code>，<code>会导致子列表的遍历、增加、删除均会产生 ConcurrentModificationException 异常</code>。</li>
<li><p>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一样的数组，大小就是 list.size()。</p>
<ul>
<li>说明： 使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配内存空间，并返回新数组地址； 如果数组元素个数大于实际所需，下标为[ list.size() ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。</li>
<li><p>正例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">2</span>);</div><div class="line">list.add(<span class="string">"guan"</span>);</div><div class="line">list.add(<span class="string">"bao"</span>);</div><div class="line">String[] array = <span class="keyword">new</span> String[list.size()];</div><div class="line">array = list.toArray(array);</div></pre></td></tr></table></figure>
</li>
<li><p>反例： 直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。</p>
</li>
</ul>
</li>
<li><p>【强制】使用工具类 <code>Arrays.asList()</code>把数组<code>转换</code>成<code>集合</code>时，<code>不能使用其修改集合相关的方法</code>，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</p>
<ul>
<li>说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String[] str = <span class="keyword">new</span> String[] &#123; <span class="string">"you"</span>, <span class="string">"wu"</span> &#125;;</div><div class="line">List list = Arrays.asList(str);</div><div class="line">第一种情况： list.add(<span class="string">"yangguanbao"</span>); 运行时异常。</div><div class="line">第二种情况： str[<span class="number">0</span>] = <span class="string">"gujin"</span>; 那么 list.get(<span class="number">0</span>)也会随之修改。</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法， 而&lt;? super T&gt;不能使用 get 方法，作为接口调用赋值时易出错。</p>
<ul>
<li>说明： 扩展说一下 PECS(Producer Extends Consumer Super)原则： 第一、 频繁往外读取内容的，适合用&lt;? extends T&gt;。 第二、 经常往里插入的，适合用&lt;? super T&gt;。</li>
</ul>
</li>
<li><p>【强制】不要在 foreach 循环里进行元素的 remove/add 操作。 <code>remove 元素请使用 Iterator方式</code>，如果<code>并发</code>操作，需要对 Iterator 对象<code>加锁</code>。</p>
<ul>
<li><p>正例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;String&gt; iterator = list.iterator();</div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">    String item = iterator.next();</div><div class="line">    <span class="keyword">if</span> (删除元素的条件) &#123;</div><div class="line">        iterator.remove();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>反例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">list.add(<span class="string">"1"</span>);</div><div class="line">list.add(<span class="string">"2"</span>);</div><div class="line"><span class="keyword">for</span> (String item : list) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="string">"1"</span>.equals(item)) &#123;</div><div class="line">        list.remove(item);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>说明： 以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</p>
</li>
</ul>
</li>
<li>【强制】在 JDK7 版本及以上， Comparator 要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。<ul>
<li>说明： 三个条件如下<ul>
<li>1） x， y 的比较结果和 y， x 的比较结果相反。</li>
<li>2） x&gt;y， y&gt;z， 则 x&gt;z。</li>
<li>3） x=y， 则 x， z 比较结果和 y， z 比较结果相同。</li>
</ul>
</li>
<li>反例： 下例中没有处理相等的情况，实际使用中可能会出现异常：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> o1.getId() &gt; o2.getId() ? <span class="number">1</span> : -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="推荐-3"><a href="#推荐-3" class="headerlink" title="推荐(3)"></a>推荐(3)</h2><ol>
<li>【推荐】集合初始化时， 指定集合初始值大小。<ul>
<li>说明：HashMap 使用 HashMap(int initialCapacity) 初始化，</li>
<li>正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子 （ 即 loaderfactor） 默认为 0.75， 如果暂时无法确定初始值大小，请设置为 16（即默认值） 。</li>
<li>反例： HashMap 需要放置 1024 个元素， 由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大， resize 需要重建 hash 表，严重影响性能。</li>
</ul>
</li>
<li>【推荐】<code>使用 entrySet 遍历 Map 类集合 KV</code>，而不是 keySet 方式进行遍历。<ul>
<li>说明： keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。<code>如果是 JDK8，使用 Map.foreach 方法</code>。</li>
<li>正例： values()返回的是 V 值集合，是一个 list 集合对象； keySet()返回的是 K 值集合，是一个 Set 集合对象； entrySet()返回的是 K-V 值组合集合。</li>
</ul>
</li>
<li><p>【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：</p>
<p>集合类 | Key | Value | Super | 说明<br>—-|—–|——-|——-|—<br>Hashtable | 不允许为null | 不允许为null | Dictionary | 线程安全<br>ConcurrentHashMap | 不允许为null | 不允许为null | AbstractMap | 锁分段技术（ JDK8:CAS）<br>TreeMap | 不允许为null | 允许为null | AbstractMap | 线程不安全<br>HashMap | 允许为null | 允许为null | AbstractMap | 线程不安全</p>
<ul>
<li>反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。</li>
</ul>
</li>
</ol>
<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考(2)"></a>参考(2)</h2><ol>
<li>【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。<ul>
<li>说明： <code>有序性</code>是指遍历的结果是按某种比较规则依次排列的。 <code>稳定性</code>指集合每次遍历的元素次序是一定的。 如： ArrayList 是 order/unsort； HashMap 是 unorder/unsort； TreeSet 是order/sort。</li>
</ul>
</li>
<li>【参考】利用 <code>Set</code> 元素唯一的特性，可以快速对一个集合进行<code>去重操作</code>，避免使用 List 的contains 方法进行遍历、对比、 去重操作。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集合处理-13&quot;&gt;&lt;a href=&quot;#集合处理-13&quot; class=&quot;headerlink&quot; title=&quot;集合处理(13)&quot;&gt;&lt;/a&gt;集合处理(13)&lt;/h1&gt;&lt;h2 id=&quot;强制-8&quot;&gt;&lt;a href=&quot;#强制-8&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(4)-OOP规约.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(4)-OOP%E8%A7%84%E7%BA%A6/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(4)-OOP规约/</id>
    <published>2018-02-09T07:04:34.000Z</published>
    <updated>2018-02-09T08:45:13.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OOP规约-20"><a href="#OOP规约-20" class="headerlink" title="OOP规约(20)"></a>OOP规约(20)</h1><h2 id="强制-12"><a href="#强制-12" class="headerlink" title="强制(12)"></a>强制(12)</h2><ol>
<li>【强制】使用类的<code>静态变量</code>或<code>静态方法</code>，直接用<code>类名</code>访问。</li>
<li>【强制】所有的<code>覆写</code>方法，<code>必须加@Override</code> 注解。<ul>
<li>说明： getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</li>
</ul>
</li>
<li>【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。<ul>
<li>说明： 可变参数必须放置在参数列表的最后。 （ 提倡同学们尽量不用可变参数编程）</li>
<li>正例： public User getUsers(String type, Integer… ids) {…}</li>
</ul>
</li>
<li>【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名， 避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</li>
<li>【强制】不能使用过时的类或方法。<ul>
<li>说明： java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口； 作为调用方来说，有义务去考证过时方法的新实现是什么。</li>
</ul>
</li>
<li>【强制】 Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。<ul>
<li>正例： “test”.equals(object);</li>
<li>反例： object.equals(“test”);</li>
<li>说明： 推荐使用 java.util.Objects#equals（ JDK7 引入的工具类）</li>
</ul>
</li>
<li>【强制】所有的相同类型的包装类对象之间<code>值的比较</code>，全部使用 equals 方法比较。<ul>
<li>说明： 对于 Integer var = ? 在<code>-128</code> 至 <code>127</code> 范围内的赋值， Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</li>
</ul>
</li>
<li>关于基本数据类型与包装数据类型的使用标准如下：<ul>
<li>1） 【强制】 所有的 POJO 类<code>属性必须使用包装数据类型</code>。</li>
<li>2） 【强制】 RPC 方法的返回值和参数必须使用包装数据类型。</li>
<li>3） 【推荐】 所有的<code>局部变量使用基本数据类型</code>。</li>
<li>说明： POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。</li>
<li>正例： 数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</li>
<li>反例： 比如显示成交总额涨跌情况，即正负 x%， x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</li>
</ul>
</li>
<li>【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性<code>默认值</code>。<ul>
<li>反例： POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</li>
</ul>
</li>
<li>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败； 如果完全不兼容升级，避免反序化混乱，那么请修改 serialVersionUID 值。<ul>
<li>说明： 注意 serialVersionUID 不一致会抛出序列化运行时异常。</li>
</ul>
</li>
<li>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</li>
<li>【强制】 POJO 类必须写 toString 方法。使用 IDE 中的工具： source&gt; generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。<ul>
<li>说明： 在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</li>
</ul>
</li>
</ol>
<h2 id="推荐-8"><a href="#推荐-8" class="headerlink" title="推荐(8)"></a>推荐(8)</h2><ol>
<li><p>【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。</p>
<ul>
<li>说明：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"a,b,c,,"</span>;</div><div class="line">String[] ary = str.split(<span class="string">","</span>);</div><div class="line"><span class="comment">// 预期大于 3，结果是 3</span></div><div class="line">System.out.println(ary.length);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于第 15 条规则。</p>
</li>
<li>【推荐】类内方法定义的顺序依次是：<code>公有方法或保护方法 &gt; 私有方法 &gt; getter/setter 方法</code>。<ul>
<li>说明： 公有方法是类的调用者和维护者最关心的方法，首屏展示最好； 保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法； 而私有方法外部一般不需要特别关心，是一个黑盒实现； 因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。</li>
</ul>
</li>
<li><p>【推荐】 setter 方法中，参数名称与类成员变量名称一致， this.成员名 = 参数名。在getter/setter 方法中， 不要增加业务逻辑，增加排查问题的难度。</p>
<ul>
<li>反例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (condition) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data + <span class="number">100</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data - <span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</p>
<ul>
<li>说明： 反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</li>
<li>反例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"start"</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">    str = str + <span class="string">"hello"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【推荐】 final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：</p>
<ul>
<li>1） 不允许被继承的类，如： String 类。</li>
<li>2） 不允许修改引用的域对象，如： POJO 类的域变量。</li>
<li>3） 不允许被重写的方法，如： POJO 类的 setter 方法。</li>
<li>4） 不允许运行过程中重新赋值的局部变量。</li>
<li>5） 避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好地进行重构。</li>
</ul>
</li>
<li>【推荐】慎用 Object 的 clone 方法来拷贝对象。<ul>
<li>说明： 对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。</li>
</ul>
</li>
<li>【推荐】类成员与方法访问控制从严：<ul>
<li>1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</li>
<li>2） 工具类不允许有 public 或 default 构造方法。</li>
<li>3） 类非 static 成员变量并且与子类共享，必须是 protected。</li>
<li>4） 类非 static 成员变量并且仅在本类使用，必须是 private。</li>
<li>5） 类 static 成员变量如果仅在本类使用，必须是 private。</li>
<li>6） 若是 static 成员变量，必须考虑是否为 final。</li>
<li>7） 类成员方法只供类内部调用，必须是 private。</li>
<li>8） 类成员方法只对继承类公开，那么限制为 protected。</li>
<li>说明： 任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</li>
<li>思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大， 无限制的到处跑，那么你会担心的。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OOP规约-20&quot;&gt;&lt;a href=&quot;#OOP规约-20&quot; class=&quot;headerlink&quot; title=&quot;OOP规约(20)&quot;&gt;&lt;/a&gt;OOP规约(20)&lt;/h1&gt;&lt;h2 id=&quot;强制-12&quot;&gt;&lt;a href=&quot;#强制-12&quot; class=&quot;headerli
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(3)-代码格式.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(3)-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(3)-代码格式/</id>
    <published>2018-02-09T07:04:33.000Z</published>
    <updated>2018-02-09T08:45:15.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码格式-11"><a href="#代码格式-11" class="headerlink" title="代码格式(11)"></a>代码格式(11)</h1><h2 id="强制-9"><a href="#强制-9" class="headerlink" title="强制(9)"></a>强制(9)</h2><ol>
<li>【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行； 如果是非空代码块则：<ul>
<li>1） 左大括号前不换行。</li>
<li>2） 左大括号后换行。</li>
<li>3） 右大括号前换行。</li>
<li>4） 右大括号后还有 else 等代码则不换行； 表示终止的右大括号后必须换行。</li>
</ul>
</li>
<li>【强制】 左小括号和字符之间不出现空格； 同样，右小括号和字符之间也不出现空格。详见第 5 条下方正例提示。<ul>
<li>反例： if (空格 a == b 空格)</li>
</ul>
</li>
<li>【强制】 if/for/while/switch/do 等保留字与括号之间都必须加空格。</li>
<li>【强制】任何二目、 三目运算符的左右两边都需要加一个空格。<ul>
<li>说明： 运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。</li>
</ul>
</li>
<li><p>【强制】 采用 4 个空格缩进，禁止使用 tab 字符。</p>
<ul>
<li>说明： 如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。 IDEA 设置 tab 为 4 个空格时，</li>
<li>请勿勾选 <code>Use tab character</code>；而在 eclipse 中，必须勾选 <code>insert spaces for tabs</code>。</li>
<li>正例： （ 涉及 1-5 点）  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="comment">// 缩进 4 个空格</span></div><div class="line">    String say = <span class="string">"hello"</span>;</div><div class="line">    <span class="comment">// 运算符的左右必须有一个空格</span></div><div class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号， 0 与右括号不需要空格</span></div><div class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</div><div class="line">        System.out.println(say);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 左大括号前加空格且不换行；左大括号后换行</span></div><div class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</div><div class="line">        System.out.println(<span class="string">"world"</span>);</div><div class="line">        <span class="comment">// 右大括号前换行，右大括号后有 else，不用换行</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        System.out.println(<span class="string">"ok"</span>);</div><div class="line">        <span class="comment">// 在右大括号后直接结束，则必须换行</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】注释的双斜线与注释内容之间有且仅有一个空格。</p>
<ul>
<li>正例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这是示例注释，请注意在双斜线之后有一个空格</span></div><div class="line">String ygb = <span class="keyword">new</span> String();</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p>
<ul>
<li>1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</li>
<li>2） 运算符与下文一起换行。</li>
<li>3） 方法调用的点符号与下文一起换行。</li>
<li>4） 方法调用时，多个参数， 需要换行时， 在逗号后进行。</li>
<li>5） 在括号前不要换行，见反例。</li>
<li><p>正例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line"><span class="comment">// 超过 120 个字符的情况下，换行缩进 4 个空格， 点号和方法名称一起换行</span></div><div class="line">sb.append(<span class="string">"zi"</span>).append(<span class="string">"xin"</span>)...</div><div class="line">    .append(<span class="string">"huang"</span>)...</div><div class="line">    .append(<span class="string">"huang"</span>)...</div><div class="line">    .append(<span class="string">"huang"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>反例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line"><span class="comment">// 超过 120 个字符的情况下，不要在括号前换行</span></div><div class="line">sb.append(<span class="string">"zi"</span>).append(<span class="string">"xin"</span>)...append</div><div class="line">(<span class="string">"huang"</span>);</div><div class="line"><span class="comment">// 参数很多的方法调用可能超过 120 个字符， 不要在逗号前换行</span></div><div class="line">method(args1, args2, args3, ...</div><div class="line">, argsX);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。</p>
<ul>
<li>正例： 下例中实参的”a”,后边必须要有一个空格。  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>【强制】 IDE 的 <code>text file encoding</code> 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 Windows 格式。</p>
</li>
</ol>
<h2 id="推荐-2"><a href="#推荐-2" class="headerlink" title="推荐(2)"></a>推荐(2)</h2><ol>
<li><p>【推荐】没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。</p>
<ul>
<li><p>正例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</div><div class="line"><span class="keyword">long</span> b = <span class="number">4L</span>;</div><div class="line"><span class="keyword">float</span> c = <span class="number">5F</span>;</div><div class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div></pre></td></tr></table></figure>
</li>
<li><p>说明： 增加 sb 这个变量，如果需要对齐，则给 a、 b、 c 都要增加几个空格，在变量比较多的情况下，是非常累赘的事情。</p>
</li>
</ul>
</li>
<li>【推荐】 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。<ul>
<li>说明： 没有必要插入<code>多个空行</code>进行隔开。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代码格式-11&quot;&gt;&lt;a href=&quot;#代码格式-11&quot; class=&quot;headerlink&quot; title=&quot;代码格式(11)&quot;&gt;&lt;/a&gt;代码格式(11)&lt;/h1&gt;&lt;h2 id=&quot;强制-9&quot;&gt;&lt;a href=&quot;#强制-9&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(2)-常量定义.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(2)-%E5%B8%B8%E9%87%8F%E5%AE%9A%E4%B9%89/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(2)-常量定义/</id>
    <published>2018-02-09T07:03:33.000Z</published>
    <updated>2018-02-09T08:45:20.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常量定义-5"><a href="#常量定义-5" class="headerlink" title="常量定义(5)"></a>常量定义(5)</h1><h2 id="强制-2"><a href="#强制-2" class="headerlink" title="强制(2)"></a>强制(2)</h2><ol>
<li>【强制】不允许任何魔法值（ 即未经预先定义的常量） 直接出现在代码中。</li>
<li>【强制】 <code>long</code> 或者 <code>Long</code> 初始赋值时， <code>使用大写的 L</code>，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。<ul>
<li>说明： Long a = 2l; 写的是数字的 21，还是 Long 型的 2?</li>
</ul>
</li>
</ol>
<h2 id="推荐-3"><a href="#推荐-3" class="headerlink" title="推荐(3)"></a>推荐(3)</h2><ol>
<li>【推荐】不要使用一个常量类维护所有常量， <code>按常量功能进行归类</code>，分开维护。<ul>
<li>说明： 大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。</li>
<li>正例： 缓存相关常量放在类 CacheConsts 下； 系统配置相关常量放在类 ConfigConsts 下。</li>
</ul>
</li>
<li><p>【推荐】常量的复用层次有五层：<code>跨应用</code>共享常量、<code>应用内</code>共享常量、<code>子工程</code>内共享常量、<code>包</code>内共享常量、<code>类</code>内共享常量。</p>
<ul>
<li>1） <code>跨应用</code>共享常量：放置在<code>二方库</code>中，通常是 client.jar 中的 constant 目录下。</li>
<li><p>2） <code>应用内</code>共享常量：放置在<code>一方库</code>中，通常是子模块中的 constant 目录下。  </p>
<pre><code>反例： 易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：  
类 A 中： public static final String YES = &quot;yes&quot;;  
类 B 中： public static final String YES = &quot;y&quot;;  
A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。
</code></pre></li>
<li><p>3） <code>子工程</code>内部共享常量：即在当前子工程的 constant 目录下。</p>
</li>
<li>4） <code>包</code>内共享常量：即在当前包下单独的 constant 目录下。</li>
<li>5） <code>类</code>内共享常量：直接在类内部 private static final 定义。</li>
</ul>
</li>
<li>【推荐】如果变量值仅在一个固定范围内变化用 enum 类型来定义。<ul>
<li>说明： 如果存在名称之外的延伸属性使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。</li>
<li>正例：<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SeasonEnum &#123;</div><div class="line">    SPRING(<span class="number">1</span>), SUMMER(<span class="number">2</span>), AUTUMN(<span class="number">3</span>), WINTER(<span class="number">4</span>);</div><div class="line">    <span class="keyword">int</span> seq;</div><div class="line">    SeasonEnum(<span class="keyword">int</span> seq)&#123;</div><div class="line">        <span class="keyword">this</span>.seq = seq;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常量定义-5&quot;&gt;&lt;a href=&quot;#常量定义-5&quot; class=&quot;headerlink&quot; title=&quot;常量定义(5)&quot;&gt;&lt;/a&gt;常量定义(5)&lt;/h1&gt;&lt;h2 id=&quot;强制-2&quot;&gt;&lt;a href=&quot;#强制-2&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>阿里java规约(一)-编程规约(1)-命名风格.md</title>
    <link href="https://blog.signalfire2017.com/2018/02/09/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6(%E4%B8%80)-%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6(1)-%E5%91%BD%E5%90%8D%E9%A3%8E%E6%A0%BC/"/>
    <id>https://blog.signalfire2017.com/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(1)-命名风格/</id>
    <published>2018-02-09T07:02:33.000Z</published>
    <updated>2018-02-09T08:45:18.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命名风格-16"><a href="#命名风格-16" class="headerlink" title="命名风格(16)"></a>命名风格(16)</h1><h2 id="强制-10"><a href="#强制-10" class="headerlink" title="强制(10)"></a>强制(10)</h2><ol>
<li>【强制】不以<code>下划线或美元符号</code>做开头结尾</li>
<li>【强制】禁止使用拼音与英文混合,禁止使用中文,纯拼音也尽量避免<ul>
<li>正例： alibaba / taobao / youku / hangzhou 等国际通用的名称， 可视同英文。</li>
</ul>
</li>
<li>【强制】<code>类名</code>使用 UpperCamelCase 风格，但以下情形例外： DO / BO / DTO / VO / AO / PO 等。<ul>
<li>正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion</li>
<li>反例： macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion </li>
</ul>
</li>
<li>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从<code>驼峰</code>形式。</li>
<li>【强制】<code>常量命名全部大写，单词间用下划线隔开</code>，力求语义表达完整清楚，不要嫌名字长。</li>
<li>【强制】<code>抽象类</code>命名使用 <code>Abstract</code> 或 <code>Base</code> 开头； <code>异常类</code>命名使用 <code>Exception</code> 结尾； <code>测试类</code><br>命名以它要<code>测试的类名</code>开始，以 <code>Test 结尾</code>。</li>
<li>【强制】<code>类型与中括号紧挨</code>相连来定义数组。<ul>
<li>正例： 定义整形数组 <code>int[]</code> arrayDemo;</li>
<li>反例： 在 main 参数中，使用 String args[]来定义。</li>
</ul>
</li>
<li>【强制】POJO 类中<code>布尔类型的变量</code>，都<code>不要加 is 前缀</code>，否则部分框架解析会引起序列化错误。</li>
<li>【强制】<code>包名</code>统一使用<code>小写</code>，点分隔符之间有且仅有<code>一个自然语义</code>的英语单词。<code>包名</code>统一使用<code>单数形式</code>，但是<code>类名</code>如果有复数含义，类名<code>可以</code>使用<code>复数形式</code>。<ul>
<li>正例： 应用工具类包名为 com.alibaba.ai.util、类名为 MessageUtils（ 此规则参考 spring</li>
<li>的框架结构）</li>
</ul>
</li>
<li>【强制】<code>杜绝完全不规范的缩写</code>， 避免望文不知义。<ul>
<li>反例： AbstractClass“缩写” 命名成 AbsClass； condition“ 缩写” 命名成 condi，此类随意缩写严重降低了代码的可阅读性。</li>
</ul>
</li>
</ol>
<h2 id="推荐-4"><a href="#推荐-4" class="headerlink" title="推荐(4)"></a>推荐(4)</h2><ol>
<li>【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用<code>尽量完整</code>的单词组合来<code>表达其意</code>。<ul>
<li>正例： 从远程仓库拉取代码的类命名为 PullCodeFromRemoteRepository。</li>
<li>反例： 变量 int a; 的随意命名方式。</li>
</ul>
</li>
<li><p>【推荐】如果模块、 接口、类、方法<code>使用了设计模式</code>，在<code>命名时体现出具体模式</code>。</p>
<ul>
<li>说明： 将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。</li>
<li>正例：    <pre><code>public class OrderFactory;  
public class LoginProxy;  
public class ResourceObserver;  
</code></pre></li>
</ul>
</li>
<li><p>【推荐】<code>接口类</code>中的<code>方法</code>和<code>属性不要加任何修饰符号</code>（ public 也不要加） ，保持代码的简洁性，并<code>加上有效的 Javadoc 注释</code>。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。</p>
<ul>
<li>正例：   <pre><code>接口方法签名 void f();  
接口基础常量 String COMPANY = &quot;alibaba&quot;;  
</code></pre></li>
<li>反例： 接口方法定义 public abstract void f();</li>
<li>说明： JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</li>
</ul>
</li>
<li><code>接口和实现类</code>的命名有两套规则：<ol>
<li>【强制】对于 <code>Service</code> 和 <code>DAO</code> 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 <code>Impl</code> 的后缀与接口区别。<ul>
<li>正例： CacheServiceImpl 实现 CacheService 接口。</li>
</ul>
</li>
<li>【推荐】 如果是形容能力的接口名称，取对应的形容词为接口名 （ 通常是<code>–able</code> 的形式）。<ul>
<li>正例： AbstractTranslator 实现 Translatable。</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考(2)"></a>参考(2)</h2><ol>
<li>【参考】<code>枚举类</code>名建议带上 <code>Enum 后缀</code>，枚举<code>成员名称</code>需要<code>全大写</code>，单词间用<code>下划线隔开</code>。<ul>
<li>说明： 枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</li>
<li>正例： 枚举名字为 ProcessStatusEnum 的成员名称： SUCCESS / UNKNOWN_REASON。</li>
</ul>
</li>
<li>【参考】各层命名规约：<ol>
<li>Service/DAO 层方法命名规约<ul>
<li>获取<code>单个对象</code>的方法用 <code>get</code> 作前缀。</li>
<li>获取<code>多个对象</code>的方法用 <code>list</code> 作前缀。</li>
<li>获取<code>统计值</code>的方法用 <code>count</code> 作前缀。</li>
<li><code>插入</code>的方法用 <code>save/insert</code> 作前缀。</li>
<li><code>删除</code>的方法用 <code>remove/delete</code> 作前缀。</li>
<li><code>修改</code>的方法用 <code>update</code> 作前缀。</li>
</ul>
</li>
<li>领域模型命名规约<ul>
<li>数据对象： xxxDO， xxx 即为数据表名。</li>
<li>数据传输对象： xxxDTO， xxx 为业务领域相关的名称。</li>
<li>展示对象： xxxVO， xxx 一般为网页名称。</li>
<li>POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;命名风格-16&quot;&gt;&lt;a href=&quot;#命名风格-16&quot; class=&quot;headerlink&quot; title=&quot;命名风格(16)&quot;&gt;&lt;/a&gt;命名风格(16)&lt;/h1&gt;&lt;h2 id=&quot;强制-10&quot;&gt;&lt;a href=&quot;#强制-10&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/categories/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="阿里java规约" scheme="https://blog.signalfire2017.com/tags/%E9%98%BF%E9%87%8Cjava%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>linux修改时间</title>
    <link href="https://blog.signalfire2017.com/2018/01/24/%E6%9D%82%E8%AE%B0/linux%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/"/>
    <id>https://blog.signalfire2017.com/2018/01/24/杂记/linux修改时间/</id>
    <published>2018-01-24T07:03:02.000Z</published>
    <updated>2018-02-06T07:48:03.611Z</updated>
    
    <content type="html"><![CDATA[<p>linux修改时间</p>
<ul>
<li><p>修改时区</p>
<blockquote>
<p>cp /usr/share/zoneinfo/UTC /etc/localtime </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cp /usr/share/zoneinfo/UTC /etc/localtime </div><div class="line">cp：是否覆盖“/etc/localtime”? y </div><div class="line">[root@localhost ~]# date </div><div class="line">2012年 11月 02日 星期五 00:07:30 UTC</div><div class="line">修改为中国的东八区</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>配置新的时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># vi /etc/sysconfig/clock</div><div class="line">ZONE=&quot;Asia/Shanghai&quot;</div><div class="line">UTC=false</div><div class="line">ARC=false</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>安装ntp</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y ntp</div></pre></td></tr></table></figure>
</li>
<li><p>设置时间同步</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ntpdate 210.72.145.44</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="1-其他命令"><a href="#1-其他命令" class="headerlink" title="1. 其他命令"></a>1. 其他命令</h1><h2 id="1-1-设置时间"><a href="#1-1-设置时间" class="headerlink" title="1.1. 设置时间"></a>1.1. 设置时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">date -s 18:40:00</div></pre></td></tr></table></figure>
<p>参考链接 <a href="http://www.linuxidc.com/Linux/2017-03/141745.htm" target="_blank" rel="external">Linux服务器同步网络时间</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux修改时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改时区&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cp /usr/share/zoneinfo/UTC /etc/localtime &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="https://blog.signalfire2017.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux 程序down 问题排查</title>
    <link href="https://blog.signalfire2017.com/2018/01/24/%E6%9D%82%E8%AE%B0/linux%20%E7%A8%8B%E5%BA%8Fdown%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://blog.signalfire2017.com/2018/01/24/杂记/linux 程序down 问题排查/</id>
    <published>2018-01-24T07:03:02.000Z</published>
    <updated>2018-02-06T07:47:59.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-linux系统有自我保护机制"><a href="#1-linux系统有自我保护机制" class="headerlink" title="1. linux系统有自我保护机制"></a>1. linux系统有自我保护机制</h1><p>如果分配的内存用完了,会杀掉进程.<br>可以查看日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/var/log/messages</div></pre></td></tr></table></figure></p>
<p>然后通过进程ID 进行查询  ,或者 <code>oom-killer</code> 来查询<br><img src="http://ovasdkxqr.bkt.clouddn.com/image/work/linux%20程序down%20问题排查-20171226102834.png" alt="linux 程序down 问题排查-20171226102834"></p>
<h2 id="1-1-内存不够"><a href="#1-1-内存不够" class="headerlink" title="1.1. 内存不够"></a>1.1. 内存不够</h2><p>可以配置虚拟内存,解决内存高峰时内存不够的问题.</p>
<h1 id="2-线程挂掉用jstack分析线程栈"><a href="#2-线程挂掉用jstack分析线程栈" class="headerlink" title="2. 线程挂掉用jstack分析线程栈"></a>2. 线程挂掉用jstack分析线程栈</h1><p>可以使用 jstack 查看进程信息</p>
<h1 id="3-其他命令"><a href="#3-其他命令" class="headerlink" title="3. 其他命令"></a>3. 其他命令</h1><h2 id="3-1-lsof-n-学习"><a href="#3-1-lsof-n-学习" class="headerlink" title="3.1. lsof -n (学习)"></a>3.1. lsof -n (学习)</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-linux系统有自我保护机制&quot;&gt;&lt;a href=&quot;#1-linux系统有自我保护机制&quot; class=&quot;headerlink&quot; title=&quot;1. linux系统有自我保护机制&quot;&gt;&lt;/a&gt;1. linux系统有自我保护机制&lt;/h1&gt;&lt;p&gt;如果分配的内存用完了,会
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="https://blog.signalfire2017.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>js心跳请求</title>
    <link href="https://blog.signalfire2017.com/2018/01/24/%E6%9D%82%E8%AE%B0/js%E5%BF%83%E8%B7%B3%E8%AF%B7%E6%B1%82/"/>
    <id>https://blog.signalfire2017.com/2018/01/24/杂记/js心跳请求/</id>
    <published>2018-01-24T07:03:02.000Z</published>
    <updated>2018-02-06T07:47:57.390Z</updated>
    
    <content type="html"><![CDATA[<p>示例代码,mark一下<br>var timer = setInterval (function(){},time)<br>clearInterval(timer)<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timer;</div><div class="line">timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    Common.ajax.execute(&#123;</div><div class="line">        <span class="string">'url'</span>: Common.url.getBaseURL() + <span class="string">'/flow/get-trusteeship.do'</span>,</div><div class="line">        <span class="string">'data'</span>: &#123;</div><div class="line">            <span class="string">"programId"</span>: $(<span class="string">"#programId"</span>).val(),</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'success'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (data.result == <span class="string">'success'</span> &amp;&amp; data.trusteeship) &#123;</div><div class="line">                <span class="keyword">if</span>(data.trusteeship.status == <span class="number">3</span>)&#123;</div><div class="line">                    clearInterval(timer);</div><div class="line">                    EmayPagination.action.skipToCurrentPage($(<span class="string">'#trusteeshipListQueryPaginationContainer'</span>),</div><div class="line">                        $(<span class="string">'#trusteeshipListQueryPaginationContainer .pagination-node.active'</span>).attr(<span class="string">'data-current-page-number'</span>));</div><div class="line">                    Trusteeship.dom.setStep(<span class="number">3</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'error'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            Messager.action.error(<span class="string">'操作异常。'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;,<span class="number">5000</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;示例代码,mark一下&lt;br&gt;var timer = setInterval (function(){},time)&lt;br&gt;clearInterval(timer)&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="javascript" scheme="https://blog.signalfire2017.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装opencv-java</title>
    <link href="https://blog.signalfire2017.com/2018/01/24/%E6%9D%82%E8%AE%B0/linux%E4%B8%8B%E5%AE%89%E8%A3%85opencv-java/"/>
    <id>https://blog.signalfire2017.com/2018/01/24/杂记/linux下安装opencv-java/</id>
    <published>2018-01-24T07:03:02.000Z</published>
    <updated>2018-02-06T07:48:01.198Z</updated>
    
    <content type="html"><![CDATA[<p>linux下安装opencv java </p>
<h1 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h1><p>在正式环境安装的时候安装opencv时候一直编译失败，缺少文件，后来下载了310版本的opencv，可以用了<br>线上环境linux centos6.5</p>
<h1 id="2-linux版本"><a href="#2-linux版本" class="headerlink" title="2. linux版本"></a>2. linux版本</h1><p>centos7</p>
<h1 id="3-安装jdk"><a href="#3-安装jdk" class="headerlink" title="3. 安装jdk"></a>3. 安装jdk</h1><h1 id="4-安装ant"><a href="#4-安装ant" class="headerlink" title="4. 安装ant"></a>4. 安装ant</h1><h2 id="4-1-下载"><a href="#4-1-下载" class="headerlink" title="4.1. 下载"></a>4.1. 下载</h2><p><a href="http://ant.apache.org/bindownload.cgi" target="_blank" rel="external">ant官网下载</a><a href="http://ant.apache.org/bindownload.cgi" target="_blank" rel="external">http://ant.apache.org/bindownload.cgi</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apache-ant-1.9.9-bin.tar.gz</div></pre></td></tr></table></figure></p>
<h2 id="4-2-解压-重命名"><a href="#4-2-解压-重命名" class="headerlink" title="4.2. 解压 重命名"></a>4.2. 解压 重命名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">unzip apache-ant-1.9.9-bin.tar.gz</div><div class="line">mv apache-ant-1.9.9 ant</div></pre></td></tr></table></figure>
<h2 id="4-3-配置环境变量"><a href="#4-3-配置环境变量" class="headerlink" title="4.3. 配置环境变量"></a>4.3. 配置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /etc/profile </div><div class="line">在文件后加入 </div><div class="line">export ANT_HOME=/usr/local/ant </div><div class="line">export PATH=$ANT_HOME/bin:$PATH</div></pre></td></tr></table></figure>
<h2 id="4-4-刷新环境变量"><a href="#4-4-刷新环境变量" class="headerlink" title="4.4. 刷新环境变量"></a>4.4. 刷新环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<h1 id="5-安装OpenCV"><a href="#5-安装OpenCV" class="headerlink" title="5. 安装OpenCV"></a>5. 安装OpenCV</h1><h2 id="5-1-安装OpenCV依赖库"><a href="#5-1-安装OpenCV依赖库" class="headerlink" title="5.1. 安装OpenCV依赖库"></a>5.1. 安装OpenCV依赖库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y build-essential gcc gcc-c++ cmake git pkgconfig gtk+-devel gtk2-devel python python-pip python-devel</div></pre></td></tr></table></figure>
<h2 id="5-2-下载"><a href="#5-2-下载" class="headerlink" title="5.2. 下载"></a>5.2. 下载</h2><p>可以到<a href="https://opencv.org/releases.html" target="_blank" rel="external">官网</a>下载 选择对应版本，我这里是3.3.1<br><a href="https://opencv.org/releases.html" target="_blank" rel="external">https://opencv.org/releases.html</a></p>
<h2 id="5-3-解压"><a href="#5-3-解压" class="headerlink" title="5.3. 解压"></a>5.3. 解压</h2><p>先解压,解压后进入目录,创建build目录,进入build目录,准备预编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">unzip opencv-3.3.1.zip</div><div class="line">cd opencv-3.3.1 </div><div class="line">mkdir build &amp;&amp; cd build/</div></pre></td></tr></table></figure></p>
<h2 id="5-4-预编译"><a href="#5-4-预编译" class="headerlink" title="5.4. 预编译"></a>5.4. 预编译</h2><p>通过cmake命令预先编译一次,编译完成后查看输出结果, 在<figure class="highlight plain"><figcaption><span>be built```里包含java这一项就表示预编译成功</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local ..</div></pre></td></tr></table></figure></p>
<p>可能会卡在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-- IPPICV: Download: ippicv_2017u3_lnx_intel64_general_20170822.tgz</div></pre></td></tr></table></figure></p>
<p>这个文件比较大,下载时间长一点,不要着急</p>
<h2 id="5-5-编译"><a href="#5-5-编译" class="headerlink" title="5.5. 编译"></a>5.5. 编译</h2><p>cmake完成后，在build目录直接输入make进行编译，如果服务器CPU核数比较多，可以在make后加入-j8 使用8个线程同时进行编译，加快编译速度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make -j2</div></pre></td></tr></table></figure></p>
<p>关于下面这个异常，我编译的时候并没有出现，记录一下，备用。</p>
<p>编译过程可能出现异常，提示：</p>
<p>/usr/include/jasper/jas_math.h:117:22: error: ‘SIZE_MAX’ was not declared in this scope</p>
<p>出现这个异常，不要慌，可以通过修改/usr/include/jasper/jas_math.h 文件源码解决。<br>在/usr/include/jasper/jas_math.h 的头部#include 的下面添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#if ! defined SIZE_MAX </div><div class="line">#define SIZE_MAX (4294967295U) </div><div class="line">#endif</div></pre></td></tr></table></figure></p>
<p>然后重新编译就可以了。如果不行，请删除build目录下的内容，重新预编译、编译就应该没问题了</p>
<h2 id="5-6-安装"><a href="#5-6-安装" class="headerlink" title="5.6. 安装"></a>5.6. 安装</h2><p>编译完成，就可以进行安装，安装过程是生成opencv对应的库文件，我这里是java项目需要用到，所以也会顺便生成java相关的库文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make install</div></pre></td></tr></table></figure></p>
<p>命令执行完成，会在结果中看到/usr/local/share/OpenCV/java/目录生成了两个java相关的依赖库文件 opencv-331.jar 和 libopencv_java331.so ， 当然，每个人的环境不同，可能目录也不同，具体看日志输出就行了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@opencv java]# ll /usr/local/share/OpenCV/java</div><div class="line">总用量 72012</div><div class="line">-rwxr-xr-x 1 root root 73320721 11月  8 14:05 libopencv_java331.so</div><div class="line">-rw-r--r-- 1 root root   414381 11月  8 10:03 opencv-331.jar</div></pre></td></tr></table></figure></p>
<h1 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6. 参考链接"></a>6. 参考链接</h1><ul>
<li><a href="https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html" target="_blank" rel="external">opencv官方文档 Installation in Linux</a></li>
<li><a href="http://blog.csdn.net/chwshuang/article/details/78208273?locationNum=9&amp;fps=1" target="_blank" rel="external">CentOS6 - Linux下安装OpenCV</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux下安装opencv java &lt;/p&gt;
&lt;h1 id=&quot;1-说明&quot;&gt;&lt;a href=&quot;#1-说明&quot; class=&quot;headerlink&quot; title=&quot;1. 说明&quot;&gt;&lt;/a&gt;1. 说明&lt;/h1&gt;&lt;p&gt;在正式环境安装的时候安装opencv时候一直编译失败，缺少文件，
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="opencv" scheme="https://blog.signalfire2017.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>tomcat+idea远程调试</title>
    <link href="https://blog.signalfire2017.com/2018/01/24/%E6%9D%82%E8%AE%B0/tomcat+idea%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <id>https://blog.signalfire2017.com/2018/01/24/杂记/tomcat+idea远程调试/</id>
    <published>2018-01-24T07:03:02.000Z</published>
    <updated>2018-02-06T07:48:07.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-测试的web项目"><a href="#1-测试的web项目" class="headerlink" title="1. 测试的web项目"></a>1. 测试的web项目</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.signalfire.servlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by jk on 2017/12/12.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"111111111111111111"</span>);</div><div class="line">        resp.getWriter().write(<span class="string">"hello baby"</span>);</div><div class="line">        resp.getWriter().flush();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></div><div class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></div><div class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>my<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.signalfire.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>my<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="2-tomcat"><a href="#2-tomcat" class="headerlink" title="2. tomcat"></a>2. tomcat</h1><ul>
<li>打war包部署到tomcat中</li>
<li>使用默认配置启动tomcat调试<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@mytest bin]# ./catalina.sh jpda start</div></pre></td></tr></table></figure>
</li>
</ul>
<p>默认情况下，远程调试的默认端口为8000，可以通过JPDA_ADDRESS进行配置，指定自定义的端口，另外，还有两个可以配置的参数</p>
<ul>
<li>JPDA_TRANSPORT：即调试器和虚拟机之间数据的传输方式，默认值是dt_socket</li>
<li>JPDA_SUSPEND：即JVM启动后是否立即挂起，默认是n<br>可以在catalina.sh中进行配置：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JPDA_TRANSPORT=dt_socket  </div><div class="line">JPDA_ADDRESS=5005  </div><div class="line">JPAD_SUSPEND=n</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="3-idea配置远程调试"><a href="#3-idea配置远程调试" class="headerlink" title="3. idea配置远程调试"></a>3. idea配置远程调试</h1><h2 id="3-1-配置"><a href="#3-1-配置" class="headerlink" title="3.1. 配置"></a>3.1. 配置</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104020.png" alt="tomcat+idea远程调试-20171213104020"><br><img src="http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-2017121310403.png" alt="tomcat+idea远程调试-2017121310403">  </p>
<h2 id="3-2-debug启动"><a href="#3-2-debug启动" class="headerlink" title="3.2. debug启动"></a>3.2. debug启动</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104146.png" alt="tomcat+idea远程调试-20171213104146"></p>
<h2 id="3-3-结果"><a href="#3-3-结果" class="headerlink" title="3.3. 结果"></a>3.3. 结果</h2><p><img src="http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104437.png" alt="tomcat+idea远程调试-20171213104437"></p>
<p><img src="http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104256.png" alt="tomcat+idea远程调试-20171213104256"></p>
<h1 id="4-调试java程序"><a href="#4-调试java程序" class="headerlink" title="4. 调试java程序"></a>4. 调试java程序</h1><p>在远程服务器上java启动参赛要加上调试的参数：<br>“-Xdebug -Xrunjdwp:transport=dt_socket,address=2345,server=y,suspend=n”</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-测试的web项目&quot;&gt;&lt;a href=&quot;#1-测试的web项目&quot; class=&quot;headerlink&quot; title=&quot;1. 测试的web项目&quot;&gt;&lt;/a&gt;1. 测试的web项目&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.signalfire2017.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="idea" scheme="https://blog.signalfire2017.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>微服务框架与实战-笔记03-开始使用SpringCloud实战微服务</title>
    <link href="https://blog.signalfire2017.com/2018/01/21/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E4%B8%8E%E5%AE%9E%E6%88%98-%E7%AC%94%E8%AE%B003-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8SpringCloud%E5%AE%9E%E6%88%98%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>https://blog.signalfire2017.com/2018/01/21/微服务/微服务框架与实战-笔记03-开始使用SpringCloud实战微服务/</id>
    <published>2018-01-21T15:50:00.000Z</published>
    <updated>2018-02-06T07:52:53.953Z</updated>
    
    <content type="html"><![CDATA[<p>配套代码</p>
<ul>
<li><a href="http://www.broadview.com.cn/book/4774" target="_blank" rel="external">http://www.broadview.com.cn/book/4774</a>  可以去勘误等</li>
<li>1-11 章配套代码：<br><a href="https://github.com/itmuch/spring-cloud-docker-microservice-book-code" target="_blank" rel="external">https://github.com/itmuch/spring-cloud-docker-microservice-book-code</a></li>
<li>12-14 章配套代码：<br><a href="https://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker" target="_blank" rel="external">https://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker</a></li>
</ul>
<h1 id="1-实战前提"><a href="#1-实战前提" class="headerlink" title="1. 实战前提"></a>1. 实战前提</h1><h2 id="1-1-技术储备"><a href="#1-1-技术储备" class="headerlink" title="1.1. 技术储备"></a>1.1. 技术储备</h2><ul>
<li>语言基础：java或scala、Groovy</li>
<li>spring boot ：</li>
<li>项目管理和构建工具：maven gradle （可以相互转换）<h2 id="1-2-工具及软件版本"><a href="#1-2-工具及软件版本" class="headerlink" title="1.2. 工具及软件版本"></a>1.2. 工具及软件版本</h2></li>
<li>JKD：官方建议1.8，也可以用1.7</li>
<li>springboot： 书中使用1.4.5.RELEASE</li>
<li>springCloud：Camden SR4</li>
<li>IDE：Spring Tool suite 3.8.3 基于eclipse的IDE ，idea</li>
<li>maven：3.3.9 （3.3.x运行在JDK1.8以上）<br>降低学习成本的重要方法之一:<code>少踩坑</code><h1 id="2-服务提供者、服务消费者"><a href="#2-服务提供者、服务消费者" class="headerlink" title="2. 服务提供者、服务消费者"></a>2. 服务提供者、服务消费者</h1>描述微服务之间的调用关系<br>服务提供者：被调用方<br>服务消费者：调用方<h1 id="3-编写服务提供者"><a href="#3-编写服务提供者" class="headerlink" title="3. 编写服务提供者"></a>3. 编写服务提供者</h1>Spring Data JPA作为持久层框架，H2作为数据库<h2 id="3-1-编写项目"><a href="#3-1-编写项目" class="headerlink" title="3.1. 编写项目"></a>3.1. 编写项目</h2>自己下载代码看吧，microservice-simple-provider-user<h3 id="3-1-1-pom-xml"><a href="#3-1-1-pom-xml" class="headerlink" title="3.1.1. pom.xml"></a>3.1.1. pom.xml</h3><code>spring-boot-starter-web</code>：springMVC支持<br><code>spring-boot-starter-data-jpa</code>：Spring Data JPA支持<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itmuch.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-simple-provider-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 引入spring boot的依赖 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 引入spring cloud的依赖 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>Camden.SR4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 添加spring-boot的maven插件 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-1-2-classpath下schema-sql-建表语句"><a href="#3-1-2-classpath下schema-sql-建表语句" class="headerlink" title="3.1.2. classpath下schema.sql 建表语句"></a>3.1.2. classpath下schema.sql 建表语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">if</span> <span class="keyword">exists</span>;</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (<span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">generated</span> <span class="keyword">by</span> <span class="keyword">default</span> <span class="keyword">as</span> <span class="keyword">identity</span>, username <span class="built_in">varchar</span>(<span class="number">40</span>), <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>), age <span class="built_in">int</span>(<span class="number">3</span>), balance <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>), primary <span class="keyword">key</span> (<span class="keyword">id</span>));</div></pre></td></tr></table></figure>
<h3 id="3-1-3-classpath下data-sql"><a href="#3-1-3-classpath下data-sql" class="headerlink" title="3.1.3. classpath下data.sql"></a>3.1.3. classpath下data.sql</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>, username, <span class="keyword">name</span>, age, balance) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'account1'</span>, <span class="string">'张三'</span>, <span class="number">20</span>, <span class="number">100.00</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>, username, <span class="keyword">name</span>, age, balance) <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">'account2'</span>, <span class="string">'李四'</span>, <span class="number">28</span>, <span class="number">180.00</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>, username, <span class="keyword">name</span>, age, balance) <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">'account3'</span>, <span class="string">'王五'</span>, <span class="number">32</span>, <span class="number">280.00</span>);</div></pre></td></tr></table></figure>
<h3 id="3-1-4-用户实体类"><a href="#3-1-4-用户实体类" class="headerlink" title="3.1.4. 用户实体类"></a>3.1.4. 用户实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.itmuch.cloud.study.entity;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.math.BigDecimal;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">  <span class="meta">@Id</span></div><div class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</div><div class="line">  <span class="keyword">private</span> Long id;</div><div class="line">  <span class="meta">@Column</span></div><div class="line">  <span class="keyword">private</span> String username;</div><div class="line">  <span class="meta">@Column</span></div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">  <span class="meta">@Column</span></div><div class="line">  <span class="keyword">private</span> Integer age;</div><div class="line">  <span class="meta">@Column</span></div><div class="line">  <span class="keyword">private</span> BigDecimal balance;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.username;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.username = username;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.balance;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(BigDecimal balance)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.balance = balance;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-2-DAO"><a href="#3-2-DAO" class="headerlink" title="3.2. DAO"></a>3.2. DAO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.itmuch.cloud.study.repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.itmuch.cloud.study.entity.User;</div><div class="line"></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-3-controller"><a href="#3-3-controller" class="headerlink" title="3.3. controller"></a>3.3. controller</h2><p><code>@GetMapping</code> Spring4.3新注解。组合注解，等价 @RequestMapping(method=RequestMethod.GET)<br>还有<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>、<code>@PatchMapping</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.itmuch.cloud.study.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.itmuch.cloud.study.entity.User;</div><div class="line"><span class="keyword">import</span> com.itmuch.cloud.study.repository.UserRepository;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> UserRepository userRepository;</div><div class="line"></div><div class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">    User findOne = <span class="keyword">this</span>.userRepository.findOne(id);</div><div class="line">    <span class="keyword">return</span> findOne;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-4-启动类"><a href="#3-4-启动类" class="headerlink" title="3.4. 启动类"></a>3.4. 启动类</h2><p><code>@SpringBootApplication</code> </p>
<ul>
<li>声明是一个Spring boot项目</li>
<li>组合注解，整合了@Configuration、@EnableAutoConfiguration、@ComponentScan</li>
<li>并开启了SpringBoot组件扫描和自动配置功能<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.itmuch.cloud.study;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderUserApplication</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    SpringApplication.run(ProviderUserApplication.class, args);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-5-配置文件-application-yml"><a href="#3-5-配置文件-application-yml" class="headerlink" title="3.5. 配置文件 application.yml"></a>3.5. 配置文件 application.yml</h2><p>SpringCloud、SpringBoot支持<code>properties</code>或者<code>yml格式</code>文件作为<code>配置文件</code><br><code>yml文件格式</code>：YAML（Yet Another Markup Language）编写的文件格式。<br>YAML和properties格式文件可以互相转换。<br>yml文件有<code>严格的缩进</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8000</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  jpa:</span></div><div class="line"><span class="attr">    generate-ddl:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    hibernate:</span></div><div class="line"><span class="attr">      ddl-auto:</span> <span class="string">none</span></div><div class="line"><span class="attr">  datasource:</span>                           <span class="comment"># 指定数据源</span></div><div class="line"><span class="attr">    platform:</span> <span class="string">h2</span>                        <span class="comment"># 指定数据源类型</span></div><div class="line"><span class="attr">    schema:</span> <span class="attr">classpath:schema.sql</span>        <span class="comment"># 指定h2数据库的建表脚本</span></div><div class="line"><span class="attr">    data:</span> <span class="attr">classpath:data.sql</span>            <span class="comment"># 指定h2数据库的数据脚本</span></div><div class="line"><span class="attr">logging:</span>                                <span class="comment"># 配置日志级别，让hibernate打印出执行的SQL</span></div><div class="line"><span class="attr">  level:</span></div><div class="line"><span class="attr">    root:</span> <span class="string">INFO</span></div><div class="line">    <span class="string">org.hibernate:</span> <span class="string">INFO</span></div><div class="line">    <span class="string">org.hibernate.type.descriptor.sql.BasicBinder:</span> <span class="string">TRACE</span></div><div class="line">    <span class="string">org.hibernate.type.descriptor.sql.BasicExtractor:</span> <span class="string">TRACE</span></div><div class="line">    </div><div class="line"><span class="comment">## INFO</span></div><div class="line"><span class="attr">info:</span> </div><div class="line"><span class="attr">  app:</span> </div><div class="line"><span class="attr">    name:</span> <span class="string">@project.artifactId@</span></div><div class="line"><span class="attr">    encoding:</span> <span class="string">@project.build.sourceEncoding@</span></div><div class="line"><span class="attr">    java:</span></div><div class="line"><span class="attr">      source:</span> <span class="string">@java.version@</span></div><div class="line"><span class="attr">      target:</span> <span class="string">@java.version@</span></div></pre></td></tr></table></figure></p>
<p>测试：<a href="http://localhost:8000/1" target="_blank" rel="external">http://localhost:8000/1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配套代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.broadview.com.cn/book/4774&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.broadview.com.cn/book/4774&lt;/a
    
    </summary>
    
      <category term="微服务学习" scheme="https://blog.signalfire2017.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="微服务" scheme="https://blog.signalfire2017.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>微服务框架与实战-总体概览</title>
    <link href="https://blog.signalfire2017.com/2018/01/21/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E4%B8%8E%E5%AE%9E%E6%88%98-%E6%80%BB%E4%BD%93%E6%A6%82%E8%A7%88/"/>
    <id>https://blog.signalfire2017.com/2018/01/21/微服务/微服务框架与实战-总体概览/</id>
    <published>2018-01-21T15:49:54.000Z</published>
    <updated>2018-02-06T07:52:42.880Z</updated>
    
    <content type="html"><![CDATA[<p>这本书整体的看了一遍，具体细节还没有实践。先做个骨架，用的时候再丰富下。书中按照下面的顺序进行整合。<br><a id="more"></a></p>
<style>
table th:first-of-type {
    width: 15px;
}

table th:nth-of-type(2) {
    width: 20%;
}

table th:nth-of-type(3) {
    width: 30%;
}
</style>

<table>
<thead>
<tr>
<th>章</th>
<th>组件</th>
<th>功能</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td> 3</td>
<td>spring-boot</td>
<td>基础业务开发</td>
<td></td>
</tr>
<tr>
<td></td>
<td>spring-boot-actuator</td>
<td>提供很多监控端点</td>
<td></td>
</tr>
<tr>
<td> 4</td>
<td>Eureka</td>
<td>服务的注册与发现</td>
<td>集成于spring-cloud-netflix <br>是Netflix开源的服务发现组件<br>基于REST的服务<br>相似组件： Zookeeper，Consul</td>
</tr>
<tr>
<td> 5</td>
<td>Ribbon</td>
<td>客户端测负载均衡</td>
<td>Netflix发布的负载均衡器<br>有助于控制HTTP和TCP客户端的行为。</td>
</tr>
<tr>
<td></td>
<td>Feign</td>
<td>实现声明式REST调用</td>
<td>Netflix开发的声明式、模板化的HTTP客户端。</td>
</tr>
<tr>
<td></td>
<td>Hystrix</td>
<td>服务容错处理</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Turbine</td>
<td>聚合Hystrix监控数据的工具</td>
<td>将所有相关 /hystrix.stream 端点的数据聚合到一个聚合的/turbine.stream中<br>让集群的监控更加方便</td>
</tr>
<tr>
<td></td>
<td>RabbitMQ</td>
<td>消息中间件</td>
<td>解决网络故障问题（例如微服务与Turbine网络不通）</td>
</tr>
<tr>
<td> 8</td>
<td>Zuul</td>
<td>构建微服务网关</td>
<td>Netflix开源的微服务网关<br>可以和Eureka、Ribbon、Hystrix等组件配合使用<br>核心是一系列的过滤器</td>
</tr>
<tr>
<td></td>
<td>Sidecar</td>
<td>整合非JVM微服务</td>
<td></td>
</tr>
<tr>
<td> 9</td>
<td>spring-cloud-Config</td>
<td>统一管理微服务配置</td>
<td></td>
</tr>
<tr>
<td> 10</td>
<td>spring-cloud-sleuth</td>
<td>微服务跟踪</td>
<td>分布式跟踪的解决方案</td>
</tr>
<tr>
<td></td>
<td>ELK</td>
<td>日志分析系统</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Zipkin</td>
<td>Twitter开源的分布式跟踪系统</td>
<td>可与Sleuth配合使用<br>收集系统的时序数据<br>追踪微服务框架的系统延时等问题<br>提供友好的界面，帮助分析追踪数据。</td>
</tr>
<tr>
<td> 12</td>
<td>Docker</td>
<td>开源容器引擎<br>有助于更快地交付应用</td>
<td>可将应用程序和基础设施层隔离<br>能将基础设置当做程序一样进行管理<br>可更快地打包、测试以及部署应用程序<br>缩短从编写到部署运行代码的周期</td>
</tr>
<tr>
<td> 14</td>
<td>Docker Compose</td>
<td>编排微服务</td>
<td>用于定义和运行多容器Docker应用程序的工具<br>前身是Fig<br>非常适合用在开发、测试、构建CI工作流等场景</td>
</tr>
</tbody>
</table>
<p>雪崩效应：</p>
<ul>
<li>我们常把 “基础服务故障” 导致 “级联故障” 的现象成为雪崩效应。</li>
<li>描述的是提供者不可用导致消费者不可用，并将不可用逐渐放大的过程。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这本书整体的看了一遍，具体细节还没有实践。先做个骨架，用的时候再丰富下。书中按照下面的顺序进行整合。&lt;br&gt;
    
    </summary>
    
      <category term="微服务学习" scheme="https://blog.signalfire2017.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="微服务" scheme="https://blog.signalfire2017.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>微服务框架与实战-笔记02-微服务开发框架-SpringCloud</title>
    <link href="https://blog.signalfire2017.com/2018/01/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E4%B8%8E%E5%AE%9E%E6%88%98-%E7%AC%94%E8%AE%B002-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6-SpringCloud/"/>
    <id>https://blog.signalfire2017.com/2018/01/09/微服务/微服务框架与实战-笔记02-微服务开发框架-SpringCloud/</id>
    <published>2018-01-09T15:12:17.000Z</published>
    <updated>2018-02-06T07:52:49.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Spring-Cloud-简介"><a href="#1-Spring-Cloud-简介" class="headerlink" title="1. Spring Cloud 简介"></a>1. Spring Cloud 简介</h1><ul>
<li>在SpringBoot基础上构建的，用于快速构建分布式系统的通用模式工具集。</li>
<li>程序适合在Docker或者PaaS上部署。 所以又叫<code>云原生应用</code>（Cloud Native Application）。</li>
<li><code>云原生</code>（CloudNative）可简单理解为面向云环境的软件架构。<h1 id="2-Spring-Cloud-特点"><a href="#2-Spring-Cloud-特点" class="headerlink" title="2. Spring Cloud 特点"></a>2. Spring Cloud 特点</h1></li>
<li>约定优于配置</li>
<li>适用于各种环境</li>
<li>隐藏了组件的复杂性，并提供声明式、无xml的配置方式</li>
<li>开箱即用、快速启动</li>
<li>轻量级组件</li>
<li>组件丰富，功能齐全。如 配置管理，服务发现，断路器，微服务网关等</li>
<li>选型中立、丰富。例如：支持使用Eureka、Zookeeper、Consul实现服务发现。</li>
<li>灵活。组成部分解耦，可按需挑选技术选型。<h1 id="3-版本"><a href="#3-版本" class="headerlink" title="3. 版本"></a>3. 版本</h1>Spring项目一般以下面这种方式命名，但<code>SpringCloud</code>并<code>没有</code>使用这种方式。可以略过。<br>主版本号.次版本号.增量版本号.里程碑版本号<br>例如：4.3.5.RELEASE</li>
<li>主版本号：项目重大重构</li>
<li>次版本号：新特性的添加和变化</li>
<li>增量版本号：一般表示BUG修复</li>
<li>里程碑版本号：某个版本号的里程碑<h2 id="3-1-版本简介"><a href="#3-1-版本简介" class="headerlink" title="3.1. 版本简介"></a>3.1. 版本简介</h2><img src="http://ovasdkxqr.bkt.clouddn.com/image/blog/20181923037.png" alt="20181923037"><br>命名方式：英文单词SRX（x为数字）<br>英文单词：release train<br>SR：service release bug修复</li>
</ul>
<p>Dalston SR5 表示Dalston 第5次bug修复版本</p>
<p><a href="https://github.com/spring-cloud/spring-cloud-release/releases" target="_blank" rel="external">https://github.com/spring-cloud/spring-cloud-release/releases</a> 版本发布</p>
<h2 id="3-2-子项目一览"><a href="#3-2-子项目一览" class="headerlink" title="3.2. 子项目一览"></a>3.2. 子项目一览</h2><table>
<thead>
<tr>
<th>Component</th>
<th>Camden.SR7</th>
<th>Dalston.SR4</th>
<th>Edgware.RELEASE</th>
<th>Finchley.M4</th>
<th>Finchley.BUILD-SNAPSHOT</th>
</tr>
</thead>
<tbody>
<tr>
<td>spring-cloud-aws</td>
<td>1.1.4.RELEASE</td>
<td>1.2.1.RELEASE</td>
<td>1.2.2.RELEASE</td>
<td>2.0.0.M2</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-bus</td>
<td>1.2.2.RELEASE</td>
<td>1.3.1.RELEASE</td>
<td>1.3.2.RELEASE</td>
<td>2.0.0.M3</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-cli</td>
<td>1.2.4.RELEASE</td>
<td>1.3.4.RELEASE</td>
<td>1.4.0.RELEASE</td>
<td>2.0.0.M1</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-commons</td>
<td>1.1.9.RELEASE</td>
<td>1.2.4.RELEASE</td>
<td>1.3.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-contract</td>
<td>1.0.5.RELEASE</td>
<td>1.1.4.RELEASE</td>
<td>1.2.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-config</td>
<td>1.2.3.RELEASE</td>
<td>1.3.3.RELEASE</td>
<td>1.4.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-netflix</td>
<td>1.2.7.RELEASE</td>
<td>1.3.5.RELEASE</td>
<td>1.4.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-security</td>
<td>1.1.4.RELEASE</td>
<td>1.2.1.RELEASE</td>
<td>1.2.1.RELEASE</td>
<td>2.0.0.M1</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-cloudfoundry</td>
<td>1.0.1.RELEASE</td>
<td>1.1.0.RELEASE</td>
<td>1.1.0.RELEASE</td>
<td>2.0.0.M1</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-consul</td>
<td>1.1.4.RELEASE</td>
<td>1.2.1.RELEASE</td>
<td>1.3.0.RELEASE</td>
<td>2.0.0.M3</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-sleuth</td>
<td>1.1.3.RELEASE</td>
<td>1.2.5.RELEASE</td>
<td>1.3.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-stream</td>
<td>Brooklyn.SR3</td>
<td>Chelsea.SR2</td>
<td>Ditmars.RELEASE</td>
<td>Elmhurst.M3</td>
<td>Elmhurst.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-zookeeper</td>
<td>1.0.4.RELEASE</td>
<td>1.1.2.RELEASE</td>
<td>1.2.0.RELEASE</td>
<td>2.0.0.M3</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-boot</td>
<td>1.4.5.RELEASE</td>
<td>1.5.4.RELEASE</td>
<td>1.5.8.RELEASE</td>
<td>2.0.0.M6</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-task</td>
<td>1.0.3.RELEASE</td>
<td>1.1.2.RELEASE</td>
<td>1.2.2.RELEASE</td>
<td>2.0.0.M2</td>
<td>2.0.0.RELEASE</td>
</tr>
<tr>
<td>spring-cloud-vault</td>
<td></td>
<td>1.0.2.RELEASE</td>
<td>1.1.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
<tr>
<td>spring-cloud-gateway</td>
<td></td>
<td></td>
<td>1.0.0.RELEASE</td>
<td>2.0.0.M4</td>
<td>2.0.0.BUILD-SNAPSHOT</td>
</tr>
</tbody>
</table>
<h2 id="3-3-spring-cloud-spring-boot-版本兼容性"><a href="#3-3-spring-cloud-spring-boot-版本兼容性" class="headerlink" title="3.3. spring cloud / spring boot 版本兼容性"></a>3.3. spring cloud / spring boot 版本兼容性</h2><ul>
<li>Finchley使用Spring Boot 2.0.x构建和运行，并且不希望与Spring Boot 1.5.x一起使用。</li>
<li>Dalston和Edgware发行版建立在Spring Boot 1.5.x之上，并且不希望与Spring Boot 2.0.x一起使用。</li>
<li>Camden发行版基于Spring Boot 1.4.x，但也使用1.5.x进行测试。</li>
</ul>
<p><a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="external">http://projects.spring.io/spring-cloud/</a> 更具体的额可以看这里</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Spring-Cloud-简介&quot;&gt;&lt;a href=&quot;#1-Spring-Cloud-简介&quot; class=&quot;headerlink&quot; title=&quot;1. Spring Cloud 简介&quot;&gt;&lt;/a&gt;1. Spring Cloud 简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在S
    
    </summary>
    
      <category term="微服务学习" scheme="https://blog.signalfire2017.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="微服务" scheme="https://blog.signalfire2017.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
