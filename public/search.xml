<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo-next 本地搜索]]></title>
    <url>%2F2017%2F11%2F14%2Fhexo-next-%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%2F</url>
    <content type="text"><![CDATA[之前用的algolia用不了了，应该是收费。查找了帖子做了本地搜索，感觉也很不错，主要是不用担心不好使了。 local search安装hexo-generator-searchdb在站点根目录通过gitbash安装1npm install hexo-generator-searchdb --save 添加search字段在站点下_config.yml中添加search字段12345search: path: search.xml field: post format: html limit: 10000 在themes\next_config.yml主题配置中找到12local_search: enable: true 将enable的值改成true 参考链接Hexo的Next主题配置]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>linux</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据03-01-自动化部署脚本]]></title>
    <url>%2F2017%2F11%2F14%2F%E5%A4%A7%E6%95%B0%E6%8D%AE03-01-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[实现ssh免密登录及jdk的自动安装 boot.sh免密登录 及复制安装脚本到目标机器12345678910111213141516171819202122232425262728293031#!/bin/bashSERVERS="node-3.itcast.cn node-4.itcast.cn"PASSWORD=123456BASE_SERVER=172.16.203.100auto_ssh_copy_id() &#123; expect -c "set timeout -1; spawn ssh-copy-id $1; expect &#123; *(yes/no)* &#123;send -- yes\r;exp_continue;&#125; *assword:* &#123;send -- $2\r;exp_continue;&#125; eof &#123;exit 0;&#125; &#125;";&#125;ssh_copy_id_to_all() &#123; for SERVER in $SERVERS do auto_ssh_copy_id $SERVER $PASSWORD done&#125;ssh_copy_id_to_allfor SERVER in $SERVERSdo scp install.sh root@$SERVER:/root ssh root@$SERVER /root/install.shdone install_everyone.sh安装jdk12345678910#!/bin/bashBASE_SERVER=mini4yum install -y wgetwget $BASE_SERVER/soft/jdk-7u45-linux-x64.tar.gztar -zxvf jdk-7u45-linux-x64.tar.gz -C /usr/localcat &gt;&gt; /etc/profile &lt;&lt; EOFexport JAVA_HOME=/usr/local/jdk1.7.0_45export PATH=\$PATH:\$JAVA_HOME/binEOF 说明: expect 模拟人机交互 EOF临时文本输入]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>linux</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据02-01-1 linux本地yum库]]></title>
    <url>%2F2017%2F11%2F14%2F%E5%A4%A7%E6%95%B0%E6%8D%AE02-01-1-linux%E6%9C%AC%E5%9C%B0yum%E5%BA%93%2F</url>
    <content type="text"><![CDATA[本地yum仓库的安装配置两种方式：每一台机器都配一个本地文件系统上的yum仓库 file:///packege/path/在局域网内部配置一台节点(server-base)的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http://server-base/pagekege/path/ 制作流程： 先挑选一台机器mini4，挂载一个系统光盘到本地目录/mnt/cdrom， 然后启动一个httpd服务器， 将/mnt/cdrom 软连接到httpd服务器的/var/www/html目录中 (cd /var/www/html; ln -s /mnt/cdrom ./centos ) 然后通过网页访问测试一下： http://mini4/centos 会看到光盘的目录内容 至此：网络版yum私有仓库已经建立完毕剩下就是去各台yum的客户端配置这个http地址到repo配置文件中 无论哪种配置，都需要先将光盘挂在到本地文件目录中 mount -t iso9660 /dev/cdrom /mnt/cdrom 为了避免每次重启后都要手动mount，可以在/etc/fstab中加入一行挂载配置，即可自动挂载 vi /etc/fstab /dev/cdrom /mnt/cdrom iso9660 defaults 0 0 minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖scp命令都没有：yum install -y openssh-clients每台机器上都要安装才行]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>linux</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据02-05-shell编程-awk命令]]></title>
    <url>%2F2017%2F11%2F06%2F%E5%A4%A7%E6%95%B0%E6%8D%AE02-05-shell%E7%BC%96%E7%A8%8B-awk%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[简介awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。 awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。 awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。 使用方法 awk &#39;{pattern + action}&#39; {filenames} 尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。 awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。 通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。 调用awk有三种方式调用awk 1.命令行方式 awk [-F field-separator] ‘commands’ input-file(s)其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。 2.shell脚本方式将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。相当于shell脚本首行的：#!/bin/sh可以换成：#!/bin/awk 3.将所有的awk命令插入一个单独文件，然后调用： awk -f awk-script-file input-file(s)其中，-f选项加载awk-script-file中的awk脚本，input-file(s)跟上面的是一样的。 本章重点介绍命令行方式。 入门实例假设last -n 5的输出如下 [root@www ~]# last -n 5 &lt;==仅取出前五行 12345root pts/1 192.168.1.100 Tue Feb 10 11:21 still logged inroot pts/1 192.168.1.100 Tue Feb 10 00:46 - 02:28 (01:41)root pts/1 192.168.1.100 Mon Feb 9 11:41 - 18:30 (06:48)dmtsai pts/1 192.168.1.100 Mon Feb 9 11:41 - 11:41 (00:00)root tty1 Fri Sep 5 14:09 - 14:10 (00:01) 如果只是显示最近登录的5个帐号 123456#last -n 5 | awk &apos;&#123;print $1&#125;&apos;rootrootrootdmtsairoot awk工作流程是这样的：读入有’\n’换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是”空白键” 或 “[tab]键”,所以$1表示登录用户，$3表示登录用户ip,以此类推。 如果只是显示/etc/passwd的账户 12345#cat /etc/passwd |awk -F &apos;:&apos; &apos;&#123;print $1&#125;&apos; rootdaemonbinsys 这种是awk+action的示例，每行都会执行action{print $1}。 -F指定域分隔符为’:’。 如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割 123456789#cat /etc/passwd |awk -F &apos;:&apos; &apos;&#123;print $1&quot;\t&quot;$7&#125;&apos;root /bin/bashdaemon /bin/shbin /bin/shsys /bin/sh``` 如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加&quot;blue,/bin/nosh&quot;。 cat /etc/passwd |awk -F ‘:’ ‘BEGIN {print “name,shell”} {print $1”,”$7} END {print “blue,/bin/nosh”}’name,shellroot,/bin/bashdaemon,/bin/shbin,/bin/shsys,/bin/sh….blue,/bin/nosh 123456789101112awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。 搜索/etc/passwd有root关键字的所有行&gt; #awk -F: &apos;/root/&apos; /etc/passwdroot:x:0:0:root:/root:/bin/bash这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。搜索支持正则，例如找root开头的: ```awk -F: &apos;/^root/&apos; /etc/passwd 搜索/etc/passwd有root关键字的所有行，并显示对应的shell awk -F: ‘/root/{print $7}’ /etc/passwd/bin/bash 这里指定了action{print $7} awk内置变量awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。 ARGC 命令行参数个数 ARGV 命令行参数排列 ENVIRON 支持队列中系统环境变量的使用 FILENAME awk浏览的文件名 FNR 浏览文件的记录数 FS 设置输入域分隔符，等价于命令行 -F选项 NF 浏览记录的域的个数 NR 已读的记录数 OFS 输出域分隔符 ORS 输出记录分隔符 RS 控制记录分隔符 此外,$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,……以此类推。 统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容: #awk -F ‘:’ ‘{print “filename:” FILENAME “,linenumber:” NR “,columns:” NF “,linecontent:”$0}’ /etc/passwd123456789101112131415161718192021222324252627filename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bashfilename:/etc/passwd,linenumber:2,columns:7,linecontent:daemon:x:1:1:daemon:/usr/sbin:/bin/shfilename:/etc/passwd,linenumber:3,columns:7,linecontent:bin:x:2:2:bin:/bin:/bin/shfilename:/etc/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev:/bin/sh``` 使用printf替代print,可以让代码更加简洁，易读 &gt; awk -F &apos;:&apos; &apos;&#123;printf(&quot;filename:%s,linenumber:%s,columns:%s,linecontent:%s\n&quot;,FILENAME,NR,NF,$0)&#125;&apos; /etc/passwd ## print和printfawk中同时提供了print和printf两种打印输出的函数。其中print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。printf函数，其用法和c语言中printf基本相似,可以格式化字符串,输出复杂时，printf更加好用，代码更易懂。%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% # awk编程 变量和赋值除了awk的内置变量，awk还可以自定义变量。## 下面统计/etc/passwd的账户人数 awk ‘{count++;print $0;} END{print “user count is “, count}’ /etc/passwdroot:x:0:0:root:/root:/bin/bash……user count is 40 123456count是自定义变量。之前的action&#123;&#125;里都是只有一个print,其实print只是一个语句，而action&#123;&#125;可以有多个语句，以;号隔开。 这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0: awk ‘BEGIN {count=0;print “[start]user count is “, count} {count=count+1;print $0;} END{print “[end]user count is “, count}’ /etc/passwd[start]user count is 0root:x:0:0:root:/root:/bin/bash…[end]user count is 40 12统计某个文件夹下的文件占用的字节数 ls -l |awk ‘BEGIN {size=0;} {size=size+$5;} END{print “[end]size is “, size}’[end]size is 8657198 12如果以M为单位显示: ls -l |awk ‘BEGIN {size=0;} {size=size+$5;} END{print “[end]size is “, size/1024/1024,”M”}’[end]size is 8.25889 M 1234567注意，统计不包括文件夹的子目录。 ### 条件语句 awk中的条件语句是从C语言中借鉴来的，见如下声明方式： if (expression) { statement; statement; … …} if (expression) { statement;} else { statement2;} if (expression) { statement1;} else if (expression1) { statement2;} else { statement3;} 12统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹): ls -l |awk ‘BEGIN {size=0;print “[start]size is “, size} {if($5!=4096){size=size+$5;}} END{print “[end]size is “, size/1024/1024,”M”}’[end]size is 8.22339 M 1234567891011121314### 循环语句awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。 ### 数组 因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。 显示/etc/passwd的账户 awk -F ‘:’ ‘BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i &lt; NR; i++) print i, name[i]}’ /etc/passwd0 root1 daemon2 bin3 sys4 sync5 games…… ```这里使用for循环遍历数组 awk编程的内容极多，这里只罗列简单常用的用法，更多请参考 http://www.gnu.org/software/gawk/manual/gawk.html]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>linux</tag>
        <tag>centos7</tag>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据02-04-shell编程-sed命令]]></title>
    <url>%2F2017%2F11%2F06%2F%E5%A4%A7%E6%95%B0%E6%8D%AE02-04-shell%E7%BC%96%E7%A8%8B-sed%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Sed简介sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。以下介绍的是Gnu版本的Sed 3.02。做备份,以后速查用. 定址可以通过定址来定位你所希望编辑的行，该地址用数字构成，用逗号分隔的两个行数表示以这两行为起止的行的范围（包括行数表示的那两行）。如1，3表示1，2，3行，美元符号($)表示最后一行。范围可以通过数据，正则表达式或者二者结合的方式确定 。 Sed命令调用sed命令有两种形式： sed [options] ‘command’ file(s) sed [options] -f scriptfile file(s) a在当前行后面加入一行文本。 b lable分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。 c用新的文本改变本行的文本。 d从模板块（Pattern space）位置删除行。 D删除模板块的第一行。 i在当前行上面插入文本。 h拷贝模板块的内容到内存中的缓冲区。 H追加模板块的内容到内存中的缓冲区 g获得内存缓冲区的内容，并替代当前模板块中的文本。 G获得内存缓冲区的内容，并追加到当前模板块文本的后面。 l列表不能打印字符的清单。 n读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。 N追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。 p打印模板块的行。 P（大写）打印模板块的第一行。 q退出Sed。 r file从file中读行。 t labelif分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。 T label错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。 w file写并追加模板块到file末尾。 W file写并追加模板块的第一行到file末尾。 !表示后面的命令对所有没有被选定的行发生作用。 s/re/string用string替换正则表达式re。 =打印当前行号码。 #把注释扩展到下一个换行符以前。以下的是替换标记 g表示行内全面替换。 p表示打印行。 w表示把行写入一个文件。 x表示互换模板块中的文本和缓冲区中的文本。 y表示把一个字符翻译为另外的字符（但是不用于正则表达式） 选项-e command, --expression=command允许多台编辑。 -h, –help打印帮助，并显示bug列表的地址。 -n, –quiet, –silent取消默认输出。 -f, –filer=script-file引导sed脚本文件名。 -V, –version打印版本和版权信息。 元字符集^锚定行的开始 如：/^sed/匹配所有以sed开头的行。$ 锚定行的结束 如：/sed$/匹配所有以sed结尾的行。. 匹配一个非换行符的字符 如：/s.d/匹配s后接一个任意字符，然后是d。* 匹配零或多个字符 如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。[] 匹配一个指定范围内的字符，如/[Ss]ed/匹配sed和Sed。[^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。(..) 保存匹配的字符，如s/(love)able/\1rs，loveable被替换成lovers。&amp; 保存搜索字符用来替换其他字符，如s/love/&amp;/，love这成love。\&lt; 锚定单词的开始，如:/\ 锚定单词的结束，如/love>/匹配包含以love结尾的单词的行。x{m} 重复字符x，m次，如：/o{5}/匹配包含5个o的行。x{m,} 重复字符x,至少m次，如：/o{5,}/匹配至少有5个o的行。x{m,n} 重复字符x，至少m次，不多于n次，如：/o{5,10}/匹配5–10个o的行。实例删除：d命令 $ sed ‘2d’ example—–删除example文件的第二行。 $ sed ‘2,$d’ example—–删除example文件的第二行到末尾所有行。 $ sed ‘$d’ example—–删除example文件的最后一行。 $ sed ‘/test/‘d example—–删除example文件所有包含test的行。替换：s命令 $ sed ‘s/test/mytest/g’ example—–在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。 $ sed -n ‘s/^test/mytest/p’ example—–(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。 $ sed ‘s/^192.168.0.1/&amp;localhost/‘ example—–&amp;符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加 localhost，变成192.168.0.1localhost。 $ sed -n ‘s/(love)able/\1rs/p’ example—–love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。 $ sed ‘s#10#100#g’ example—–不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。选定行的范围：逗号 $ sed -n ‘/test/,/check/p’ example—–所有在模板test和check所确定的范围内的行都被打印。 $ sed -n ‘5,/^test/p’ example—–打印从第五行开始到第一个包含以test开始的行之间的所有行。 $ sed ‘/test/,/check/s/$/sed test/‘ example—–对于模板test和west之间的行，每行的末尾用字符串sed test替换。多点编辑：e命令 $ sed -e ‘1,5d’ -e ‘s/test/check/‘ example—–(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执 行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。 $ sed –expression=’s/test/check/‘ –expression=’/love/d’ example—–一个比-e更好的命令是–expression。它能给sed表达式赋值。从文件读入：r命令 $ sed ‘/test/r file’ example—–file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。写入文件：w命令 $ sed -n ‘/test/w file’ example—–在example中所有包含test的行都被写入file里。 追加命令：a命令 $ sed ‘/^test/a\—&gt;this is a example’ example ‘—–&gt;this is a example’被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。 插入：i命令 $ sed ‘/test/i\new line————————-‘ example如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。下一个：n命令 $ sed ‘/test/{ n; s/aa/bb/; }’ example—–如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。变形：y命令 $ sed ‘1,10y/abcde/ABCDE/‘ example—–把1–10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。退出：q命令 $ sed ‘10q’ example—–打印完第10行后，退出sed。保持和获取：h命令和G命令 $ sed -e ‘/test/h’ -e ‘$G example—–在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保 持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中 的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。保持和互换：h命令和x命令 $ sed -e ‘/test/h’ -e ‘/check/x’ example —–互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。脚本Sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>linux</tag>
        <tag>centos7</tag>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据02-03 shell编程语法讲解]]></title>
    <url>%2F2017%2F11%2F06%2F%E5%A4%A7%E6%95%B0%E6%8D%AE02-03%20shell%E7%BC%96%E7%A8%8B%E8%AF%AD%E6%B3%95%E8%AE%B2%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[变量系统变量 $HOME $PWD $SHELL $USER显示当前shell中所有变量1set 用户自定义变量定义变量 STR=”hello world” A=9 unset A 撤销变量 A readonly B=2 声明静态的变量 B=2 ，不能 unset export 变量名 可把变量提升为全局环境变量，可供其他shell程序使用 将命令的返回值赋给变量 12A=`ls -la` 反引号，运行里面的命令，并把结果返回给变量AA=$(ls -la) 等价于反引号 shell中的特殊变量 $? 表示上一个命令退出的状态 true 0 false 1 错误127 $$ 表示当前进程编号 $0 表示当前脚本名称 $n 表示n位置的输入参数（n代表数字，n&gt;=1） $# 表示参数的个数，常用于循环 $*和$@ 都表示参数列表 $*与$@区别 $* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号” “包含时，都以$1 $2 … $n 的形式输出所有参数 当它们被双引号” “包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数 运算符 格式 :expr m + n 或$((m+n)) 注意expr运算符间要有空格 例如计算（2 ＋3 ）×4 的值1 .分步计算 S=expr 2 + 3 expr $S * 42.一步完成计算1234expr `expr 2 + 3 ` \* 4echo `expr \`expr 2 + 3\` \* 4`或$(((2+3)*4)) for循环第一种：12345678for N in 1 2 3do echo $Ndone或for N in 1 2 3; do echo $N; done或for N in &#123;1..3&#125;; do echo $N; done 第二种：123456for ((i = 0; i &lt;= 5; i++))do echo "welcome $i times"done或for ((i = 0; i &lt;= 5; i++)); do echo "welcome $i times"; done while循环第一种12345while expressiondocommand…done 第二种123456i=1while ((i&lt;=3))do echo $i let i++done case语句格式12345678910case $1 instart) echo "starting" ;;stop) echo "stoping" ;;*) echo "Usage: &#123;start|stop&#125; “esac read命令read -p(提示语句)-n(字符个数) -t(等待时间) read -p “please input your name: “ NAME 使用示例：12345[vagrant@mysql1 ~]$ read -p &quot;please enter a number:&quot; numbplease enter a number:1[vagrant@mysql1 ~]$ echo $numb1[vagrant@mysql1 ~]$ if判断语法12345678if condition then statements[elif condition then statements. ..] [else statements ] fi 判断语句[ condition ] (注意condition前后要有空格) #非空返回true，可使用$?验证（0为true，&gt;1为false）[ test ] #空返回false[ ] [ condition ] &amp;&amp; echo OK || echo notok 条件满足，执行后面的语句 不满足执行 || 后面的语句 常用判断条件 = 字符串比较 -lt 小于 -le 小于等于 -eq 等于 -gt 大于 -ge 大于等于 -ne 不等于 -r 有读的权限 -w 有写的权限 -x 有执行的权限 -f 文件存在并且是一个常规的文件 -s 文件存在且不为空 -d 文件存在并是一个目录 -b文件存在并且是一个块设备 -L 文件存在并且是一个链接 Shell自定义函数语法12345 [ function ] funname [()]&#123; action; [return int;]&#125; 三种声明方式: function start() function start start() 注意 必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先预编译 函数返回值，只能通过$? 系统变量获得，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255) 例子12345678910#!/bin/bashfSum 3 2;function fSum()&#123; echo $1,$2; return $(($1+$2));&#125;fSum 5 7;total=$?;echo $total,$?; 结果1234[vagrant@mysql1 ~]$ sh test test: line 2: fSum: command not found5,712,0 脚本调试 sh -vx helloWorld.sh 或者在脚本中增加set -x cut命令cut命令可以从一个文本文件或者文本流中提取文本列。 语法12cut -d&apos;分隔字符&apos; -f fields &lt;==用于有特定分隔字符cut -c 字符区间 &lt;==用于排列整齐的信息 -d ：后面接分隔字符。与 -f 一起使用； -f ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思； -c ：以字符 (characters) 的单位取出固定字符区间； 例子PATH 变量如下123[root@www ~]# echo $PATH/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games# 1 | 2 | 3 | 4 | 5 | 6 | 7 将 PATH 变量取出，我要找出第五个路径。12#echo $PATH | cut -d &apos;:&apos; -f 5/usr/local/bin 将 PATH 变量取出，我要找出第三和第五个路径。12#echo $PATH | cut -d &apos;:&apos; -f 3,5/sbin:/usr/local/bin 将 PATH 变量取出，我要找出第三到最后一个路径。12echo $PATH | cut -d &apos;:&apos; -f 3-/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games 将 PATH 变量取出，我要找出第一到第三个路径。12#echo $PATH | cut -d &apos;:&apos; -f 1-3/bin:/usr/bin:/sbin: 将 PATH 变量取出，我要找出第一到第三，还有第五个路径。12echo $PATH | cut -d &apos;:&apos; -f 1-3,5/bin:/usr/bin:/sbin:/usr/local/bin 实用例子:只显示/etc/passwd的用户和shell1234#cat /etc/passwd | cut -d &apos;:&apos; -f 1,7 root:/bin/bashdaemon:/bin/shbin:/bin/sh sort命令sort 命令对 File 参数指定的文件中的行排序，并将结果写到标准输出。如果 File 参数指定多个文件，那么 sort 命令将这些文件连接起来，并当作一个文件进行排序。 语法[root@www ~]# sort [-fbMnrtuk] [file or stdin]选项与参数： -f ：忽略大小写的差异，例如 A 与 a 视为编码相同； -b ：忽略最前面的空格符部分； -M ：以月份的名字来排序，例如 JAN, DEC 等等的排序方法； -n ：使用『纯数字』进行排序(默认是以文字型态来排序的)； -r ：反向排序； -u ：就是 uniq ，相同的数据中，仅出现一行代表； -t ：分隔符，默认是用 [tab] 键来分隔； -k ：以那个区间 (field) 来进行排序的意思 对/etc/passwd 的账号进行排序12345[root@www ~]# cat /etc/passwd | sortadm:x:3:4:adm:/var/adm:/sbin/nologinapache:x:48:48:Apache:/var/www:/sbin/nologinbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologin sort 是默认以第一个数据来排序，而且默认是以字符串形式来排序,所以由字母 a 开始升序排序。 /etc/passwd 内容是以 : 来分隔的，我想以第三栏来排序，该如何123456[root@www ~]# cat /etc/passwd | sort -t &apos;:&apos; -k 3root:x:0:0:root:/root:/bin/bashuucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologinbin:x:1:1:bin:/bin:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologin 默认是以字符串来排序的，如果想要使用数字排序：1234cat /etc/passwd | sort -t &apos;:&apos; -k 3nroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/bin/shbin:x:2:2:bin:/bin:/bin/sh 默认是升序排序，如果要倒序排序，如下12345cat /etc/passwd | sort -t &apos;:&apos; -k 3nrnobody:x:65534:65534:nobody:/nonexistent:/bin/shntp:x:106:113::/home/ntp:/bin/falsemessagebus:x:105:109::/var/run/dbus:/bin/falsesshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin 如果要对/etc/passwd,先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。12345cat /etc/passwd | sort -t&apos;:&apos; -k 6.2,6.4 -k 1r sync:x:4:65534:sync:/bin:/bin/syncproxy:x:13:13:proxy:/bin:/bin/shbin:x:2:2:bin:/bin:/bin/shsys:x:3:3:sys:/dev:/bin/sh 查看/etc/passwd有多少个shell:对/etc/passwd的第七个域进行排序，然后去重:123456cat /etc/passwd | sort -t&apos;:&apos; -k 7 -uroot:x:0:0:root:/root:/bin/bashsyslog:x:101:102::/home/syslog:/bin/falsedaemon:x:1:1:daemon:/usr/sbin:/bin/shsync:x:4:65534:sync:/bin:/bin/syncsshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin uniq去重命令 uniq命令可以去除排序过的文件中的重复行，因此uniq经常和sort合用。也就是说，为了使uniq起作用，所有的重复行必须是相邻的。 uniq语法[root@www ~]# uniq [-icu]选项与参数： -i ：忽略大小写字符的不同； -c ：进行计数 -u ：只显示唯一的行 testfile的内容如下1234567cat testfilehelloworldfriendhelloworldhello 直接删除未经排序的文件，将会发现没有任何行被删除1234567#uniq testfile helloworldfriendhelloworldhello 排序文件，默认是去重1234#cat testfile | sort |uniqfriendhelloworld 排序之后删除了重复行，同时在行首位置输出该行重复的次数1234#sort testfile | uniq -c1 friend3 hello2 world 仅显示存在重复的行，并在行首显示该行重复的次数123#sort testfile | uniq -dc3 hello2 world 仅显示不重复的行12sort testfile | uniq -ufriend wc命令语法[root@www ~]# wc [-lwm]选项与参数： -l ：仅列出行； -w ：仅列出多少字(英文单字)； -m ：多少字符；默认使用wc统计/etc/passwd 123#wc /etc/passwd40 45 1719 /etc/passwd40是行数，45是单词数，1719是字节数 wc的命令比较简单使用，每个参数使用如下： 12345678#wc -l /etc/passwd #统计行数，在对记录数时，很常用40 /etc/passwd #表示系统有40个账户#wc -w /etc/passwd #统计单词出现次数45 /etc/passwd#wc -m /etc/passwd #统计文件的字符数1719]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>linux</tag>
        <tag>centos7</tag>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux笔记-修改语言]]></title>
    <url>%2F2017%2F11%2F05%2Flinux%E7%AC%94%E8%AE%B0-%E4%BF%AE%E6%94%B9%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[版本centos7 查看系统是否有安装中文语言包 （列出所有可用的公共语言环境的名称，包含有zh_CN）123456[vagrant@mysql1 ~]$ locale -a |grep &quot;zh_CN&quot;zh_CNzh_CN.gb18030zh_CN.gb2312zh_CN.gbkzh_CN.utf8 若发现以上几项，说明系统已安装中文语言包，无需再安装 安装中文包1root@iZj6cbstl2n6r280a27eppZ tmp]# yum groupinstall &quot;fonts&quot; 修改i18n国际化和locale.conf本土化配置文件先查看系统语言环境123456789101112131415[vagrant@mysql1 ~]$ localeLANG=en_US.UTF-8LC_CTYPE=&quot;en_US.UTF-8&quot;LC_NUMERIC=&quot;en_US.UTF-8&quot;LC_TIME=&quot;en_US.UTF-8&quot;LC_COLLATE=&quot;en_US.UTF-8&quot;LC_MONETARY=&quot;en_US.UTF-8&quot;LC_MESSAGES=&quot;en_US.UTF-8&quot;LC_PAPER=&quot;en_US.UTF-8&quot;LC_NAME=&quot;en_US.UTF-8&quot;LC_ADDRESS=&quot;en_US.UTF-8&quot;LC_TELEPHONE=&quot;en_US.UTF-8&quot;LC_MEASUREMENT=&quot;en_US.UTF-8&quot;LC_IDENTIFICATION=&quot;en_US.UTF-8&quot;LC_ALL= 修改配置文件123vi /etc/locale.conf 或vi /etc/sysconfig/i18n (有些帖子上说修改这个,但是我的linux没有这个文件) 虽然安装了中文语言包但本机的语言环境并不是中文，先修改i18n配置文件 123456789101112[root@iZj6cbstl2n6r280a27eppZ sysconfig]# vim /etc/sysconfig/i18nLANG=&quot;zh_CN.UTF-8&quot;LC_ALL=&quot;zh_CN.UTF-8&quot;[root@iZj6cbstl2n6r280a27eppZ sysconfig]# source /etc/sysconfig/i18n[root@iZj6cbstl2n6r280a27eppZ sysconfig]# vim /etc/locale.confLANG=&quot;zh_CN.UTF-8&quot; [root@iZj6cbstl2n6r280a27eppZ sysconfig]# source /etc/locale.conf]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vagrant 创建virtualBox虚拟机]]></title>
    <url>%2F2017%2F11%2F04%2Fvagrant%20%E5%88%9B%E5%BB%BAvirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[安装vagrant本机环境系统环境 ： win10 64 系统 软件及镜像vagrant 官网 https://www.vagrantup.com/vagrant 需要依赖虚拟机 我用的 virtualBoxvirtualBox 官网 https://www.virtualbox.org/virtualBox 镜像 在vagrant官网中可以下载 由于国内下载比较慢，已分享到百度云 名称 类型 分享链接 vagrant_1.9.5.msi 软件 http://pan.baidu.com/s/1kVzFP1H VirtualBox-5.1.22-115126-Win.exe 软件 http://pan.baidu.com/s/1jIQgl6m centos-7.0-x86_64.box 镜像文件 http://pan.baidu.com/s/1o7Zlspk gparted-live-0.28.1-1-i686.iso 32位分区live-cd http://pan.baidu.com/s/1jISiee6 gparted-live-0.28.1-1-amd64.iso 64位分区live-cd http://pan.baidu.com/s/1dFenvvb 上面的gparted iso 文件是分区用的不过没有用到，下载不容易就一块传上来了。 更改vagrant 存放box的位置默认vagrant 添加的box 默认存放位置为 C:\Users\当前用户名\ .vagrant.d\boxes\ 可以通过添加环境变量 VAGRANT_HOME 修改存放位置 例如：VAGRANT_HOME = D:\Program Files\VagrantHome 更改virtualBox 存放镜像目录默认目录 C:\Users\当前用户名\VirtualBox VMs 可以在virtualBox 软件 &gt; 管理 &gt; 全局设置 &gt; 常规 &gt; 默认虚拟电脑位置进行修改 我修改为 D:\VirtualBoxVMs 启动vagrant添加boxvagrant box add centos7 E:\软件安装包\centos-7.0-x86_64.box 查看已添加的box vagrant box list D:\vagrantSpace&gt;vagrant box list centos7 (virtualbox, 0) 初始化在准备存放vagrant配置文件的文件夹中执行 vagrant init 会生成 Vagrantfile 文件文件中包含vagrant 配置信息其中有一些配置项的说明 config.vm.box = &quot;base&quot; 修改base 为centos7 即 boxlist 中的名字 config.vm.synced_folder &quot;E:\&quot;, &quot;/vagrant_data&quot; 共享文件夹 其他配置请自行百度 vagrant 配置文件下面的是我的配置 # -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(&quot;2&quot;) do |config| config.vm.box = &quot;centos7&quot; config.vm.define :java do |java| java.vm.provider &quot;virtualbox&quot; do |v| v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;java&quot;, &quot;--memory&quot;, &quot;512&quot;] end java.vm.box = &quot;centos7&quot; java.vm.hostname = &quot;java&quot; java.vm.network :private_network, ip: &quot;192.168.33.10&quot; end config.vm.define :linux do |linux| linux.vm.provider &quot;virtualbox&quot; do |v| v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;linux&quot;, &quot;--memory&quot;, &quot;512&quot;] end linux.vm.box = &quot;centos7&quot; linux.vm.hostname = &quot;linux&quot; linux.vm.network :private_network, ip: &quot;192.168.33.11&quot; end end 启动虚拟机 vagrant up linux 第一次会初始化虚拟机,并启动,成功后查看虚拟机运行状态 vagrant global-status D:\vagrantSpace&gt;vagrant global-status id name provider state directory ----------------------------------------------------------------------- 1d24610 linux virtualbox running D:/vagrantSpace 这个时候就可以通过ssh登录虚拟机了。默认用户和密码都是 vagrant 下面是修改磁盘大小,如果觉得没有必要,可以不修改,直接玩就可以啦 修改虚拟机磁盘大小vagrant 默认创建的磁盘 根目录下只有10G.觉得太小,修改为1T. 关闭 linux vagrant halt linux 进入到 D:\VirtualBoxVMs文件夹下 即 之前设置的virtualBox的路径,里面会有个刚才创建的linux系统的文件夹 D:\VirtualBoxVMs\linux 加入virtualBox 安装目录加入环境变量path 安装virtualBox后会自动加入 VBOX_MSI_INSTALL_PATH 环境变量,直接把这个路径加到path后面即可. %VBOX_MSI_INSTALL_PATH% 通过下面命令 复制一份磁盘文件, .vmdk 文件直接修改大小会报错 vboxmanage clonehd box-disk1.vmdk box.vdi –format vdi D:\VirtualBoxVMs\linux&gt;vboxmanage clonehd box-disk1.vmdk box.vdi --format vdi 0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100% Clone medium created in format &apos;vdi&apos;. UUID: 1431c156-a3b1-4374-b196-36450edecd9e 修改vdi 文件大小,命令如下 vboxmanage modifyhd box.vdi –resize 1048576 D:\VirtualBoxVMs\linux&gt;vboxmanage modifyhd box.vdi --resize 1048576 0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100% 打开虚拟机,修改 linux 磁盘文件为 box.vdi 修改后 查看D:\VirtualBoxVMs\linux 文件夹下linux.vbox 文件删除 原来的harddisk 1&lt;HardDisk uuid=&quot;&#123;3417d3e1-fcfd-410c-8df6-adba5f8b01bb&#125;&quot; location=&quot;box-disk1.vmdk&quot; format=&quot;VMDK&quot; type=&quot;Normal&quot;/&gt; 保留新的harddisk1&lt;HardDisk uuid=&quot;&#123;417759f6-4e5d-4a45-9ce1-1351b15c5a7d&#125;&quot; location=&quot;box-linux.vdi&quot; format=&quot;VDI&quot; type=&quot;Normal&quot;/&gt; 删除原来的磁盘文件, box-disk1.vmdk。这个可以以后再删除也可以，防止操作中出现什么错误。 启动虚拟机 vagrant up linux 切换到root，密码为vagrant su 查看磁盘 fdisk -l Gerät boot. Anfang Ende Blöcke Id System /dev/sda1 * 2048 1026047 512000 83 Linux /dev/sda2 1026048 20766719 9870336 8e Linux LVM 可以看到一共还是10G,并不是1T,我们需要加一个磁盘sda3 fdisk /dev/sda n p 3 回车 回车 更改磁盘类型为 lvm t 3 8e 查看磁盘 p 全部操作如下 Befehl (m für Hilfe): n Partition type: p primary (2 primary, 0 extended, 2 free) e Erweiterte Select (default p): p Partitionsnummer (3,4, default 3): 3 Erster Sektor (20766720-2147483647, Vorgabe: 20766720): Benutze den Standardwert 20766720 Last Sektor, +Sektoren or +size{K,M,G} (20766720-2147483647, Vorgabe: 2147483647): Benutze den Standardwert 2147483647 Partition 3 of type Linux and of size 1014,1 GiB is set Befehl (m für Hilfe): t Partitionsnummer (1-3, default 3): 3 Hex code (type L to list all codes): 8e Changed type of partition &apos;Linux&apos; to &apos;Linux LVM&apos; Befehl (m für Hilfe): p Disk /dev/sda: 1099.5 GB, 1099511627776 bytes, 2147483648 sectors Units = Sektoren of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x00095a8e Gerät boot. Anfang Ende Blöcke Id System /dev/sda1 * 2048 1026047 512000 83 Linux /dev/sda2 1026048 20766719 9870336 8e Linux LVM /dev/sda3 20766720 2147483647 1063358464 8e Linux LVM 保存退出 w 重启虚拟机 reboot 查看当前 Volume Group vgdisplay 信息如下 [root@linux vagrant]# vgdisplay --- Volume group --- VG Name centos System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 3 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 1 Act PV 1 VG Size 9,41 GiB PE Size 4,00 MiB Total PE 2409 Alloc PE / Size 2399 / 9,37 GiB Free PE / Size 10 / 40,00 MiB VG UUID NJWfOH-An0K-Hm9Q-8Tjs-yq2x-ZWXi-L2vP7i 名称为 centos，可调整大小（resizable），当前大小为 9,41GB。活动的 LVM 卷有 lvscan [root@linux vagrant]# lvscan ACTIVE &apos;/dev/centos/swap&apos; [1016,00 MiB] inherit ACTIVE &apos;/dev/centos/root&apos; [8,38 GiB] inherit 先将分配过来的新磁盘空间创建为一个新的物理卷 pvcreate /dev/sda3 [root@linux vagrant]# pvcreate /dev/sda3 Physical volume &quot;/dev/sda3&quot; successfully created 然后使用新的物理卷来扩展 LVM 的 centos vgextend centos /dev/sda3 [root@linux vagrant]# vgextend centos /dev/sda3 Volume group &quot;centos&quot; successfully extended 然后扩展 LVM 的逻辑卷 centos-lv_root lvextend /dev/centos/root /dev/sda3 [root@linux vagrant]# lvextend /dev/centos/root /dev/sda3 Size of logical volume centos/root changed from 8,38 GiB (2145 extents) to 1022,47 GiB (261753 extents). Logical volume root successfully resized 最后，调整逻辑卷文件系统的大小 vagrant]# resize2fs /dev/centos/root [root@linux vagrant]# resize2fs /dev/centos/root resize2fs 1.42.9 (28-Dec-2013) resize2fs: Ungültige magische Zahl im Superblock beim Versuch, /dev/centos/root zu öffnen Kann keinen gültigen Dateisystem-Superblock finden. 完成。看看效果,可以看到root下变成了1T lvscan [root@linux vagrant]# lvscan ACTIVE &apos;/dev/centos/swap&apos; [1016,00 MiB] inherit ACTIVE &apos;/dev/centos/root&apos; [1022,47 GiB] inherit 但是,查看根目录下面分配大小, 跟目录还是为8.4G [root@linux vagrant]# df -h Dateisystem Größe Benutzt Verf. Verw% Eingehängt auf /dev/mapper/centos-root 8,4G 1,1G 7,4G 13% / devtmpfs 236M 0 236M 0% /dev tmpfs 245M 0 245M 0% /dev/shm tmpfs 245M 4,3M 241M 2% /run tmpfs 245M 0 245M 0% /sys/fs/cgroup /dev/sda1 497M 118M 379M 24% /boot 用 xfs_growfs 对扩容后的 LV 进行 xfs 格式大小调整 xfs_growfs /dev/centos/root [root@linux vagrant]# xfs_growfs /dev/centos/root meta-data=/dev/mapper/centos-root isize=256 agcount=4, agsize=549120 blks = sectsz=512 attr=2, projid32bit=1 = crc=0 finobt=0 data = bsize=4096 blocks=2196480, imaxpct=25 = sunit=0 swidth=0 blks naming =version 2 bsize=4096 ascii-ci=0 ftype=0 log =Intern bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1 realtime =keine extsz=4096 blocks=0, rtextents=0 Datenblöcke von 2196480 auf 268035072 geändert. 再查看 [root@linux vagrant]# df -h Dateisystem Größe Benutzt Verf. Verw% Eingehängt auf /dev/mapper/centos-root 1023G 1,1G 1022G 1% / devtmpfs 236M 0 236M 0% /dev tmpfs 245M 0 245M 0% /dev/shm tmpfs 245M 4,3M 241M 2% /run tmpfs 245M 0 245M 0% /sys/fs/cgroup /dev/sda1 497M 118M 379M 24% /boot 可以看到根目录大小已经变成1T了 http://pan.baidu.com/s/1dEC3ePr 由于不了解linux,修改磁盘大小费了很多事.完成后打了包,做成了新的box，方便以后直接使用。 其他修改linux 语言 /etc/locale.conf1LANG=&apos;en_US.UTF-8&apos; 参考博客:调整 VirtualBox 虚拟机的磁盘大小https://cnzhx.net/blog/resizing-lvm-centos-virtualbox-guest/ 手把手教你给 CentOS 7 添加硬盘及扩容(LVM)https://aurthurxlc.github.io/Aurthur-2017/Centos-7-extend-lvm-volume.html]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7 安装mysql-转]]></title>
    <url>%2F2017%2F11%2F04%2Fcentos7-%E5%AE%89%E8%A3%85mysql-%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[linux下安装Mysql 其他错误本地登陆不进去12#mysql -u root -p 提示”Access denied for user ‘root’@’localhost’ (using password: YES)” 我的mysql版本 mysql Ver 14.14 Distrib 5.6.38 先修改一下mysql安装目录下面my.cnf,最后一行添加 skip-grant-tables然后登陆 进去修改 update mysql.user set password=password(‘mypassword’) where user=’root’; 退出,修改文件删除刚加的属性,重启mysql服务 远程连接 ip无权限 update mysql.user set host=’%’ where user=’root’;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7 开放端口]]></title>
    <url>%2F2017%2F11%2F04%2Fcentos7-%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[CentOS升级到7之后，发现无法使用iptables控制Linuxs的端口，google之后发现Centos 7使用firewalld代替了原来的iptables。下面记录如何使用firewalld开放Linux端口： 开启端口 1firewall-cmd --zone=public --add-port=80/tcp --permanent 命令含义： 12345--zone #作用域--add-port=80/tcp #添加端口，格式为：端口/通讯协议--permanent #永久生效，没有此参数重启后失效 重启防火墙 1firewall-cmd --reload 查看开启了那些端口 /sbin/iptables -L -n]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>linux</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据02-02 linux命令继续学习 yum]]></title>
    <url>%2F2017%2F11%2F01%2F%E5%A4%A7%E6%95%B0%E6%8D%AE02-02-linux%E5%91%BD%E4%BB%A4%E7%BB%A7%E7%BB%AD%E5%AD%A6%E4%B9%A0-yum%2F</url>
    <content type="text"><![CDATA[YUM的常用命令安装httpd并确认安装1yum instll -y httpd 列出所有可用的package和package组1yum list 清除所有缓冲数据1yum clean all 列出一个包所有依赖的包1yum deplist httpd 删除httpd1yum remove httpd 配置本地yum源cd /etc/yum.repos.d 安装jdk解压安装包 tar -zxvf jdk-7u45-linux-x64.tar.gz -C apps/ 然后修改环境变量 vi /etc/profile 在文件最后添加12export JAVA_HOME=/root/apps/jdk1.7.0_45export PATH=$PATH:$JAVA_HOME/bin 保存退出 然后重新加载环境变量 source /etc/profile 装mysql安装tomcat 上传tomcat包 解压 启动 测试访问]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>linux</tag>
        <tag>centos7</tag>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo next 搜索 algolia]]></title>
    <url>%2F2017%2F10%2F30%2Fhexo-next-%E6%90%9C%E7%B4%A2-algolia%2F</url>
    <content type="text"><![CDATA[目的:添加搜索功能algolia似乎是试用一段时间就不能用了,建议使用本地搜索hexo-next 本地搜索 #next版本我的版本号是12# Theme versionversion: 5.1.2 next5.0+版本集成了algolia 这样使配置algolia更简单 algolia账号申请Algolia官网 直接用github账号注册就好啦 创建index空间 输入一个名称,填写你自己站点的网址 创建两个key 空间创建好后默认会有一个只有搜索权限的key 需要另建一个有修改记录等权限的key(这个供我们提交索引到空间使用) 创建key的时候要选择授权的空间 记录 Application ID 两个key建 安装hexo-algolia用git-bash在hexo工程根目录下执行 npm install hexo-algolia --save 配置algolia 在Hexo工程根目录的_config.yml中加入如下配置，注意改成前面API Keys页面相应配置 123456algolia: applicationID: '你的Application ID' apiKey: '只有搜索权限的key' adminApiKey: '' indexName: '你的index空间名称' chunkSize: 5000 修改themes&gt;next&gt;_config.yml 搜索 algolia_search 修改enable 为true 其他字体提示可以自己随意修改 添加环境变量我的电脑&gt;右键属性&gt;高级设置&gt;环境变量&gt;新建&gt;填写变量名称和变量值 变量名称 : HEXO_ALGOLIA_INDEXING_KEY 变量值: 在algolia新建的有修改权限的key 生成index上传到algolia在hexo根目录执行,注意确保命令行面板已经重新载入新加的环境变量 1hexo algolia 不报错就可以啦 参考NexT主题集成Algolia搜索插件Hexo集成Algolia搜索插件]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据01-linux安装及基本命令.md]]></title>
    <url>%2F2017%2F10%2F30%2F%E5%A4%A7%E6%95%B0%E6%8D%AE01-linux%E5%AE%89%E8%A3%85%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[linux 文件目录 约定俗成 目录 功能 /bin 可执行文件 /sbin 系统可执行文件 /boot 跟启动相关的东西 /dev 设备 硬件 /etc 配置文件 /lib 依赖包 /lib64 依赖包 /media 一些外接设备 /mnt 挂载 /home 用户目录 /usr user share resource 公用的一些软件 /tmp 临时文件 linux 网络相关网卡相关: ip ：一般 1 给网关 255是广播地址 gateway ： 网关 netmask ： 子网掩码 dns ： 子网掩码是用来判断自己属于哪个网段 网段的计算:将IP地址的二进制 &amp; 子网掩码的二进制 = 网段地址例如：192.168.33.2 &amp; 255.255.255.0 = 192.168.33.0 dns 域名解析 从本地hosts中寻找域名 -&gt; ip映射信息 如果没有则去服务器找 访问服务器 填写: 网关地址 dns服务器 linux dns配置文件 /etc/hosts 网络模式NAT模式 桥接模式 HOST only 修改linux ip修改主机名: vi /etc/sysconfig/network NETWORKING=yes HOSTNAME=server1.itcast.cn 修改IP地址vi /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0 TYPE=Ethernet ONBOOT=yes #是否开机启用 BOOTPROTO=static #ip地址设置为静态 IPADDR=192.168.0.101 NETMASK=255.255.255.0 修改ip地址和主机名的映射关系vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 192.168.0.101 server1.itcast.cn 关闭iptables并设置其开机启动/不启动 service iptables stop chkconfig iptables on chkconfig iptables off linux 简单命令创建文件touch somefile.1 创建一个空文本echo “i love u” &gt; somefile.2 利用重定向写入 覆盖原文件echo “i love u” &gt;&gt; somefile.2 追加 ctrl+v进入块选择模式shift+v 进入行选择模式 :%s/key/newword 查找并替换 文件权限操作drw-r–r– d：标识节点类型（d 文件夹 - 文件 l 链接)r 可读 w可写 x可执行拥有者 所属组 其他用户 方式1 :chmod g-rw somefile.1 g 组 o 其他 u用户 +-(增加/删除权限) rwx 方式2 :chmod 700 somfile.1 文件夹及下面文件 chmod -R 770 aaa/ 修改所有者(必须要root用户)chown angela:angela aaa/ 组/用户 基本的用户管理添加用户 useradd nagela修改密码passwd nagela 按提示输入密码即可 sudo useradd xiaobai 为用户配置sudo权限用root编辑vi /etc/sudoers在文件如下位置,为hadoop添加一行即可root ALL=(ALL) ALLhadoop ALL=(ALL) ALL 系统管理操作1.查看主机名hostname 2.修改主机名(重启后无效)hostname hadoop 3.修改主机名(重启后永久生效)vi /ect/sysconfig/network 4.修改IP(重启后无效)ifconfig eth0 192.168.12.22 5.修改IP(重启后永久生效)vi /etc/sysconfig/network-scripts/ifcfg-eth0 6.查看系统信息uname -auname -r 7.查看ID命令id -uid -g 8.日期datedate +%Y-%m-%ddate +%Tdate +%Y-%m-%d” “%T 9.日历cal 2012 10.查看文件信息file filename 11.挂载硬盘mountumount加载windows共享mount -t cifs //192.168.1.100/tools /mnt 挂载cdrom 里面是iso镜像文件123456789101112131415mount -t iso9660 -o ro /dev/cdrom /mnt/cdrom[root@server1 mnt]# ll cdrom/total 654-rw-r--r-- 1 root root 14 Dec 5 2016 CentOS_BuildTagdrwxr-xr-x 3 root root 2048 Dec 5 2016 EFI-rw-r--r-- 1 root root 215 Dec 9 2015 EULA-rw-r--r-- 1 root root 18009 Dec 9 2015 GPLdrwxr-xr-x 3 root root 2048 Dec 5 2016 imagesdrwxr-xr-x 2 root root 2048 Dec 5 2016 isolinuxdrwxr-xr-x 2 root root 2048 Dec 5 2016 LiveOSdrwxrwxr-x 2 root root 630784 Dec 5 2016 Packagesdrwxrwxr-x 2 root root 4096 Dec 5 2016 repodata-rw-r--r-- 1 root root 1690 Dec 9 2015 RPM-GPG-KEY-CentOS-7-rw-r--r-- 1 root root 1690 Dec 9 2015 RPM-GPG-KEY-CentOS-Testing-7-r--r--r-- 1 root root 2883 Dec 5 2016 TRANS.TBL 12.查看文件大小du -hdu -ah 13.查看分区df -h 14.sshssh hadoop@192.168.1.1 15.关机shutdown -h now /init 0shutdown -r now /reboot ssh免密登录 假如 A 要登陆 B在A上操作：首先生成密钥对 ssh-keygen (提示时，直接回车即可) 再将A自己的公钥拷贝并追加到B的授权列表文件authorized_keys中 ssh-copy-id B]]></content>
      <categories>
        <category>大数据学习笔记</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>linux</tag>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据02-01 linux命令继续学习.md]]></title>
    <url>%2F2017%2F10%2F29%2F%E5%A4%A7%E6%95%B0%E6%8D%AE02-01%20linux%E5%91%BD%E4%BB%A4%E7%BB%A7%E7%BB%AD%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[vmare克隆后修改地址问题解决克隆后eth0不见的问题 直接修改 /etc/sysconfig/network-script/ifcfg-eth0删掉UUID HWADDR配置静态地址然后：修改 /etc/udev/rules.d/70-persistent-net.rules然后 reboot linux命令继续学习查看文件内容cat somefile 一次性将文件内容全部输出（控制台）more somefile 可以翻页查看, 下翻一页(空格) 上翻一页（b） 退出（q）less somefile 可以翻页查看,下翻一页(空格) 上翻一页（b），上翻一行(↑) 下翻一行（↓） 可以搜索关键字（/keyword） tail -10 install.log 查看文件尾部的10行tail -f install.log 小f跟踪文件的唯一inode号，就算文件改名后，还是跟踪原来这个inode表示的文件tail -F install.log 大F按照文件名来跟踪 head -10 install.log 查看文件头部的10行 后台服务管理service network status 查看指定服务的状态service network stop 停止指定服务service network start 启动指定服务service network restart 重启指定服务service –status-all 查看系统中所有的后台服务 设置后台服务的自启配置chkconfig 查看所有服务器自启配置chkconfig iptables off 关掉指定服务的自动启动chkconfig iptables on 开启指定服务的自动启动 系统启动级别管理vi /etc/inittab12345678910# Default runlevel. The runlevels used are:# 0 - halt (Do NOT set initdefault to this)# 1 - Single user mode# 2 - Multiuser, without NFS (The same as 3, if you do not have networking)# 3 - Full multiuser mode# 4 - unused# 5 - X11# 6 - reboot (Do NOT set initdefault to this)#id:3:initdefault: 软件安装如何上传安装包到服务器 可以使用图形化工具，如： filezilla 可以使用sftp工具： alt+p 调出后，用put命令上传上传（如果不cd指定目录，则上传到当前用户的主目录）：12sftp&gt; cd /home/ sftp&gt; put C:\Users\Administrator\Desktop\day02\soft\jdk-7u45-linux-x64.tar.gz 下载（lcd[local cd]指定下载到本地的目标路径）12sftp&gt; lcd d:/ sftp&gt; get /home/jdk-7u45-linux-x64.tar.gz lrzsz 安装jdk压缩解压缩的相关命令压缩解压缩 root@mini1 ~]# gzip access.log [root@mini1 ~]# ll 总用量 134892 -rw-r--r--. 1 root root 68 4月 3 17:37 access.log.gz 解压gz文件： -d access.log.gz```12### 打包解包 [root@mini1 ~]# tar -cvf myfirsttarball.tar aaa/aaa/aaa/2.txtaaa/3.txtaaa/1.txt1解包： [root@mini1 ~]# tar -xvf myfirsttarball.taraaa/aaa/2.txtaaa/3.txtaaa/1.txt123### 一次性完成打包&amp;&amp;压缩的操作产生压缩包： [root@mini1 ~]# tar -zcvf my.tar.gz aaa/aaa/aaa/2.txtaaa/3.txtaaa/1.txt12解压缩包： [root@mini1 ~]# tar -zxvf my.tar.gzaaa/aaa/2.txtaaa/3.txtaaa/1.txt``` 安装jdk的过程： 解压安装包 tar -zxvf jdk-7u45-linux-x64.tar.gz -C apps/ 然后修改环境变量 vi /etc/profile 在文件最后添加 export JAVA_HOME=/root/apps/jdk1.7.0_45 export PATH=$PATH:$JAVA_HOME/bin 保存退出 然后重新加载环境变量 source /etc/profile 安装rpm包软件，如mysql查看系统中安装的rpm包rpm -qa | grep mysql 上传rpm安装包MySQL-client-5.5.48-1.linux2.6.x86_64.rpm MySQL-server-5.5.48-1.linux2.6.x86_64.rpm per * .rpm 安装perl依赖rpm -ivh perl* 可能会提示有包冲突，解决： rpm -e 冲突包名 –nodeps 安装serverrpm -ivh MySQL-server-5.5.48-1.linux2.6.x86_64.rpm 如果成功，会看到进度条，最后，有关于root密码设置的提示，一定要记下来这个版本的提示是，先启动server service mysql start 然后/usr/bin/mysql_secure_installation 命令去交互式修改root密码 修改密码时，提示需要先安装clientrpm -ivh MySQL-client-5.5.48-1.linux2.6.x86_64.rpm 客户端安装成功后，记得还要用/usr/bin/mysql_secure_installation 命令去交互式修改root密码 登录验证mysql -uroot -proot]]></content>
      <categories>
        <category>大数据学习笔记</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>linux</tag>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode快捷键记录]]></title>
    <url>%2F2017%2F09%2F11%2Fvscode%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[分屏预览ctrl+k vctrl+B 唤出侧边栏 切换分屏ctrl+1ctrl+2ctrl+3 alt+z 开启/取消自动换行ctrl+` 打开/关闭控制台 文本编辑alt+↑/↓ 挪动行alt+shift+↑/↓ 向上/下复制行ctrl+enter 下方新建行ctrl+shift+enter 上方新建行ctrl+shift+k 删除当前行 ctrl+x 剪切行(光标没选中的时候)ctrl+k z 编辑区域最大化 切换窗口ctrl+e 最近打开的文件ctrl+r 打开的工作空间]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea快捷键记录]]></title>
    <url>%2F2017%2F09%2F03%2Fidea%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[查找方法,这个用于看源码的时候感觉很好用记录一下 ctrl+shift+alt+n //———————————– Navigate | Call Hierarchy命令查看一个Java方法调用树（caller和callee两个方向） ctrl+alt+H Analyze | Dataflow from/to Here两个命令查看表达式、变量和方法参数的传递关系树。 Analyze | Data Flow to HereAnalyze | Data Flow from Here “Find Usage”可以查看一个Java类、方法或变量的直接使用情况。 alt+F7 Navigate | File Structure 查看文件的结构 ctrl+F12 http://www.cnblogs.com/huaxingtianxia/p/5728847.html //———————————–]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记录下hexo常用命令自己方便看]]></title>
    <url>%2F2017%2F09%2F03%2F%E8%AE%B0%E5%BD%95%E4%B8%8Bhexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%87%AA%E5%B7%B1%E6%96%B9%E4%BE%BF%E7%9C%8B%2F</url>
    <content type="text"><![CDATA[1234567Hexo常用命令： hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） hexo deploy #将.deploy目录部署到GitHub 简写 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 复合命令 hexo deploy -g hexo server -g 有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧 hexo clean]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[终于有了自己的博客]]></title>
    <url>%2F2017%2F08%2F27%2F%E7%BB%88%E4%BA%8E%E6%9C%89%E4%BA%86%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[终于有了自己的博客。感谢网络，感谢爱分享的人。 搭建博客时候参考的帖子： hexo从零开始到搭建完整 Hexo安装和配置 Hexo搭建Github-Pages博客填坑教程 主题nexT使用指南 自己碰到的坑 安装hexo后启动时,访问localhost:4000网页没反应 替换端口号后解决了 rss 链接出现问题,在Hexo搭建Github-Pages博客填坑教程 中找到了解决办法 hueman 主题下载后启动错误,这个没解决,替换找别的主题了。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
</search>
