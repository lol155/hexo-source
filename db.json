{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/third-part/flowchart-latest.js","path":"lib/third-part/flowchart-latest.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"97d9a237954c0216b3a80750275d06038224c70c","modified":1510504904752},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1504451374220},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1504451374221},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1504451374221},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1504451374228},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1504451374229},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1504451374229},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1504451374230},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1504451374231},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1504451374232},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1504451374233},{"_id":"themes/next/README.cn.md","hash":"59e323ce21535d561507c9ecc984b7c4dcb61514","modified":1504451374234},{"_id":"themes/next/README.md","hash":"52bad95ac4c88371d3ae9d9ea6e0e14b8c723edf","modified":1504451374235},{"_id":"themes/next/_config.yml","hash":"99742022b5881db5496aedae49ad63cfbfffa05a","modified":1517903039910},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1504451374237},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1504451374238},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1504451374643},{"_id":"source/_drafts/编写工具包.md","hash":"dd217af08e197fcf25faa0106f8382c91f4a2f92","modified":1518142909577},{"_id":"source/_posts/终于有了自己的博客.md","hash":"83de08effabe88e706696050098cf307f6385fa2","modified":1518159786847},{"_id":"source/about/index.md","hash":"be502ae1fbbe7406172833be2608307b68eaad71","modified":1503813653601},{"_id":"source/categories/index.md","hash":"460fef8ab3e31296379bc064f1aa96b875706f76","modified":1503813637640},{"_id":"source/tags/index.md","hash":"6d7ba436ea280a408be9a473466fec577f18daf4","modified":1503813643807},{"_id":"themes/next/languages/de.yml","hash":"ee6262473faa1fa55e3dc7b0bb6542f4f6a275c8","modified":1504451374239},{"_id":"themes/next/languages/en.yml","hash":"2443657cf60284ecf01c60a5e20acd406f321d88","modified":1504451374241},{"_id":"themes/next/languages/default.yml","hash":"2443657cf60284ecf01c60a5e20acd406f321d88","modified":1504451374240},{"_id":"themes/next/languages/fr-FR.yml","hash":"c6f3a38a6c27d0815ef72d66020805408aa24019","modified":1504451374242},{"_id":"themes/next/languages/id.yml","hash":"58c9886ccd224cee3db6f9b9e1a86dcd4ff47995","modified":1504451374242},{"_id":"themes/next/languages/ja.yml","hash":"6ba8858255b4cae5e00f5fabd1cfaea3c98a34c2","modified":1504451374243},{"_id":"themes/next/languages/ko.yml","hash":"fbfad308103fb95c635609419bfa3420cb69d646","modified":1504451374245},{"_id":"themes/next/languages/pt-BR.yml","hash":"5e160fa8c8bd1f16b50db161d5bc8ae2ebd6a0c5","modified":1504451374245},{"_id":"themes/next/languages/pt.yml","hash":"1141a4896986de6e2383c5694c0359eaa22fb9b4","modified":1504451374246},{"_id":"themes/next/languages/ru.yml","hash":"43a8fb18dbfeaeed71268d75eb4c542061766419","modified":1504451374247},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0b9ce7d62e7d55235a2770817a40e84577ce38c1","modified":1504451374248},{"_id":"themes/next/languages/zh-hk.yml","hash":"13b2808d632c27748a38a752457d4538c37b8ebb","modified":1504451374248},{"_id":"themes/next/languages/zh-tw.yml","hash":"a91f6c8fa19044afac162a1c73e03836e9460bc5","modified":1504451374249},{"_id":"themes/next/layout/_layout.swig","hash":"fb55ab56e2d478cadc0c3906adfbc4a13620408e","modified":1510671809544},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1504451374638},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1504451374640},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1504451374640},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1504451374641},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1504451374641},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1504451374642},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1504451374643},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1504451374645},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1504451374646},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1504451374891},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1504451374892},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1504451374893},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504451374749},{"_id":"source/_posts/其他/北京冬天哪里好玩.md","hash":"d366f4983cbdf0d4f4e810c0503d063f45d3e528","modified":1517903421718},{"_id":"source/_posts/其他/记录有北京游玩的链接.md","hash":"51f5c0264314b7aa78afde64ffc5b3848163d9ed","modified":1517903424560},{"_id":"source/_posts/大数据/大数据01-linux安装及基本命令.md","hash":"cadb61b95326374f08bbfe18051a5cc9dd6164a9","modified":1517903308188},{"_id":"source/_posts/大数据/大数据02-01 linux命令继续学习.md","hash":"547ba6473319a9ec6071db897d924dd8acde254f","modified":1517903318051},{"_id":"source/_posts/大数据/大数据02-01-1-linux本地yum库.md","hash":"3e9c7924037732d5a3b0bc06370ae4c1f79620bf","modified":1517903336713},{"_id":"source/_posts/大数据/大数据02-02-linux命令继续学习-yum.md","hash":"31d8fc5b7b058d3cb948bf029ab56a20b647c2aa","modified":1517903334077},{"_id":"source/_posts/大数据/大数据02-03 shell编程语法讲解.md","hash":"e0974fc837926dee9fdda756683090e7dd931607","modified":1517903338781},{"_id":"source/_posts/大数据/大数据02-04-shell编程-sed命令.md","hash":"5c6e8577a71eeedf1e331f4630883013b9b05a0a","modified":1517903342677},{"_id":"source/_posts/大数据/大数据02-05-shell编程-awk命令.md","hash":"69c90e534565d0da50cae2f41938e856f436cf05","modified":1517903349096},{"_id":"source/_posts/大数据/大数据03-01-自动化部署脚本.md","hash":"70299b681203f4ddfeffa8afda557730a3d86005","modified":1517903354082},{"_id":"source/_posts/大数据/大数据03-02-zookeeper-简介.md","hash":"ab3451eb175da7ab8666c3abc28b7baab289ecd9","modified":1517903356907},{"_id":"source/_posts/大数据/大数据03-03-zookeeper-命令行客户端及znode数据结构类型监听等功能.md","hash":"3ee5c1a6a51ea3105dbb748d5e7024676f543af2","modified":1517903363061},{"_id":"source/_posts/大数据/大数据03-04-zookeeper集群自动启动脚本及export变量作用域的解析.md","hash":"7cf737878f24304d85a9a7aaeb4c7d7a81b60ad8","modified":1517903368232},{"_id":"source/_posts/大数据/大数据03-05-java-api.md","hash":"9243aa014add25b1c55a56e80d118ecaab0626c2","modified":1517903375548},{"_id":"source/_posts/大数据/大数据03-06-系统服务器上下线感知程序.md","hash":"91992699e107d2d8bda58fe2025d2f58927d311a","modified":1517903380686},{"_id":"source/_posts/大数据/大数据0401-java多线程并发.md","hash":"e6ea21763e71e28cc5316c5dc4374bf9a89c54bc","modified":1517903383632},{"_id":"source/_posts/大数据/大数据0402-JMS activeMQ.md","hash":"11c62cee2350ab2db7048c8b4423e301b7f9c5f1","modified":1517903387616},{"_id":"source/_posts/大数据/大数据0403-java反射.md","hash":"f61178a54e66d7b02ac568b45397e03e2ae14dc2","modified":1517903396542},{"_id":"source/_posts/大数据/大数据0404-java动态代理.md","hash":"17a81470803906c08e3523b799cfa64e26979329","modified":1517903402027},{"_id":"source/_posts/大数据/大数据0405-java-socket.md","hash":"ce8767d2ac24e69a12f62a8c88688b85f780fdcf","modified":1517903405340},{"_id":"source/_posts/大数据/大数据0406-javaJVM技术.md","hash":"c56089d95052eb44857073e2949969e8264e259a","modified":1517903409786},{"_id":"source/_posts/大数据/大数据0501-轻量级RPC框架开发.md","hash":"d77a82fafe80b1471f2d4978a7730b502631f2be","modified":1517903413396},{"_id":"source/_posts/微服务/微服务框架与实战-总体概览.md","hash":"aff1f9959bcec6ef51f67f7e2ed181f8a92f2046","modified":1517903562880},{"_id":"source/_posts/微服务/微服务框架与实战-笔记01-概述.md","hash":"2d6d7fc104fef36240987a73626300345dbdb5c6","modified":1517903566213},{"_id":"source/_posts/微服务/微服务框架与实战-笔记02-微服务开发框架-SpringCloud.md","hash":"68d44266501e9b915135b924bad992ad9eaace3e","modified":1517903569037},{"_id":"source/_posts/微服务/微服务框架与实战-笔记03-开始使用SpringCloud实战微服务.md","hash":"414c3f0cd98100eba52df5a1ed065e71d7f3f9f8","modified":1517903573953},{"_id":"source/_posts/杂记/aws-vpn.md","hash":"1f56e31eb0954275727dae77e1d8b397b96d5d64","modified":1517903250971},{"_id":"source/_posts/杂记/centos7-安装mysql-转.md","hash":"e8bd0371bc58c8c4b127b42df2a948ffadccf812","modified":1517903254246},{"_id":"source/_posts/杂记/centos7-开放端口.md","hash":"2995b4b591669235a141a8a8771835bfc46af603","modified":1517903256211},{"_id":"source/_posts/杂记/ftp服务器创建.md","hash":"d17f4c290a49fd283b63d72b3e5d9420c366d9ec","modified":1517903265705},{"_id":"source/_posts/杂记/hexo-next-搜索-algolia.md","hash":"b636b4cf0165ad94c5f56de62c52eaae1211b0bb","modified":1517903269805},{"_id":"source/_posts/杂记/hexo-next-本地搜索.md","hash":"4a1e96f6e5feae745080487c1c0302973ddc0fb7","modified":1517903272321},{"_id":"source/_posts/杂记/idea快捷键记录.md","hash":"67c89c94a0a6eeefd44a8a554bffff803dd7d911","modified":1517903275042},{"_id":"source/_posts/杂记/js心跳请求.md","hash":"af993d4f9e4aaa9132ac0c676e00a922a50450b9","modified":1517903277390},{"_id":"source/_posts/杂记/linux 程序down 问题排查.md","hash":"96da4cb5b04587048faccc3fd7ced4eea14609c9","modified":1517903279324},{"_id":"source/_posts/杂记/linux下安装opencv-java.md","hash":"6eeffb546a90c6a2cdde6f135e6543521b0a2afd","modified":1517903281198},{"_id":"source/_posts/杂记/linux修改时间.md","hash":"fb63f324fcda7ff1cddcb3dd157a467a7008ba7f","modified":1517903283611},{"_id":"source/_posts/杂记/linux笔记-修改语言.md","hash":"b765e729c057d7b21160d2caf8074cb302f4ac5d","modified":1517903285382},{"_id":"source/_posts/杂记/tomcat+idea远程调试.md","hash":"0de4cd9186c622a740c0f3779842298f30e2a044","modified":1517903287398},{"_id":"source/_posts/杂记/vagrant 创建virtualBox虚拟机.md","hash":"8dae3ff85187122c18657bd6f9c6cd6b19e84556","modified":1517903289322},{"_id":"source/_posts/杂记/vscode快捷键记录.md","hash":"046fb7481abc333b96123b258f0e8d7e8e3b4cb8","modified":1517903292363},{"_id":"source/_posts/杂记/使用多个git账户.md","hash":"59ed68c2b516f454caceff723f3bb8c97f717534","modified":1517903294467},{"_id":"source/_posts/杂记/记录下hexo常用命令自己方便看.md","hash":"4c5821e952c71956ee363920b4bd356cc711f0c1","modified":1517903296583},{"_id":"source/_posts/阿里java规约/阿里java规约(一)-编程规约(1)-命名风格.md","hash":"54003c60d1b98a759e99829284c62e56cb41e955","modified":1518165918233},{"_id":"source/_posts/阿里java规约/阿里java规约(一)-编程规约(2)-常量定义.md","hash":"7519c085101ccce932cdfb123c29a00c65697a3b","modified":1518165920971},{"_id":"source/_posts/阿里java规约/阿里java规约(一)-编程规约(3)-代码格式.md","hash":"e3289ddd6d10b022ba28b7a589b32bd8f77c7bde","modified":1518165915468},{"_id":"source/_posts/阿里java规约/阿里java规约(一)-编程规约(4)-OOP规约.md","hash":"078ccae913455021ceeba8054ee853ff53b53045","modified":1518165913264},{"_id":"source/_posts/阿里java规约/阿里java规约(一)-编程规约(5)-集合处理.md","hash":"0a7181f02a87a107aeb2912de9c2ea374f54acde","modified":1518165910706},{"_id":"source/_posts/阿里java规约/阿里java规约(一)-编程规约(6)-并发处理.md","hash":"4d1d126816b52a84dd072facebe02cd58c7527af","modified":1518165908617},{"_id":"source/_posts/阿里java规约/阿里java规约(一)-编程规约(7)-控制语句.md","hash":"097ce4f716b056e9f6751865ba1ac38348902a4e","modified":1518165906757},{"_id":"source/_posts/阿里java规约/阿里java规约(一)-编程规约(8)-注释规约.md","hash":"04b4f0a8f0f9b8aa1c7ec5e0b5eb418e4e4c2f0c","modified":1518165901619},{"_id":"source/_posts/阿里java规约/阿里java规约(一)-编程规约(9)-其他.md","hash":"bde8f9f4469d36a82e7ddc3f92db9b1fa6dc2c93","modified":1518165899577},{"_id":"source/_posts/阿里java规约/阿里java规约(三)-单元测试.md","hash":"ae1e81e5e275dc6dc27ecb01bdc72f6d97d2f121","modified":1518170055921},{"_id":"source/_posts/阿里java规约/阿里java规约(二)-异常日志(1)-异常处理.md","hash":"8d2e9f0f168eb00e1ea88f9b6101935ecb9bb51c","modified":1518165940186},{"_id":"source/_posts/阿里java规约/阿里java规约(二)-异常日志(2)-日志规约.md","hash":"f6a0c724d960b4acedda49725adaa69584cea1f9","modified":1518166641501},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1504451374251},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1504451374252},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1504451374254},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1504451374255},{"_id":"themes/next/layout/_macro/post.swig","hash":"9896b34a7edc112c03b393a1602a616710a66ae1","modified":1504451374256},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5b1e91c2f6f88fbecd426cd0727e7b7854c6cc1d","modified":1504451374257},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"4a7306f92e16c468c6ebbd75382fd24e0d5f0760","modified":1504451374258},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1504451374259},{"_id":"themes/next/layout/_partials/comments.swig","hash":"fc0ff72b3a8ab25029a070acee066d9eaa0b0493","modified":1504451374261},{"_id":"themes/next/layout/_partials/footer.swig","hash":"dc2a0699152da26de23cf68314d919c7f1b91b77","modified":1504451374561},{"_id":"themes/next/layout/_partials/head.swig","hash":"71040aa738c57c24f8b703875d58ab7a262fe075","modified":1504451374564},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1504451374572},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1504451374573},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1504451374576},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1504451374579},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1504451374597},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1504451374598},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"15e7cb274d64ee42e60a67debb5c9ad9b384d1eb","modified":1516851993789},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1504451374628},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1504451374628},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1504451374629},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1504451374629},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1504451374631},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1504451374631},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1504451374647},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1504451374647},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1504451374648},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1504451374648},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1504451374649},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1504451374650},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1504451374650},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1504451374651},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1504451374652},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1504451374748},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1504451374749},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1504451374750},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1504451374751},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1504451374751},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1504451374752},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1504451374753},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1504451374754},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1504451374754},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1504451374755},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1504451374756},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1504451374756},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1504451374757},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1504451374758},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1504451374758},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504451374604},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504451374604},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504451374725},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504451374725},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504451374727},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504451374745},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504451374747},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1504451374566},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1504451374569},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1504451374582},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1504451374583},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1504451374585},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1504451374588},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1504451374590},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1504451374592},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"8ed117eeeac17d562a54ec6be556988be0ec67ba","modified":1504451374594},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1504451374601},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1504451374603},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1504451374605},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1504451374608},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1504451374609},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1504451374610},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1504451374611},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1504451374612},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1504451374613},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1504451374613},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1504451374615},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1504451374617},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1504451374618},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1504451374618},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1504451374620},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1504451374614},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1504451374622},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1504451374621},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1504451374622},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"92ea45b877b1fec2010c7b409f121c986ee5075b","modified":1504451374623},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1504451374624},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"602104d7ac47f7888d97e810419e58593a79e8ba","modified":1504451374625},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1504451374626},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1504451374635},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1504451374636},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1504451374636},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1504451374637},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1504451374723},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1504451374724},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1504451374726},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1504451374726},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"38a9f43973704afe7e8ca50f35a25940ea96e3cf","modified":1504451374744},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1504451374744},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1504451374746},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a627633d3bb70b8501572b18037def478beb7017","modified":1504451374747},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1504451374759},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1504451374760},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1504451374761},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1504451374761},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1504451374762},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1504451374763},{"_id":"themes/next/source/js/src/motion.js","hash":"6d34f2a6ea6d73f7715d00f8b175854cd02baa36","modified":1504451374764},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1504451374764},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1504451374766},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1504451374766},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1504451374767},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1504451374778},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1504451374783},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1504451374785},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1504451374784},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1504451374786},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1504451374805},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1504451374806},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1504451374807},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1504451374807},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1504451374810},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1504451374811},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1504451374811},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1504451374812},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1504451374813},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1504451374833},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1504451374836},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1504451374836},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1504451374837},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1504451374838},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1504451374838},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1504451374839},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1504451374840},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1504451374841},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1504451374841},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1504451374842},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1504451374843},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1504451374843},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1504451374844},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1504451374844},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1504451374845},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1504451374846},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1504451374846},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1504451374847},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1504451374847},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1504451374848},{"_id":"themes/next/source/lib/third-part/flowchart-latest.js","hash":"63b6aba4c280c4bd838956691af25be8fff3f33d","modified":1516851505313},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1504451374862},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1504451374863},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1504451374863},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1504451374872},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1504451374884},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1504451374888},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1504451374889},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1504451374890},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1504451374835},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1504451374634},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1504451374655},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1504451374655},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1504451374656},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1504451374634},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1504451374656},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1504451374657},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1504451374668},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1504451374687},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"c9b6e70e67a0b2c41a03181302379afdc26da5b6","modified":1504451374718},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1504451374719},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1504451374719},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1504451374720},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1504451374721},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1504451374721},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1504451374722},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1504451374728},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1504451374729},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1504451374729},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1504451374730},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1504451374731},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1504451374731},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1504451374732},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1504451374732},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1504451374736},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1504451374737},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1504451374737},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1504451374738},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1504451374738},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1504451374740},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"d4cf54b33e1bb8746a77ce2446d581d01be5329d","modified":1504451374741},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1504451374741},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1504451374742},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"36026bc6e8d3a631f109d766fdd21857697650a0","modified":1504451374742},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1504451374743},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1504451374765},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1512486077937},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1504451374775},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1504451374776},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1504451374787},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1504451374787},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1504451374788},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1504451374789},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1504451374795},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1504451374796},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1504451374803},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1504451374802},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1504451374804},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1504451374809},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1504451374809},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1504451374814},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1504451374815},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1504451374815},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1504451374871},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1504451374871},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1504451374774},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1504451374831},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1504451374832},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1504451374887},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1504451374658},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1510239677710},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1504451374660},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1504451374661},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1504451374661},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1504451374662},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1504451374663},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25588183c7671c72d3d78d67ee8991050255bf50","modified":1513961524338},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1504451374664},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1504451374665},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1504451374666},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1504451374666},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1504451374667},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1504451374668},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1504451374669},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1504451374670},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1504451374672},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1504451374671},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1504451374672},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1504451374673},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1504451374673},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1504451374675},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f363a544aa800a2a5ed97c40887fe9743f67b03b","modified":1504451374675},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1504451374676},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1504451374676},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1504451374678},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1504451374678},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1504451374679},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ce884e7051764d01a74050ce6b2da52952ca1881","modified":1504451374679},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"5f3510419161ec22ca88cce6a181ddad61de9e86","modified":1504451374680},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1504451374681},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1504451374682},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1504451374682},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1504451374682},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1504451374683},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1504451374684},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1504451374686},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1504451374685},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1504451374686},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1504451374688},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1504451374689},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1504451374692},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1504451374707},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1504451374708},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1504451374709},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1504451374709},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1504451374710},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1504451374711},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1504451374712},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1504451374712},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1504451374713},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1504451374714},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1504451374714},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1504451374716},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1504451374716},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1504451374717},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1504451374734},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1504451374734},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1504451374739},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1504451374770},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1504451374770},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1504451374771},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1504451374772},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1504451374797},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1504451374798},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1504451374799},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1504451374800},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1504451374800},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1504451374801},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1504451374819},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1504451374822},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1504451374830},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1504451374782},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1504451374869},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1504451374827},{"_id":"public/atom.xml","hash":"83048aaf7c1a9a03e32cc33838ed43389027dc81","modified":1518170119705},{"_id":"public/search.xml","hash":"8be9421a449ce28803de65b89a1ddf6053fa6d0c","modified":1518170119744},{"_id":"public/content.json","hash":"afb7f2a789308fe64afa9fb64eb1d5c8774207c6","modified":1518170119745},{"_id":"public/sitemap.xml","hash":"3f5cc2e2d4a0d319ef47899150806a1137321504","modified":1518170119745},{"_id":"public/about/index.html","hash":"67714a09ca3d5b08b685ffd2b17a9b8e287c593b","modified":1518170120985},{"_id":"public/categories/index.html","hash":"df0054d8748eec651d19e4517a1b89b2f65ae337","modified":1518170120994},{"_id":"public/tags/index.html","hash":"6be15364a264f6dd1cf26a3b04c9a211034a9c24","modified":1518170120994},{"_id":"public/2018/01/24/杂记/linux修改时间/index.html","hash":"0ac663897ff7534833a3da1c54415297b10cd3dc","modified":1518170120994},{"_id":"public/2018/01/24/杂记/linux 程序down 问题排查/index.html","hash":"b33bcd0b4fcfd976222841e93e074e590bbe0fec","modified":1518170120994},{"_id":"public/2018/01/24/杂记/js心跳请求/index.html","hash":"f6fb8ae19d884fec7285018b05def67944cbf048","modified":1518170120994},{"_id":"public/2018/01/24/杂记/linux下安装opencv-java/index.html","hash":"452e84ba2ecbda35ffb46c2073a8ebf5f04a0b99","modified":1518170120994},{"_id":"public/2018/01/24/杂记/tomcat+idea远程调试/index.html","hash":"e181d3b5148b351fd7a639fd72334b5e1b482b63","modified":1518170120994},{"_id":"public/2018/01/21/微服务/微服务框架与实战-笔记03-开始使用SpringCloud实战微服务/index.html","hash":"06542182bd9ddedbc020fa7701032da4798856e6","modified":1518170120995},{"_id":"public/2018/01/21/微服务/微服务框架与实战-总体概览/index.html","hash":"fd816201a11e9d9ae07ea2da13d9c606df2601d2","modified":1518170120995},{"_id":"public/2018/01/09/微服务/微服务框架与实战-笔记02-微服务开发框架-SpringCloud/index.html","hash":"ca1c33db4bf556c60ebf589e5c53373e55a2e5b1","modified":1518170120995},{"_id":"public/2018/01/07/杂记/使用多个git账户/index.html","hash":"e0889d46185e55d33252d357785dac6e313220df","modified":1518170120995},{"_id":"public/2018/01/05/微服务/微服务框架与实战-笔记01-概述/index.html","hash":"60e56135019cf7e19cf889941b5e47c5adcc2f61","modified":1518170120995},{"_id":"public/2018/01/03/杂记/aws-vpn/index.html","hash":"4a1b10deb57473720e9c6e3602b1c4ca143dd955","modified":1518170120995},{"_id":"public/2018/01/01/大数据/大数据0501-轻量级RPC框架开发/index.html","hash":"23da7d45c998dde9422f2b82738ed2aec5e562e3","modified":1518170120995},{"_id":"public/2017/12/22/其他/北京冬天哪里好玩/index.html","hash":"182cbf5b8328391a485543cb28f0224091d04cec","modified":1518170120996},{"_id":"public/2017/12/22/其他/记录有北京游玩的链接/index.html","hash":"672afa9952f1d8fb3f35c6203a201e6953075efb","modified":1518170120996},{"_id":"public/2017/12/05/大数据/大数据0406-javaJVM技术/index.html","hash":"91a332ba8ed4d3463150f7f37da5262af26507a3","modified":1518170120996},{"_id":"public/2017/12/03/大数据/大数据0405-java-socket/index.html","hash":"84d335b6f7d4b021eb1260330236579a9dff31b6","modified":1518170120996},{"_id":"public/2017/12/03/大数据/大数据0404-java动态代理/index.html","hash":"9c8cd4b86e19adf3b9a1ba263af1baa3d6931c14","modified":1518170120996},{"_id":"public/2017/12/03/大数据/大数据0403-java反射/index.html","hash":"922615bebc76a3df72b2568e09101dadca08d65e","modified":1518170120997},{"_id":"public/2017/12/03/大数据/大数据0402-JMS activeMQ/index.html","hash":"de9dfc08264eb103a16c6afc1a149864c7088687","modified":1518170120997},{"_id":"public/2017/12/01/大数据/大数据0401-java多线程并发/index.html","hash":"fdda2e57aca7df1eefcb2d60327480c6875cced2","modified":1518170120997},{"_id":"public/2017/11/26/大数据/大数据03-06-系统服务器上下线感知程序/index.html","hash":"8d0a222d3ff918e3e74b40612e506bd785adf646","modified":1518170120997},{"_id":"public/2017/11/26/大数据/大数据03-05-java-api/index.html","hash":"4379b97968c17ff96c87a69ce36ccfd8bbb200c6","modified":1518170120997},{"_id":"public/2017/11/21/大数据/大数据03-04-zookeeper集群自动启动脚本及export变量作用域的解析/index.html","hash":"7baee6e4de425c2b1595a84ffcab976a9e593ab0","modified":1518170120997},{"_id":"public/2017/11/19/大数据/大数据03-03-zookeeper-命令行客户端及znode数据结构类型监听等功能/index.html","hash":"8943b3e676e4014f18d3c1f366d15043f031fd69","modified":1518170120997},{"_id":"public/2017/11/19/大数据/大数据03-02-zookeeper-简介/index.html","hash":"04120c69be2b65838c1c70245825c77fc0c7f15b","modified":1518170120997},{"_id":"public/2017/11/14/杂记/hexo-next-本地搜索/index.html","hash":"0b5c662b0797f33c07983f4b7bbf8c51a5f70680","modified":1518170120997},{"_id":"public/2017/11/14/大数据/大数据03-01-自动化部署脚本/index.html","hash":"8bb34ff7267c1438e5d63266f880070bcc2d39a8","modified":1518170120997},{"_id":"public/2017/11/14/大数据/大数据02-01-1-linux本地yum库/index.html","hash":"bd7fcb0b110146d0a914b786de9d36547f108711","modified":1518170120997},{"_id":"public/2017/11/06/大数据/大数据02-05-shell编程-awk命令/index.html","hash":"e870375f7165019aba17728f0c70ff42800a7e88","modified":1518170120997},{"_id":"public/2017/11/06/大数据/大数据02-04-shell编程-sed命令/index.html","hash":"e39839b26a47384ef958e19b16245c80956ef1fa","modified":1518170120997},{"_id":"public/2017/11/05/杂记/linux笔记-修改语言/index.html","hash":"af89b78c6967d9676c7cc472f63c766534e339db","modified":1518170120998},{"_id":"public/2017/11/06/大数据/大数据02-03 shell编程语法讲解/index.html","hash":"a491055fb32969d53df512e90d434410f222b239","modified":1518170120998},{"_id":"public/2017/11/04/杂记/vagrant 创建virtualBox虚拟机/index.html","hash":"93c1fc33f3cbd8c8a27c68fc7021b872bc5fe480","modified":1518170120998},{"_id":"public/2017/11/04/杂记/centos7-安装mysql-转/index.html","hash":"64815303252b2ad201760a80db773dbcc4ae9ab7","modified":1518170120998},{"_id":"public/2017/11/04/杂记/ftp服务器创建/index.html","hash":"eaa0066d6d819e4a4e7a652293c8671bc1fab614","modified":1518170120998},{"_id":"public/2017/11/04/杂记/centos7-开放端口/index.html","hash":"a923b3345d4b81ab1a53f1d13646111d619ce45f","modified":1518170120998},{"_id":"public/2017/11/01/大数据/大数据02-02-linux命令继续学习-yum/index.html","hash":"f8f5e6fdd4ce2d1b7021eda66285c7994c0340fb","modified":1518170120998},{"_id":"public/2017/10/30/杂记/hexo-next-搜索-algolia/index.html","hash":"160fa4960ec8179455f59bdc47e889dab5272f00","modified":1518170120998},{"_id":"public/2017/10/30/大数据/大数据01-linux安装及基本命令/index.html","hash":"9840b0877cfdd6daafe87ca1fcd8571785808bc4","modified":1518170120998},{"_id":"public/2017/10/29/大数据/大数据02-01 linux命令继续学习/index.html","hash":"a95762f590ac10eef459b3b59ed15d84ec496b75","modified":1518170120998},{"_id":"public/2017/09/11/杂记/vscode快捷键记录/index.html","hash":"020eb2ca876da02de38aa92680d4f409942b39f2","modified":1518170120998},{"_id":"public/2017/09/03/杂记/idea快捷键记录/index.html","hash":"70b5c1b10200b6083fabd47d033cc9089ce0ba80","modified":1518170120998},{"_id":"public/2017/09/03/杂记/记录下hexo常用命令自己方便看/index.html","hash":"528ba7d488213ab60ad816fb67553eff2d4aac53","modified":1518170120998},{"_id":"public/2017/08/27/终于有了自己的博客/index.html","hash":"2048e045bafe44e575e7136f0ad7f8ea56b1b7d0","modified":1518170120999},{"_id":"public/categories/essay/index.html","hash":"a1356c8be5702f97d36593f436d8e0542dc17c84","modified":1518170120999},{"_id":"public/categories/大数据学习笔记/index.html","hash":"58c9bdb92e3edead312792c0691995e2112d1deb","modified":1518170120999},{"_id":"public/categories/大数据学习笔记/page/2/index.html","hash":"6db2129cced1a9374c27e48e10693574901044f4","modified":1518170120999},{"_id":"public/categories/玩/index.html","hash":"69a8c3d8b1e477ee5b2d424b685d435f20176e1b","modified":1518170120999},{"_id":"public/categories/微服务学习/index.html","hash":"ce4aa0123beca173f109672662d8ac9d80a0c645","modified":1518170120999},{"_id":"public/categories/工具/index.html","hash":"f6449f8f8666ffdc6e08ac4d3e8add82b7344e96","modified":1518170120999},{"_id":"public/categories/学习/index.html","hash":"94ad3b56d31fce9ba587fae0f4adf0477fed8863","modified":1518170120999},{"_id":"public/categories/学习/page/2/index.html","hash":"8783abe5fa44f41711671ca96c7eb7b070bddb81","modified":1518170120999},{"_id":"public/archives/index.html","hash":"74ddf2923b60174a3b8b7fd061c963eb0278b6d4","modified":1518170120999},{"_id":"public/archives/page/2/index.html","hash":"ab368169a90ef610231e31fc4b8af94ae06d8d34","modified":1518170120999},{"_id":"public/archives/page/3/index.html","hash":"136b015b0f0e836565f992a762edd056b1f949e3","modified":1518170120999},{"_id":"public/archives/page/4/index.html","hash":"e75b7ab34886d7c35f52bf35e4ddef3b7eade888","modified":1518170120999},{"_id":"public/archives/page/5/index.html","hash":"20d4244e4992efd2d8d4907a5b6395a813a517b4","modified":1518170121000},{"_id":"public/archives/2017/index.html","hash":"75a401c278dd746ab8c7c55ee03215177fec242e","modified":1518170121000},{"_id":"public/archives/2017/page/2/index.html","hash":"fd731eb9e5a59f623b673f72ffafad1cfe3200fe","modified":1518170121000},{"_id":"public/archives/2017/page/3/index.html","hash":"ac43a1a317d746136c3124e2b9a8d2b174be4085","modified":1518170121000},{"_id":"public/archives/2017/page/4/index.html","hash":"e00d9d197ed1fe3c6ec15124759d2779b989cc24","modified":1518170121000},{"_id":"public/archives/2017/08/index.html","hash":"75b31870c561087148e11d676fc21edc537a86a5","modified":1518170121000},{"_id":"public/archives/2017/09/index.html","hash":"f6a3777fae3cb4f90c26b6a22e7791e14376a51d","modified":1518170121000},{"_id":"public/archives/2017/11/index.html","hash":"3886cf252bb1cddb89c1fa90c40d7260dcfb3c2f","modified":1518170121000},{"_id":"public/archives/2017/10/index.html","hash":"1736664c19b6cc6e45e1e4a7ff0f4e02f85fb04b","modified":1518170121000},{"_id":"public/archives/2017/11/page/2/index.html","hash":"3e19aeaa9f4c7b39fa20dfda7f7cce300c45c8e6","modified":1518170121000},{"_id":"public/archives/2017/12/index.html","hash":"40a22e28e2a90a6e3f5b2ed96a0aa025be0d5f55","modified":1518170121000},{"_id":"public/archives/2018/index.html","hash":"25765c96078b22988844f620bb50d6fd0443bb44","modified":1518170121000},{"_id":"public/archives/2018/page/2/index.html","hash":"92ab7e90ca8a4a998b8d3ef50da857d5095d5c5e","modified":1518170121000},{"_id":"public/archives/2018/01/index.html","hash":"8b142e7784bfb31e9758874f71a4b8b4f15129e6","modified":1518170121000},{"_id":"public/archives/2018/01/page/2/index.html","hash":"db72caddc10c7fa7426b7112788794afaa895937","modified":1518170121001},{"_id":"public/index.html","hash":"7c2b27f432ff942e4e5bac87493947427e97e438","modified":1518170121001},{"_id":"public/page/2/index.html","hash":"c9e791300b756cfed0aeb035190bb2f59bbb95ab","modified":1518170121001},{"_id":"public/page/3/index.html","hash":"653ac98a0342d0d9b630db98dd5d01d8364240ac","modified":1518170121001},{"_id":"public/page/4/index.html","hash":"42bea8d959243d6c1439b7238bf5181808d7a9dc","modified":1518170121001},{"_id":"public/page/5/index.html","hash":"bc879aa9a39f3d0600d38bbd497fd18e0661727a","modified":1518170121001},{"_id":"public/tags/linux/index.html","hash":"99bf24e85900297fdeab9d17e7722eae842af0f2","modified":1518170121001},{"_id":"public/tags/linux/page/2/index.html","hash":"525728f06d389d0dd0b2e1403ebafb280e27c78b","modified":1518170121001},{"_id":"public/tags/大数据/index.html","hash":"aec06434a4d8fc842ebece81ec89df2c0e3eeae8","modified":1518170121001},{"_id":"public/tags/大数据/page/2/index.html","hash":"0c750e40e54326e0e73aef66050b9b3b22f4f8e1","modified":1518170121001},{"_id":"public/tags/大数据/page/3/index.html","hash":"4c02e320699bacdebc71d7060dadc19ef00ec3e0","modified":1518170121001},{"_id":"public/tags/linux命令/index.html","hash":"3c8e35da89b04e10efaea599dd153f6d30eca723","modified":1518170121001},{"_id":"public/tags/北京/index.html","hash":"4892f2fdbdf0c3d2057646c8248d57cfcb240cb6","modified":1518170121001},{"_id":"public/tags/游玩/index.html","hash":"0094b9863ae13f1afa6b7433da43e243dc930c10","modified":1518170121002},{"_id":"public/tags/生活/index.html","hash":"4e27a7c476915ea27faac3d7e7437395fa4ce1f3","modified":1518170121002},{"_id":"public/tags/centos7/index.html","hash":"2bdd2cf3b36a12187ba984b892e10c0b444d2a52","modified":1518170121002},{"_id":"public/tags/zookeeper/index.html","hash":"d51c27f71dd9a08fc2b7946ef00802fdfdc17a14","modified":1518170121002},{"_id":"public/tags/java/index.html","hash":"586bbdce235e7550d472e4f90dadbd8acad244a2","modified":1518170121002},{"_id":"public/tags/反射/index.html","hash":"ac6366e0d0d8d5023072fea12c1e494c5de3ad47","modified":1518170121002},{"_id":"public/tags/动态代理/index.html","hash":"dbaaa29287ccc2dc237f97e02c28a80b809032eb","modified":1518170121002},{"_id":"public/tags/JMS/index.html","hash":"eab52e7eb0238b38d88c2840ca2f87017e1f3300","modified":1518170121002},{"_id":"public/tags/JVM/index.html","hash":"098bf68eef24efd073ae80c980dd20d8a4fcb4da","modified":1518170121002},{"_id":"public/tags/activeMQ/index.html","hash":"996f18095b936d1f0ae2daf48b54444d2921f7f4","modified":1518170121002},{"_id":"public/tags/socket/index.html","hash":"24d8543a94b3dcaad76742aabdb48e343af6ff03","modified":1518170121002},{"_id":"public/tags/微服务/index.html","hash":"09a3ca1d7f88069ca8ee63718cbd4c89f5185ff0","modified":1518170121002},{"_id":"public/tags/rpc/index.html","hash":"67b66ec48869fade92d338788fecdc4ba20903c1","modified":1518170121002},{"_id":"public/tags/vpn/index.html","hash":"5aecf39d7717c20e717ad996a7450eb477ce0fa0","modified":1518170121002},{"_id":"public/tags/aws/index.html","hash":"c838e66ef8dc00294fa117acfe8daa5963cf5724","modified":1518170121003},{"_id":"public/tags/mysql/index.html","hash":"dd74a115fbf2157d5430b20d6b8d3c429a613386","modified":1518170121003},{"_id":"public/tags/ftp/index.html","hash":"53e71fd49daa5687deb0e67c270f9bbf035cc609","modified":1518170121003},{"_id":"public/tags/idea/index.html","hash":"691734369bd811e5d159e80dc99de1f265ae7b9f","modified":1518170121003},{"_id":"public/tags/快捷键/index.html","hash":"5384505dbc8806a903710b08ebbffc8dfee31fd8","modified":1518170121003},{"_id":"public/tags/hexo/index.html","hash":"d4a5ad925ac8c8647e967131518a57240aff7a58","modified":1518170121003},{"_id":"public/tags/javascript/index.html","hash":"c39d7a4e39c95159ff4ffa03c0c98ff8bd854524","modified":1518170121003},{"_id":"public/tags/opencv/index.html","hash":"ed6575347790b7db3a5ffcb129426e1eee93058b","modified":1518170121003},{"_id":"public/tags/vagrant/index.html","hash":"5b2ee2a0f45c783a7c61cb01934e8a3b1781c3c4","modified":1518170121003},{"_id":"public/tags/git/index.html","hash":"13079b6dd94d265054a46791f726698edc95dc59","modified":1518170121003},{"_id":"public/tags/vscode/index.html","hash":"35a6f1b9e1fb8ff33d62633b4a61e77c27476537","modified":1518170121003},{"_id":"public/2018/02/09/阿里java规约/阿里java规约(三)-单元测试/index.html","hash":"c260eb27e9e2f035559e613d4140b1453ee9ce33","modified":1518170121005},{"_id":"public/2018/02/09/阿里java规约/阿里java规约(二)-异常日志(1)-异常处理/index.html","hash":"d914a5e27f566c5a7a13b0ea053c63a4bdeb4d3b","modified":1518170121005},{"_id":"public/2018/02/09/阿里java规约/阿里java规约(二)-异常日志(2)-日志规约/index.html","hash":"4d9a45912b48676d81466cb02d968910c0920bbf","modified":1518170121005},{"_id":"public/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(9)-其他/index.html","hash":"fe78952afe7ddbfda9126100c91c021a31b822cb","modified":1518170121006},{"_id":"public/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(8)-注释规约/index.html","hash":"581e2e407833e00f8d07619db916129e3245cda3","modified":1518170121006},{"_id":"public/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(7)-控制语句/index.html","hash":"21fe68abdd24bf6314c71bee3c2c60a6da9be90a","modified":1518170121006},{"_id":"public/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(6)-并发处理/index.html","hash":"4b239ef8341fe43bc96581dfb3feaa37f95dba4e","modified":1518170121006},{"_id":"public/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(5)-集合处理/index.html","hash":"cb80fd41af92b7a639a7a4b1d462889a13a873b8","modified":1518170121006},{"_id":"public/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(4)-OOP规约/index.html","hash":"c3de22ce2dfaac74473259141abe4d702fa11de8","modified":1518170121006},{"_id":"public/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(3)-代码格式/index.html","hash":"ce8fe8667df35e49f1c339a25dc5edd6d7716344","modified":1518170121006},{"_id":"public/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(2)-常量定义/index.html","hash":"e0a2f9ab17a7e39d6bf6b5e0d8316074b61e9eb4","modified":1518170121006},{"_id":"public/2018/02/09/阿里java规约/阿里java规约(一)-编程规约(1)-命名风格/index.html","hash":"1f4243b202d04fd425f3be2fbe910daa0944893c","modified":1518170121006},{"_id":"public/categories/阿里java规约/index.html","hash":"42238dbf7d3334d4f9543708fa6133b940b0e27b","modified":1518170121006},{"_id":"public/categories/阿里java规约/page/2/index.html","hash":"06686e0465f926c3f7fbe41e7c5d323f717feabc","modified":1518170121006},{"_id":"public/archives/page/6/index.html","hash":"5964372be6c977556b7c89462f9d0995ff1b9f06","modified":1518170121006},{"_id":"public/archives/2018/page/3/index.html","hash":"bb4fcc1b07290cb359ba0c2e588b9c1684590828","modified":1518170121007},{"_id":"public/archives/2018/02/index.html","hash":"63d2dec3a2ae5d374f15af1ce5d5eab135445987","modified":1518170121007},{"_id":"public/archives/2018/02/page/2/index.html","hash":"40eba0e51b65626fd7ca257966cda41267da889a","modified":1518170121007},{"_id":"public/page/6/index.html","hash":"8fcaed36cdc026e337c81a2f9ceeed1ab315dfb4","modified":1518170121007},{"_id":"public/tags/阿里java规约/index.html","hash":"a5fd0378dc84c3e4dd2b5ec9e068594a455e86a4","modified":1518170121007},{"_id":"public/tags/阿里java规约/page/2/index.html","hash":"0fb9dc43b8b71d15d136f0df822709a9b01e79d3","modified":1518170121007},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"6b7e65178f13563788627999e75c86038bc88091","modified":1518170121425},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"46ec23955d31954e4e94793ffb5119c1b91dc6e7","modified":1518170121425},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"2290f8391558fcdf90bcc3d31796a278972024d3","modified":1518170121425},{"_id":"public/assets/algolia/algoliasearch.js","hash":"95c1797aa497fb7f5de6ed4c89019744215203f7","modified":1518170121714}],"Category":[{"name":"随笔","_id":"cjdfr89pe0003v4vfkr8esoty"},{"name":"大数据学习笔记","_id":"cjdfr89yc0009v4vfd0cegwon"},{"name":"玩","_id":"cjdfr89yh000ev4vf3r1lkz5o"},{"name":"微服务学习","_id":"cjdfr89zu001wv4vf8bqav494"},{"name":"工具","_id":"cjdfr8a06002ev4vfdr1rhb5a"},{"name":"学习","_id":"cjdfr8a0c002ov4vfhxteqegx"},{"name":"阿里java规约","_id":"cjdfr8a1g0045v4vfytacb3h3"}],"Data":[],"Page":[{"title":"关于我","date":"2017-08-27T04:19:16.000Z","_content":"About Me","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-08-27 12:19:16\n---\nAbout Me","updated":"2017-08-27T06:00:53.601Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjdfr89p80001v4vfamv7q8lk","content":"<p>About Me</p>\n","site":{"data":{}},"excerpt":"","more":"<p>About Me</p>\n"},{"title":"分类","date":"2017-08-27T04:15:19.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-08-27 12:15:19\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-08-27T06:00:37.640Z","path":"categories/index.html","layout":"page","_id":"cjdfr89wg0005v4vf2sjqms1c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-08-27T04:13:19.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-08-27 12:13:19\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-08-27T06:00:43.807Z","path":"tags/index.html","layout":"page","_id":"cjdfr89wi0006v4vfrxmtiqoj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"编写工具包.md","_content":"# Apache Commons CLI\n## 简介\nApache 下的一个`解析命令行输入`的工具包，该工具包还提供了`自动生成输出帮助文档`的功能。\n\n## mvn引用\n```xml\n<!-- https://mvnrepository.com/artifact/commons-cli/commons-cli -->\n<dependency>\n    <groupId>commons-cli</groupId>\n    <artifactId>commons-cli</artifactId>\n    <version>1.2</version>\n</dependency>\n\n```\n## 参数格式\n支持多种参数格式，主要有：\n1. POSIX（Portable Operating System Interface of Unix）中的参数形式，例如 tar -zxvf foo.tar.gz\n2. GNU 中的长参数形式，例如 du --human-readable --max-depth=1\n3. Java 命令中的参数形式，例如 java -Djava.net.useSystemProxies=true Foo\n4. 短杠参数带参数值的参数形式，例如 gcc -O2 foo.c\n5. 长杠参数不带参数值的形式，例如 ant – projecthelp\n\n## CLI代码实现\n### 流程\n1. 设定命令行参数\n2. 解析参数\n3. 逻辑处理\n\n### 定义参数\nOptions类，定义和设置参数，Option实例的容器。\n* 创建方式\n    1. 构造函数\n    2. Options中定义的工厂方式实现\n例子：\n```java\n// 创建 Options 对象\nOptions options = new Options(); \n// 添加 -h 参数\n// 参数1：单字符名字\n// 参数2：是否需要输入数值\n// 参数3：描述\noptions.addOption(\"h\", false, \"Lists short help\"); \n// 添加 -t 参数\noptions.addOption(\"t\", true, \"Sets the HTTP communication protocol for CIM connection\");\n```\n### 解析、执行\nCommandLineParser\n```java\nCommandLineParser parser = new PosixParser(); \nCommandLine cmd = parser.parse(options, args); \nif(cmd.hasOption(\"h\")) { \n    // 这里显示简短的帮助信息\n}   \n```\n\n\n","source":"_drafts/编写工具包.md","raw":"---\ntitle: 编写工具包.md\ntags:\n---\n# Apache Commons CLI\n## 简介\nApache 下的一个`解析命令行输入`的工具包，该工具包还提供了`自动生成输出帮助文档`的功能。\n\n## mvn引用\n```xml\n<!-- https://mvnrepository.com/artifact/commons-cli/commons-cli -->\n<dependency>\n    <groupId>commons-cli</groupId>\n    <artifactId>commons-cli</artifactId>\n    <version>1.2</version>\n</dependency>\n\n```\n## 参数格式\n支持多种参数格式，主要有：\n1. POSIX（Portable Operating System Interface of Unix）中的参数形式，例如 tar -zxvf foo.tar.gz\n2. GNU 中的长参数形式，例如 du --human-readable --max-depth=1\n3. Java 命令中的参数形式，例如 java -Djava.net.useSystemProxies=true Foo\n4. 短杠参数带参数值的参数形式，例如 gcc -O2 foo.c\n5. 长杠参数不带参数值的形式，例如 ant – projecthelp\n\n## CLI代码实现\n### 流程\n1. 设定命令行参数\n2. 解析参数\n3. 逻辑处理\n\n### 定义参数\nOptions类，定义和设置参数，Option实例的容器。\n* 创建方式\n    1. 构造函数\n    2. Options中定义的工厂方式实现\n例子：\n```java\n// 创建 Options 对象\nOptions options = new Options(); \n// 添加 -h 参数\n// 参数1：单字符名字\n// 参数2：是否需要输入数值\n// 参数3：描述\noptions.addOption(\"h\", false, \"Lists short help\"); \n// 添加 -t 参数\noptions.addOption(\"t\", true, \"Sets the HTTP communication protocol for CIM connection\");\n```\n### 解析、执行\nCommandLineParser\n```java\nCommandLineParser parser = new PosixParser(); \nCommandLine cmd = parser.parse(options, args); \nif(cmd.hasOption(\"h\")) { \n    // 这里显示简短的帮助信息\n}   \n```\n\n\n","slug":"编写工具包","published":0,"date":"2018-02-06T08:18:36.234Z","updated":"2018-02-09T02:21:49.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89p30000v4vf6xpxszp6","content":"<h1 id=\"Apache-Commons-CLI\"><a href=\"#Apache-Commons-CLI\" class=\"headerlink\" title=\"Apache Commons CLI\"></a>Apache Commons CLI</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Apache 下的一个<code>解析命令行输入</code>的工具包，该工具包还提供了<code>自动生成输出帮助文档</code>的功能。</p>\n<h2 id=\"mvn引用\"><a href=\"#mvn引用\" class=\"headerlink\" title=\"mvn引用\"></a>mvn引用</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/commons-cli/commons-cli --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-cli<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-cli<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"参数格式\"><a href=\"#参数格式\" class=\"headerlink\" title=\"参数格式\"></a>参数格式</h2><p>支持多种参数格式，主要有：</p>\n<ol>\n<li>POSIX（Portable Operating System Interface of Unix）中的参数形式，例如 tar -zxvf foo.tar.gz</li>\n<li>GNU 中的长参数形式，例如 du –human-readable –max-depth=1</li>\n<li>Java 命令中的参数形式，例如 java -Djava.net.useSystemProxies=true Foo</li>\n<li>短杠参数带参数值的参数形式，例如 gcc -O2 foo.c</li>\n<li>长杠参数不带参数值的形式，例如 ant – projecthelp</li>\n</ol>\n<h2 id=\"CLI代码实现\"><a href=\"#CLI代码实现\" class=\"headerlink\" title=\"CLI代码实现\"></a>CLI代码实现</h2><h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><ol>\n<li>设定命令行参数</li>\n<li>解析参数</li>\n<li>逻辑处理</li>\n</ol>\n<h3 id=\"定义参数\"><a href=\"#定义参数\" class=\"headerlink\" title=\"定义参数\"></a>定义参数</h3><p>Options类，定义和设置参数，Option实例的容器。</p>\n<ul>\n<li>创建方式<ol>\n<li>构造函数</li>\n<li>Options中定义的工厂方式实现<br>例子：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建 Options 对象</span></div><div class=\"line\">Options options = <span class=\"keyword\">new</span> Options(); </div><div class=\"line\"><span class=\"comment\">// 添加 -h 参数</span></div><div class=\"line\"><span class=\"comment\">// 参数1：单字符名字</span></div><div class=\"line\"><span class=\"comment\">// 参数2：是否需要输入数值</span></div><div class=\"line\"><span class=\"comment\">// 参数3：描述</span></div><div class=\"line\">options.addOption(<span class=\"string\">\"h\"</span>, <span class=\"keyword\">false</span>, <span class=\"string\">\"Lists short help\"</span>); </div><div class=\"line\"><span class=\"comment\">// 添加 -t 参数</span></div><div class=\"line\">options.addOption(<span class=\"string\">\"t\"</span>, <span class=\"keyword\">true</span>, <span class=\"string\">\"Sets the HTTP communication protocol for CIM connection\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"解析、执行\"><a href=\"#解析、执行\" class=\"headerlink\" title=\"解析、执行\"></a>解析、执行</h3><p>CommandLineParser<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CommandLineParser parser = <span class=\"keyword\">new</span> PosixParser(); </div><div class=\"line\">CommandLine cmd = parser.parse(options, args); </div><div class=\"line\"><span class=\"keyword\">if</span>(cmd.hasOption(<span class=\"string\">\"h\"</span>)) &#123; </div><div class=\"line\">    <span class=\"comment\">// 这里显示简短的帮助信息</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Apache-Commons-CLI\"><a href=\"#Apache-Commons-CLI\" class=\"headerlink\" title=\"Apache Commons CLI\"></a>Apache Commons CLI</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Apache 下的一个<code>解析命令行输入</code>的工具包，该工具包还提供了<code>自动生成输出帮助文档</code>的功能。</p>\n<h2 id=\"mvn引用\"><a href=\"#mvn引用\" class=\"headerlink\" title=\"mvn引用\"></a>mvn引用</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/commons-cli/commons-cli --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-cli<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-cli<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"参数格式\"><a href=\"#参数格式\" class=\"headerlink\" title=\"参数格式\"></a>参数格式</h2><p>支持多种参数格式，主要有：</p>\n<ol>\n<li>POSIX（Portable Operating System Interface of Unix）中的参数形式，例如 tar -zxvf foo.tar.gz</li>\n<li>GNU 中的长参数形式，例如 du –human-readable –max-depth=1</li>\n<li>Java 命令中的参数形式，例如 java -Djava.net.useSystemProxies=true Foo</li>\n<li>短杠参数带参数值的参数形式，例如 gcc -O2 foo.c</li>\n<li>长杠参数不带参数值的形式，例如 ant – projecthelp</li>\n</ol>\n<h2 id=\"CLI代码实现\"><a href=\"#CLI代码实现\" class=\"headerlink\" title=\"CLI代码实现\"></a>CLI代码实现</h2><h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><ol>\n<li>设定命令行参数</li>\n<li>解析参数</li>\n<li>逻辑处理</li>\n</ol>\n<h3 id=\"定义参数\"><a href=\"#定义参数\" class=\"headerlink\" title=\"定义参数\"></a>定义参数</h3><p>Options类，定义和设置参数，Option实例的容器。</p>\n<ul>\n<li>创建方式<ol>\n<li>构造函数</li>\n<li>Options中定义的工厂方式实现<br>例子：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建 Options 对象</span></div><div class=\"line\">Options options = <span class=\"keyword\">new</span> Options(); </div><div class=\"line\"><span class=\"comment\">// 添加 -h 参数</span></div><div class=\"line\"><span class=\"comment\">// 参数1：单字符名字</span></div><div class=\"line\"><span class=\"comment\">// 参数2：是否需要输入数值</span></div><div class=\"line\"><span class=\"comment\">// 参数3：描述</span></div><div class=\"line\">options.addOption(<span class=\"string\">\"h\"</span>, <span class=\"keyword\">false</span>, <span class=\"string\">\"Lists short help\"</span>); </div><div class=\"line\"><span class=\"comment\">// 添加 -t 参数</span></div><div class=\"line\">options.addOption(<span class=\"string\">\"t\"</span>, <span class=\"keyword\">true</span>, <span class=\"string\">\"Sets the HTTP communication protocol for CIM connection\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"解析、执行\"><a href=\"#解析、执行\" class=\"headerlink\" title=\"解析、执行\"></a>解析、执行</h3><p>CommandLineParser<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CommandLineParser parser = <span class=\"keyword\">new</span> PosixParser(); </div><div class=\"line\">CommandLine cmd = parser.parse(options, args); </div><div class=\"line\"><span class=\"keyword\">if</span>(cmd.hasOption(<span class=\"string\">\"h\"</span>)) &#123; </div><div class=\"line\">    <span class=\"comment\">// 这里显示简短的帮助信息</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"终于有了自己的博客","date":"2017-08-27T06:05:14.000Z","_content":"  终于有了自己的博客。感谢网络，感谢爱分享的人。  \n  搭建博客时候参考的帖子：  \n  [hexo从零开始到搭建完整](http://visugar.com/2017/05/04/20170504SetUpHexoBlog/)  \n  [Hexo安装和配置](http://www.jianshu.com/p/b7886271e21a)  \n  [Hexo搭建Github-Pages博客填坑教程](http://www.jianshu.com/p/35e197cb1273)  \n  [主题nexT使用指南](http://theme-next.iissnan.com/getting-started.html)\n\n  自己碰到的坑  \n  - 安装hexo后启动时,访问localhost:4000网页没反应 ```替换端口号后解决了```\n  - rss 链接出现问题,在[Hexo搭建Github-Pages博客填坑教程](http://www.jianshu.com/p/35e197cb1273) 中找到了解决办法\n  - hueman 主题下载后启动错误,这个没解决,替换找别的主题了。\n\n\n\n\n\n\n","source":"_posts/终于有了自己的博客.md","raw":"---\ntitle: 终于有了自己的博客\ndate: 2017-08-27 14:05:14\ncategories: 随笔\ntags: \n---\n  终于有了自己的博客。感谢网络，感谢爱分享的人。  \n  搭建博客时候参考的帖子：  \n  [hexo从零开始到搭建完整](http://visugar.com/2017/05/04/20170504SetUpHexoBlog/)  \n  [Hexo安装和配置](http://www.jianshu.com/p/b7886271e21a)  \n  [Hexo搭建Github-Pages博客填坑教程](http://www.jianshu.com/p/35e197cb1273)  \n  [主题nexT使用指南](http://theme-next.iissnan.com/getting-started.html)\n\n  自己碰到的坑  \n  - 安装hexo后启动时,访问localhost:4000网页没反应 ```替换端口号后解决了```\n  - rss 链接出现问题,在[Hexo搭建Github-Pages博客填坑教程](http://www.jianshu.com/p/35e197cb1273) 中找到了解决办法\n  - hueman 主题下载后启动错误,这个没解决,替换找别的主题了。\n\n\n\n\n\n\n","slug":"终于有了自己的博客","published":1,"updated":"2018-02-09T07:03:06.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89pb0002v4vftr6uxf1r","content":"<p>  终于有了自己的博客。感谢网络，感谢爱分享的人。<br>  搭建博客时候参考的帖子：<br>  <a href=\"http://visugar.com/2017/05/04/20170504SetUpHexoBlog/\" target=\"_blank\" rel=\"external\">hexo从零开始到搭建完整</a><br>  <a href=\"http://www.jianshu.com/p/b7886271e21a\" target=\"_blank\" rel=\"external\">Hexo安装和配置</a><br>  <a href=\"http://www.jianshu.com/p/35e197cb1273\" target=\"_blank\" rel=\"external\">Hexo搭建Github-Pages博客填坑教程</a><br>  <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">主题nexT使用指南</a></p>\n<p>  自己碰到的坑  </p>\n<ul>\n<li>安装hexo后启动时,访问localhost:4000网页没反应 <code>替换端口号后解决了</code></li>\n<li>rss 链接出现问题,在<a href=\"http://www.jianshu.com/p/35e197cb1273\" target=\"_blank\" rel=\"external\">Hexo搭建Github-Pages博客填坑教程</a> 中找到了解决办法</li>\n<li>hueman 主题下载后启动错误,这个没解决,替换找别的主题了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>  终于有了自己的博客。感谢网络，感谢爱分享的人。<br>  搭建博客时候参考的帖子：<br>  <a href=\"http://visugar.com/2017/05/04/20170504SetUpHexoBlog/\" target=\"_blank\" rel=\"external\">hexo从零开始到搭建完整</a><br>  <a href=\"http://www.jianshu.com/p/b7886271e21a\" target=\"_blank\" rel=\"external\">Hexo安装和配置</a><br>  <a href=\"http://www.jianshu.com/p/35e197cb1273\" target=\"_blank\" rel=\"external\">Hexo搭建Github-Pages博客填坑教程</a><br>  <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">主题nexT使用指南</a></p>\n<p>  自己碰到的坑  </p>\n<ul>\n<li>安装hexo后启动时,访问localhost:4000网页没反应 <code>替换端口号后解决了</code></li>\n<li>rss 链接出现问题,在<a href=\"http://www.jianshu.com/p/35e197cb1273\" target=\"_blank\" rel=\"external\">Hexo搭建Github-Pages博客填坑教程</a> 中找到了解决办法</li>\n<li>hueman 主题下载后启动错误,这个没解决,替换找别的主题了。</li>\n</ul>\n"},{"title":"大数据01-linux安装及基本命令.md","toc":true,"date":"2017-10-30T14:30:38.000Z","scaffolds":null,"_content":"\n# 1. linux 文件目录\n> 约定俗成\n\n目录 | 功能\n------- | -------\n/bin | 可执行文件\n/sbin | 系统可执行文件\n/boot | 跟启动相关的东西\n/dev | 设备 硬件\n/etc | 配置文件 \n/lib | 依赖包\n/lib64 | 依赖包\n/media | 一些外接设备\n/mnt | 挂载\n/home | 用户目录\n/usr | user share resource 公用的一些软件\n/tmp | 临时文件\n<!-- more -->\n# 2. linux 网络相关\n## 2.1. 网卡相关:\n1. ip ：一般 1 给网关  255是广播地址\n2. gateway ： 网关\n3. netmask ： 子网掩码\n4. dns ：\n\n### 2.1.1. 子网掩码\n是用来判断自己属于哪个网段\n\n网段的计算:\n将IP地址的二进制 & 子网掩码的二进制 = 网段地址\n例如：192.168.33.2 & 255.255.255.0 = 192.168.33.0\n### 2.1.2. dns 域名解析\n1. 从本地hosts中寻找域名 -> ip映射信息\n2. 如果没有则去服务器找\n3. 访问服务器\n\n填写:\n1. 网关地址\n2. dns服务器\n\n![域名工作流程](http://ovasdkxqr.bkt.clouddn.com/dashuju/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png)\n\nlinux dns配置文件\n> /etc/hosts\n\n## 2.2. 网络模式\n### 2.2.1. NAT模式  \n![NAT模式图](http://ovasdkxqr.bkt.clouddn.com/dashuju/NAT虚拟网络配置.png)  \n### 2.2.2. 桥接模式  \n![桥接模式图](http://ovasdkxqr.bkt.clouddn.com/dashuju/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E6%9C%BA%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n### 2.2.3. HOST only  \n![host only](http://ovasdkxqr.bkt.clouddn.com/dashuju/%E6%A1%A5%E6%8E%A5%E5%92%8Chostonly%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.png)\n\n## 2.3. 修改linux ip\n修改主机名:  \n> vi /etc/sysconfig/network  \n    NETWORKING=yes\n    HOSTNAME=server1.itcast.cn\n\n修改IP地址  \nvi /etc/sysconfig/network-scripts/ifcfg-eth0  \n\n    DEVICE=eth0\n    TYPE=Ethernet\n    ONBOOT=yes          #是否开机启用\n    BOOTPROTO=static    #ip地址设置为静态\n    IPADDR=192.168.0.101\n    NETMASK=255.255.255.0\n\n修改ip地址和主机名的映射关系  \nvi /etc/hosts  \n\n    127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n    ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n    192.168.0.101 server1.itcast.cn\n\n关闭iptables并设置其开机启动/不启动  \n\n    service iptables stop\n    chkconfig iptables on\n    chkconfig iptables off\n\n# 3. linux 简单命令\n创建文件\ntouch somefile.1 创建一个空文本\necho \"i love u\" **>** somefile.2 利用重定向写入 覆盖原文件\necho \"i love u\" **>>** somefile.2 追加\n\nctrl+v进入块选择模式\nshift+v 进入行选择模式\n\n:%s/key/newword 查找并替换\n\n## 3.1. 文件权限操作\ndrw-r--r--\n\nd：标识节点类型（d 文件夹 - 文件 l 链接)\nr 可读 w可写 x可执行\n拥有者 所属组 其他用户\n\n方式1 :\nchmod g-rw somefile.1\n\ng 组 o 其他 u用户  +-(增加/删除权限)  rwx\n\n方式2 : \nchmod 700 somfile.1\n\n文件夹及下面文件\n\nchmod -R 770 aaa/\n\n修改所有者(必须要root用户)\nchown angela:angela aaa/   组/用户\n\n## 3.2. 基本的用户管理\n添加用户\n\nuseradd nagela\n修改密码\npasswd nagela 按提示输入密码即可\n\nsudo useradd xiaobai\n\n为用户配置sudo权限\n用root编辑 \nvi /etc/sudoers \n在文件如下位置,为hadoop添加一行即可\nroot ALL=(ALL) ALL  \nhadoop ALL=(ALL) ALL  \n\n## 3.3. 系统管理操作\n1.查看主机名\nhostname\n\n2.修改主机名(重启后无效)\nhostname hadoop\n\n3.修改主机名(重启后永久生效)\nvi /ect/sysconfig/network\n\n4.修改IP(重启后无效)\nifconfig eth0 192.168.12.22\n\n5.修改IP(重启后永久生效)\nvi /etc/sysconfig/network-scripts/ifcfg-eth0\n\n6.查看系统信息\nuname -a\nuname -r\n\n7.查看ID命令\nid -u\nid -g\n\n8.日期\ndate\ndate +%Y-%m-%d\ndate +%T\ndate +%Y-%m-%d\" \"%T\n\n9.日历\ncal 2012\n\n10.查看文件信息\nfile filename\n\n11.挂载硬盘\nmount\numount\n加载windows共享\nmount -t cifs //192.168.1.100/tools /mnt\n\n挂载cdrom 里面是iso镜像文件\n```\nmount -t iso9660 -o ro /dev/cdrom /mnt/cdrom\n[root@server1 mnt]# ll cdrom/\ntotal 654\n-rw-r--r-- 1 root root     14 Dec  5  2016 CentOS_BuildTag\ndrwxr-xr-x 3 root root   2048 Dec  5  2016 EFI\n-rw-r--r-- 1 root root    215 Dec  9  2015 EULA\n-rw-r--r-- 1 root root  18009 Dec  9  2015 GPL\ndrwxr-xr-x 3 root root   2048 Dec  5  2016 images\ndrwxr-xr-x 2 root root   2048 Dec  5  2016 isolinux\ndrwxr-xr-x 2 root root   2048 Dec  5  2016 LiveOS\ndrwxrwxr-x 2 root root 630784 Dec  5  2016 Packages\ndrwxrwxr-x 2 root root   4096 Dec  5  2016 repodata\n-rw-r--r-- 1 root root   1690 Dec  9  2015 RPM-GPG-KEY-CentOS-7\n-rw-r--r-- 1 root root   1690 Dec  9  2015 RPM-GPG-KEY-CentOS-Testing-7\n-r--r--r-- 1 root root   2883 Dec  5  2016 TRANS.TBL\n```\n\n12.查看文件大小\ndu -h\ndu -ah\n\n13.查看分区\ndf -h\n\n14.ssh\nssh hadoop@192.168.1.1\n\n15.关机\nshutdown -h now /init 0\nshutdown -r now /reboot\n\n\n# 4. ssh免密登录\n![](http://ovasdkxqr.bkt.clouddn.com/dashuju/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E6%9C%BA%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n假如 A  要登陆  B\n在A上操作：\n首先生成密钥对\n\n    ssh-keygen   (提示时，直接回车即可)\n再将A自己的公钥拷贝并追加到B的授权列表文件authorized_keys中\n\n    ssh-copy-id   B\n\n\n\n","source":"_posts/大数据/大数据01-linux安装及基本命令.md","raw":"---\ntitle: 大数据01-linux安装及基本命令.md\ncategories: 大数据学习笔记\ntags: [linux,大数据,linux命令]\ntoc: true\ndate: 2017-10-30 22:30:38\nscaffolds:\n---\n\n# 1. linux 文件目录\n> 约定俗成\n\n目录 | 功能\n------- | -------\n/bin | 可执行文件\n/sbin | 系统可执行文件\n/boot | 跟启动相关的东西\n/dev | 设备 硬件\n/etc | 配置文件 \n/lib | 依赖包\n/lib64 | 依赖包\n/media | 一些外接设备\n/mnt | 挂载\n/home | 用户目录\n/usr | user share resource 公用的一些软件\n/tmp | 临时文件\n<!-- more -->\n# 2. linux 网络相关\n## 2.1. 网卡相关:\n1. ip ：一般 1 给网关  255是广播地址\n2. gateway ： 网关\n3. netmask ： 子网掩码\n4. dns ：\n\n### 2.1.1. 子网掩码\n是用来判断自己属于哪个网段\n\n网段的计算:\n将IP地址的二进制 & 子网掩码的二进制 = 网段地址\n例如：192.168.33.2 & 255.255.255.0 = 192.168.33.0\n### 2.1.2. dns 域名解析\n1. 从本地hosts中寻找域名 -> ip映射信息\n2. 如果没有则去服务器找\n3. 访问服务器\n\n填写:\n1. 网关地址\n2. dns服务器\n\n![域名工作流程](http://ovasdkxqr.bkt.clouddn.com/dashuju/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png)\n\nlinux dns配置文件\n> /etc/hosts\n\n## 2.2. 网络模式\n### 2.2.1. NAT模式  \n![NAT模式图](http://ovasdkxqr.bkt.clouddn.com/dashuju/NAT虚拟网络配置.png)  \n### 2.2.2. 桥接模式  \n![桥接模式图](http://ovasdkxqr.bkt.clouddn.com/dashuju/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E6%9C%BA%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n### 2.2.3. HOST only  \n![host only](http://ovasdkxqr.bkt.clouddn.com/dashuju/%E6%A1%A5%E6%8E%A5%E5%92%8Chostonly%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.png)\n\n## 2.3. 修改linux ip\n修改主机名:  \n> vi /etc/sysconfig/network  \n    NETWORKING=yes\n    HOSTNAME=server1.itcast.cn\n\n修改IP地址  \nvi /etc/sysconfig/network-scripts/ifcfg-eth0  \n\n    DEVICE=eth0\n    TYPE=Ethernet\n    ONBOOT=yes          #是否开机启用\n    BOOTPROTO=static    #ip地址设置为静态\n    IPADDR=192.168.0.101\n    NETMASK=255.255.255.0\n\n修改ip地址和主机名的映射关系  \nvi /etc/hosts  \n\n    127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n    ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n    192.168.0.101 server1.itcast.cn\n\n关闭iptables并设置其开机启动/不启动  \n\n    service iptables stop\n    chkconfig iptables on\n    chkconfig iptables off\n\n# 3. linux 简单命令\n创建文件\ntouch somefile.1 创建一个空文本\necho \"i love u\" **>** somefile.2 利用重定向写入 覆盖原文件\necho \"i love u\" **>>** somefile.2 追加\n\nctrl+v进入块选择模式\nshift+v 进入行选择模式\n\n:%s/key/newword 查找并替换\n\n## 3.1. 文件权限操作\ndrw-r--r--\n\nd：标识节点类型（d 文件夹 - 文件 l 链接)\nr 可读 w可写 x可执行\n拥有者 所属组 其他用户\n\n方式1 :\nchmod g-rw somefile.1\n\ng 组 o 其他 u用户  +-(增加/删除权限)  rwx\n\n方式2 : \nchmod 700 somfile.1\n\n文件夹及下面文件\n\nchmod -R 770 aaa/\n\n修改所有者(必须要root用户)\nchown angela:angela aaa/   组/用户\n\n## 3.2. 基本的用户管理\n添加用户\n\nuseradd nagela\n修改密码\npasswd nagela 按提示输入密码即可\n\nsudo useradd xiaobai\n\n为用户配置sudo权限\n用root编辑 \nvi /etc/sudoers \n在文件如下位置,为hadoop添加一行即可\nroot ALL=(ALL) ALL  \nhadoop ALL=(ALL) ALL  \n\n## 3.3. 系统管理操作\n1.查看主机名\nhostname\n\n2.修改主机名(重启后无效)\nhostname hadoop\n\n3.修改主机名(重启后永久生效)\nvi /ect/sysconfig/network\n\n4.修改IP(重启后无效)\nifconfig eth0 192.168.12.22\n\n5.修改IP(重启后永久生效)\nvi /etc/sysconfig/network-scripts/ifcfg-eth0\n\n6.查看系统信息\nuname -a\nuname -r\n\n7.查看ID命令\nid -u\nid -g\n\n8.日期\ndate\ndate +%Y-%m-%d\ndate +%T\ndate +%Y-%m-%d\" \"%T\n\n9.日历\ncal 2012\n\n10.查看文件信息\nfile filename\n\n11.挂载硬盘\nmount\numount\n加载windows共享\nmount -t cifs //192.168.1.100/tools /mnt\n\n挂载cdrom 里面是iso镜像文件\n```\nmount -t iso9660 -o ro /dev/cdrom /mnt/cdrom\n[root@server1 mnt]# ll cdrom/\ntotal 654\n-rw-r--r-- 1 root root     14 Dec  5  2016 CentOS_BuildTag\ndrwxr-xr-x 3 root root   2048 Dec  5  2016 EFI\n-rw-r--r-- 1 root root    215 Dec  9  2015 EULA\n-rw-r--r-- 1 root root  18009 Dec  9  2015 GPL\ndrwxr-xr-x 3 root root   2048 Dec  5  2016 images\ndrwxr-xr-x 2 root root   2048 Dec  5  2016 isolinux\ndrwxr-xr-x 2 root root   2048 Dec  5  2016 LiveOS\ndrwxrwxr-x 2 root root 630784 Dec  5  2016 Packages\ndrwxrwxr-x 2 root root   4096 Dec  5  2016 repodata\n-rw-r--r-- 1 root root   1690 Dec  9  2015 RPM-GPG-KEY-CentOS-7\n-rw-r--r-- 1 root root   1690 Dec  9  2015 RPM-GPG-KEY-CentOS-Testing-7\n-r--r--r-- 1 root root   2883 Dec  5  2016 TRANS.TBL\n```\n\n12.查看文件大小\ndu -h\ndu -ah\n\n13.查看分区\ndf -h\n\n14.ssh\nssh hadoop@192.168.1.1\n\n15.关机\nshutdown -h now /init 0\nshutdown -r now /reboot\n\n\n# 4. ssh免密登录\n![](http://ovasdkxqr.bkt.clouddn.com/dashuju/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E6%9C%BA%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n假如 A  要登陆  B\n在A上操作：\n首先生成密钥对\n\n    ssh-keygen   (提示时，直接回车即可)\n再将A自己的公钥拷贝并追加到B的授权列表文件authorized_keys中\n\n    ssh-copy-id   B\n\n\n\n","slug":"大数据/大数据01-linux安装及基本命令","published":1,"updated":"2018-02-06T07:48:28.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89y90007v4vf3f34a7uo","content":"<h1 id=\"1-linux-文件目录\"><a href=\"#1-linux-文件目录\" class=\"headerlink\" title=\"1. linux 文件目录\"></a>1. linux 文件目录</h1><blockquote>\n<p>约定俗成</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/bin</td>\n<td>可执行文件</td>\n</tr>\n<tr>\n<td>/sbin</td>\n<td>系统可执行文件</td>\n</tr>\n<tr>\n<td>/boot</td>\n<td>跟启动相关的东西</td>\n</tr>\n<tr>\n<td>/dev</td>\n<td>设备 硬件</td>\n</tr>\n<tr>\n<td>/etc</td>\n<td>配置文件 </td>\n</tr>\n<tr>\n<td>/lib</td>\n<td>依赖包</td>\n</tr>\n<tr>\n<td>/lib64</td>\n<td>依赖包</td>\n</tr>\n<tr>\n<td>/media</td>\n<td>一些外接设备</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>挂载</td>\n</tr>\n<tr>\n<td>/home</td>\n<td>用户目录</td>\n</tr>\n<tr>\n<td>/usr</td>\n<td>user share resource 公用的一些软件</td>\n</tr>\n<tr>\n<td>/tmp</td>\n<td>临时文件</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h1 id=\"2-linux-网络相关\"><a href=\"#2-linux-网络相关\" class=\"headerlink\" title=\"2. linux 网络相关\"></a>2. linux 网络相关</h1><h2 id=\"2-1-网卡相关\"><a href=\"#2-1-网卡相关\" class=\"headerlink\" title=\"2.1. 网卡相关:\"></a>2.1. 网卡相关:</h2><ol>\n<li>ip ：一般 1 给网关  255是广播地址</li>\n<li>gateway ： 网关</li>\n<li>netmask ： 子网掩码</li>\n<li>dns ：</li>\n</ol>\n<h3 id=\"2-1-1-子网掩码\"><a href=\"#2-1-1-子网掩码\" class=\"headerlink\" title=\"2.1.1. 子网掩码\"></a>2.1.1. 子网掩码</h3><p>是用来判断自己属于哪个网段</p>\n<p>网段的计算:<br>将IP地址的二进制 &amp; 子网掩码的二进制 = 网段地址<br>例如：192.168.33.2 &amp; 255.255.255.0 = 192.168.33.0</p>\n<h3 id=\"2-1-2-dns-域名解析\"><a href=\"#2-1-2-dns-域名解析\" class=\"headerlink\" title=\"2.1.2. dns 域名解析\"></a>2.1.2. dns 域名解析</h3><ol>\n<li>从本地hosts中寻找域名 -&gt; ip映射信息</li>\n<li>如果没有则去服务器找</li>\n<li>访问服务器</li>\n</ol>\n<p>填写:</p>\n<ol>\n<li>网关地址</li>\n<li>dns服务器</li>\n</ol>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/dashuju/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\" alt=\"域名工作流程\"></p>\n<p>linux dns配置文件</p>\n<blockquote>\n<p>/etc/hosts</p>\n</blockquote>\n<h2 id=\"2-2-网络模式\"><a href=\"#2-2-网络模式\" class=\"headerlink\" title=\"2.2. 网络模式\"></a>2.2. 网络模式</h2><h3 id=\"2-2-1-NAT模式\"><a href=\"#2-2-1-NAT模式\" class=\"headerlink\" title=\"2.2.1. NAT模式\"></a>2.2.1. NAT模式</h3><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/dashuju/NAT虚拟网络配置.png\" alt=\"NAT模式图\">  </p>\n<h3 id=\"2-2-2-桥接模式\"><a href=\"#2-2-2-桥接模式\" class=\"headerlink\" title=\"2.2.2. 桥接模式\"></a>2.2.2. 桥接模式</h3><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/dashuju/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E6%9C%BA%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"桥接模式图\"></p>\n<h3 id=\"2-2-3-HOST-only\"><a href=\"#2-2-3-HOST-only\" class=\"headerlink\" title=\"2.2.3. HOST only\"></a>2.2.3. HOST only</h3><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/dashuju/%E6%A1%A5%E6%8E%A5%E5%92%8Chostonly%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.png\" alt=\"host only\"></p>\n<h2 id=\"2-3-修改linux-ip\"><a href=\"#2-3-修改linux-ip\" class=\"headerlink\" title=\"2.3. 修改linux ip\"></a>2.3. 修改linux ip</h2><p>修改主机名:  </p>\n<blockquote>\n<p>vi /etc/sysconfig/network<br>    NETWORKING=yes<br>    HOSTNAME=server1.itcast.cn</p>\n</blockquote>\n<p>修改IP地址<br>vi /etc/sysconfig/network-scripts/ifcfg-eth0  </p>\n<pre><code>DEVICE=eth0\nTYPE=Ethernet\nONBOOT=yes          #是否开机启用\nBOOTPROTO=static    #ip地址设置为静态\nIPADDR=192.168.0.101\nNETMASK=255.255.255.0\n</code></pre><p>修改ip地址和主机名的映射关系<br>vi /etc/hosts  </p>\n<pre><code>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n192.168.0.101 server1.itcast.cn\n</code></pre><p>关闭iptables并设置其开机启动/不启动  </p>\n<pre><code>service iptables stop\nchkconfig iptables on\nchkconfig iptables off\n</code></pre><h1 id=\"3-linux-简单命令\"><a href=\"#3-linux-简单命令\" class=\"headerlink\" title=\"3. linux 简单命令\"></a>3. linux 简单命令</h1><p>创建文件<br>touch somefile.1 创建一个空文本<br>echo “i love u” <strong>&gt;</strong> somefile.2 利用重定向写入 覆盖原文件<br>echo “i love u” <strong>&gt;&gt;</strong> somefile.2 追加</p>\n<p>ctrl+v进入块选择模式<br>shift+v 进入行选择模式</p>\n<p>:%s/key/newword 查找并替换</p>\n<h2 id=\"3-1-文件权限操作\"><a href=\"#3-1-文件权限操作\" class=\"headerlink\" title=\"3.1. 文件权限操作\"></a>3.1. 文件权限操作</h2><p>drw-r–r–</p>\n<p>d：标识节点类型（d 文件夹 - 文件 l 链接)<br>r 可读 w可写 x可执行<br>拥有者 所属组 其他用户</p>\n<p>方式1 :<br>chmod g-rw somefile.1</p>\n<p>g 组 o 其他 u用户  +-(增加/删除权限)  rwx</p>\n<p>方式2 :<br>chmod 700 somfile.1</p>\n<p>文件夹及下面文件</p>\n<p>chmod -R 770 aaa/</p>\n<p>修改所有者(必须要root用户)<br>chown angela:angela aaa/   组/用户</p>\n<h2 id=\"3-2-基本的用户管理\"><a href=\"#3-2-基本的用户管理\" class=\"headerlink\" title=\"3.2. 基本的用户管理\"></a>3.2. 基本的用户管理</h2><p>添加用户</p>\n<p>useradd nagela<br>修改密码<br>passwd nagela 按提示输入密码即可</p>\n<p>sudo useradd xiaobai</p>\n<p>为用户配置sudo权限<br>用root编辑<br>vi /etc/sudoers<br>在文件如下位置,为hadoop添加一行即可<br>root ALL=(ALL) ALL<br>hadoop ALL=(ALL) ALL  </p>\n<h2 id=\"3-3-系统管理操作\"><a href=\"#3-3-系统管理操作\" class=\"headerlink\" title=\"3.3. 系统管理操作\"></a>3.3. 系统管理操作</h2><p>1.查看主机名<br>hostname</p>\n<p>2.修改主机名(重启后无效)<br>hostname hadoop</p>\n<p>3.修改主机名(重启后永久生效)<br>vi /ect/sysconfig/network</p>\n<p>4.修改IP(重启后无效)<br>ifconfig eth0 192.168.12.22</p>\n<p>5.修改IP(重启后永久生效)<br>vi /etc/sysconfig/network-scripts/ifcfg-eth0</p>\n<p>6.查看系统信息<br>uname -a<br>uname -r</p>\n<p>7.查看ID命令<br>id -u<br>id -g</p>\n<p>8.日期<br>date<br>date +%Y-%m-%d<br>date +%T<br>date +%Y-%m-%d” “%T</p>\n<p>9.日历<br>cal 2012</p>\n<p>10.查看文件信息<br>file filename</p>\n<p>11.挂载硬盘<br>mount<br>umount<br>加载windows共享<br>mount -t cifs //192.168.1.100/tools /mnt</p>\n<p>挂载cdrom 里面是iso镜像文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount -t iso9660 -o ro /dev/cdrom /mnt/cdrom</div><div class=\"line\">[root@server1 mnt]# ll cdrom/</div><div class=\"line\">total 654</div><div class=\"line\">-rw-r--r-- 1 root root     14 Dec  5  2016 CentOS_BuildTag</div><div class=\"line\">drwxr-xr-x 3 root root   2048 Dec  5  2016 EFI</div><div class=\"line\">-rw-r--r-- 1 root root    215 Dec  9  2015 EULA</div><div class=\"line\">-rw-r--r-- 1 root root  18009 Dec  9  2015 GPL</div><div class=\"line\">drwxr-xr-x 3 root root   2048 Dec  5  2016 images</div><div class=\"line\">drwxr-xr-x 2 root root   2048 Dec  5  2016 isolinux</div><div class=\"line\">drwxr-xr-x 2 root root   2048 Dec  5  2016 LiveOS</div><div class=\"line\">drwxrwxr-x 2 root root 630784 Dec  5  2016 Packages</div><div class=\"line\">drwxrwxr-x 2 root root   4096 Dec  5  2016 repodata</div><div class=\"line\">-rw-r--r-- 1 root root   1690 Dec  9  2015 RPM-GPG-KEY-CentOS-7</div><div class=\"line\">-rw-r--r-- 1 root root   1690 Dec  9  2015 RPM-GPG-KEY-CentOS-Testing-7</div><div class=\"line\">-r--r--r-- 1 root root   2883 Dec  5  2016 TRANS.TBL</div></pre></td></tr></table></figure></p>\n<p>12.查看文件大小<br>du -h<br>du -ah</p>\n<p>13.查看分区<br>df -h</p>\n<p>14.ssh<br>ssh hadoop@192.168.1.1</p>\n<p>15.关机<br>shutdown -h now /init 0<br>shutdown -r now /reboot</p>\n<h1 id=\"4-ssh免密登录\"><a href=\"#4-ssh免密登录\" class=\"headerlink\" title=\"4. ssh免密登录\"></a>4. ssh免密登录</h1><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/dashuju/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E6%9C%BA%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"\"></p>\n<p>假如 A  要登陆  B<br>在A上操作：<br>首先生成密钥对</p>\n<pre><code>ssh-keygen   (提示时，直接回车即可)\n</code></pre><p>再将A自己的公钥拷贝并追加到B的授权列表文件authorized_keys中</p>\n<pre><code>ssh-copy-id   B\n</code></pre>","site":{"data":{}},"excerpt":"<h1 id=\"1-linux-文件目录\"><a href=\"#1-linux-文件目录\" class=\"headerlink\" title=\"1. linux 文件目录\"></a>1. linux 文件目录</h1><blockquote>\n<p>约定俗成</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/bin</td>\n<td>可执行文件</td>\n</tr>\n<tr>\n<td>/sbin</td>\n<td>系统可执行文件</td>\n</tr>\n<tr>\n<td>/boot</td>\n<td>跟启动相关的东西</td>\n</tr>\n<tr>\n<td>/dev</td>\n<td>设备 硬件</td>\n</tr>\n<tr>\n<td>/etc</td>\n<td>配置文件 </td>\n</tr>\n<tr>\n<td>/lib</td>\n<td>依赖包</td>\n</tr>\n<tr>\n<td>/lib64</td>\n<td>依赖包</td>\n</tr>\n<tr>\n<td>/media</td>\n<td>一些外接设备</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>挂载</td>\n</tr>\n<tr>\n<td>/home</td>\n<td>用户目录</td>\n</tr>\n<tr>\n<td>/usr</td>\n<td>user share resource 公用的一些软件</td>\n</tr>\n<tr>\n<td>/tmp</td>\n<td>临时文件</td>\n</tr>\n</tbody>\n</table>","more":"<h1 id=\"2-linux-网络相关\"><a href=\"#2-linux-网络相关\" class=\"headerlink\" title=\"2. linux 网络相关\"></a>2. linux 网络相关</h1><h2 id=\"2-1-网卡相关\"><a href=\"#2-1-网卡相关\" class=\"headerlink\" title=\"2.1. 网卡相关:\"></a>2.1. 网卡相关:</h2><ol>\n<li>ip ：一般 1 给网关  255是广播地址</li>\n<li>gateway ： 网关</li>\n<li>netmask ： 子网掩码</li>\n<li>dns ：</li>\n</ol>\n<h3 id=\"2-1-1-子网掩码\"><a href=\"#2-1-1-子网掩码\" class=\"headerlink\" title=\"2.1.1. 子网掩码\"></a>2.1.1. 子网掩码</h3><p>是用来判断自己属于哪个网段</p>\n<p>网段的计算:<br>将IP地址的二进制 &amp; 子网掩码的二进制 = 网段地址<br>例如：192.168.33.2 &amp; 255.255.255.0 = 192.168.33.0</p>\n<h3 id=\"2-1-2-dns-域名解析\"><a href=\"#2-1-2-dns-域名解析\" class=\"headerlink\" title=\"2.1.2. dns 域名解析\"></a>2.1.2. dns 域名解析</h3><ol>\n<li>从本地hosts中寻找域名 -&gt; ip映射信息</li>\n<li>如果没有则去服务器找</li>\n<li>访问服务器</li>\n</ol>\n<p>填写:</p>\n<ol>\n<li>网关地址</li>\n<li>dns服务器</li>\n</ol>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/dashuju/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\" alt=\"域名工作流程\"></p>\n<p>linux dns配置文件</p>\n<blockquote>\n<p>/etc/hosts</p>\n</blockquote>\n<h2 id=\"2-2-网络模式\"><a href=\"#2-2-网络模式\" class=\"headerlink\" title=\"2.2. 网络模式\"></a>2.2. 网络模式</h2><h3 id=\"2-2-1-NAT模式\"><a href=\"#2-2-1-NAT模式\" class=\"headerlink\" title=\"2.2.1. NAT模式\"></a>2.2.1. NAT模式</h3><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/dashuju/NAT虚拟网络配置.png\" alt=\"NAT模式图\">  </p>\n<h3 id=\"2-2-2-桥接模式\"><a href=\"#2-2-2-桥接模式\" class=\"headerlink\" title=\"2.2.2. 桥接模式\"></a>2.2.2. 桥接模式</h3><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/dashuju/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E6%9C%BA%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"桥接模式图\"></p>\n<h3 id=\"2-2-3-HOST-only\"><a href=\"#2-2-3-HOST-only\" class=\"headerlink\" title=\"2.2.3. HOST only\"></a>2.2.3. HOST only</h3><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/dashuju/%E6%A1%A5%E6%8E%A5%E5%92%8Chostonly%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.png\" alt=\"host only\"></p>\n<h2 id=\"2-3-修改linux-ip\"><a href=\"#2-3-修改linux-ip\" class=\"headerlink\" title=\"2.3. 修改linux ip\"></a>2.3. 修改linux ip</h2><p>修改主机名:  </p>\n<blockquote>\n<p>vi /etc/sysconfig/network<br>    NETWORKING=yes<br>    HOSTNAME=server1.itcast.cn</p>\n</blockquote>\n<p>修改IP地址<br>vi /etc/sysconfig/network-scripts/ifcfg-eth0  </p>\n<pre><code>DEVICE=eth0\nTYPE=Ethernet\nONBOOT=yes          #是否开机启用\nBOOTPROTO=static    #ip地址设置为静态\nIPADDR=192.168.0.101\nNETMASK=255.255.255.0\n</code></pre><p>修改ip地址和主机名的映射关系<br>vi /etc/hosts  </p>\n<pre><code>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n192.168.0.101 server1.itcast.cn\n</code></pre><p>关闭iptables并设置其开机启动/不启动  </p>\n<pre><code>service iptables stop\nchkconfig iptables on\nchkconfig iptables off\n</code></pre><h1 id=\"3-linux-简单命令\"><a href=\"#3-linux-简单命令\" class=\"headerlink\" title=\"3. linux 简单命令\"></a>3. linux 简单命令</h1><p>创建文件<br>touch somefile.1 创建一个空文本<br>echo “i love u” <strong>&gt;</strong> somefile.2 利用重定向写入 覆盖原文件<br>echo “i love u” <strong>&gt;&gt;</strong> somefile.2 追加</p>\n<p>ctrl+v进入块选择模式<br>shift+v 进入行选择模式</p>\n<p>:%s/key/newword 查找并替换</p>\n<h2 id=\"3-1-文件权限操作\"><a href=\"#3-1-文件权限操作\" class=\"headerlink\" title=\"3.1. 文件权限操作\"></a>3.1. 文件权限操作</h2><p>drw-r–r–</p>\n<p>d：标识节点类型（d 文件夹 - 文件 l 链接)<br>r 可读 w可写 x可执行<br>拥有者 所属组 其他用户</p>\n<p>方式1 :<br>chmod g-rw somefile.1</p>\n<p>g 组 o 其他 u用户  +-(增加/删除权限)  rwx</p>\n<p>方式2 :<br>chmod 700 somfile.1</p>\n<p>文件夹及下面文件</p>\n<p>chmod -R 770 aaa/</p>\n<p>修改所有者(必须要root用户)<br>chown angela:angela aaa/   组/用户</p>\n<h2 id=\"3-2-基本的用户管理\"><a href=\"#3-2-基本的用户管理\" class=\"headerlink\" title=\"3.2. 基本的用户管理\"></a>3.2. 基本的用户管理</h2><p>添加用户</p>\n<p>useradd nagela<br>修改密码<br>passwd nagela 按提示输入密码即可</p>\n<p>sudo useradd xiaobai</p>\n<p>为用户配置sudo权限<br>用root编辑<br>vi /etc/sudoers<br>在文件如下位置,为hadoop添加一行即可<br>root ALL=(ALL) ALL<br>hadoop ALL=(ALL) ALL  </p>\n<h2 id=\"3-3-系统管理操作\"><a href=\"#3-3-系统管理操作\" class=\"headerlink\" title=\"3.3. 系统管理操作\"></a>3.3. 系统管理操作</h2><p>1.查看主机名<br>hostname</p>\n<p>2.修改主机名(重启后无效)<br>hostname hadoop</p>\n<p>3.修改主机名(重启后永久生效)<br>vi /ect/sysconfig/network</p>\n<p>4.修改IP(重启后无效)<br>ifconfig eth0 192.168.12.22</p>\n<p>5.修改IP(重启后永久生效)<br>vi /etc/sysconfig/network-scripts/ifcfg-eth0</p>\n<p>6.查看系统信息<br>uname -a<br>uname -r</p>\n<p>7.查看ID命令<br>id -u<br>id -g</p>\n<p>8.日期<br>date<br>date +%Y-%m-%d<br>date +%T<br>date +%Y-%m-%d” “%T</p>\n<p>9.日历<br>cal 2012</p>\n<p>10.查看文件信息<br>file filename</p>\n<p>11.挂载硬盘<br>mount<br>umount<br>加载windows共享<br>mount -t cifs //192.168.1.100/tools /mnt</p>\n<p>挂载cdrom 里面是iso镜像文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount -t iso9660 -o ro /dev/cdrom /mnt/cdrom</div><div class=\"line\">[root@server1 mnt]# ll cdrom/</div><div class=\"line\">total 654</div><div class=\"line\">-rw-r--r-- 1 root root     14 Dec  5  2016 CentOS_BuildTag</div><div class=\"line\">drwxr-xr-x 3 root root   2048 Dec  5  2016 EFI</div><div class=\"line\">-rw-r--r-- 1 root root    215 Dec  9  2015 EULA</div><div class=\"line\">-rw-r--r-- 1 root root  18009 Dec  9  2015 GPL</div><div class=\"line\">drwxr-xr-x 3 root root   2048 Dec  5  2016 images</div><div class=\"line\">drwxr-xr-x 2 root root   2048 Dec  5  2016 isolinux</div><div class=\"line\">drwxr-xr-x 2 root root   2048 Dec  5  2016 LiveOS</div><div class=\"line\">drwxrwxr-x 2 root root 630784 Dec  5  2016 Packages</div><div class=\"line\">drwxrwxr-x 2 root root   4096 Dec  5  2016 repodata</div><div class=\"line\">-rw-r--r-- 1 root root   1690 Dec  9  2015 RPM-GPG-KEY-CentOS-7</div><div class=\"line\">-rw-r--r-- 1 root root   1690 Dec  9  2015 RPM-GPG-KEY-CentOS-Testing-7</div><div class=\"line\">-r--r--r-- 1 root root   2883 Dec  5  2016 TRANS.TBL</div></pre></td></tr></table></figure></p>\n<p>12.查看文件大小<br>du -h<br>du -ah</p>\n<p>13.查看分区<br>df -h</p>\n<p>14.ssh<br>ssh hadoop@192.168.1.1</p>\n<p>15.关机<br>shutdown -h now /init 0<br>shutdown -r now /reboot</p>\n<h1 id=\"4-ssh免密登录\"><a href=\"#4-ssh免密登录\" class=\"headerlink\" title=\"4. ssh免密登录\"></a>4. ssh免密登录</h1><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/dashuju/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E6%9C%BA%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"\"></p>\n<p>假如 A  要登陆  B<br>在A上操作：<br>首先生成密钥对</p>\n<pre><code>ssh-keygen   (提示时，直接回车即可)\n</code></pre><p>再将A自己的公钥拷贝并追加到B的授权列表文件authorized_keys中</p>\n<pre><code>ssh-copy-id   B\n</code></pre>"},{"title":"记录有北京游玩的链接","toc":true,"date":"2017-12-22T15:51:55.000Z","scaffolds":null,"_content":"[发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~](http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml)\n\n\n\n\n\n\n\n","source":"_posts/其他/记录有北京游玩的链接.md","raw":"---\ntitle: 记录有北京游玩的链接\ncategories: 玩\ntags:\n  - 北京\n  - 游玩\ntoc: true\ndate: 2017-12-22 23:51:55\nscaffolds:\n---\n[发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~](http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml)\n\n\n\n\n\n\n\n","slug":"其他/记录有北京游玩的链接","published":1,"updated":"2018-02-06T07:50:24.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89yb0008v4vf0xlhen08","content":"<p><a href=\"http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml\" target=\"_blank\" rel=\"external\">发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml\" target=\"_blank\" rel=\"external\">发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~</a></p>\n"},{"title":"北京冬天哪里好玩","toc":true,"date":"2017-12-22T15:55:03.000Z","scaffolds":null,"_content":"[发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~](http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml)  \n转来的\n<!-- more -->\n# 1. 古北水镇过暖冬\n冬日的水镇一改盛夏的浓艳，鳞次栉比的房屋，青石板的老街，悠长的胡同......让水镇更添几分宁静、祥和。这时候来古北逛逛古镇，看看夜景，泡泡温泉，真是从头到脚的舒心！\n## 1.1. 门票信息：180.00元（体验价80.00元）\n## 1.2. 自驾路线：\n上了京承高速，一直前行，路上会有古北水镇的标示牌，下了高速，基本就到停车场。从京承高速收费站到古北水镇大约有120公里的路程。    \ntips：四季皆宜。 春季碧波荡漾，水镇宛若一幅江南水墨画；夏季纳凉避暑，戏水游乐；秋季银杏落叶和古朴的建筑情景交融，摄影取材的好去处；冬季皑皑白雪的覆盖下，河面冻结，嬉雪赏冰雕……\n\n\n# 2. 首都博物馆\n欲了解一个地方，必去当地的博物馆！首都博物馆是咱们“老北京的博物馆”，从北京的历史文化，生活民俗，风土人文，全面的介绍北京的兴衰变迁。是深度了解北京的好地方。\n## 2.1. 门票：持有效证件免费参观\n- 地址：西城区复兴门外大街16号\n## 2.2. 路线\n- 地铁：乘坐地铁1号线`木樨地站`下\n- 公交：26、80、45、114、308、特19、937、843、844、840、845路`白云路站`\n\n# 3. 呀路古热带植物园\n北京呀路古热带植物园位于北京市大兴区长子营镇，是北京市最大的热带植物园，占地面积600亩。虽然外面寒风烈烈，但这里确是温暖如春！  \n景区收集了热带果树、热带饮料植物、热带观赏植物、热带药用植物、棕榈植物、热带濒危植物、热带珍奇植物和蔬菜作物等，热带亚热带物种达上千余种  \n景区内主要景点有勐巴拉娜西热带植物馆、土司堡民族展览馆和恐龙馆、孔雀馆等。景区内森林繁茂，蔓藤缠绕，不失为冬季的好去处。\n## 3.1. 门票：60元\n## 3.2. 乘车线路：\n- 1、市区游客可乘坐976路、826路、926路公交车。 \n- 2、大兴黄村地区的游客可以坐940路公交车`朱庄站`下车前行200米即到。\n\n# 4. 北京天文馆\n## 4.1. 简介\n北京天文馆是`中国第一座天文馆`，馆内有直径23.5米象征天穹的天象厅，中间安装精致的国产大型天象仪，`可表演日、月、星辰、流星彗星、日食以及月食等天象`。  \n北京天文馆包含`A、B两馆`，共4个科普剧场。\n### 4.1.1. A馆\n- 门厅正中 ： 反映`地球自转的傅科摆`\n- 西侧展厅 ： 陈列天文知识展览\n- 东侧演讲厅 ： 经常举行学术交流和普及天文科学知识报告。\n- 庭院中有两座天文台，其中一座装有口径13厘米的望远镜，可通过它观看月亮、行星、星云、星团，白天观测太阳黑子。\n\n## 4.2. 门票：\n### 4.2.1. 元/人\n### 4.2.2. 天象厅：45元/人\n### 4.2.3. 宇宙剧场：30元/人\n### 4.2.4. D剧场、4D剧场：45元/人\n## 4.3. 乘车线路：\n乘7、15、19、27、65、102、103、105、107、111、319、332、334、347、360、362、534、601、632、634、714、732、808、814、运通104、运通105、运通106、特4路`动物园站`下;地铁4号线`动物园站D`出口。\n\n# 5. 南宫温泉水世界\n南宫温泉坐落在4A级南宫旅游景区内，这里可是“`中国地热第一村`”！也是北京最大的一块地热田！温泉水都来自2980米深得地热井，每天出水量为2700吨，温度69—72℃~  \n整座水世界呈热带雨林的风情，里面种满了热带树木、植物，还有数十种汤泉药浴；儿童戏水乐园，漂流、戏水滑道....\n## 5.1. 路线\n- 地址:北京市丰台区王佐镇南宫南路9号\n- 自驾：京港澳高速'南宫王佐19A'出口出向北第二个红绿灯右转200米路北\n- 公交：乘458路,459路,951路,836路直达`王佐镇政府站`下车\n\n# 6. 顺景温泉\n日式汤屋、溶洞、水世界…在帝都，温泉我只服这一家！顺景温泉总占地13万平米，是吉尼斯认证的“`全球最大室内温泉`”！  \n这里的温泉水非常珍贵！活性矿物质远远高于理疗热矿水浓度标准室内外温泉池相互衔接，清池湖泊、小桥流水...充满着神秘色彩，给人以原始丛林的生态之美。  \n还有千奇百怪、突兀嶙峋的溶洞。置身于顺景的溶洞景观中，仿入梦境。满眼都是数万年的各异钟乳石、石笋，一切都分外神秘与美丽！    \n## 6.1. 人均：240元左右/人\n## 6.2. 路线\n- 地址：朝阳区北四环东路2号\n- 电话：010-84420088 010-85696688\n- 乘车路线：847路、131路、401路、404路、641路公交在`四元桥西站`下车，步行至酒店。\n\n# 7. X先生密室\nX先生密室是一家大型真人密室逃脱游戏场所，致力于打造最全面的融合紧张刺激，需要玩家在房间中寻找线索，通过合作找出所有线索，交流和思考解开全部谜题，一步一步的走近最终答案，最终逃出密室。  \n绝对属于高科技范儿的密室逃脱，连实景岩洞、水池皮划都能在神秘屋里体验到。解开谜题的钥匙可能藏在任何物件里，有可能你身上穿的衣服也能帮你逃出牢笼。\n\n## 7.1. 人均消费：140元\n## 7.2. 路线\n- 地址：朝阳区 工体北路13号世茂广场·工三 2层(工体北门对面)。\n- 营业时间：10:00—2:20(22:30之后来店需提前电话咨询)\n- 电话：4008598298。\n\n# 8. 北京自然博物馆\n如果不知道该如何打发时间，就来位于天桥南侧的北京自然博物馆吧~ 里面有各种动、植物标本、恐龙骨架、人体知识、小小水族馆....在这里，时间仿佛是静止的，不知孩子，大人也能玩的不亦乐乎~  \n有恐龙的化石骨骼，有恐龙的仿真模型，那些模型十分逼真，甚至有的还可以发出恐龙的叫声~  \n还有小小的海洋世界，没有太平洋富国海底世界那么大，只是一个不大的走廊，但是你也可以看到很多的海洋动植物~ 如果小朋友来这里，真的能疯玩一整天！\n\n## 8.1. 门票：门票免费，至少需提前一天预约，不能预约当日参观门票\n## 8.2. 路线\n- 地址：北京市东城区天桥南大街126号\n- 公交7路, 17路, 20路, 35路, 36路, 69路, 71路, 72路`天桥西门`下车\n- 地铁：地铁7号线 `珠市口站`\n\n# 9. 地质博物馆\n中国地质博物馆是`中国成立最早的地质学博物馆`，创建于1916年，以其典藏系统、成果丰硕、陈列精美称雄于亚洲同类博物馆，并且在世界范围内享有盛誉。  \n中国地质博物馆收藏地质标本20余万件，涵盖地学各个领域。其中有蜚声海内外的`巨型山东龙`、`中华龙鸟等恐龙系列化石`，`北京人`、`元谋人`、`山顶洞人`等著名古人类化石等。\n## 9.1. 门票：30元\n## 9.2. 乘车线路：\n市内交通：乘13、22、38、47、68、101、102、103、105、109、124、409、603、709、726、806、808、812、814、823、826、846、850路公共汽车西四站下\n\n# 10. 世界花卉大观园\n世界花卉大观园位于北京南四环辅路北侧，京开公路东侧，全园41.8公顷，是`北京市四环以内最大的植物园`。\n世界花卉大观园景观由`七大温室`和`十五个花园广场`组成。各温室内的植物千奇百怪、花锦簇。  \n热带植物馆中有数百年的佛肚树、重阳木、古榕树等乔木1800余种；沙生植物温室有上百种仙人掌、仙人球；精品花卉厅有生动风趣的植物生肖园、精品盆景园等等。\n## 10.1. 门票：60元\n## 10.2. 乘车线路：\n4号线`公益西桥站`下车换乘646路到`世界花卉大观园站`下车。","source":"_posts/其他/北京冬天哪里好玩.md","raw":"---\ntitle: 北京冬天哪里好玩\ncategories: 玩\ntags:\n  - 生活\n  - 北京\n  - 游玩\ntoc: true\ndate: 2017-12-22 23:55:03\nscaffolds:\n---\n[发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~](http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml)  \n转来的\n<!-- more -->\n# 1. 古北水镇过暖冬\n冬日的水镇一改盛夏的浓艳，鳞次栉比的房屋，青石板的老街，悠长的胡同......让水镇更添几分宁静、祥和。这时候来古北逛逛古镇，看看夜景，泡泡温泉，真是从头到脚的舒心！\n## 1.1. 门票信息：180.00元（体验价80.00元）\n## 1.2. 自驾路线：\n上了京承高速，一直前行，路上会有古北水镇的标示牌，下了高速，基本就到停车场。从京承高速收费站到古北水镇大约有120公里的路程。    \ntips：四季皆宜。 春季碧波荡漾，水镇宛若一幅江南水墨画；夏季纳凉避暑，戏水游乐；秋季银杏落叶和古朴的建筑情景交融，摄影取材的好去处；冬季皑皑白雪的覆盖下，河面冻结，嬉雪赏冰雕……\n\n\n# 2. 首都博物馆\n欲了解一个地方，必去当地的博物馆！首都博物馆是咱们“老北京的博物馆”，从北京的历史文化，生活民俗，风土人文，全面的介绍北京的兴衰变迁。是深度了解北京的好地方。\n## 2.1. 门票：持有效证件免费参观\n- 地址：西城区复兴门外大街16号\n## 2.2. 路线\n- 地铁：乘坐地铁1号线`木樨地站`下\n- 公交：26、80、45、114、308、特19、937、843、844、840、845路`白云路站`\n\n# 3. 呀路古热带植物园\n北京呀路古热带植物园位于北京市大兴区长子营镇，是北京市最大的热带植物园，占地面积600亩。虽然外面寒风烈烈，但这里确是温暖如春！  \n景区收集了热带果树、热带饮料植物、热带观赏植物、热带药用植物、棕榈植物、热带濒危植物、热带珍奇植物和蔬菜作物等，热带亚热带物种达上千余种  \n景区内主要景点有勐巴拉娜西热带植物馆、土司堡民族展览馆和恐龙馆、孔雀馆等。景区内森林繁茂，蔓藤缠绕，不失为冬季的好去处。\n## 3.1. 门票：60元\n## 3.2. 乘车线路：\n- 1、市区游客可乘坐976路、826路、926路公交车。 \n- 2、大兴黄村地区的游客可以坐940路公交车`朱庄站`下车前行200米即到。\n\n# 4. 北京天文馆\n## 4.1. 简介\n北京天文馆是`中国第一座天文馆`，馆内有直径23.5米象征天穹的天象厅，中间安装精致的国产大型天象仪，`可表演日、月、星辰、流星彗星、日食以及月食等天象`。  \n北京天文馆包含`A、B两馆`，共4个科普剧场。\n### 4.1.1. A馆\n- 门厅正中 ： 反映`地球自转的傅科摆`\n- 西侧展厅 ： 陈列天文知识展览\n- 东侧演讲厅 ： 经常举行学术交流和普及天文科学知识报告。\n- 庭院中有两座天文台，其中一座装有口径13厘米的望远镜，可通过它观看月亮、行星、星云、星团，白天观测太阳黑子。\n\n## 4.2. 门票：\n### 4.2.1. 元/人\n### 4.2.2. 天象厅：45元/人\n### 4.2.3. 宇宙剧场：30元/人\n### 4.2.4. D剧场、4D剧场：45元/人\n## 4.3. 乘车线路：\n乘7、15、19、27、65、102、103、105、107、111、319、332、334、347、360、362、534、601、632、634、714、732、808、814、运通104、运通105、运通106、特4路`动物园站`下;地铁4号线`动物园站D`出口。\n\n# 5. 南宫温泉水世界\n南宫温泉坐落在4A级南宫旅游景区内，这里可是“`中国地热第一村`”！也是北京最大的一块地热田！温泉水都来自2980米深得地热井，每天出水量为2700吨，温度69—72℃~  \n整座水世界呈热带雨林的风情，里面种满了热带树木、植物，还有数十种汤泉药浴；儿童戏水乐园，漂流、戏水滑道....\n## 5.1. 路线\n- 地址:北京市丰台区王佐镇南宫南路9号\n- 自驾：京港澳高速'南宫王佐19A'出口出向北第二个红绿灯右转200米路北\n- 公交：乘458路,459路,951路,836路直达`王佐镇政府站`下车\n\n# 6. 顺景温泉\n日式汤屋、溶洞、水世界…在帝都，温泉我只服这一家！顺景温泉总占地13万平米，是吉尼斯认证的“`全球最大室内温泉`”！  \n这里的温泉水非常珍贵！活性矿物质远远高于理疗热矿水浓度标准室内外温泉池相互衔接，清池湖泊、小桥流水...充满着神秘色彩，给人以原始丛林的生态之美。  \n还有千奇百怪、突兀嶙峋的溶洞。置身于顺景的溶洞景观中，仿入梦境。满眼都是数万年的各异钟乳石、石笋，一切都分外神秘与美丽！    \n## 6.1. 人均：240元左右/人\n## 6.2. 路线\n- 地址：朝阳区北四环东路2号\n- 电话：010-84420088 010-85696688\n- 乘车路线：847路、131路、401路、404路、641路公交在`四元桥西站`下车，步行至酒店。\n\n# 7. X先生密室\nX先生密室是一家大型真人密室逃脱游戏场所，致力于打造最全面的融合紧张刺激，需要玩家在房间中寻找线索，通过合作找出所有线索，交流和思考解开全部谜题，一步一步的走近最终答案，最终逃出密室。  \n绝对属于高科技范儿的密室逃脱，连实景岩洞、水池皮划都能在神秘屋里体验到。解开谜题的钥匙可能藏在任何物件里，有可能你身上穿的衣服也能帮你逃出牢笼。\n\n## 7.1. 人均消费：140元\n## 7.2. 路线\n- 地址：朝阳区 工体北路13号世茂广场·工三 2层(工体北门对面)。\n- 营业时间：10:00—2:20(22:30之后来店需提前电话咨询)\n- 电话：4008598298。\n\n# 8. 北京自然博物馆\n如果不知道该如何打发时间，就来位于天桥南侧的北京自然博物馆吧~ 里面有各种动、植物标本、恐龙骨架、人体知识、小小水族馆....在这里，时间仿佛是静止的，不知孩子，大人也能玩的不亦乐乎~  \n有恐龙的化石骨骼，有恐龙的仿真模型，那些模型十分逼真，甚至有的还可以发出恐龙的叫声~  \n还有小小的海洋世界，没有太平洋富国海底世界那么大，只是一个不大的走廊，但是你也可以看到很多的海洋动植物~ 如果小朋友来这里，真的能疯玩一整天！\n\n## 8.1. 门票：门票免费，至少需提前一天预约，不能预约当日参观门票\n## 8.2. 路线\n- 地址：北京市东城区天桥南大街126号\n- 公交7路, 17路, 20路, 35路, 36路, 69路, 71路, 72路`天桥西门`下车\n- 地铁：地铁7号线 `珠市口站`\n\n# 9. 地质博物馆\n中国地质博物馆是`中国成立最早的地质学博物馆`，创建于1916年，以其典藏系统、成果丰硕、陈列精美称雄于亚洲同类博物馆，并且在世界范围内享有盛誉。  \n中国地质博物馆收藏地质标本20余万件，涵盖地学各个领域。其中有蜚声海内外的`巨型山东龙`、`中华龙鸟等恐龙系列化石`，`北京人`、`元谋人`、`山顶洞人`等著名古人类化石等。\n## 9.1. 门票：30元\n## 9.2. 乘车线路：\n市内交通：乘13、22、38、47、68、101、102、103、105、109、124、409、603、709、726、806、808、812、814、823、826、846、850路公共汽车西四站下\n\n# 10. 世界花卉大观园\n世界花卉大观园位于北京南四环辅路北侧，京开公路东侧，全园41.8公顷，是`北京市四环以内最大的植物园`。\n世界花卉大观园景观由`七大温室`和`十五个花园广场`组成。各温室内的植物千奇百怪、花锦簇。  \n热带植物馆中有数百年的佛肚树、重阳木、古榕树等乔木1800余种；沙生植物温室有上百种仙人掌、仙人球；精品花卉厅有生动风趣的植物生肖园、精品盆景园等等。\n## 10.1. 门票：60元\n## 10.2. 乘车线路：\n4号线`公益西桥站`下车换乘646路到`世界花卉大观园站`下车。","slug":"其他/北京冬天哪里好玩","published":1,"updated":"2018-02-06T07:50:21.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89ye000bv4vfs531n59g","content":"<p><a href=\"http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml\" target=\"_blank\" rel=\"external\">发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~</a><br>转来的<br><a id=\"more\"></a></p>\n<h1 id=\"1-古北水镇过暖冬\"><a href=\"#1-古北水镇过暖冬\" class=\"headerlink\" title=\"1. 古北水镇过暖冬\"></a>1. 古北水镇过暖冬</h1><p>冬日的水镇一改盛夏的浓艳，鳞次栉比的房屋，青石板的老街，悠长的胡同……让水镇更添几分宁静、祥和。这时候来古北逛逛古镇，看看夜景，泡泡温泉，真是从头到脚的舒心！</p>\n<h2 id=\"1-1-门票信息：180-00元（体验价80-00元）\"><a href=\"#1-1-门票信息：180-00元（体验价80-00元）\" class=\"headerlink\" title=\"1.1. 门票信息：180.00元（体验价80.00元）\"></a>1.1. 门票信息：180.00元（体验价80.00元）</h2><h2 id=\"1-2-自驾路线：\"><a href=\"#1-2-自驾路线：\" class=\"headerlink\" title=\"1.2. 自驾路线：\"></a>1.2. 自驾路线：</h2><p>上了京承高速，一直前行，路上会有古北水镇的标示牌，下了高速，基本就到停车场。从京承高速收费站到古北水镇大约有120公里的路程。<br>tips：四季皆宜。 春季碧波荡漾，水镇宛若一幅江南水墨画；夏季纳凉避暑，戏水游乐；秋季银杏落叶和古朴的建筑情景交融，摄影取材的好去处；冬季皑皑白雪的覆盖下，河面冻结，嬉雪赏冰雕……</p>\n<h1 id=\"2-首都博物馆\"><a href=\"#2-首都博物馆\" class=\"headerlink\" title=\"2. 首都博物馆\"></a>2. 首都博物馆</h1><p>欲了解一个地方，必去当地的博物馆！首都博物馆是咱们“老北京的博物馆”，从北京的历史文化，生活民俗，风土人文，全面的介绍北京的兴衰变迁。是深度了解北京的好地方。</p>\n<h2 id=\"2-1-门票：持有效证件免费参观\"><a href=\"#2-1-门票：持有效证件免费参观\" class=\"headerlink\" title=\"2.1. 门票：持有效证件免费参观\"></a>2.1. 门票：持有效证件免费参观</h2><ul>\n<li>地址：西城区复兴门外大街16号<h2 id=\"2-2-路线\"><a href=\"#2-2-路线\" class=\"headerlink\" title=\"2.2. 路线\"></a>2.2. 路线</h2></li>\n<li>地铁：乘坐地铁1号线<code>木樨地站</code>下</li>\n<li>公交：26、80、45、114、308、特19、937、843、844、840、845路<code>白云路站</code></li>\n</ul>\n<h1 id=\"3-呀路古热带植物园\"><a href=\"#3-呀路古热带植物园\" class=\"headerlink\" title=\"3. 呀路古热带植物园\"></a>3. 呀路古热带植物园</h1><p>北京呀路古热带植物园位于北京市大兴区长子营镇，是北京市最大的热带植物园，占地面积600亩。虽然外面寒风烈烈，但这里确是温暖如春！<br>景区收集了热带果树、热带饮料植物、热带观赏植物、热带药用植物、棕榈植物、热带濒危植物、热带珍奇植物和蔬菜作物等，热带亚热带物种达上千余种<br>景区内主要景点有勐巴拉娜西热带植物馆、土司堡民族展览馆和恐龙馆、孔雀馆等。景区内森林繁茂，蔓藤缠绕，不失为冬季的好去处。</p>\n<h2 id=\"3-1-门票：60元\"><a href=\"#3-1-门票：60元\" class=\"headerlink\" title=\"3.1. 门票：60元\"></a>3.1. 门票：60元</h2><h2 id=\"3-2-乘车线路：\"><a href=\"#3-2-乘车线路：\" class=\"headerlink\" title=\"3.2. 乘车线路：\"></a>3.2. 乘车线路：</h2><ul>\n<li>1、市区游客可乘坐976路、826路、926路公交车。 </li>\n<li>2、大兴黄村地区的游客可以坐940路公交车<code>朱庄站</code>下车前行200米即到。</li>\n</ul>\n<h1 id=\"4-北京天文馆\"><a href=\"#4-北京天文馆\" class=\"headerlink\" title=\"4. 北京天文馆\"></a>4. 北京天文馆</h1><h2 id=\"4-1-简介\"><a href=\"#4-1-简介\" class=\"headerlink\" title=\"4.1. 简介\"></a>4.1. 简介</h2><p>北京天文馆是<code>中国第一座天文馆</code>，馆内有直径23.5米象征天穹的天象厅，中间安装精致的国产大型天象仪，<code>可表演日、月、星辰、流星彗星、日食以及月食等天象</code>。<br>北京天文馆包含<code>A、B两馆</code>，共4个科普剧场。</p>\n<h3 id=\"4-1-1-A馆\"><a href=\"#4-1-1-A馆\" class=\"headerlink\" title=\"4.1.1. A馆\"></a>4.1.1. A馆</h3><ul>\n<li>门厅正中 ： 反映<code>地球自转的傅科摆</code></li>\n<li>西侧展厅 ： 陈列天文知识展览</li>\n<li>东侧演讲厅 ： 经常举行学术交流和普及天文科学知识报告。</li>\n<li>庭院中有两座天文台，其中一座装有口径13厘米的望远镜，可通过它观看月亮、行星、星云、星团，白天观测太阳黑子。</li>\n</ul>\n<h2 id=\"4-2-门票：\"><a href=\"#4-2-门票：\" class=\"headerlink\" title=\"4.2. 门票：\"></a>4.2. 门票：</h2><h3 id=\"4-2-1-元-人\"><a href=\"#4-2-1-元-人\" class=\"headerlink\" title=\"4.2.1. 元/人\"></a>4.2.1. 元/人</h3><h3 id=\"4-2-2-天象厅：45元-人\"><a href=\"#4-2-2-天象厅：45元-人\" class=\"headerlink\" title=\"4.2.2. 天象厅：45元/人\"></a>4.2.2. 天象厅：45元/人</h3><h3 id=\"4-2-3-宇宙剧场：30元-人\"><a href=\"#4-2-3-宇宙剧场：30元-人\" class=\"headerlink\" title=\"4.2.3. 宇宙剧场：30元/人\"></a>4.2.3. 宇宙剧场：30元/人</h3><h3 id=\"4-2-4-D剧场、4D剧场：45元-人\"><a href=\"#4-2-4-D剧场、4D剧场：45元-人\" class=\"headerlink\" title=\"4.2.4. D剧场、4D剧场：45元/人\"></a>4.2.4. D剧场、4D剧场：45元/人</h3><h2 id=\"4-3-乘车线路：\"><a href=\"#4-3-乘车线路：\" class=\"headerlink\" title=\"4.3. 乘车线路：\"></a>4.3. 乘车线路：</h2><p>乘7、15、19、27、65、102、103、105、107、111、319、332、334、347、360、362、534、601、632、634、714、732、808、814、运通104、运通105、运通106、特4路<code>动物园站</code>下;地铁4号线<code>动物园站D</code>出口。</p>\n<h1 id=\"5-南宫温泉水世界\"><a href=\"#5-南宫温泉水世界\" class=\"headerlink\" title=\"5. 南宫温泉水世界\"></a>5. 南宫温泉水世界</h1><p>南宫温泉坐落在4A级南宫旅游景区内，这里可是“<code>中国地热第一村</code>”！也是北京最大的一块地热田！温泉水都来自2980米深得地热井，每天出水量为2700吨，温度69—72℃~<br>整座水世界呈热带雨林的风情，里面种满了热带树木、植物，还有数十种汤泉药浴；儿童戏水乐园，漂流、戏水滑道….</p>\n<h2 id=\"5-1-路线\"><a href=\"#5-1-路线\" class=\"headerlink\" title=\"5.1. 路线\"></a>5.1. 路线</h2><ul>\n<li>地址:北京市丰台区王佐镇南宫南路9号</li>\n<li>自驾：京港澳高速’南宫王佐19A’出口出向北第二个红绿灯右转200米路北</li>\n<li>公交：乘458路,459路,951路,836路直达<code>王佐镇政府站</code>下车</li>\n</ul>\n<h1 id=\"6-顺景温泉\"><a href=\"#6-顺景温泉\" class=\"headerlink\" title=\"6. 顺景温泉\"></a>6. 顺景温泉</h1><p>日式汤屋、溶洞、水世界…在帝都，温泉我只服这一家！顺景温泉总占地13万平米，是吉尼斯认证的“<code>全球最大室内温泉</code>”！<br>这里的温泉水非常珍贵！活性矿物质远远高于理疗热矿水浓度标准室内外温泉池相互衔接，清池湖泊、小桥流水…充满着神秘色彩，给人以原始丛林的生态之美。<br>还有千奇百怪、突兀嶙峋的溶洞。置身于顺景的溶洞景观中，仿入梦境。满眼都是数万年的各异钟乳石、石笋，一切都分外神秘与美丽！    </p>\n<h2 id=\"6-1-人均：240元左右-人\"><a href=\"#6-1-人均：240元左右-人\" class=\"headerlink\" title=\"6.1. 人均：240元左右/人\"></a>6.1. 人均：240元左右/人</h2><h2 id=\"6-2-路线\"><a href=\"#6-2-路线\" class=\"headerlink\" title=\"6.2. 路线\"></a>6.2. 路线</h2><ul>\n<li>地址：朝阳区北四环东路2号</li>\n<li>电话：010-84420088 010-85696688</li>\n<li>乘车路线：847路、131路、401路、404路、641路公交在<code>四元桥西站</code>下车，步行至酒店。</li>\n</ul>\n<h1 id=\"7-X先生密室\"><a href=\"#7-X先生密室\" class=\"headerlink\" title=\"7. X先生密室\"></a>7. X先生密室</h1><p>X先生密室是一家大型真人密室逃脱游戏场所，致力于打造最全面的融合紧张刺激，需要玩家在房间中寻找线索，通过合作找出所有线索，交流和思考解开全部谜题，一步一步的走近最终答案，最终逃出密室。<br>绝对属于高科技范儿的密室逃脱，连实景岩洞、水池皮划都能在神秘屋里体验到。解开谜题的钥匙可能藏在任何物件里，有可能你身上穿的衣服也能帮你逃出牢笼。</p>\n<h2 id=\"7-1-人均消费：140元\"><a href=\"#7-1-人均消费：140元\" class=\"headerlink\" title=\"7.1. 人均消费：140元\"></a>7.1. 人均消费：140元</h2><h2 id=\"7-2-路线\"><a href=\"#7-2-路线\" class=\"headerlink\" title=\"7.2. 路线\"></a>7.2. 路线</h2><ul>\n<li>地址：朝阳区 工体北路13号世茂广场·工三 2层(工体北门对面)。</li>\n<li>营业时间：10:00—2:20(22:30之后来店需提前电话咨询)</li>\n<li>电话：4008598298。</li>\n</ul>\n<h1 id=\"8-北京自然博物馆\"><a href=\"#8-北京自然博物馆\" class=\"headerlink\" title=\"8. 北京自然博物馆\"></a>8. 北京自然博物馆</h1><p>如果不知道该如何打发时间，就来位于天桥南侧的北京自然博物馆吧~ 里面有各种动、植物标本、恐龙骨架、人体知识、小小水族馆….在这里，时间仿佛是静止的，不知孩子，大人也能玩的不亦乐乎~<br>有恐龙的化石骨骼，有恐龙的仿真模型，那些模型十分逼真，甚至有的还可以发出恐龙的叫声~<br>还有小小的海洋世界，没有太平洋富国海底世界那么大，只是一个不大的走廊，但是你也可以看到很多的海洋动植物~ 如果小朋友来这里，真的能疯玩一整天！</p>\n<h2 id=\"8-1-门票：门票免费，至少需提前一天预约，不能预约当日参观门票\"><a href=\"#8-1-门票：门票免费，至少需提前一天预约，不能预约当日参观门票\" class=\"headerlink\" title=\"8.1. 门票：门票免费，至少需提前一天预约，不能预约当日参观门票\"></a>8.1. 门票：门票免费，至少需提前一天预约，不能预约当日参观门票</h2><h2 id=\"8-2-路线\"><a href=\"#8-2-路线\" class=\"headerlink\" title=\"8.2. 路线\"></a>8.2. 路线</h2><ul>\n<li>地址：北京市东城区天桥南大街126号</li>\n<li>公交7路, 17路, 20路, 35路, 36路, 69路, 71路, 72路<code>天桥西门</code>下车</li>\n<li>地铁：地铁7号线 <code>珠市口站</code></li>\n</ul>\n<h1 id=\"9-地质博物馆\"><a href=\"#9-地质博物馆\" class=\"headerlink\" title=\"9. 地质博物馆\"></a>9. 地质博物馆</h1><p>中国地质博物馆是<code>中国成立最早的地质学博物馆</code>，创建于1916年，以其典藏系统、成果丰硕、陈列精美称雄于亚洲同类博物馆，并且在世界范围内享有盛誉。<br>中国地质博物馆收藏地质标本20余万件，涵盖地学各个领域。其中有蜚声海内外的<code>巨型山东龙</code>、<code>中华龙鸟等恐龙系列化石</code>，<code>北京人</code>、<code>元谋人</code>、<code>山顶洞人</code>等著名古人类化石等。</p>\n<h2 id=\"9-1-门票：30元\"><a href=\"#9-1-门票：30元\" class=\"headerlink\" title=\"9.1. 门票：30元\"></a>9.1. 门票：30元</h2><h2 id=\"9-2-乘车线路：\"><a href=\"#9-2-乘车线路：\" class=\"headerlink\" title=\"9.2. 乘车线路：\"></a>9.2. 乘车线路：</h2><p>市内交通：乘13、22、38、47、68、101、102、103、105、109、124、409、603、709、726、806、808、812、814、823、826、846、850路公共汽车西四站下</p>\n<h1 id=\"10-世界花卉大观园\"><a href=\"#10-世界花卉大观园\" class=\"headerlink\" title=\"10. 世界花卉大观园\"></a>10. 世界花卉大观园</h1><p>世界花卉大观园位于北京南四环辅路北侧，京开公路东侧，全园41.8公顷，是<code>北京市四环以内最大的植物园</code>。<br>世界花卉大观园景观由<code>七大温室</code>和<code>十五个花园广场</code>组成。各温室内的植物千奇百怪、花锦簇。<br>热带植物馆中有数百年的佛肚树、重阳木、古榕树等乔木1800余种；沙生植物温室有上百种仙人掌、仙人球；精品花卉厅有生动风趣的植物生肖园、精品盆景园等等。</p>\n<h2 id=\"10-1-门票：60元\"><a href=\"#10-1-门票：60元\" class=\"headerlink\" title=\"10.1. 门票：60元\"></a>10.1. 门票：60元</h2><h2 id=\"10-2-乘车线路：\"><a href=\"#10-2-乘车线路：\" class=\"headerlink\" title=\"10.2. 乘车线路：\"></a>10.2. 乘车线路：</h2><p>4号线<code>公益西桥站</code>下车换乘646路到<code>世界花卉大观园站</code>下车。</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.360doc.com/content/16/1202/06/38518105_611197220.shtml\" target=\"_blank\" rel=\"external\">发愁冬天去哪玩？北京这10个地方好玩还不冷！周末约起~</a><br>转来的<br>","more":"</p>\n<h1 id=\"1-古北水镇过暖冬\"><a href=\"#1-古北水镇过暖冬\" class=\"headerlink\" title=\"1. 古北水镇过暖冬\"></a>1. 古北水镇过暖冬</h1><p>冬日的水镇一改盛夏的浓艳，鳞次栉比的房屋，青石板的老街，悠长的胡同……让水镇更添几分宁静、祥和。这时候来古北逛逛古镇，看看夜景，泡泡温泉，真是从头到脚的舒心！</p>\n<h2 id=\"1-1-门票信息：180-00元（体验价80-00元）\"><a href=\"#1-1-门票信息：180-00元（体验价80-00元）\" class=\"headerlink\" title=\"1.1. 门票信息：180.00元（体验价80.00元）\"></a>1.1. 门票信息：180.00元（体验价80.00元）</h2><h2 id=\"1-2-自驾路线：\"><a href=\"#1-2-自驾路线：\" class=\"headerlink\" title=\"1.2. 自驾路线：\"></a>1.2. 自驾路线：</h2><p>上了京承高速，一直前行，路上会有古北水镇的标示牌，下了高速，基本就到停车场。从京承高速收费站到古北水镇大约有120公里的路程。<br>tips：四季皆宜。 春季碧波荡漾，水镇宛若一幅江南水墨画；夏季纳凉避暑，戏水游乐；秋季银杏落叶和古朴的建筑情景交融，摄影取材的好去处；冬季皑皑白雪的覆盖下，河面冻结，嬉雪赏冰雕……</p>\n<h1 id=\"2-首都博物馆\"><a href=\"#2-首都博物馆\" class=\"headerlink\" title=\"2. 首都博物馆\"></a>2. 首都博物馆</h1><p>欲了解一个地方，必去当地的博物馆！首都博物馆是咱们“老北京的博物馆”，从北京的历史文化，生活民俗，风土人文，全面的介绍北京的兴衰变迁。是深度了解北京的好地方。</p>\n<h2 id=\"2-1-门票：持有效证件免费参观\"><a href=\"#2-1-门票：持有效证件免费参观\" class=\"headerlink\" title=\"2.1. 门票：持有效证件免费参观\"></a>2.1. 门票：持有效证件免费参观</h2><ul>\n<li>地址：西城区复兴门外大街16号<h2 id=\"2-2-路线\"><a href=\"#2-2-路线\" class=\"headerlink\" title=\"2.2. 路线\"></a>2.2. 路线</h2></li>\n<li>地铁：乘坐地铁1号线<code>木樨地站</code>下</li>\n<li>公交：26、80、45、114、308、特19、937、843、844、840、845路<code>白云路站</code></li>\n</ul>\n<h1 id=\"3-呀路古热带植物园\"><a href=\"#3-呀路古热带植物园\" class=\"headerlink\" title=\"3. 呀路古热带植物园\"></a>3. 呀路古热带植物园</h1><p>北京呀路古热带植物园位于北京市大兴区长子营镇，是北京市最大的热带植物园，占地面积600亩。虽然外面寒风烈烈，但这里确是温暖如春！<br>景区收集了热带果树、热带饮料植物、热带观赏植物、热带药用植物、棕榈植物、热带濒危植物、热带珍奇植物和蔬菜作物等，热带亚热带物种达上千余种<br>景区内主要景点有勐巴拉娜西热带植物馆、土司堡民族展览馆和恐龙馆、孔雀馆等。景区内森林繁茂，蔓藤缠绕，不失为冬季的好去处。</p>\n<h2 id=\"3-1-门票：60元\"><a href=\"#3-1-门票：60元\" class=\"headerlink\" title=\"3.1. 门票：60元\"></a>3.1. 门票：60元</h2><h2 id=\"3-2-乘车线路：\"><a href=\"#3-2-乘车线路：\" class=\"headerlink\" title=\"3.2. 乘车线路：\"></a>3.2. 乘车线路：</h2><ul>\n<li>1、市区游客可乘坐976路、826路、926路公交车。 </li>\n<li>2、大兴黄村地区的游客可以坐940路公交车<code>朱庄站</code>下车前行200米即到。</li>\n</ul>\n<h1 id=\"4-北京天文馆\"><a href=\"#4-北京天文馆\" class=\"headerlink\" title=\"4. 北京天文馆\"></a>4. 北京天文馆</h1><h2 id=\"4-1-简介\"><a href=\"#4-1-简介\" class=\"headerlink\" title=\"4.1. 简介\"></a>4.1. 简介</h2><p>北京天文馆是<code>中国第一座天文馆</code>，馆内有直径23.5米象征天穹的天象厅，中间安装精致的国产大型天象仪，<code>可表演日、月、星辰、流星彗星、日食以及月食等天象</code>。<br>北京天文馆包含<code>A、B两馆</code>，共4个科普剧场。</p>\n<h3 id=\"4-1-1-A馆\"><a href=\"#4-1-1-A馆\" class=\"headerlink\" title=\"4.1.1. A馆\"></a>4.1.1. A馆</h3><ul>\n<li>门厅正中 ： 反映<code>地球自转的傅科摆</code></li>\n<li>西侧展厅 ： 陈列天文知识展览</li>\n<li>东侧演讲厅 ： 经常举行学术交流和普及天文科学知识报告。</li>\n<li>庭院中有两座天文台，其中一座装有口径13厘米的望远镜，可通过它观看月亮、行星、星云、星团，白天观测太阳黑子。</li>\n</ul>\n<h2 id=\"4-2-门票：\"><a href=\"#4-2-门票：\" class=\"headerlink\" title=\"4.2. 门票：\"></a>4.2. 门票：</h2><h3 id=\"4-2-1-元-人\"><a href=\"#4-2-1-元-人\" class=\"headerlink\" title=\"4.2.1. 元/人\"></a>4.2.1. 元/人</h3><h3 id=\"4-2-2-天象厅：45元-人\"><a href=\"#4-2-2-天象厅：45元-人\" class=\"headerlink\" title=\"4.2.2. 天象厅：45元/人\"></a>4.2.2. 天象厅：45元/人</h3><h3 id=\"4-2-3-宇宙剧场：30元-人\"><a href=\"#4-2-3-宇宙剧场：30元-人\" class=\"headerlink\" title=\"4.2.3. 宇宙剧场：30元/人\"></a>4.2.3. 宇宙剧场：30元/人</h3><h3 id=\"4-2-4-D剧场、4D剧场：45元-人\"><a href=\"#4-2-4-D剧场、4D剧场：45元-人\" class=\"headerlink\" title=\"4.2.4. D剧场、4D剧场：45元/人\"></a>4.2.4. D剧场、4D剧场：45元/人</h3><h2 id=\"4-3-乘车线路：\"><a href=\"#4-3-乘车线路：\" class=\"headerlink\" title=\"4.3. 乘车线路：\"></a>4.3. 乘车线路：</h2><p>乘7、15、19、27、65、102、103、105、107、111、319、332、334、347、360、362、534、601、632、634、714、732、808、814、运通104、运通105、运通106、特4路<code>动物园站</code>下;地铁4号线<code>动物园站D</code>出口。</p>\n<h1 id=\"5-南宫温泉水世界\"><a href=\"#5-南宫温泉水世界\" class=\"headerlink\" title=\"5. 南宫温泉水世界\"></a>5. 南宫温泉水世界</h1><p>南宫温泉坐落在4A级南宫旅游景区内，这里可是“<code>中国地热第一村</code>”！也是北京最大的一块地热田！温泉水都来自2980米深得地热井，每天出水量为2700吨，温度69—72℃~<br>整座水世界呈热带雨林的风情，里面种满了热带树木、植物，还有数十种汤泉药浴；儿童戏水乐园，漂流、戏水滑道….</p>\n<h2 id=\"5-1-路线\"><a href=\"#5-1-路线\" class=\"headerlink\" title=\"5.1. 路线\"></a>5.1. 路线</h2><ul>\n<li>地址:北京市丰台区王佐镇南宫南路9号</li>\n<li>自驾：京港澳高速’南宫王佐19A’出口出向北第二个红绿灯右转200米路北</li>\n<li>公交：乘458路,459路,951路,836路直达<code>王佐镇政府站</code>下车</li>\n</ul>\n<h1 id=\"6-顺景温泉\"><a href=\"#6-顺景温泉\" class=\"headerlink\" title=\"6. 顺景温泉\"></a>6. 顺景温泉</h1><p>日式汤屋、溶洞、水世界…在帝都，温泉我只服这一家！顺景温泉总占地13万平米，是吉尼斯认证的“<code>全球最大室内温泉</code>”！<br>这里的温泉水非常珍贵！活性矿物质远远高于理疗热矿水浓度标准室内外温泉池相互衔接，清池湖泊、小桥流水…充满着神秘色彩，给人以原始丛林的生态之美。<br>还有千奇百怪、突兀嶙峋的溶洞。置身于顺景的溶洞景观中，仿入梦境。满眼都是数万年的各异钟乳石、石笋，一切都分外神秘与美丽！    </p>\n<h2 id=\"6-1-人均：240元左右-人\"><a href=\"#6-1-人均：240元左右-人\" class=\"headerlink\" title=\"6.1. 人均：240元左右/人\"></a>6.1. 人均：240元左右/人</h2><h2 id=\"6-2-路线\"><a href=\"#6-2-路线\" class=\"headerlink\" title=\"6.2. 路线\"></a>6.2. 路线</h2><ul>\n<li>地址：朝阳区北四环东路2号</li>\n<li>电话：010-84420088 010-85696688</li>\n<li>乘车路线：847路、131路、401路、404路、641路公交在<code>四元桥西站</code>下车，步行至酒店。</li>\n</ul>\n<h1 id=\"7-X先生密室\"><a href=\"#7-X先生密室\" class=\"headerlink\" title=\"7. X先生密室\"></a>7. X先生密室</h1><p>X先生密室是一家大型真人密室逃脱游戏场所，致力于打造最全面的融合紧张刺激，需要玩家在房间中寻找线索，通过合作找出所有线索，交流和思考解开全部谜题，一步一步的走近最终答案，最终逃出密室。<br>绝对属于高科技范儿的密室逃脱，连实景岩洞、水池皮划都能在神秘屋里体验到。解开谜题的钥匙可能藏在任何物件里，有可能你身上穿的衣服也能帮你逃出牢笼。</p>\n<h2 id=\"7-1-人均消费：140元\"><a href=\"#7-1-人均消费：140元\" class=\"headerlink\" title=\"7.1. 人均消费：140元\"></a>7.1. 人均消费：140元</h2><h2 id=\"7-2-路线\"><a href=\"#7-2-路线\" class=\"headerlink\" title=\"7.2. 路线\"></a>7.2. 路线</h2><ul>\n<li>地址：朝阳区 工体北路13号世茂广场·工三 2层(工体北门对面)。</li>\n<li>营业时间：10:00—2:20(22:30之后来店需提前电话咨询)</li>\n<li>电话：4008598298。</li>\n</ul>\n<h1 id=\"8-北京自然博物馆\"><a href=\"#8-北京自然博物馆\" class=\"headerlink\" title=\"8. 北京自然博物馆\"></a>8. 北京自然博物馆</h1><p>如果不知道该如何打发时间，就来位于天桥南侧的北京自然博物馆吧~ 里面有各种动、植物标本、恐龙骨架、人体知识、小小水族馆….在这里，时间仿佛是静止的，不知孩子，大人也能玩的不亦乐乎~<br>有恐龙的化石骨骼，有恐龙的仿真模型，那些模型十分逼真，甚至有的还可以发出恐龙的叫声~<br>还有小小的海洋世界，没有太平洋富国海底世界那么大，只是一个不大的走廊，但是你也可以看到很多的海洋动植物~ 如果小朋友来这里，真的能疯玩一整天！</p>\n<h2 id=\"8-1-门票：门票免费，至少需提前一天预约，不能预约当日参观门票\"><a href=\"#8-1-门票：门票免费，至少需提前一天预约，不能预约当日参观门票\" class=\"headerlink\" title=\"8.1. 门票：门票免费，至少需提前一天预约，不能预约当日参观门票\"></a>8.1. 门票：门票免费，至少需提前一天预约，不能预约当日参观门票</h2><h2 id=\"8-2-路线\"><a href=\"#8-2-路线\" class=\"headerlink\" title=\"8.2. 路线\"></a>8.2. 路线</h2><ul>\n<li>地址：北京市东城区天桥南大街126号</li>\n<li>公交7路, 17路, 20路, 35路, 36路, 69路, 71路, 72路<code>天桥西门</code>下车</li>\n<li>地铁：地铁7号线 <code>珠市口站</code></li>\n</ul>\n<h1 id=\"9-地质博物馆\"><a href=\"#9-地质博物馆\" class=\"headerlink\" title=\"9. 地质博物馆\"></a>9. 地质博物馆</h1><p>中国地质博物馆是<code>中国成立最早的地质学博物馆</code>，创建于1916年，以其典藏系统、成果丰硕、陈列精美称雄于亚洲同类博物馆，并且在世界范围内享有盛誉。<br>中国地质博物馆收藏地质标本20余万件，涵盖地学各个领域。其中有蜚声海内外的<code>巨型山东龙</code>、<code>中华龙鸟等恐龙系列化石</code>，<code>北京人</code>、<code>元谋人</code>、<code>山顶洞人</code>等著名古人类化石等。</p>\n<h2 id=\"9-1-门票：30元\"><a href=\"#9-1-门票：30元\" class=\"headerlink\" title=\"9.1. 门票：30元\"></a>9.1. 门票：30元</h2><h2 id=\"9-2-乘车线路：\"><a href=\"#9-2-乘车线路：\" class=\"headerlink\" title=\"9.2. 乘车线路：\"></a>9.2. 乘车线路：</h2><p>市内交通：乘13、22、38、47、68、101、102、103、105、109、124、409、603、709、726、806、808、812、814、823、826、846、850路公共汽车西四站下</p>\n<h1 id=\"10-世界花卉大观园\"><a href=\"#10-世界花卉大观园\" class=\"headerlink\" title=\"10. 世界花卉大观园\"></a>10. 世界花卉大观园</h1><p>世界花卉大观园位于北京南四环辅路北侧，京开公路东侧，全园41.8公顷，是<code>北京市四环以内最大的植物园</code>。<br>世界花卉大观园景观由<code>七大温室</code>和<code>十五个花园广场</code>组成。各温室内的植物千奇百怪、花锦簇。<br>热带植物馆中有数百年的佛肚树、重阳木、古榕树等乔木1800余种；沙生植物温室有上百种仙人掌、仙人球；精品花卉厅有生动风趣的植物生肖园、精品盆景园等等。</p>\n<h2 id=\"10-1-门票：60元\"><a href=\"#10-1-门票：60元\" class=\"headerlink\" title=\"10.1. 门票：60元\"></a>10.1. 门票：60元</h2><h2 id=\"10-2-乘车线路：\"><a href=\"#10-2-乘车线路：\" class=\"headerlink\" title=\"10.2. 乘车线路：\"></a>10.2. 乘车线路：</h2><p>4号线<code>公益西桥站</code>下车换乘646路到<code>世界花卉大观园站</code>下车。</p>"},{"title":"大数据02-01 linux命令继续学习.md","toc":true,"date":"2017-10-29T14:30:38.000Z","scaffolds":null,"_content":"# 1. vmare克隆后修改地址问题\n解决克隆后eth0不见的问题\n\n直接修改  /etc/sysconfig/network-script/ifcfg-eth0 \n删掉UUID  HWADDR\n配置静态地址\n然后：\n修改 /etc/udev/rules.d/70-persistent-net.rules\n然后 reboot\n<!--more-->\n# 2. linux命令继续学习\n## 2.1. 查看文件内容\ncat    somefile    一次性将文件内容全部输出（控制台）\nmore   somefile     可以翻页查看, 下翻一页(空格)    上翻一页（b）   退出（q）\nless   somefile      可以翻页查看,下翻一页(空格)    上翻一页（b），上翻一行(↑)  下翻一行（↓）  可以搜索关键字（/keyword）\n\ntail -10  install.log   查看文件尾部的10行\ntail -f install.log    小f跟踪文件的唯一inode号，就算文件改名后，还是跟踪原来这个inode表示的文件\ntail -F install.log    大F按照文件名来跟踪\n\nhead -10  install.log   查看文件头部的10行\n\n## 2.2. 后台服务管理\nservice network status   查看指定服务的状态\nservice network stop     停止指定服务\nservice network start    启动指定服务\nservice network restart  重启指定服务\nservice --status-all  查看系统中所有的后台服务\n\n## 2.3. 设置后台服务的自启配置\nchkconfig   查看所有服务器自启配置\nchkconfig iptables off   关掉指定服务的自动启动\nchkconfig iptables on   开启指定服务的自动启动\n\n## 2.4. 系统启动级别管理\nvi  /etc/inittab\n```\n# Default runlevel. The runlevels used are:\n#   0 - halt (Do NOT set initdefault to this)\n#   1 - Single user mode\n#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)\n#   3 - Full multiuser mode\n#   4 - unused\n#   5 - X11\n#   6 - reboot (Do NOT set initdefault to this)\n#\nid:3:initdefault:\n```\n\n# 3. 软件安装\n\n\n\n## 3.1. 如何上传安装包到服务器\n\n- 可以使用图形化工具，如： filezilla\n- 可以使用sftp工具：  alt+p 调出后，用put命令上传\n上传（如果不cd指定目录，则上传到当前用户的主目录）：\n```\nsftp> cd /home/   \nsftp> put C:\\Users\\Administrator\\Desktop\\day02\\soft\\jdk-7u45-linux-x64.tar.gz\n```\n下载（lcd[local cd]指定下载到本地的目标路径）\n```\nsftp> lcd d:/                            \nsftp> get /home/jdk-7u45-linux-x64.tar.gz\n```\n\n- lrzsz\n\n\n## 3.2. 安装jdk\n### 3.2.1. 压缩解压缩的相关命令\n压缩解压缩\n\n    root@mini1 ~]# gzip access.log \n    [root@mini1 ~]# ll\n    总用量 134892\n    -rw-r--r--. 1 root root        68 4月   3 17:37 access.log.gz\n\n解压gz文件：  ```gzip -d access.log.gz```\n\n### 3.2.2. 打包解包\n```\n[root@mini1 ~]# tar -cvf myfirsttarball.tar aaa/\naaa/\naaa/2.txt\naaa/3.txt\naaa/1.txt\n```\n解包：\n```\n[root@mini1 ~]# tar -xvf myfirsttarball.tar \naaa/\naaa/2.txt\naaa/3.txt\naaa/1.txt\n```\n\n### 3.2.3. 一次性完成打包&&压缩的操作\n产生压缩包：\n```\n[root@mini1 ~]# tar -zcvf my.tar.gz aaa/\naaa/\naaa/2.txt\naaa/3.txt\naaa/1.txt\n```\n\n解压缩包：\n```\n[root@mini1 ~]# tar -zxvf my.tar.gz \naaa/\naaa/2.txt\naaa/3.txt\naaa/1.txt\n```\n\n\n### 3.2.4. 安装jdk的过程：\n- 解压安装包\n\n    tar -zxvf jdk-7u45-linux-x64.tar.gz -C apps/\n- 然后修改环境变量\n\n    vi /etc/profile  \n    在文件最后添加\n    export JAVA_HOME=/root/apps/jdk1.7.0_45\n    export PATH=$PATH:$JAVA_HOME/bin\n    保存退出\n\n- 然后重新加载环境变量 \n\n    source /etc/profile\n\n\n\n## 3.3. 安装rpm包软件，如mysql\n### 3.3.1. 查看系统中安装的rpm包\n\n    rpm -qa | grep mysql\n\n### 3.3.2. 上传rpm安装包\n\n    MySQL-client-5.5.48-1.linux2.6.x86_64.rpm\n    MySQL-server-5.5.48-1.linux2.6.x86_64.rpm\n    per * .rpm\n\n### 3.3.3. 安装perl依赖\n\n    rpm -ivh perl*\n_可能会提示有包冲突，解决： rpm -e 冲突包名 --nodeps_\n\n### 3.3.4. 安装server\n\n    rpm -ivh MySQL-server-5.5.48-1.linux2.6.x86_64.rpm\n    \n如果成功，会看到进度条，最后，有关于root密码设置的提示，一定要记下来\n这个版本的提示是，先启动server\n\n    service mysql start\n    \n然后```/usr/bin/mysql_secure_installation``` 命令去交互式修改root密码\n\n### 3.3.5. 修改密码时，提示需要先安装client\n\n    rpm -ivh MySQL-client-5.5.48-1.linux2.6.x86_64.rpm\n\n客户端安装成功后，记得还要用/usr/bin/mysql_secure_installation 命令去交互式修改root密码\n\n### 3.3.6. 登录验证\n\n    mysql -uroot -proot","source":"_posts/大数据/大数据02-01 linux命令继续学习.md","raw":"---\ntitle: 大数据02-01 linux命令继续学习.md\ncategories: 大数据学习笔记\ntags: [大数据,linux,linux命令]\ntoc: true\ndate: 2017-10-29 22:30:38\nscaffolds:\n---\n# 1. vmare克隆后修改地址问题\n解决克隆后eth0不见的问题\n\n直接修改  /etc/sysconfig/network-script/ifcfg-eth0 \n删掉UUID  HWADDR\n配置静态地址\n然后：\n修改 /etc/udev/rules.d/70-persistent-net.rules\n然后 reboot\n<!--more-->\n# 2. linux命令继续学习\n## 2.1. 查看文件内容\ncat    somefile    一次性将文件内容全部输出（控制台）\nmore   somefile     可以翻页查看, 下翻一页(空格)    上翻一页（b）   退出（q）\nless   somefile      可以翻页查看,下翻一页(空格)    上翻一页（b），上翻一行(↑)  下翻一行（↓）  可以搜索关键字（/keyword）\n\ntail -10  install.log   查看文件尾部的10行\ntail -f install.log    小f跟踪文件的唯一inode号，就算文件改名后，还是跟踪原来这个inode表示的文件\ntail -F install.log    大F按照文件名来跟踪\n\nhead -10  install.log   查看文件头部的10行\n\n## 2.2. 后台服务管理\nservice network status   查看指定服务的状态\nservice network stop     停止指定服务\nservice network start    启动指定服务\nservice network restart  重启指定服务\nservice --status-all  查看系统中所有的后台服务\n\n## 2.3. 设置后台服务的自启配置\nchkconfig   查看所有服务器自启配置\nchkconfig iptables off   关掉指定服务的自动启动\nchkconfig iptables on   开启指定服务的自动启动\n\n## 2.4. 系统启动级别管理\nvi  /etc/inittab\n```\n# Default runlevel. The runlevels used are:\n#   0 - halt (Do NOT set initdefault to this)\n#   1 - Single user mode\n#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)\n#   3 - Full multiuser mode\n#   4 - unused\n#   5 - X11\n#   6 - reboot (Do NOT set initdefault to this)\n#\nid:3:initdefault:\n```\n\n# 3. 软件安装\n\n\n\n## 3.1. 如何上传安装包到服务器\n\n- 可以使用图形化工具，如： filezilla\n- 可以使用sftp工具：  alt+p 调出后，用put命令上传\n上传（如果不cd指定目录，则上传到当前用户的主目录）：\n```\nsftp> cd /home/   \nsftp> put C:\\Users\\Administrator\\Desktop\\day02\\soft\\jdk-7u45-linux-x64.tar.gz\n```\n下载（lcd[local cd]指定下载到本地的目标路径）\n```\nsftp> lcd d:/                            \nsftp> get /home/jdk-7u45-linux-x64.tar.gz\n```\n\n- lrzsz\n\n\n## 3.2. 安装jdk\n### 3.2.1. 压缩解压缩的相关命令\n压缩解压缩\n\n    root@mini1 ~]# gzip access.log \n    [root@mini1 ~]# ll\n    总用量 134892\n    -rw-r--r--. 1 root root        68 4月   3 17:37 access.log.gz\n\n解压gz文件：  ```gzip -d access.log.gz```\n\n### 3.2.2. 打包解包\n```\n[root@mini1 ~]# tar -cvf myfirsttarball.tar aaa/\naaa/\naaa/2.txt\naaa/3.txt\naaa/1.txt\n```\n解包：\n```\n[root@mini1 ~]# tar -xvf myfirsttarball.tar \naaa/\naaa/2.txt\naaa/3.txt\naaa/1.txt\n```\n\n### 3.2.3. 一次性完成打包&&压缩的操作\n产生压缩包：\n```\n[root@mini1 ~]# tar -zcvf my.tar.gz aaa/\naaa/\naaa/2.txt\naaa/3.txt\naaa/1.txt\n```\n\n解压缩包：\n```\n[root@mini1 ~]# tar -zxvf my.tar.gz \naaa/\naaa/2.txt\naaa/3.txt\naaa/1.txt\n```\n\n\n### 3.2.4. 安装jdk的过程：\n- 解压安装包\n\n    tar -zxvf jdk-7u45-linux-x64.tar.gz -C apps/\n- 然后修改环境变量\n\n    vi /etc/profile  \n    在文件最后添加\n    export JAVA_HOME=/root/apps/jdk1.7.0_45\n    export PATH=$PATH:$JAVA_HOME/bin\n    保存退出\n\n- 然后重新加载环境变量 \n\n    source /etc/profile\n\n\n\n## 3.3. 安装rpm包软件，如mysql\n### 3.3.1. 查看系统中安装的rpm包\n\n    rpm -qa | grep mysql\n\n### 3.3.2. 上传rpm安装包\n\n    MySQL-client-5.5.48-1.linux2.6.x86_64.rpm\n    MySQL-server-5.5.48-1.linux2.6.x86_64.rpm\n    per * .rpm\n\n### 3.3.3. 安装perl依赖\n\n    rpm -ivh perl*\n_可能会提示有包冲突，解决： rpm -e 冲突包名 --nodeps_\n\n### 3.3.4. 安装server\n\n    rpm -ivh MySQL-server-5.5.48-1.linux2.6.x86_64.rpm\n    \n如果成功，会看到进度条，最后，有关于root密码设置的提示，一定要记下来\n这个版本的提示是，先启动server\n\n    service mysql start\n    \n然后```/usr/bin/mysql_secure_installation``` 命令去交互式修改root密码\n\n### 3.3.5. 修改密码时，提示需要先安装client\n\n    rpm -ivh MySQL-client-5.5.48-1.linux2.6.x86_64.rpm\n\n客户端安装成功后，记得还要用/usr/bin/mysql_secure_installation 命令去交互式修改root密码\n\n### 3.3.6. 登录验证\n\n    mysql -uroot -proot","slug":"大数据/大数据02-01 linux命令继续学习","published":1,"updated":"2018-02-06T07:48:38.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89yf000cv4vf8591qnha","content":"<h1 id=\"1-vmare克隆后修改地址问题\"><a href=\"#1-vmare克隆后修改地址问题\" class=\"headerlink\" title=\"1. vmare克隆后修改地址问题\"></a>1. vmare克隆后修改地址问题</h1><p>解决克隆后eth0不见的问题</p>\n<p>直接修改  /etc/sysconfig/network-script/ifcfg-eth0<br>删掉UUID  HWADDR<br>配置静态地址<br>然后：<br>修改 /etc/udev/rules.d/70-persistent-net.rules<br>然后 reboot<br><a id=\"more\"></a></p>\n<h1 id=\"2-linux命令继续学习\"><a href=\"#2-linux命令继续学习\" class=\"headerlink\" title=\"2. linux命令继续学习\"></a>2. linux命令继续学习</h1><h2 id=\"2-1-查看文件内容\"><a href=\"#2-1-查看文件内容\" class=\"headerlink\" title=\"2.1. 查看文件内容\"></a>2.1. 查看文件内容</h2><p>cat    somefile    一次性将文件内容全部输出（控制台）<br>more   somefile     可以翻页查看, 下翻一页(空格)    上翻一页（b）   退出（q）<br>less   somefile      可以翻页查看,下翻一页(空格)    上翻一页（b），上翻一行(↑)  下翻一行（↓）  可以搜索关键字（/keyword）</p>\n<p>tail -10  install.log   查看文件尾部的10行<br>tail -f install.log    小f跟踪文件的唯一inode号，就算文件改名后，还是跟踪原来这个inode表示的文件<br>tail -F install.log    大F按照文件名来跟踪</p>\n<p>head -10  install.log   查看文件头部的10行</p>\n<h2 id=\"2-2-后台服务管理\"><a href=\"#2-2-后台服务管理\" class=\"headerlink\" title=\"2.2. 后台服务管理\"></a>2.2. 后台服务管理</h2><p>service network status   查看指定服务的状态<br>service network stop     停止指定服务<br>service network start    启动指定服务<br>service network restart  重启指定服务<br>service –status-all  查看系统中所有的后台服务</p>\n<h2 id=\"2-3-设置后台服务的自启配置\"><a href=\"#2-3-设置后台服务的自启配置\" class=\"headerlink\" title=\"2.3. 设置后台服务的自启配置\"></a>2.3. 设置后台服务的自启配置</h2><p>chkconfig   查看所有服务器自启配置<br>chkconfig iptables off   关掉指定服务的自动启动<br>chkconfig iptables on   开启指定服务的自动启动</p>\n<h2 id=\"2-4-系统启动级别管理\"><a href=\"#2-4-系统启动级别管理\" class=\"headerlink\" title=\"2.4. 系统启动级别管理\"></a>2.4. 系统启动级别管理</h2><p>vi  /etc/inittab<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Default runlevel. The runlevels used are:</div><div class=\"line\">#   0 - halt (Do NOT set initdefault to this)</div><div class=\"line\">#   1 - Single user mode</div><div class=\"line\">#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)</div><div class=\"line\">#   3 - Full multiuser mode</div><div class=\"line\">#   4 - unused</div><div class=\"line\">#   5 - X11</div><div class=\"line\">#   6 - reboot (Do NOT set initdefault to this)</div><div class=\"line\">#</div><div class=\"line\">id:3:initdefault:</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-软件安装\"><a href=\"#3-软件安装\" class=\"headerlink\" title=\"3. 软件安装\"></a>3. 软件安装</h1><h2 id=\"3-1-如何上传安装包到服务器\"><a href=\"#3-1-如何上传安装包到服务器\" class=\"headerlink\" title=\"3.1. 如何上传安装包到服务器\"></a>3.1. 如何上传安装包到服务器</h2><ul>\n<li>可以使用图形化工具，如： filezilla</li>\n<li>可以使用sftp工具：  alt+p 调出后，用put命令上传<br>上传（如果不cd指定目录，则上传到当前用户的主目录）：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sftp&gt; cd /home/   </div><div class=\"line\">sftp&gt; put C:\\Users\\Administrator\\Desktop\\day02\\soft\\jdk-7u45-linux-x64.tar.gz</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>下载（lcd[local cd]指定下载到本地的目标路径）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sftp&gt; lcd d:/                            </div><div class=\"line\">sftp&gt; get /home/jdk-7u45-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>\n<ul>\n<li>lrzsz</li>\n</ul>\n<h2 id=\"3-2-安装jdk\"><a href=\"#3-2-安装jdk\" class=\"headerlink\" title=\"3.2. 安装jdk\"></a>3.2. 安装jdk</h2><h3 id=\"3-2-1-压缩解压缩的相关命令\"><a href=\"#3-2-1-压缩解压缩的相关命令\" class=\"headerlink\" title=\"3.2.1. 压缩解压缩的相关命令\"></a>3.2.1. 压缩解压缩的相关命令</h3><p>压缩解压缩</p>\n<pre><code>root@mini1 ~]# gzip access.log \n[root@mini1 ~]# ll\n总用量 134892\n-rw-r--r--. 1 root root        68 4月   3 17:37 access.log.gz\n</code></pre><p>解压gz文件：  <figure class=\"highlight plain\"><figcaption><span>-d access.log.gz```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 3.2.2. 打包解包</div></pre></td></tr></table></figure></p>\n<p>[root@mini1 ~]# tar -cvf myfirsttarball.tar aaa/<br>aaa/<br>aaa/2.txt<br>aaa/3.txt<br>aaa/1.txt<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">解包：</div></pre></td></tr></table></figure></p>\n<p>[root@mini1 ~]# tar -xvf myfirsttarball.tar<br>aaa/<br>aaa/2.txt<br>aaa/3.txt<br>aaa/1.txt<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 3.2.3. 一次性完成打包&amp;&amp;压缩的操作</div><div class=\"line\">产生压缩包：</div></pre></td></tr></table></figure></p>\n<p>[root@mini1 ~]# tar -zcvf my.tar.gz aaa/<br>aaa/<br>aaa/2.txt<br>aaa/3.txt<br>aaa/1.txt<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">解压缩包：</div></pre></td></tr></table></figure></p>\n<p>[root@mini1 ~]# tar -zxvf my.tar.gz<br>aaa/<br>aaa/2.txt<br>aaa/3.txt<br>aaa/1.txt<br>```</p>\n<h3 id=\"3-2-4-安装jdk的过程：\"><a href=\"#3-2-4-安装jdk的过程：\" class=\"headerlink\" title=\"3.2.4. 安装jdk的过程：\"></a>3.2.4. 安装jdk的过程：</h3><ul>\n<li><p>解压安装包</p>\n<p>  tar -zxvf jdk-7u45-linux-x64.tar.gz -C apps/</p>\n</li>\n<li><p>然后修改环境变量</p>\n<p>  vi /etc/profile<br>  在文件最后添加<br>  export JAVA_HOME=/root/apps/jdk1.7.0_45<br>  export PATH=$PATH:$JAVA_HOME/bin<br>  保存退出</p>\n</li>\n<li><p>然后重新加载环境变量 </p>\n<p>  source /etc/profile</p>\n</li>\n</ul>\n<h2 id=\"3-3-安装rpm包软件，如mysql\"><a href=\"#3-3-安装rpm包软件，如mysql\" class=\"headerlink\" title=\"3.3. 安装rpm包软件，如mysql\"></a>3.3. 安装rpm包软件，如mysql</h2><h3 id=\"3-3-1-查看系统中安装的rpm包\"><a href=\"#3-3-1-查看系统中安装的rpm包\" class=\"headerlink\" title=\"3.3.1. 查看系统中安装的rpm包\"></a>3.3.1. 查看系统中安装的rpm包</h3><pre><code>rpm -qa | grep mysql\n</code></pre><h3 id=\"3-3-2-上传rpm安装包\"><a href=\"#3-3-2-上传rpm安装包\" class=\"headerlink\" title=\"3.3.2. 上传rpm安装包\"></a>3.3.2. 上传rpm安装包</h3><pre><code>MySQL-client-5.5.48-1.linux2.6.x86_64.rpm\nMySQL-server-5.5.48-1.linux2.6.x86_64.rpm\nper * .rpm\n</code></pre><h3 id=\"3-3-3-安装perl依赖\"><a href=\"#3-3-3-安装perl依赖\" class=\"headerlink\" title=\"3.3.3. 安装perl依赖\"></a>3.3.3. 安装perl依赖</h3><pre><code>rpm -ivh perl*\n</code></pre><p><em>可能会提示有包冲突，解决： rpm -e 冲突包名 –nodeps</em></p>\n<h3 id=\"3-3-4-安装server\"><a href=\"#3-3-4-安装server\" class=\"headerlink\" title=\"3.3.4. 安装server\"></a>3.3.4. 安装server</h3><pre><code>rpm -ivh MySQL-server-5.5.48-1.linux2.6.x86_64.rpm\n</code></pre><p>如果成功，会看到进度条，最后，有关于root密码设置的提示，一定要记下来<br>这个版本的提示是，先启动server</p>\n<pre><code>service mysql start\n</code></pre><p>然后<code>/usr/bin/mysql_secure_installation</code> 命令去交互式修改root密码</p>\n<h3 id=\"3-3-5-修改密码时，提示需要先安装client\"><a href=\"#3-3-5-修改密码时，提示需要先安装client\" class=\"headerlink\" title=\"3.3.5. 修改密码时，提示需要先安装client\"></a>3.3.5. 修改密码时，提示需要先安装client</h3><pre><code>rpm -ivh MySQL-client-5.5.48-1.linux2.6.x86_64.rpm\n</code></pre><p>客户端安装成功后，记得还要用/usr/bin/mysql_secure_installation 命令去交互式修改root密码</p>\n<h3 id=\"3-3-6-登录验证\"><a href=\"#3-3-6-登录验证\" class=\"headerlink\" title=\"3.3.6. 登录验证\"></a>3.3.6. 登录验证</h3><pre><code>mysql -uroot -proot\n</code></pre>","site":{"data":{}},"excerpt":"<h1 id=\"1-vmare克隆后修改地址问题\"><a href=\"#1-vmare克隆后修改地址问题\" class=\"headerlink\" title=\"1. vmare克隆后修改地址问题\"></a>1. vmare克隆后修改地址问题</h1><p>解决克隆后eth0不见的问题</p>\n<p>直接修改  /etc/sysconfig/network-script/ifcfg-eth0<br>删掉UUID  HWADDR<br>配置静态地址<br>然后：<br>修改 /etc/udev/rules.d/70-persistent-net.rules<br>然后 reboot<br>","more":"</p>\n<h1 id=\"2-linux命令继续学习\"><a href=\"#2-linux命令继续学习\" class=\"headerlink\" title=\"2. linux命令继续学习\"></a>2. linux命令继续学习</h1><h2 id=\"2-1-查看文件内容\"><a href=\"#2-1-查看文件内容\" class=\"headerlink\" title=\"2.1. 查看文件内容\"></a>2.1. 查看文件内容</h2><p>cat    somefile    一次性将文件内容全部输出（控制台）<br>more   somefile     可以翻页查看, 下翻一页(空格)    上翻一页（b）   退出（q）<br>less   somefile      可以翻页查看,下翻一页(空格)    上翻一页（b），上翻一行(↑)  下翻一行（↓）  可以搜索关键字（/keyword）</p>\n<p>tail -10  install.log   查看文件尾部的10行<br>tail -f install.log    小f跟踪文件的唯一inode号，就算文件改名后，还是跟踪原来这个inode表示的文件<br>tail -F install.log    大F按照文件名来跟踪</p>\n<p>head -10  install.log   查看文件头部的10行</p>\n<h2 id=\"2-2-后台服务管理\"><a href=\"#2-2-后台服务管理\" class=\"headerlink\" title=\"2.2. 后台服务管理\"></a>2.2. 后台服务管理</h2><p>service network status   查看指定服务的状态<br>service network stop     停止指定服务<br>service network start    启动指定服务<br>service network restart  重启指定服务<br>service –status-all  查看系统中所有的后台服务</p>\n<h2 id=\"2-3-设置后台服务的自启配置\"><a href=\"#2-3-设置后台服务的自启配置\" class=\"headerlink\" title=\"2.3. 设置后台服务的自启配置\"></a>2.3. 设置后台服务的自启配置</h2><p>chkconfig   查看所有服务器自启配置<br>chkconfig iptables off   关掉指定服务的自动启动<br>chkconfig iptables on   开启指定服务的自动启动</p>\n<h2 id=\"2-4-系统启动级别管理\"><a href=\"#2-4-系统启动级别管理\" class=\"headerlink\" title=\"2.4. 系统启动级别管理\"></a>2.4. 系统启动级别管理</h2><p>vi  /etc/inittab<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Default runlevel. The runlevels used are:</div><div class=\"line\">#   0 - halt (Do NOT set initdefault to this)</div><div class=\"line\">#   1 - Single user mode</div><div class=\"line\">#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)</div><div class=\"line\">#   3 - Full multiuser mode</div><div class=\"line\">#   4 - unused</div><div class=\"line\">#   5 - X11</div><div class=\"line\">#   6 - reboot (Do NOT set initdefault to this)</div><div class=\"line\">#</div><div class=\"line\">id:3:initdefault:</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-软件安装\"><a href=\"#3-软件安装\" class=\"headerlink\" title=\"3. 软件安装\"></a>3. 软件安装</h1><h2 id=\"3-1-如何上传安装包到服务器\"><a href=\"#3-1-如何上传安装包到服务器\" class=\"headerlink\" title=\"3.1. 如何上传安装包到服务器\"></a>3.1. 如何上传安装包到服务器</h2><ul>\n<li>可以使用图形化工具，如： filezilla</li>\n<li>可以使用sftp工具：  alt+p 调出后，用put命令上传<br>上传（如果不cd指定目录，则上传到当前用户的主目录）：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sftp&gt; cd /home/   </div><div class=\"line\">sftp&gt; put C:\\Users\\Administrator\\Desktop\\day02\\soft\\jdk-7u45-linux-x64.tar.gz</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>下载（lcd[local cd]指定下载到本地的目标路径）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sftp&gt; lcd d:/                            </div><div class=\"line\">sftp&gt; get /home/jdk-7u45-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>\n<ul>\n<li>lrzsz</li>\n</ul>\n<h2 id=\"3-2-安装jdk\"><a href=\"#3-2-安装jdk\" class=\"headerlink\" title=\"3.2. 安装jdk\"></a>3.2. 安装jdk</h2><h3 id=\"3-2-1-压缩解压缩的相关命令\"><a href=\"#3-2-1-压缩解压缩的相关命令\" class=\"headerlink\" title=\"3.2.1. 压缩解压缩的相关命令\"></a>3.2.1. 压缩解压缩的相关命令</h3><p>压缩解压缩</p>\n<pre><code>root@mini1 ~]# gzip access.log \n[root@mini1 ~]# ll\n总用量 134892\n-rw-r--r--. 1 root root        68 4月   3 17:37 access.log.gz\n</code></pre><p>解压gz文件：  <figure class=\"highlight plain\"><figcaption><span>-d access.log.gz```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 3.2.2. 打包解包</div></pre></td></tr></table></figure></p>\n<p>[root@mini1 ~]# tar -cvf myfirsttarball.tar aaa/<br>aaa/<br>aaa/2.txt<br>aaa/3.txt<br>aaa/1.txt<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">解包：</div></pre></td></tr></table></figure></p>\n<p>[root@mini1 ~]# tar -xvf myfirsttarball.tar<br>aaa/<br>aaa/2.txt<br>aaa/3.txt<br>aaa/1.txt<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 3.2.3. 一次性完成打包&amp;&amp;压缩的操作</div><div class=\"line\">产生压缩包：</div></pre></td></tr></table></figure></p>\n<p>[root@mini1 ~]# tar -zcvf my.tar.gz aaa/<br>aaa/<br>aaa/2.txt<br>aaa/3.txt<br>aaa/1.txt<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">解压缩包：</div></pre></td></tr></table></figure></p>\n<p>[root@mini1 ~]# tar -zxvf my.tar.gz<br>aaa/<br>aaa/2.txt<br>aaa/3.txt<br>aaa/1.txt<br>```</p>\n<h3 id=\"3-2-4-安装jdk的过程：\"><a href=\"#3-2-4-安装jdk的过程：\" class=\"headerlink\" title=\"3.2.4. 安装jdk的过程：\"></a>3.2.4. 安装jdk的过程：</h3><ul>\n<li><p>解压安装包</p>\n<p>  tar -zxvf jdk-7u45-linux-x64.tar.gz -C apps/</p>\n</li>\n<li><p>然后修改环境变量</p>\n<p>  vi /etc/profile<br>  在文件最后添加<br>  export JAVA_HOME=/root/apps/jdk1.7.0_45<br>  export PATH=$PATH:$JAVA_HOME/bin<br>  保存退出</p>\n</li>\n<li><p>然后重新加载环境变量 </p>\n<p>  source /etc/profile</p>\n</li>\n</ul>\n<h2 id=\"3-3-安装rpm包软件，如mysql\"><a href=\"#3-3-安装rpm包软件，如mysql\" class=\"headerlink\" title=\"3.3. 安装rpm包软件，如mysql\"></a>3.3. 安装rpm包软件，如mysql</h2><h3 id=\"3-3-1-查看系统中安装的rpm包\"><a href=\"#3-3-1-查看系统中安装的rpm包\" class=\"headerlink\" title=\"3.3.1. 查看系统中安装的rpm包\"></a>3.3.1. 查看系统中安装的rpm包</h3><pre><code>rpm -qa | grep mysql\n</code></pre><h3 id=\"3-3-2-上传rpm安装包\"><a href=\"#3-3-2-上传rpm安装包\" class=\"headerlink\" title=\"3.3.2. 上传rpm安装包\"></a>3.3.2. 上传rpm安装包</h3><pre><code>MySQL-client-5.5.48-1.linux2.6.x86_64.rpm\nMySQL-server-5.5.48-1.linux2.6.x86_64.rpm\nper * .rpm\n</code></pre><h3 id=\"3-3-3-安装perl依赖\"><a href=\"#3-3-3-安装perl依赖\" class=\"headerlink\" title=\"3.3.3. 安装perl依赖\"></a>3.3.3. 安装perl依赖</h3><pre><code>rpm -ivh perl*\n</code></pre><p><em>可能会提示有包冲突，解决： rpm -e 冲突包名 –nodeps</em></p>\n<h3 id=\"3-3-4-安装server\"><a href=\"#3-3-4-安装server\" class=\"headerlink\" title=\"3.3.4. 安装server\"></a>3.3.4. 安装server</h3><pre><code>rpm -ivh MySQL-server-5.5.48-1.linux2.6.x86_64.rpm\n</code></pre><p>如果成功，会看到进度条，最后，有关于root密码设置的提示，一定要记下来<br>这个版本的提示是，先启动server</p>\n<pre><code>service mysql start\n</code></pre><p>然后<code>/usr/bin/mysql_secure_installation</code> 命令去交互式修改root密码</p>\n<h3 id=\"3-3-5-修改密码时，提示需要先安装client\"><a href=\"#3-3-5-修改密码时，提示需要先安装client\" class=\"headerlink\" title=\"3.3.5. 修改密码时，提示需要先安装client\"></a>3.3.5. 修改密码时，提示需要先安装client</h3><pre><code>rpm -ivh MySQL-client-5.5.48-1.linux2.6.x86_64.rpm\n</code></pre><p>客户端安装成功后，记得还要用/usr/bin/mysql_secure_installation 命令去交互式修改root密码</p>\n<h3 id=\"3-3-6-登录验证\"><a href=\"#3-3-6-登录验证\" class=\"headerlink\" title=\"3.3.6. 登录验证\"></a>3.3.6. 登录验证</h3><pre><code>mysql -uroot -proot\n</code></pre>"},{"title":"大数据02-01-1 linux本地yum库","toc":true,"date":"2017-11-14T13:58:01.000Z","scaffolds":null,"_content":"# 1. 本地yum仓库的安装配置\n## 1.1. 两种方式：  \n### 1.1.1. 每一台机器都配一个本地文件系统上的yum仓库 file:///packege/path/\n### 1.1.2. 在局域网内部配置一台节点(server-base)的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http://server-base/pagekege/path/\n<!-- more -->\n\n- 制作流程：  \n- 先挑选一台机器mini4，挂载一个系统光盘到本地目录/mnt/cdrom，\n- 然后启动一个httpd服务器，\n- 将/mnt/cdrom 软连接到httpd服务器的/var/www/html目录中 (cd /var/www/html; ln -s /mnt/cdrom ./centos )\n- 然后通过网页访问测试一下：  http://mini4/centos   会看到光盘的目录内容\n\n至此：网络版yum私有仓库已经建立完毕  \n剩下就是去各台yum的客户端配置这个http地址到repo配置文件中\n\t\t\t\n\n\t\t\t\n\n\t\t\t\n# 2. 无论哪种配置，都需要先将光盘挂在到本地文件目录中\n> mount -t iso9660 /dev/cdrom   /mnt/cdrom\n\n为了避免每次重启后都要手动mount，可以在/etc/fstab中加入一行挂载配置，即可自动挂载\n```\nvi  /etc/fstab\n/dev/cdrom              /mnt/cdrom              iso9660 defaults        0 0\t\t\n```\t\n\n# 3. minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖\n\nscp命令都没有：yum install -y openssh-clients\n每台机器上都要安装才行\n\n\n\t\t\t","source":"_posts/大数据/大数据02-01-1-linux本地yum库.md","raw":"---\ntitle: 大数据02-01-1 linux本地yum库\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - linux\n  - centos7\ntoc: true\ndate: 2017-11-14 21:58:01\nscaffolds:\n---\n# 1. 本地yum仓库的安装配置\n## 1.1. 两种方式：  \n### 1.1.1. 每一台机器都配一个本地文件系统上的yum仓库 file:///packege/path/\n### 1.1.2. 在局域网内部配置一台节点(server-base)的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http://server-base/pagekege/path/\n<!-- more -->\n\n- 制作流程：  \n- 先挑选一台机器mini4，挂载一个系统光盘到本地目录/mnt/cdrom，\n- 然后启动一个httpd服务器，\n- 将/mnt/cdrom 软连接到httpd服务器的/var/www/html目录中 (cd /var/www/html; ln -s /mnt/cdrom ./centos )\n- 然后通过网页访问测试一下：  http://mini4/centos   会看到光盘的目录内容\n\n至此：网络版yum私有仓库已经建立完毕  \n剩下就是去各台yum的客户端配置这个http地址到repo配置文件中\n\t\t\t\n\n\t\t\t\n\n\t\t\t\n# 2. 无论哪种配置，都需要先将光盘挂在到本地文件目录中\n> mount -t iso9660 /dev/cdrom   /mnt/cdrom\n\n为了避免每次重启后都要手动mount，可以在/etc/fstab中加入一行挂载配置，即可自动挂载\n```\nvi  /etc/fstab\n/dev/cdrom              /mnt/cdrom              iso9660 defaults        0 0\t\t\n```\t\n\n# 3. minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖\n\nscp命令都没有：yum install -y openssh-clients\n每台机器上都要安装才行\n\n\n\t\t\t","slug":"大数据/大数据02-01-1-linux本地yum库","published":1,"updated":"2018-02-06T07:48:56.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89yg000dv4vfqnaj691m","content":"<h1 id=\"1-本地yum仓库的安装配置\"><a href=\"#1-本地yum仓库的安装配置\" class=\"headerlink\" title=\"1. 本地yum仓库的安装配置\"></a>1. 本地yum仓库的安装配置</h1><h2 id=\"1-1-两种方式：\"><a href=\"#1-1-两种方式：\" class=\"headerlink\" title=\"1.1. 两种方式：\"></a>1.1. 两种方式：</h2><h3 id=\"1-1-1-每一台机器都配一个本地文件系统上的yum仓库-file-packege-path\"><a href=\"#1-1-1-每一台机器都配一个本地文件系统上的yum仓库-file-packege-path\" class=\"headerlink\" title=\"1.1.1. 每一台机器都配一个本地文件系统上的yum仓库 file:///packege/path/\"></a>1.1.1. 每一台机器都配一个本地文件系统上的yum仓库 file:///packege/path/</h3><h3 id=\"1-1-2-在局域网内部配置一台节点-server-base-的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http-server-base-pagekege-path\"><a href=\"#1-1-2-在局域网内部配置一台节点-server-base-的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http-server-base-pagekege-path\" class=\"headerlink\" title=\"1.1.2. 在局域网内部配置一台节点(server-base)的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http://server-base/pagekege/path/\"></a>1.1.2. 在局域网内部配置一台节点(server-base)的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过<a href=\"http://server-base/pagekege/path/\" target=\"_blank\" rel=\"external\">http://server-base/pagekege/path/</a></h3><a id=\"more\"></a>\n<ul>\n<li>制作流程：  </li>\n<li>先挑选一台机器mini4，挂载一个系统光盘到本地目录/mnt/cdrom，</li>\n<li>然后启动一个httpd服务器，</li>\n<li>将/mnt/cdrom 软连接到httpd服务器的/var/www/html目录中 (cd /var/www/html; ln -s /mnt/cdrom ./centos )</li>\n<li>然后通过网页访问测试一下：  <a href=\"http://mini4/centos\" target=\"_blank\" rel=\"external\">http://mini4/centos</a>   会看到光盘的目录内容</li>\n</ul>\n<p>至此：网络版yum私有仓库已经建立完毕<br>剩下就是去各台yum的客户端配置这个http地址到repo配置文件中</p>\n<h1 id=\"2-无论哪种配置，都需要先将光盘挂在到本地文件目录中\"><a href=\"#2-无论哪种配置，都需要先将光盘挂在到本地文件目录中\" class=\"headerlink\" title=\"2. 无论哪种配置，都需要先将光盘挂在到本地文件目录中\"></a>2. 无论哪种配置，都需要先将光盘挂在到本地文件目录中</h1><blockquote>\n<p>mount -t iso9660 /dev/cdrom   /mnt/cdrom</p>\n</blockquote>\n<p>为了避免每次重启后都要手动mount，可以在/etc/fstab中加入一行挂载配置，即可自动挂载</p>\n<pre><code>vi  /etc/fstab\n/dev/cdrom              /mnt/cdrom              iso9660 defaults        0 0\n</code></pre><h1 id=\"3-minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖\"><a href=\"#3-minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖\" class=\"headerlink\" title=\"3. minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖\"></a>3. minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖</h1><p>scp命令都没有：yum install -y openssh-clients<br>每台机器上都要安装才行</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-本地yum仓库的安装配置\"><a href=\"#1-本地yum仓库的安装配置\" class=\"headerlink\" title=\"1. 本地yum仓库的安装配置\"></a>1. 本地yum仓库的安装配置</h1><h2 id=\"1-1-两种方式：\"><a href=\"#1-1-两种方式：\" class=\"headerlink\" title=\"1.1. 两种方式：\"></a>1.1. 两种方式：</h2><h3 id=\"1-1-1-每一台机器都配一个本地文件系统上的yum仓库-file-packege-path\"><a href=\"#1-1-1-每一台机器都配一个本地文件系统上的yum仓库-file-packege-path\" class=\"headerlink\" title=\"1.1.1. 每一台机器都配一个本地文件系统上的yum仓库 file:///packege/path/\"></a>1.1.1. 每一台机器都配一个本地文件系统上的yum仓库 file:///packege/path/</h3><h3 id=\"1-1-2-在局域网内部配置一台节点-server-base-的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http-server-base-pagekege-path\"><a href=\"#1-1-2-在局域网内部配置一台节点-server-base-的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http-server-base-pagekege-path\" class=\"headerlink\" title=\"1.1.2. 在局域网内部配置一台节点(server-base)的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过http://server-base/pagekege/path/\"></a>1.1.2. 在局域网内部配置一台节点(server-base)的本地文件系统yum仓库，然后将其发布到web服务器中，其他节点就可以通过<a href=\"http://server-base/pagekege/path/\" target=\"_blank\" rel=\"external\">http://server-base/pagekege/path/</a></h3>","more":"<ul>\n<li>制作流程：  </li>\n<li>先挑选一台机器mini4，挂载一个系统光盘到本地目录/mnt/cdrom，</li>\n<li>然后启动一个httpd服务器，</li>\n<li>将/mnt/cdrom 软连接到httpd服务器的/var/www/html目录中 (cd /var/www/html; ln -s /mnt/cdrom ./centos )</li>\n<li>然后通过网页访问测试一下：  <a href=\"http://mini4/centos\" target=\"_blank\" rel=\"external\">http://mini4/centos</a>   会看到光盘的目录内容</li>\n</ul>\n<p>至此：网络版yum私有仓库已经建立完毕<br>剩下就是去各台yum的客户端配置这个http地址到repo配置文件中</p>\n<h1 id=\"2-无论哪种配置，都需要先将光盘挂在到本地文件目录中\"><a href=\"#2-无论哪种配置，都需要先将光盘挂在到本地文件目录中\" class=\"headerlink\" title=\"2. 无论哪种配置，都需要先将光盘挂在到本地文件目录中\"></a>2. 无论哪种配置，都需要先将光盘挂在到本地文件目录中</h1><blockquote>\n<p>mount -t iso9660 /dev/cdrom   /mnt/cdrom</p>\n</blockquote>\n<p>为了避免每次重启后都要手动mount，可以在/etc/fstab中加入一行挂载配置，即可自动挂载</p>\n<pre><code>vi  /etc/fstab\n/dev/cdrom              /mnt/cdrom              iso9660 defaults        0 0\n</code></pre><h1 id=\"3-minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖\"><a href=\"#3-minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖\" class=\"headerlink\" title=\"3. minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖\"></a>3. minimal安装的系统出现的问题：缺各种命令，安装软件时缺各种依赖</h1><p>scp命令都没有：yum install -y openssh-clients<br>每台机器上都要安装才行</p>"},{"title":"大数据02-02 linux命令继续学习 yum","toc":true,"date":"2017-11-01T15:50:39.000Z","scaffolds":null,"_content":"# 1. YUM的常用命令\n\n安装httpd并确认安装\n```\nyum instll -y httpd\n```\n列出所有可用的package和package组\n```\nyum list\n```\n<!--more-->\n清除所有缓冲数据\n```\nyum clean all\n```\n列出一个包所有依赖的包\n```\nyum deplist httpd\n```\n删除httpd\n```\nyum remove httpd\n```\n# 2. 配置本地yum源\ncd /etc/yum.repos.d \n\n# 3. 安装jdk\n解压安装包\n> tar -zxvf jdk-7u45-linux-x64.tar.gz -C apps/\n\n然后修改环境变量\n> vi /etc/profile\n\n在文件最后添加\n```\nexport JAVA_HOME=/root/apps/jdk1.7.0_45\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n\n保存退出\n\n然后重新加载环境变量\n> source /etc/profile\n\n# 4. 装mysql\n# 5. 安装tomcat\n1. 上传tomcat包\n2. 解压\n3. 启动\n4. 测试访问\n","source":"_posts/大数据/大数据02-02-linux命令继续学习-yum.md","raw":"---\ntitle: 大数据02-02 linux命令继续学习 yum\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - linux\n  - centos7\n  - linux命令\ntoc: true\ndate: 2017-11-01 23:50:39\nscaffolds:\n---\n# 1. YUM的常用命令\n\n安装httpd并确认安装\n```\nyum instll -y httpd\n```\n列出所有可用的package和package组\n```\nyum list\n```\n<!--more-->\n清除所有缓冲数据\n```\nyum clean all\n```\n列出一个包所有依赖的包\n```\nyum deplist httpd\n```\n删除httpd\n```\nyum remove httpd\n```\n# 2. 配置本地yum源\ncd /etc/yum.repos.d \n\n# 3. 安装jdk\n解压安装包\n> tar -zxvf jdk-7u45-linux-x64.tar.gz -C apps/\n\n然后修改环境变量\n> vi /etc/profile\n\n在文件最后添加\n```\nexport JAVA_HOME=/root/apps/jdk1.7.0_45\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n\n保存退出\n\n然后重新加载环境变量\n> source /etc/profile\n\n# 4. 装mysql\n# 5. 安装tomcat\n1. 上传tomcat包\n2. 解压\n3. 启动\n4. 测试访问\n","slug":"大数据/大数据02-02-linux命令继续学习-yum","published":1,"updated":"2018-02-06T07:48:54.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89yj000gv4vfwwalev9j","content":"<h1 id=\"1-YUM的常用命令\"><a href=\"#1-YUM的常用命令\" class=\"headerlink\" title=\"1. YUM的常用命令\"></a>1. YUM的常用命令</h1><p>安装httpd并确认安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum instll -y httpd</div></pre></td></tr></table></figure></p>\n<p>列出所有可用的package和package组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum list</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>清除所有缓冲数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum clean all</div></pre></td></tr></table></figure></p>\n<p>列出一个包所有依赖的包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum deplist httpd</div></pre></td></tr></table></figure></p>\n<p>删除httpd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum remove httpd</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-配置本地yum源\"><a href=\"#2-配置本地yum源\" class=\"headerlink\" title=\"2. 配置本地yum源\"></a>2. 配置本地yum源</h1><p>cd /etc/yum.repos.d </p>\n<h1 id=\"3-安装jdk\"><a href=\"#3-安装jdk\" class=\"headerlink\" title=\"3. 安装jdk\"></a>3. 安装jdk</h1><p>解压安装包</p>\n<blockquote>\n<p>tar -zxvf jdk-7u45-linux-x64.tar.gz -C apps/</p>\n</blockquote>\n<p>然后修改环境变量</p>\n<blockquote>\n<p>vi /etc/profile</p>\n</blockquote>\n<p>在文件最后添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=/root/apps/jdk1.7.0_45</div><div class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</div></pre></td></tr></table></figure></p>\n<p>保存退出</p>\n<p>然后重新加载环境变量</p>\n<blockquote>\n<p>source /etc/profile</p>\n</blockquote>\n<h1 id=\"4-装mysql\"><a href=\"#4-装mysql\" class=\"headerlink\" title=\"4. 装mysql\"></a>4. 装mysql</h1><h1 id=\"5-安装tomcat\"><a href=\"#5-安装tomcat\" class=\"headerlink\" title=\"5. 安装tomcat\"></a>5. 安装tomcat</h1><ol>\n<li>上传tomcat包</li>\n<li>解压</li>\n<li>启动</li>\n<li>测试访问</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-YUM的常用命令\"><a href=\"#1-YUM的常用命令\" class=\"headerlink\" title=\"1. YUM的常用命令\"></a>1. YUM的常用命令</h1><p>安装httpd并确认安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum instll -y httpd</div></pre></td></tr></table></figure></p>\n<p>列出所有可用的package和package组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum list</div></pre></td></tr></table></figure></p>","more":"<p>清除所有缓冲数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum clean all</div></pre></td></tr></table></figure></p>\n<p>列出一个包所有依赖的包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum deplist httpd</div></pre></td></tr></table></figure></p>\n<p>删除httpd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum remove httpd</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-配置本地yum源\"><a href=\"#2-配置本地yum源\" class=\"headerlink\" title=\"2. 配置本地yum源\"></a>2. 配置本地yum源</h1><p>cd /etc/yum.repos.d </p>\n<h1 id=\"3-安装jdk\"><a href=\"#3-安装jdk\" class=\"headerlink\" title=\"3. 安装jdk\"></a>3. 安装jdk</h1><p>解压安装包</p>\n<blockquote>\n<p>tar -zxvf jdk-7u45-linux-x64.tar.gz -C apps/</p>\n</blockquote>\n<p>然后修改环境变量</p>\n<blockquote>\n<p>vi /etc/profile</p>\n</blockquote>\n<p>在文件最后添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=/root/apps/jdk1.7.0_45</div><div class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</div></pre></td></tr></table></figure></p>\n<p>保存退出</p>\n<p>然后重新加载环境变量</p>\n<blockquote>\n<p>source /etc/profile</p>\n</blockquote>\n<h1 id=\"4-装mysql\"><a href=\"#4-装mysql\" class=\"headerlink\" title=\"4. 装mysql\"></a>4. 装mysql</h1><h1 id=\"5-安装tomcat\"><a href=\"#5-安装tomcat\" class=\"headerlink\" title=\"5. 安装tomcat\"></a>5. 安装tomcat</h1><ol>\n<li>上传tomcat包</li>\n<li>解压</li>\n<li>启动</li>\n<li>测试访问</li>\n</ol>"},{"title":"大数据02-04-shell编程-sed命令","toc":true,"date":"2017-11-06T15:02:56.000Z","scaffolds":null,"_content":"# 1. Sed简介\nsed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。以下介绍的是Gnu版本的Sed 3.02。做备份,以后速查用.\n<!-- more -->\n## 1.1. 定址\n可以通过定址来定位你所希望编辑的行，该地址用数字构成，用逗号分隔的两个行数表示以这两行为起止的行的范围（包括行数表示的那两行）。如1，3表示1，2，3行，美元符号($)表示最后一行。范围可以通过数据，正则表达式或者二者结合的方式确定 。\n\n## 1.2. Sed命令\n调用sed命令有两种形式：\n* sed [options] 'command' file(s)\n* sed [options] -f scriptfile file(s)\n  * a\n  在当前行后面加入一行文本。\n  * b lable\n  分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。\n  * c\n  用新的文本改变本行的文本。\n  * d\n  从模板块（Pattern space）位置删除行。\n  * D\n  删除模板块的第一行。\n  * i\n  在当前行上面插入文本。\n  * h\n  拷贝模板块的内容到内存中的缓冲区。\n  * H\n  追加模板块的内容到内存中的缓冲区\n  * g\n  获得内存缓冲区的内容，并替代当前模板块中的文本。\n  * G\n  获得内存缓冲区的内容，并追加到当前模板块文本的后面。\n  * l\n  列表不能打印字符的清单。\n  * n\n  读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。\n  * N\n  追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。\n  * p\n  打印模板块的行。\n  * P（大写）\n  打印模板块的第一行。\n  * q\n  退出Sed。\n  * r file\n  从file中读行。\n  * t label\n  if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\n  * T label\n  错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\n  * w file\n  写并追加模板块到file末尾。\n  * W file\n  写并追加模板块的第一行到file末尾。\n  * !\n  表示后面的命令对所有没有被选定的行发生作用。\n  * s/re/string\n  用string替换正则表达式re。\n  * =\n  打印当前行号码。\n  * #把注释扩展到下一个换行符以前。\n### 1.2.1. 以下的是替换标记\n* g表示行内全面替换。\n* p表示打印行。\n* w表示把行写入一个文件。\n* x表示互换模板块中的文本和缓冲区中的文本。\n* y表示把一个字符翻译为另外的字符（但是不用于正则表达式）\n\n## 1.3. 选项\n`-e command, --expression=command`\n允许多台编辑。\n* -h, --help\n打印帮助，并显示bug列表的地址。\n* -n, --quiet, --silent\n取消默认输出。\n* -f, --filer=script-file\n引导sed脚本文件名。\n* -V, --version\n打印版本和版权信息。\n\n## 1.4. 元字符集^\n锚定行的开始 如：/^sed/匹配所有以sed开头的行。 \n$\n* 锚定行的结束 如：/sed$/匹配所有以sed结尾的行。 \n.\n* 匹配一个非换行符的字符 如：/s.d/匹配s后接一个任意字符，然后是d。 \n*\n* 匹配零或多个字符 如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。 \n[]\n* 匹配一个指定范围内的字符，如/[Ss]ed/匹配sed和Sed。 \n[^]\n* 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。 \n\\(..\\)\n* 保存匹配的字符，如s/\\(love\\)able/\\1rs，loveable被替换成lovers。 \n&\n* 保存搜索字符用来替换其他字符，如s/love/**&**/，love这成**love**。 \n\\<\n* 锚定单词的开始，如:/\\<love/匹配包含以love开头的单词的行。 \n\\>\n* 锚定单词的结束，如/love\\>/匹配包含以love结尾的单词的行。 \nx\\{m\\}\n* 重复字符x，m次，如：/o\\{5\\}/匹配包含5个o的行。 \nx\\{m,\\}\n* 重复字符x,至少m次，如：/o\\{5,\\}/匹配至少有5个o的行。 \nx\\{m,n\\}\n* 重复字符x，至少m次，不多于n次，如：/o\\{5,10\\}/匹配5--10个o的行。\n## 1.5. 实例\n### 1.5.1. 删除：d命令\n* $ sed '2d' example-----删除example文件的第二行。\n* $ sed '2,$d' example-----删除example文件的第二行到末尾所有行。\n* $ sed '$d' example-----删除example文件的最后一行。\n* $ sed '/test/'d example-----删除example文件所有包含test的行。\n### 1.5.2. 替换：s命令\n* $ sed 's/test/mytest/g' example-----在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。\n* $ sed -n 's/^test/mytest/p' example-----(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。\n* $ sed 's/^192.168.0.1/&localhost/' example-----&符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加 localhost，变成192.168.0.1localhost。\n* $ sed -n 's/\\(love\\)able/\\1rs/p' example-----love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。\n* $ sed 's#10#100#g' example-----不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。\n选定行的范围：逗号\n* $ sed -n '/test/,/check/p' example-----所有在模板test和check所确定的范围内的行都被打印。\n* $ sed -n '5,/^test/p' example-----打印从第五行开始到第一个包含以test开始的行之间的所有行。\n* $ sed '/test/,/check/s/$/sed test/' example-----对于模板test和west之间的行，每行的末尾用字符串sed test替换。\n### 1.5.3. 多点编辑：e命令\n* $ sed -e '1,5d' -e 's/test/check/' example-----(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执 行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。\n* $ sed --expression='s/test/check/' --expression='/love/d' example-----一个比-e更好的命令是--expression。它能给sed表达式赋值。\n### 1.5.4. 从文件读入：r命令\n* $ sed '/test/r file' example-----file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。\n### 1.5.5. 写入文件：w命令\n* $ sed -n '/test/w file' example-----在example中所有包含test的行都被写入file里。\n### 1.5.6. 追加命令：a命令\n\n* $ sed '/^test/a\\\\--->this is a example' example    '----->this is a example'被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。\n### 1.5.7. 插入：i命令\n* $ sed '/test/i\\\\\nnew line\n-------------------------' example\n如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。\n下一个：n命令\n* $ sed '/test/{ n; s/aa/bb/; }' example-----如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。\n变形：y命令\n\n* $ sed '1,10y/abcde/ABCDE/' example-----把1--10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。\n退出：q命令\n* $ sed '10q' example-----打印完第10行后，退出sed。\n保持和获取：h命令和G命令\n* $ sed -e '/test/h' -e '$G example-----在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保 持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中 的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。\n保持和互换：h命令和x命令\n* $ sed -e '/test/h' -e '/check/x' example -----互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。\n### 1.5.8. 脚本\nSed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。\n","source":"_posts/大数据/大数据02-04-shell编程-sed命令.md","raw":"---\ntitle: 大数据02-04-shell编程-sed命令\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - linux\n  - centos7\n  - linux命令\ntoc: true\ndate: 2017-11-06 23:02:56\nscaffolds:\n---\n# 1. Sed简介\nsed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。以下介绍的是Gnu版本的Sed 3.02。做备份,以后速查用.\n<!-- more -->\n## 1.1. 定址\n可以通过定址来定位你所希望编辑的行，该地址用数字构成，用逗号分隔的两个行数表示以这两行为起止的行的范围（包括行数表示的那两行）。如1，3表示1，2，3行，美元符号($)表示最后一行。范围可以通过数据，正则表达式或者二者结合的方式确定 。\n\n## 1.2. Sed命令\n调用sed命令有两种形式：\n* sed [options] 'command' file(s)\n* sed [options] -f scriptfile file(s)\n  * a\n  在当前行后面加入一行文本。\n  * b lable\n  分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。\n  * c\n  用新的文本改变本行的文本。\n  * d\n  从模板块（Pattern space）位置删除行。\n  * D\n  删除模板块的第一行。\n  * i\n  在当前行上面插入文本。\n  * h\n  拷贝模板块的内容到内存中的缓冲区。\n  * H\n  追加模板块的内容到内存中的缓冲区\n  * g\n  获得内存缓冲区的内容，并替代当前模板块中的文本。\n  * G\n  获得内存缓冲区的内容，并追加到当前模板块文本的后面。\n  * l\n  列表不能打印字符的清单。\n  * n\n  读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。\n  * N\n  追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。\n  * p\n  打印模板块的行。\n  * P（大写）\n  打印模板块的第一行。\n  * q\n  退出Sed。\n  * r file\n  从file中读行。\n  * t label\n  if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\n  * T label\n  错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\n  * w file\n  写并追加模板块到file末尾。\n  * W file\n  写并追加模板块的第一行到file末尾。\n  * !\n  表示后面的命令对所有没有被选定的行发生作用。\n  * s/re/string\n  用string替换正则表达式re。\n  * =\n  打印当前行号码。\n  * #把注释扩展到下一个换行符以前。\n### 1.2.1. 以下的是替换标记\n* g表示行内全面替换。\n* p表示打印行。\n* w表示把行写入一个文件。\n* x表示互换模板块中的文本和缓冲区中的文本。\n* y表示把一个字符翻译为另外的字符（但是不用于正则表达式）\n\n## 1.3. 选项\n`-e command, --expression=command`\n允许多台编辑。\n* -h, --help\n打印帮助，并显示bug列表的地址。\n* -n, --quiet, --silent\n取消默认输出。\n* -f, --filer=script-file\n引导sed脚本文件名。\n* -V, --version\n打印版本和版权信息。\n\n## 1.4. 元字符集^\n锚定行的开始 如：/^sed/匹配所有以sed开头的行。 \n$\n* 锚定行的结束 如：/sed$/匹配所有以sed结尾的行。 \n.\n* 匹配一个非换行符的字符 如：/s.d/匹配s后接一个任意字符，然后是d。 \n*\n* 匹配零或多个字符 如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。 \n[]\n* 匹配一个指定范围内的字符，如/[Ss]ed/匹配sed和Sed。 \n[^]\n* 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。 \n\\(..\\)\n* 保存匹配的字符，如s/\\(love\\)able/\\1rs，loveable被替换成lovers。 \n&\n* 保存搜索字符用来替换其他字符，如s/love/**&**/，love这成**love**。 \n\\<\n* 锚定单词的开始，如:/\\<love/匹配包含以love开头的单词的行。 \n\\>\n* 锚定单词的结束，如/love\\>/匹配包含以love结尾的单词的行。 \nx\\{m\\}\n* 重复字符x，m次，如：/o\\{5\\}/匹配包含5个o的行。 \nx\\{m,\\}\n* 重复字符x,至少m次，如：/o\\{5,\\}/匹配至少有5个o的行。 \nx\\{m,n\\}\n* 重复字符x，至少m次，不多于n次，如：/o\\{5,10\\}/匹配5--10个o的行。\n## 1.5. 实例\n### 1.5.1. 删除：d命令\n* $ sed '2d' example-----删除example文件的第二行。\n* $ sed '2,$d' example-----删除example文件的第二行到末尾所有行。\n* $ sed '$d' example-----删除example文件的最后一行。\n* $ sed '/test/'d example-----删除example文件所有包含test的行。\n### 1.5.2. 替换：s命令\n* $ sed 's/test/mytest/g' example-----在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。\n* $ sed -n 's/^test/mytest/p' example-----(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。\n* $ sed 's/^192.168.0.1/&localhost/' example-----&符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加 localhost，变成192.168.0.1localhost。\n* $ sed -n 's/\\(love\\)able/\\1rs/p' example-----love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。\n* $ sed 's#10#100#g' example-----不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。\n选定行的范围：逗号\n* $ sed -n '/test/,/check/p' example-----所有在模板test和check所确定的范围内的行都被打印。\n* $ sed -n '5,/^test/p' example-----打印从第五行开始到第一个包含以test开始的行之间的所有行。\n* $ sed '/test/,/check/s/$/sed test/' example-----对于模板test和west之间的行，每行的末尾用字符串sed test替换。\n### 1.5.3. 多点编辑：e命令\n* $ sed -e '1,5d' -e 's/test/check/' example-----(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执 行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。\n* $ sed --expression='s/test/check/' --expression='/love/d' example-----一个比-e更好的命令是--expression。它能给sed表达式赋值。\n### 1.5.4. 从文件读入：r命令\n* $ sed '/test/r file' example-----file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。\n### 1.5.5. 写入文件：w命令\n* $ sed -n '/test/w file' example-----在example中所有包含test的行都被写入file里。\n### 1.5.6. 追加命令：a命令\n\n* $ sed '/^test/a\\\\--->this is a example' example    '----->this is a example'被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。\n### 1.5.7. 插入：i命令\n* $ sed '/test/i\\\\\nnew line\n-------------------------' example\n如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。\n下一个：n命令\n* $ sed '/test/{ n; s/aa/bb/; }' example-----如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。\n变形：y命令\n\n* $ sed '1,10y/abcde/ABCDE/' example-----把1--10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。\n退出：q命令\n* $ sed '10q' example-----打印完第10行后，退出sed。\n保持和获取：h命令和G命令\n* $ sed -e '/test/h' -e '$G example-----在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保 持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中 的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。\n保持和互换：h命令和x命令\n* $ sed -e '/test/h' -e '/check/x' example -----互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。\n### 1.5.8. 脚本\nSed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。\n","slug":"大数据/大数据02-04-shell编程-sed命令","published":1,"updated":"2018-02-06T07:49:02.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89yk000iv4vf8xvwn0sg","content":"<h1 id=\"1-Sed简介\"><a href=\"#1-Sed简介\" class=\"headerlink\" title=\"1. Sed简介\"></a>1. Sed简介</h1><p>sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。以下介绍的是Gnu版本的Sed 3.02。做备份,以后速查用.<br><a id=\"more\"></a></p>\n<h2 id=\"1-1-定址\"><a href=\"#1-1-定址\" class=\"headerlink\" title=\"1.1. 定址\"></a>1.1. 定址</h2><p>可以通过定址来定位你所希望编辑的行，该地址用数字构成，用逗号分隔的两个行数表示以这两行为起止的行的范围（包括行数表示的那两行）。如1，3表示1，2，3行，美元符号($)表示最后一行。范围可以通过数据，正则表达式或者二者结合的方式确定 。</p>\n<h2 id=\"1-2-Sed命令\"><a href=\"#1-2-Sed命令\" class=\"headerlink\" title=\"1.2. Sed命令\"></a>1.2. Sed命令</h2><p>调用sed命令有两种形式：</p>\n<ul>\n<li>sed [options] ‘command’ file(s)</li>\n<li>sed [options] -f scriptfile file(s)<ul>\n<li>a<br>在当前行后面加入一行文本。</li>\n<li>b lable<br>分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。</li>\n<li>c<br>用新的文本改变本行的文本。</li>\n<li>d<br>从模板块（Pattern space）位置删除行。</li>\n<li>D<br>删除模板块的第一行。</li>\n<li>i<br>在当前行上面插入文本。</li>\n<li>h<br>拷贝模板块的内容到内存中的缓冲区。</li>\n<li>H<br>追加模板块的内容到内存中的缓冲区</li>\n<li>g<br>获得内存缓冲区的内容，并替代当前模板块中的文本。</li>\n<li>G<br>获得内存缓冲区的内容，并追加到当前模板块文本的后面。</li>\n<li>l<br>列表不能打印字符的清单。</li>\n<li>n<br>读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。</li>\n<li>N<br>追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。</li>\n<li>p<br>打印模板块的行。</li>\n<li>P（大写）<br>打印模板块的第一行。</li>\n<li>q<br>退出Sed。</li>\n<li>r file<br>从file中读行。</li>\n<li>t label<br>if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</li>\n<li>T label<br>错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</li>\n<li>w file<br>写并追加模板块到file末尾。</li>\n<li>W file<br>写并追加模板块的第一行到file末尾。</li>\n<li>!<br>表示后面的命令对所有没有被选定的行发生作用。</li>\n<li>s/re/string<br>用string替换正则表达式re。</li>\n<li>=<br>打印当前行号码。</li>\n<li>#把注释扩展到下一个换行符以前。<h3 id=\"1-2-1-以下的是替换标记\"><a href=\"#1-2-1-以下的是替换标记\" class=\"headerlink\" title=\"1.2.1. 以下的是替换标记\"></a>1.2.1. 以下的是替换标记</h3></li>\n</ul>\n</li>\n<li>g表示行内全面替换。</li>\n<li>p表示打印行。</li>\n<li>w表示把行写入一个文件。</li>\n<li>x表示互换模板块中的文本和缓冲区中的文本。</li>\n<li>y表示把一个字符翻译为另外的字符（但是不用于正则表达式）</li>\n</ul>\n<h2 id=\"1-3-选项\"><a href=\"#1-3-选项\" class=\"headerlink\" title=\"1.3. 选项\"></a>1.3. 选项</h2><p><code>-e command, --expression=command</code><br>允许多台编辑。</p>\n<ul>\n<li>-h, –help<br>打印帮助，并显示bug列表的地址。</li>\n<li>-n, –quiet, –silent<br>取消默认输出。</li>\n<li>-f, –filer=script-file<br>引导sed脚本文件名。</li>\n<li>-V, –version<br>打印版本和版权信息。</li>\n</ul>\n<h2 id=\"1-4-元字符集\"><a href=\"#1-4-元字符集\" class=\"headerlink\" title=\"1.4. 元字符集^\"></a>1.4. 元字符集^</h2><p>锚定行的开始 如：/^sed/匹配所有以sed开头的行。<br>$</p>\n<ul>\n<li>锚定行的结束 如：/sed$/匹配所有以sed结尾的行。<br>.</li>\n<li>匹配一个非换行符的字符 如：/s.d/匹配s后接一个任意字符，然后是d。<br>*</li>\n<li>匹配零或多个字符 如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。<br>[]</li>\n<li>匹配一个指定范围内的字符，如/[Ss]ed/匹配sed和Sed。<br>[^]</li>\n<li>匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。<br>(..)</li>\n<li>保存匹配的字符，如s/(love)able/\\1rs，loveable被替换成lovers。<br>&amp;</li>\n<li>保存搜索字符用来替换其他字符，如s/love/<strong>&amp;</strong>/，love这成<strong>love</strong>。<br>\\&lt;</li>\n<li>锚定单词的开始，如:/\\<love 匹配包含以love开头的单词的行。=\"\" \\=\"\"></love></li>\n<li>锚定单词的结束，如/love>/匹配包含以love结尾的单词的行。<br>x{m}</li>\n<li>重复字符x，m次，如：/o{5}/匹配包含5个o的行。<br>x{m,}</li>\n<li>重复字符x,至少m次，如：/o{5,}/匹配至少有5个o的行。<br>x{m,n}</li>\n<li>重复字符x，至少m次，不多于n次，如：/o{5,10}/匹配5–10个o的行。<h2 id=\"1-5-实例\"><a href=\"#1-5-实例\" class=\"headerlink\" title=\"1.5. 实例\"></a>1.5. 实例</h2><h3 id=\"1-5-1-删除：d命令\"><a href=\"#1-5-1-删除：d命令\" class=\"headerlink\" title=\"1.5.1. 删除：d命令\"></a>1.5.1. 删除：d命令</h3></li>\n<li>$ sed ‘2d’ example—–删除example文件的第二行。</li>\n<li>$ sed ‘2,$d’ example—–删除example文件的第二行到末尾所有行。</li>\n<li>$ sed ‘$d’ example—–删除example文件的最后一行。</li>\n<li>$ sed ‘/test/‘d example—–删除example文件所有包含test的行。<h3 id=\"1-5-2-替换：s命令\"><a href=\"#1-5-2-替换：s命令\" class=\"headerlink\" title=\"1.5.2. 替换：s命令\"></a>1.5.2. 替换：s命令</h3></li>\n<li>$ sed ‘s/test/mytest/g’ example—–在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。</li>\n<li>$ sed -n ‘s/^test/mytest/p’ example—–(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。</li>\n<li>$ sed ‘s/^192.168.0.1/&amp;localhost/‘ example—–&amp;符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加 localhost，变成192.168.0.1localhost。</li>\n<li>$ sed -n ‘s/(love)able/\\1rs/p’ example—–love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。</li>\n<li>$ sed ‘s#10#100#g’ example—–不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。<br>选定行的范围：逗号</li>\n<li>$ sed -n ‘/test/,/check/p’ example—–所有在模板test和check所确定的范围内的行都被打印。</li>\n<li>$ sed -n ‘5,/^test/p’ example—–打印从第五行开始到第一个包含以test开始的行之间的所有行。</li>\n<li>$ sed ‘/test/,/check/s/$/sed test/‘ example—–对于模板test和west之间的行，每行的末尾用字符串sed test替换。<h3 id=\"1-5-3-多点编辑：e命令\"><a href=\"#1-5-3-多点编辑：e命令\" class=\"headerlink\" title=\"1.5.3. 多点编辑：e命令\"></a>1.5.3. 多点编辑：e命令</h3></li>\n<li>$ sed -e ‘1,5d’ -e ‘s/test/check/‘ example—–(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执 行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</li>\n<li>$ sed –expression=’s/test/check/‘ –expression=’/love/d’ example—–一个比-e更好的命令是–expression。它能给sed表达式赋值。<h3 id=\"1-5-4-从文件读入：r命令\"><a href=\"#1-5-4-从文件读入：r命令\" class=\"headerlink\" title=\"1.5.4. 从文件读入：r命令\"></a>1.5.4. 从文件读入：r命令</h3></li>\n<li>$ sed ‘/test/r file’ example—–file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。<h3 id=\"1-5-5-写入文件：w命令\"><a href=\"#1-5-5-写入文件：w命令\" class=\"headerlink\" title=\"1.5.5. 写入文件：w命令\"></a>1.5.5. 写入文件：w命令</h3></li>\n<li><p>$ sed -n ‘/test/w file’ example—–在example中所有包含test的行都被写入file里。</p>\n<h3 id=\"1-5-6-追加命令：a命令\"><a href=\"#1-5-6-追加命令：a命令\" class=\"headerlink\" title=\"1.5.6. 追加命令：a命令\"></a>1.5.6. 追加命令：a命令</h3></li>\n<li><p>$ sed ‘/^test/a\\—&gt;this is a example’ example    ‘—–&gt;this is a example’被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。</p>\n<h3 id=\"1-5-7-插入：i命令\"><a href=\"#1-5-7-插入：i命令\" class=\"headerlink\" title=\"1.5.7. 插入：i命令\"></a>1.5.7. 插入：i命令</h3></li>\n<li>$ sed ‘/test/i\\<br>new line<br>————————-‘ example<br>如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。<br>下一个：n命令</li>\n<li><p>$ sed ‘/test/{ n; s/aa/bb/; }’ example—–如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。<br>变形：y命令</p>\n</li>\n<li><p>$ sed ‘1,10y/abcde/ABCDE/‘ example—–把1–10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。<br>退出：q命令</p>\n</li>\n<li>$ sed ‘10q’ example—–打印完第10行后，退出sed。<br>保持和获取：h命令和G命令</li>\n<li>$ sed -e ‘/test/h’ -e ‘$G example—–在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保 持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中 的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。<br>保持和互换：h命令和x命令</li>\n<li>$ sed -e ‘/test/h’ -e ‘/check/x’ example —–互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。<h3 id=\"1-5-8-脚本\"><a href=\"#1-5-8-脚本\" class=\"headerlink\" title=\"1.5.8. 脚本\"></a>1.5.8. 脚本</h3>Sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-Sed简介\"><a href=\"#1-Sed简介\" class=\"headerlink\" title=\"1. Sed简介\"></a>1. Sed简介</h1><p>sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。以下介绍的是Gnu版本的Sed 3.02。做备份,以后速查用.<br>","more":"</p>\n<h2 id=\"1-1-定址\"><a href=\"#1-1-定址\" class=\"headerlink\" title=\"1.1. 定址\"></a>1.1. 定址</h2><p>可以通过定址来定位你所希望编辑的行，该地址用数字构成，用逗号分隔的两个行数表示以这两行为起止的行的范围（包括行数表示的那两行）。如1，3表示1，2，3行，美元符号($)表示最后一行。范围可以通过数据，正则表达式或者二者结合的方式确定 。</p>\n<h2 id=\"1-2-Sed命令\"><a href=\"#1-2-Sed命令\" class=\"headerlink\" title=\"1.2. Sed命令\"></a>1.2. Sed命令</h2><p>调用sed命令有两种形式：</p>\n<ul>\n<li>sed [options] ‘command’ file(s)</li>\n<li>sed [options] -f scriptfile file(s)<ul>\n<li>a<br>在当前行后面加入一行文本。</li>\n<li>b lable<br>分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。</li>\n<li>c<br>用新的文本改变本行的文本。</li>\n<li>d<br>从模板块（Pattern space）位置删除行。</li>\n<li>D<br>删除模板块的第一行。</li>\n<li>i<br>在当前行上面插入文本。</li>\n<li>h<br>拷贝模板块的内容到内存中的缓冲区。</li>\n<li>H<br>追加模板块的内容到内存中的缓冲区</li>\n<li>g<br>获得内存缓冲区的内容，并替代当前模板块中的文本。</li>\n<li>G<br>获得内存缓冲区的内容，并追加到当前模板块文本的后面。</li>\n<li>l<br>列表不能打印字符的清单。</li>\n<li>n<br>读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。</li>\n<li>N<br>追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。</li>\n<li>p<br>打印模板块的行。</li>\n<li>P（大写）<br>打印模板块的第一行。</li>\n<li>q<br>退出Sed。</li>\n<li>r file<br>从file中读行。</li>\n<li>t label<br>if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</li>\n<li>T label<br>错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</li>\n<li>w file<br>写并追加模板块到file末尾。</li>\n<li>W file<br>写并追加模板块的第一行到file末尾。</li>\n<li>!<br>表示后面的命令对所有没有被选定的行发生作用。</li>\n<li>s/re/string<br>用string替换正则表达式re。</li>\n<li>=<br>打印当前行号码。</li>\n<li>#把注释扩展到下一个换行符以前。<h3 id=\"1-2-1-以下的是替换标记\"><a href=\"#1-2-1-以下的是替换标记\" class=\"headerlink\" title=\"1.2.1. 以下的是替换标记\"></a>1.2.1. 以下的是替换标记</h3></li>\n</ul>\n</li>\n<li>g表示行内全面替换。</li>\n<li>p表示打印行。</li>\n<li>w表示把行写入一个文件。</li>\n<li>x表示互换模板块中的文本和缓冲区中的文本。</li>\n<li>y表示把一个字符翻译为另外的字符（但是不用于正则表达式）</li>\n</ul>\n<h2 id=\"1-3-选项\"><a href=\"#1-3-选项\" class=\"headerlink\" title=\"1.3. 选项\"></a>1.3. 选项</h2><p><code>-e command, --expression=command</code><br>允许多台编辑。</p>\n<ul>\n<li>-h, –help<br>打印帮助，并显示bug列表的地址。</li>\n<li>-n, –quiet, –silent<br>取消默认输出。</li>\n<li>-f, –filer=script-file<br>引导sed脚本文件名。</li>\n<li>-V, –version<br>打印版本和版权信息。</li>\n</ul>\n<h2 id=\"1-4-元字符集\"><a href=\"#1-4-元字符集\" class=\"headerlink\" title=\"1.4. 元字符集^\"></a>1.4. 元字符集^</h2><p>锚定行的开始 如：/^sed/匹配所有以sed开头的行。<br>$</p>\n<ul>\n<li>锚定行的结束 如：/sed$/匹配所有以sed结尾的行。<br>.</li>\n<li>匹配一个非换行符的字符 如：/s.d/匹配s后接一个任意字符，然后是d。<br>*</li>\n<li>匹配零或多个字符 如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。<br>[]</li>\n<li>匹配一个指定范围内的字符，如/[Ss]ed/匹配sed和Sed。<br>[^]</li>\n<li>匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。<br>(..)</li>\n<li>保存匹配的字符，如s/(love)able/\\1rs，loveable被替换成lovers。<br>&amp;</li>\n<li>保存搜索字符用来替换其他字符，如s/love/<strong>&amp;</strong>/，love这成<strong>love</strong>。<br>\\&lt;</li>\n<li>锚定单词的开始，如:/\\<love 匹配包含以love开头的单词的行。=\"\" \\=\"\"></love></li>\n<li>锚定单词的结束，如/love>/匹配包含以love结尾的单词的行。<br>x{m}</li>\n<li>重复字符x，m次，如：/o{5}/匹配包含5个o的行。<br>x{m,}</li>\n<li>重复字符x,至少m次，如：/o{5,}/匹配至少有5个o的行。<br>x{m,n}</li>\n<li>重复字符x，至少m次，不多于n次，如：/o{5,10}/匹配5–10个o的行。<h2 id=\"1-5-实例\"><a href=\"#1-5-实例\" class=\"headerlink\" title=\"1.5. 实例\"></a>1.5. 实例</h2><h3 id=\"1-5-1-删除：d命令\"><a href=\"#1-5-1-删除：d命令\" class=\"headerlink\" title=\"1.5.1. 删除：d命令\"></a>1.5.1. 删除：d命令</h3></li>\n<li>$ sed ‘2d’ example—–删除example文件的第二行。</li>\n<li>$ sed ‘2,$d’ example—–删除example文件的第二行到末尾所有行。</li>\n<li>$ sed ‘$d’ example—–删除example文件的最后一行。</li>\n<li>$ sed ‘/test/‘d example—–删除example文件所有包含test的行。<h3 id=\"1-5-2-替换：s命令\"><a href=\"#1-5-2-替换：s命令\" class=\"headerlink\" title=\"1.5.2. 替换：s命令\"></a>1.5.2. 替换：s命令</h3></li>\n<li>$ sed ‘s/test/mytest/g’ example—–在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。</li>\n<li>$ sed -n ‘s/^test/mytest/p’ example—–(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。</li>\n<li>$ sed ‘s/^192.168.0.1/&amp;localhost/‘ example—–&amp;符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加 localhost，变成192.168.0.1localhost。</li>\n<li>$ sed -n ‘s/(love)able/\\1rs/p’ example—–love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。</li>\n<li>$ sed ‘s#10#100#g’ example—–不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。<br>选定行的范围：逗号</li>\n<li>$ sed -n ‘/test/,/check/p’ example—–所有在模板test和check所确定的范围内的行都被打印。</li>\n<li>$ sed -n ‘5,/^test/p’ example—–打印从第五行开始到第一个包含以test开始的行之间的所有行。</li>\n<li>$ sed ‘/test/,/check/s/$/sed test/‘ example—–对于模板test和west之间的行，每行的末尾用字符串sed test替换。<h3 id=\"1-5-3-多点编辑：e命令\"><a href=\"#1-5-3-多点编辑：e命令\" class=\"headerlink\" title=\"1.5.3. 多点编辑：e命令\"></a>1.5.3. 多点编辑：e命令</h3></li>\n<li>$ sed -e ‘1,5d’ -e ‘s/test/check/‘ example—–(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执 行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</li>\n<li>$ sed –expression=’s/test/check/‘ –expression=’/love/d’ example—–一个比-e更好的命令是–expression。它能给sed表达式赋值。<h3 id=\"1-5-4-从文件读入：r命令\"><a href=\"#1-5-4-从文件读入：r命令\" class=\"headerlink\" title=\"1.5.4. 从文件读入：r命令\"></a>1.5.4. 从文件读入：r命令</h3></li>\n<li>$ sed ‘/test/r file’ example—–file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。<h3 id=\"1-5-5-写入文件：w命令\"><a href=\"#1-5-5-写入文件：w命令\" class=\"headerlink\" title=\"1.5.5. 写入文件：w命令\"></a>1.5.5. 写入文件：w命令</h3></li>\n<li><p>$ sed -n ‘/test/w file’ example—–在example中所有包含test的行都被写入file里。</p>\n<h3 id=\"1-5-6-追加命令：a命令\"><a href=\"#1-5-6-追加命令：a命令\" class=\"headerlink\" title=\"1.5.6. 追加命令：a命令\"></a>1.5.6. 追加命令：a命令</h3></li>\n<li><p>$ sed ‘/^test/a\\—&gt;this is a example’ example    ‘—–&gt;this is a example’被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。</p>\n<h3 id=\"1-5-7-插入：i命令\"><a href=\"#1-5-7-插入：i命令\" class=\"headerlink\" title=\"1.5.7. 插入：i命令\"></a>1.5.7. 插入：i命令</h3></li>\n<li>$ sed ‘/test/i\\<br>new line<br>————————-‘ example<br>如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。<br>下一个：n命令</li>\n<li><p>$ sed ‘/test/{ n; s/aa/bb/; }’ example—–如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。<br>变形：y命令</p>\n</li>\n<li><p>$ sed ‘1,10y/abcde/ABCDE/‘ example—–把1–10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。<br>退出：q命令</p>\n</li>\n<li>$ sed ‘10q’ example—–打印完第10行后，退出sed。<br>保持和获取：h命令和G命令</li>\n<li>$ sed -e ‘/test/h’ -e ‘$G example—–在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保 持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中 的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。<br>保持和互换：h命令和x命令</li>\n<li>$ sed -e ‘/test/h’ -e ‘/check/x’ example —–互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。<h3 id=\"1-5-8-脚本\"><a href=\"#1-5-8-脚本\" class=\"headerlink\" title=\"1.5.8. 脚本\"></a>1.5.8. 脚本</h3>Sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。</li>\n</ul>"},{"title":"大数据02-03 shell编程语法讲解","toc":true,"date":"2017-11-06T15:02:36.000Z","scaffolds":null,"_content":"\n# 1. 变量\n## 1.1. 系统变量\n* $HOME\n* $PWD\n* $SHELL\n* $USER\n显示当前shell中所有变量\n\nset\n\n<!-- more -->\n## 1.2. 用户自定义变量\n定义变量\n> STR=\"hello world\"\n\n> A=9\n\n> unset A 撤销变量 A\n\n> readonly B=2 声明静态的变量 B=2 ，不能 unset\n\n> export 变量名 可把变量提升为全局环境变量，可供其他shell程序使用\n\n将命令的返回值赋给变量\n\n```\nA=`ls -la` 反引号，运行里面的命令，并把结果返回给变量A\nA=$(ls -la) 等价于反引号\n```\n## 1.3. shell中的特殊变量\n* $? 表示上一个命令退出的状态  true 0 false 1 错误127\n* $$ 表示当前进程编号\n* $0 表示当前脚本名称\n* $n 表示n位置的输入参数（n代表数字，n>=1）\n* $# \t表示参数的个数，常用于循环\n* $*和$@ 都表示参数列表 \n### 1.3.1. $*与$@区别\n* $* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号\" \"包含时，都以$1  $2  … $n 的形式输出所有参数  \n* 当它们被双引号\" \"包含时，\"$*\" 会将所有的参数作为一个整体，以\"$1 $2 … $n\"的形式输出所有参数；\"$@\" 会将各个参数分开，以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数\n\n## 1.4. 运算符\n> 格式 :expr m + n 或$((m+n)) 注意expr运算符间要有空格\n\n例如计算（2 ＋3 ）×4 的值\n1 .分步计算\u000b\tS=`expr 2 + 3`\u000b\texpr $S \\* 4\n2.一步完成计算\n```bash\n\texpr `expr 2 + 3 ` \\* 4\n\techo `expr \\`expr 2 + 3\\` \\* 4`\n\t或\n\t$(((2+3)*4))\n```\n# 2. for循环\n\n## 2.1. 第一种：\n```bash\nfor N in 1 2 3\ndo\n\techo $N\ndone\n或\nfor N in 1 2 3; do echo $N; done\n或\nfor N in {1..3}; do echo $N; done\n```\n## 2.2. 第二种：\n```bash\nfor ((i = 0; i <= 5; i++))\ndo\n\techo \"welcome $i times\"\ndone\n或\nfor ((i = 0; i <= 5; i++)); do echo \"welcome $i times\"; done\n```\n\n# 3. while循环\n\n## 3.1. 第一种\n```bash\nwhile expression\ndo\ncommand\n…\ndone\n```\n\n## 3.2. 第二种\n```bash\ni=1\nwhile ((i<=3))\ndo\n  echo $i\n  let i++\ndone\n```\n# 4. case语句\n\n格式\n```bash\ncase $1 in\nstart)\n\techo \"starting\"\n\t;;\nstop)\n\techo \"stoping\"\n\t;;\n*)\n\techo \"Usage: {start|stop} “\nesac\n\n```\n# 5. read命令\nread -p(提示语句)-n(字符个数) -t(等待时间) \n\tread -p \"please input your name: \" NAME\n\n使用示例：\n```\n[vagrant@mysql1 ~]$ read -p \"please enter a number:\" numb\nplease enter a number:1\n[vagrant@mysql1 ~]$ echo $numb\n1\n[vagrant@mysql1 ~]$ \n```\n\n# 6. if判断\n语法\n```bash\nif condition \nthen \n    statements\n[elif condition \n    then statements. ..] \n[else \n    statements ] \nfi\n\n```\n# 7. 判断语句\n[ condition ] **(注意condition前后要有空格)**\n# 8. 非空返回true，可使用$?验证（0为true，>1为false）\n[ test ]\n\n# 9. 空返回false\n[  ]\n\n> [ condition ] && echo OK || echo notok\n\n条件满足，执行后面的语句 不满足执行 || 后面的语句\n\n# 10. 常用判断条件\n* = 字符串比较\n* -lt 小于\n* -le 小于等于\n* -eq 等于\n* -gt 大于\n* -ge 大于等于\n* -ne 不等于\n\n* -r 有读的权限\n* -w 有写的权限\n* -x 有执行的权限\n* **-f 文件存在并且是一个常规的文件**\n* -s 文件存在且不为空\n* -d 文件存在并是一个目录\n* -b文件存在并且是一个块设备\n* -L 文件存在并且是一个链接\n\n# 11. Shell自定义函数\n语法\n```bash\n [ function ] funname [()]\n{\n    action;\n    [return int;]\n}\n\n```\n三种声明方式:\n* function start()  \n* function start \n* start()\n\n注意\n1. 必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先预编译\n2. 函数返回值，只能通过$? 系统变量获得，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)\n\n## 11.1. 例子\n```bash\n#!/bin/bash\nfSum 3 2;\nfunction fSum()\n{\n    echo $1,$2;\n    return $(($1+$2));\n}\nfSum 5 7;\ntotal=$?;\necho $total,$?;\n\n```\n结果\n```\n[vagrant@mysql1 ~]$ sh test \ntest: line 2: fSum: command not found\n5,7\n12,0\n\n```\n# 12. 脚本调试\n* sh -vx helloWorld.sh\n* 或者在脚本中增加set -x\n\n# 13. cut命令\ncut命令可以从一个文本文件或者文本流中提取文本列。\n\n## 13.1. 语法\n```\ncut -d'分隔字符' -f fields <==用于有特定分隔字符\ncut -c 字符区间            <==用于排列整齐的信息\n\n```\n* -d  ：后面接分隔字符。与 -f 一起使用；\n* -f  ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思；\n* -c  ：以字符 (characters) 的单位取出固定字符区间；\n\n## 13.2. 例子\n### 13.2.1. PATH 变量如下\n\n```\n[root@www ~]# echo $PATH\n/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games\n# 1 | 2       | 3   | 4       | 5            | 6            | 7\n\n```\n### 13.2.2. 将 PATH 变量取出，我要找出第五个路径。\n\n```\n#echo $PATH | cut -d ':' -f 5\n/usr/local/bin\n\n```\n### 13.2.3. 将 PATH 变量取出，我要找出第三和第五个路径。\n\n```\n#echo $PATH | cut -d ':' -f 3,5\n/sbin:/usr/local/bin\n\n```\n### 13.2.4. 将 PATH 变量取出，我要找出第三到最后一个路径。\n\n```\necho $PATH | cut -d ':' -f 3-\n/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games\n\n```\n\n### 13.2.5. 将 PATH 变量取出，我要找出第一到第三个路径。\n\n```\n#echo $PATH | cut -d ':' -f 1-3\n/bin:/usr/bin:/sbin:\n\n```\n### 13.2.6. 将 PATH 变量取出，我要找出第一到第三，还有第五个路径。\n\n```\necho $PATH | cut -d ':' -f 1-3,5\n/bin:/usr/bin:/sbin:/usr/local/bin\n```\n\n## 13.3. 实用例子:只显示/etc/passwd的用户和shell\n\n```\n#cat /etc/passwd | cut -d ':' -f 1,7 \nroot:/bin/bash\ndaemon:/bin/sh\nbin:/bin/sh\n```\n\n# 14. sort命令\nsort 命令对 File 参数指定的文件中的行排序，并将结果写到标准输出。如果 File 参数指定多个文件，那么 sort 命令将这些文件连接起来，并当作一个文件进行排序。\n## 14.1. 语法\n`[root@www ~]# sort [-fbMnrtuk] [file or stdin]`\n选项与参数：\n* -f  ：忽略大小写的差异，例如 A 与 a 视为编码相同；\n* -b  ：忽略最前面的空格符部分；\n* -M  ：以月份的名字来排序，例如 JAN, DEC 等等的排序方法；\n* -n  ：使用『纯数字』进行排序(默认是以文字型态来排序的)；\n* -r  ：反向排序；\n* -u  ：就是 uniq ，相同的数据中，仅出现一行代表；\n* -t  ：分隔符，默认是用 [tab] 键来分隔；\n* -k  ：以那个区间 (field) 来进行排序的意思\n\n## 14.2. 对/etc/passwd 的账号进行排序\n```bash\n[root@www ~]# cat /etc/passwd | sort\nadm:x:3:4:adm:/var/adm:/sbin/nologin\napache:x:48:48:Apache:/var/www:/sbin/nologin\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\n\n```\nsort 是默认以第一个数据来排序，而且默认是以字符串形式来排序,所以由字母 a 开始升序排序。\n## 14.3. /etc/passwd 内容是以 : 来分隔的，我想以第三栏来排序，该如何\n\n```\n[root@www ~]# cat /etc/passwd | sort -t ':' -k 3\nroot:x:0:0:root:/root:/bin/bash\nuucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin\noperator:x:11:0:operator:/root:/sbin/nologin\nbin:x:1:1:bin:/bin:/sbin/nologin\ngames:x:12:100:games:/usr/games:/sbin/nologin\n\n```\n## 14.4. 默认是以字符串来排序的，如果想要使用数字排序：\n```\ncat /etc/passwd | sort -t ':' -k 3n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\n\n```\n## 14.5. 默认是升序排序，如果要倒序排序，如下\n\n```\ncat /etc/passwd | sort -t ':' -k 3nr\nnobody:x:65534:65534:nobody:/nonexistent:/bin/sh\nntp:x:106:113::/home/ntp:/bin/false\nmessagebus:x:105:109::/var/run/dbus:/bin/false\nsshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin\n\n```\n## 14.6. 如果要对/etc/passwd,先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。\n\n```\ncat /etc/passwd |  sort -t':' -k 6.2,6.4 -k 1r      \nsync:x:4:65534:sync:/bin:/bin/sync\nproxy:x:13:13:proxy:/bin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\n\n```\n## 14.7. 查看/etc/passwd有多少个shell:对/etc/passwd的第七个域进行排序，然后去重:\n```\ncat /etc/passwd |  sort -t':' -k 7 -u\nroot:x:0:0:root:/root:/bin/bash\nsyslog:x:101:102::/home/syslog:/bin/false\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nsync:x:4:65534:sync:/bin:/bin/sync\nsshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin\n```\n# 15. uniq去重命令\n uniq命令可以去除排序过的文件中的重复行，因此uniq经常和sort合用。也就是说，为了使uniq起作用，所有的重复行必须是相邻的。\n\n## 15.1. uniq语法\n`[root@www ~]# uniq [-icu]`\n选项与参数：\n* -i   ：忽略大小写字符的不同；\n* -c  ：进行计数\n* -u  ：只显示唯一的行\n\ntestfile的内容如下\n```\ncat testfile\nhello\nworld\nfriend\nhello\nworld\nhello\n```\n直接删除未经排序的文件，将会发现没有任何行被删除\n```\n#uniq testfile  \nhello\nworld\nfriend\nhello\nworld\nhello\n```\n排序文件，默认是去重\n```\n#cat testfile | sort |uniq\nfriend\nhello\nworld\n```\n排序之后删除了重复行，同时在行首位置输出该行重复的次数\n```\n#sort testfile | uniq -c\n1 friend\n3 hello\n2 world\n```\n仅显示存在重复的行，并在行首显示该行重复的次数\n```\n#sort testfile | uniq -dc\n3 hello\n2 world\n```\n仅显示不重复的行\n```\nsort testfile | uniq -u\nfriend  \n```\n\n\n# 16. wc命令\n## 16.1. 语法\n`[root@www ~]# wc [-lwm]`\n选项与参数：\n* -l  ：仅列出行；\n* -w  ：仅列出多少字(英文单字)；\n* -m  ：多少字符；\n## 16.2. 默认使用wc统计/etc/passwd\n\n```\n#wc /etc/passwd\n40   45 1719 /etc/passwd\n40是行数，45是单词数，1719是字节数\n\n```\nwc的命令比较简单使用，每个参数使用如下：\n \n```\n#wc -l /etc/passwd   #统计行数，在对记录数时，很常用\n40 /etc/passwd       #表示系统有40个账户\n\n#wc -w /etc/passwd  #统计单词出现次数\n45 /etc/passwd\n\n#wc -m /etc/passwd  #统计文件的字符数\n1719\n\n```\n\n\n\n\n\n\n\n\n","source":"_posts/大数据/大数据02-03 shell编程语法讲解.md","raw":"---\ntitle: 大数据02-03 shell编程语法讲解\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - linux\n  - centos7\n  - linux命令\ntoc: true\ndate: 2017-11-06 23:02:36\nscaffolds:\n---\n\n# 1. 变量\n## 1.1. 系统变量\n* $HOME\n* $PWD\n* $SHELL\n* $USER\n显示当前shell中所有变量\n\nset\n\n<!-- more -->\n## 1.2. 用户自定义变量\n定义变量\n> STR=\"hello world\"\n\n> A=9\n\n> unset A 撤销变量 A\n\n> readonly B=2 声明静态的变量 B=2 ，不能 unset\n\n> export 变量名 可把变量提升为全局环境变量，可供其他shell程序使用\n\n将命令的返回值赋给变量\n\n```\nA=`ls -la` 反引号，运行里面的命令，并把结果返回给变量A\nA=$(ls -la) 等价于反引号\n```\n## 1.3. shell中的特殊变量\n* $? 表示上一个命令退出的状态  true 0 false 1 错误127\n* $$ 表示当前进程编号\n* $0 表示当前脚本名称\n* $n 表示n位置的输入参数（n代表数字，n>=1）\n* $# \t表示参数的个数，常用于循环\n* $*和$@ 都表示参数列表 \n### 1.3.1. $*与$@区别\n* $* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号\" \"包含时，都以$1  $2  … $n 的形式输出所有参数  \n* 当它们被双引号\" \"包含时，\"$*\" 会将所有的参数作为一个整体，以\"$1 $2 … $n\"的形式输出所有参数；\"$@\" 会将各个参数分开，以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数\n\n## 1.4. 运算符\n> 格式 :expr m + n 或$((m+n)) 注意expr运算符间要有空格\n\n例如计算（2 ＋3 ）×4 的值\n1 .分步计算\u000b\tS=`expr 2 + 3`\u000b\texpr $S \\* 4\n2.一步完成计算\n```bash\n\texpr `expr 2 + 3 ` \\* 4\n\techo `expr \\`expr 2 + 3\\` \\* 4`\n\t或\n\t$(((2+3)*4))\n```\n# 2. for循环\n\n## 2.1. 第一种：\n```bash\nfor N in 1 2 3\ndo\n\techo $N\ndone\n或\nfor N in 1 2 3; do echo $N; done\n或\nfor N in {1..3}; do echo $N; done\n```\n## 2.2. 第二种：\n```bash\nfor ((i = 0; i <= 5; i++))\ndo\n\techo \"welcome $i times\"\ndone\n或\nfor ((i = 0; i <= 5; i++)); do echo \"welcome $i times\"; done\n```\n\n# 3. while循环\n\n## 3.1. 第一种\n```bash\nwhile expression\ndo\ncommand\n…\ndone\n```\n\n## 3.2. 第二种\n```bash\ni=1\nwhile ((i<=3))\ndo\n  echo $i\n  let i++\ndone\n```\n# 4. case语句\n\n格式\n```bash\ncase $1 in\nstart)\n\techo \"starting\"\n\t;;\nstop)\n\techo \"stoping\"\n\t;;\n*)\n\techo \"Usage: {start|stop} “\nesac\n\n```\n# 5. read命令\nread -p(提示语句)-n(字符个数) -t(等待时间) \n\tread -p \"please input your name: \" NAME\n\n使用示例：\n```\n[vagrant@mysql1 ~]$ read -p \"please enter a number:\" numb\nplease enter a number:1\n[vagrant@mysql1 ~]$ echo $numb\n1\n[vagrant@mysql1 ~]$ \n```\n\n# 6. if判断\n语法\n```bash\nif condition \nthen \n    statements\n[elif condition \n    then statements. ..] \n[else \n    statements ] \nfi\n\n```\n# 7. 判断语句\n[ condition ] **(注意condition前后要有空格)**\n# 8. 非空返回true，可使用$?验证（0为true，>1为false）\n[ test ]\n\n# 9. 空返回false\n[  ]\n\n> [ condition ] && echo OK || echo notok\n\n条件满足，执行后面的语句 不满足执行 || 后面的语句\n\n# 10. 常用判断条件\n* = 字符串比较\n* -lt 小于\n* -le 小于等于\n* -eq 等于\n* -gt 大于\n* -ge 大于等于\n* -ne 不等于\n\n* -r 有读的权限\n* -w 有写的权限\n* -x 有执行的权限\n* **-f 文件存在并且是一个常规的文件**\n* -s 文件存在且不为空\n* -d 文件存在并是一个目录\n* -b文件存在并且是一个块设备\n* -L 文件存在并且是一个链接\n\n# 11. Shell自定义函数\n语法\n```bash\n [ function ] funname [()]\n{\n    action;\n    [return int;]\n}\n\n```\n三种声明方式:\n* function start()  \n* function start \n* start()\n\n注意\n1. 必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先预编译\n2. 函数返回值，只能通过$? 系统变量获得，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)\n\n## 11.1. 例子\n```bash\n#!/bin/bash\nfSum 3 2;\nfunction fSum()\n{\n    echo $1,$2;\n    return $(($1+$2));\n}\nfSum 5 7;\ntotal=$?;\necho $total,$?;\n\n```\n结果\n```\n[vagrant@mysql1 ~]$ sh test \ntest: line 2: fSum: command not found\n5,7\n12,0\n\n```\n# 12. 脚本调试\n* sh -vx helloWorld.sh\n* 或者在脚本中增加set -x\n\n# 13. cut命令\ncut命令可以从一个文本文件或者文本流中提取文本列。\n\n## 13.1. 语法\n```\ncut -d'分隔字符' -f fields <==用于有特定分隔字符\ncut -c 字符区间            <==用于排列整齐的信息\n\n```\n* -d  ：后面接分隔字符。与 -f 一起使用；\n* -f  ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思；\n* -c  ：以字符 (characters) 的单位取出固定字符区间；\n\n## 13.2. 例子\n### 13.2.1. PATH 变量如下\n\n```\n[root@www ~]# echo $PATH\n/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games\n# 1 | 2       | 3   | 4       | 5            | 6            | 7\n\n```\n### 13.2.2. 将 PATH 变量取出，我要找出第五个路径。\n\n```\n#echo $PATH | cut -d ':' -f 5\n/usr/local/bin\n\n```\n### 13.2.3. 将 PATH 变量取出，我要找出第三和第五个路径。\n\n```\n#echo $PATH | cut -d ':' -f 3,5\n/sbin:/usr/local/bin\n\n```\n### 13.2.4. 将 PATH 变量取出，我要找出第三到最后一个路径。\n\n```\necho $PATH | cut -d ':' -f 3-\n/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games\n\n```\n\n### 13.2.5. 将 PATH 变量取出，我要找出第一到第三个路径。\n\n```\n#echo $PATH | cut -d ':' -f 1-3\n/bin:/usr/bin:/sbin:\n\n```\n### 13.2.6. 将 PATH 变量取出，我要找出第一到第三，还有第五个路径。\n\n```\necho $PATH | cut -d ':' -f 1-3,5\n/bin:/usr/bin:/sbin:/usr/local/bin\n```\n\n## 13.3. 实用例子:只显示/etc/passwd的用户和shell\n\n```\n#cat /etc/passwd | cut -d ':' -f 1,7 \nroot:/bin/bash\ndaemon:/bin/sh\nbin:/bin/sh\n```\n\n# 14. sort命令\nsort 命令对 File 参数指定的文件中的行排序，并将结果写到标准输出。如果 File 参数指定多个文件，那么 sort 命令将这些文件连接起来，并当作一个文件进行排序。\n## 14.1. 语法\n`[root@www ~]# sort [-fbMnrtuk] [file or stdin]`\n选项与参数：\n* -f  ：忽略大小写的差异，例如 A 与 a 视为编码相同；\n* -b  ：忽略最前面的空格符部分；\n* -M  ：以月份的名字来排序，例如 JAN, DEC 等等的排序方法；\n* -n  ：使用『纯数字』进行排序(默认是以文字型态来排序的)；\n* -r  ：反向排序；\n* -u  ：就是 uniq ，相同的数据中，仅出现一行代表；\n* -t  ：分隔符，默认是用 [tab] 键来分隔；\n* -k  ：以那个区间 (field) 来进行排序的意思\n\n## 14.2. 对/etc/passwd 的账号进行排序\n```bash\n[root@www ~]# cat /etc/passwd | sort\nadm:x:3:4:adm:/var/adm:/sbin/nologin\napache:x:48:48:Apache:/var/www:/sbin/nologin\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\n\n```\nsort 是默认以第一个数据来排序，而且默认是以字符串形式来排序,所以由字母 a 开始升序排序。\n## 14.3. /etc/passwd 内容是以 : 来分隔的，我想以第三栏来排序，该如何\n\n```\n[root@www ~]# cat /etc/passwd | sort -t ':' -k 3\nroot:x:0:0:root:/root:/bin/bash\nuucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin\noperator:x:11:0:operator:/root:/sbin/nologin\nbin:x:1:1:bin:/bin:/sbin/nologin\ngames:x:12:100:games:/usr/games:/sbin/nologin\n\n```\n## 14.4. 默认是以字符串来排序的，如果想要使用数字排序：\n```\ncat /etc/passwd | sort -t ':' -k 3n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\n\n```\n## 14.5. 默认是升序排序，如果要倒序排序，如下\n\n```\ncat /etc/passwd | sort -t ':' -k 3nr\nnobody:x:65534:65534:nobody:/nonexistent:/bin/sh\nntp:x:106:113::/home/ntp:/bin/false\nmessagebus:x:105:109::/var/run/dbus:/bin/false\nsshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin\n\n```\n## 14.6. 如果要对/etc/passwd,先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。\n\n```\ncat /etc/passwd |  sort -t':' -k 6.2,6.4 -k 1r      \nsync:x:4:65534:sync:/bin:/bin/sync\nproxy:x:13:13:proxy:/bin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\n\n```\n## 14.7. 查看/etc/passwd有多少个shell:对/etc/passwd的第七个域进行排序，然后去重:\n```\ncat /etc/passwd |  sort -t':' -k 7 -u\nroot:x:0:0:root:/root:/bin/bash\nsyslog:x:101:102::/home/syslog:/bin/false\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nsync:x:4:65534:sync:/bin:/bin/sync\nsshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin\n```\n# 15. uniq去重命令\n uniq命令可以去除排序过的文件中的重复行，因此uniq经常和sort合用。也就是说，为了使uniq起作用，所有的重复行必须是相邻的。\n\n## 15.1. uniq语法\n`[root@www ~]# uniq [-icu]`\n选项与参数：\n* -i   ：忽略大小写字符的不同；\n* -c  ：进行计数\n* -u  ：只显示唯一的行\n\ntestfile的内容如下\n```\ncat testfile\nhello\nworld\nfriend\nhello\nworld\nhello\n```\n直接删除未经排序的文件，将会发现没有任何行被删除\n```\n#uniq testfile  \nhello\nworld\nfriend\nhello\nworld\nhello\n```\n排序文件，默认是去重\n```\n#cat testfile | sort |uniq\nfriend\nhello\nworld\n```\n排序之后删除了重复行，同时在行首位置输出该行重复的次数\n```\n#sort testfile | uniq -c\n1 friend\n3 hello\n2 world\n```\n仅显示存在重复的行，并在行首显示该行重复的次数\n```\n#sort testfile | uniq -dc\n3 hello\n2 world\n```\n仅显示不重复的行\n```\nsort testfile | uniq -u\nfriend  \n```\n\n\n# 16. wc命令\n## 16.1. 语法\n`[root@www ~]# wc [-lwm]`\n选项与参数：\n* -l  ：仅列出行；\n* -w  ：仅列出多少字(英文单字)；\n* -m  ：多少字符；\n## 16.2. 默认使用wc统计/etc/passwd\n\n```\n#wc /etc/passwd\n40   45 1719 /etc/passwd\n40是行数，45是单词数，1719是字节数\n\n```\nwc的命令比较简单使用，每个参数使用如下：\n \n```\n#wc -l /etc/passwd   #统计行数，在对记录数时，很常用\n40 /etc/passwd       #表示系统有40个账户\n\n#wc -w /etc/passwd  #统计单词出现次数\n45 /etc/passwd\n\n#wc -m /etc/passwd  #统计文件的字符数\n1719\n\n```\n\n\n\n\n\n\n\n\n","slug":"大数据/大数据02-03 shell编程语法讲解","published":1,"updated":"2018-02-06T07:48:58.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89yo000mv4vfwfe73cfp","content":"<h1 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1. 变量\"></a>1. 变量</h1><h2 id=\"1-1-系统变量\"><a href=\"#1-1-系统变量\" class=\"headerlink\" title=\"1.1. 系统变量\"></a>1.1. 系统变量</h2><ul>\n<li>$HOME</li>\n<li>$PWD</li>\n<li>$SHELL</li>\n<li>$USER<br>显示当前shell中所有变量</li>\n</ul>\n<p>set</p>\n<a id=\"more\"></a>\n<h2 id=\"1-2-用户自定义变量\"><a href=\"#1-2-用户自定义变量\" class=\"headerlink\" title=\"1.2. 用户自定义变量\"></a>1.2. 用户自定义变量</h2><p>定义变量</p>\n<blockquote>\n<p>STR=”hello world”</p>\n<p>A=9</p>\n<p>unset A 撤销变量 A</p>\n<p>readonly B=2 声明静态的变量 B=2 ，不能 unset</p>\n<p>export 变量名 可把变量提升为全局环境变量，可供其他shell程序使用</p>\n</blockquote>\n<p>将命令的返回值赋给变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A=`ls -la` 反引号，运行里面的命令，并把结果返回给变量A</div><div class=\"line\">A=$(ls -la) 等价于反引号</div></pre></td></tr></table></figure>\n<h2 id=\"1-3-shell中的特殊变量\"><a href=\"#1-3-shell中的特殊变量\" class=\"headerlink\" title=\"1.3. shell中的特殊变量\"></a>1.3. shell中的特殊变量</h2><ul>\n<li>$? 表示上一个命令退出的状态  true 0 false 1 错误127</li>\n<li>$$ 表示当前进程编号</li>\n<li>$0 表示当前脚本名称</li>\n<li>$n 表示n位置的输入参数（n代表数字，n&gt;=1）</li>\n<li>$#     表示参数的个数，常用于循环</li>\n<li>$*和$@ 都表示参数列表 <h3 id=\"1-3-1-与-区别\"><a href=\"#1-3-1-与-区别\" class=\"headerlink\" title=\"1.3.1. $*与$@区别\"></a>1.3.1. $*与$@区别</h3></li>\n<li>$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号” “包含时，都以$1  $2  … $n 的形式输出所有参数  </li>\n<li>当它们被双引号” “包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数</li>\n</ul>\n<h2 id=\"1-4-运算符\"><a href=\"#1-4-运算符\" class=\"headerlink\" title=\"1.4. 运算符\"></a>1.4. 运算符</h2><blockquote>\n<p>格式 :expr m + n 或$((m+n)) 注意expr运算符间要有空格</p>\n</blockquote>\n<p>例如计算（2 ＋3 ）×4 的值<br>1 .分步计算\u000b    S=<code>expr 2 + 3</code>\u000b    expr $S * 4<br>2.一步完成计算<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">expr `expr 2 + 3 ` \\* 4</div><div class=\"line\"><span class=\"built_in\">echo</span> `expr \\`expr 2 + 3\\` \\* 4`</div><div class=\"line\">或</div><div class=\"line\">$(((2+3)*4))</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-for循环\"><a href=\"#2-for循环\" class=\"headerlink\" title=\"2. for循环\"></a>2. for循环</h1><h2 id=\"2-1-第一种：\"><a href=\"#2-1-第一种：\" class=\"headerlink\" title=\"2.1. 第一种：\"></a>2.1. 第一种：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> N <span class=\"keyword\">in</span> 1 2 3</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$N</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\">或</div><div class=\"line\"><span class=\"keyword\">for</span> N <span class=\"keyword\">in</span> 1 2 3; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$N</span>; <span class=\"keyword\">done</span></div><div class=\"line\">或</div><div class=\"line\"><span class=\"keyword\">for</span> N <span class=\"keyword\">in</span> &#123;1..3&#125;; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$N</span>; <span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<h2 id=\"2-2-第二种：\"><a href=\"#2-2-第二种：\" class=\"headerlink\" title=\"2.2. 第二种：\"></a>2.2. 第二种：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ((i = 0; i &lt;= 5; i++))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"welcome <span class=\"variable\">$i</span> times\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\">或</div><div class=\"line\"><span class=\"keyword\">for</span> ((i = 0; i &lt;= 5; i++)); <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"welcome <span class=\"variable\">$i</span> times\"</span>; <span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<h1 id=\"3-while循环\"><a href=\"#3-while循环\" class=\"headerlink\" title=\"3. while循环\"></a>3. while循环</h1><h2 id=\"3-1-第一种\"><a href=\"#3-1-第一种\" class=\"headerlink\" title=\"3.1. 第一种\"></a>3.1. 第一种</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> expression</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\"><span class=\"built_in\">command</span></div><div class=\"line\">…</div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<h2 id=\"3-2-第二种\"><a href=\"#3-2-第二种\" class=\"headerlink\" title=\"3.2. 第二种\"></a>3.2. 第二种</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">i=1</div><div class=\"line\"><span class=\"keyword\">while</span> ((i&lt;=3))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></div><div class=\"line\">  <span class=\"built_in\">let</span> i++</div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<h1 id=\"4-case语句\"><a href=\"#4-case语句\" class=\"headerlink\" title=\"4. case语句\"></a>4. case语句</h1><p>格式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></div><div class=\"line\">start)</div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"starting\"</span></div><div class=\"line\">\t;;</div><div class=\"line\">stop)</div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"stoping\"</span></div><div class=\"line\">\t;;</div><div class=\"line\">*)</div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: &#123;start|stop&#125; “</span></div><div class=\"line\"><span class=\"string\">esac</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"5-read命令\"><a href=\"#5-read命令\" class=\"headerlink\" title=\"5. read命令\"></a>5. read命令</h1><p>read -p(提示语句)-n(字符个数) -t(等待时间)<br>    read -p “please input your name: “ NAME</p>\n<p>使用示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[vagrant@mysql1 ~]$ read -p &quot;please enter a number:&quot; numb</div><div class=\"line\">please enter a number:1</div><div class=\"line\">[vagrant@mysql1 ~]$ echo $numb</div><div class=\"line\">1</div><div class=\"line\">[vagrant@mysql1 ~]$</div></pre></td></tr></table></figure></p>\n<h1 id=\"6-if判断\"><a href=\"#6-if判断\" class=\"headerlink\" title=\"6. if判断\"></a>6. if判断</h1><p>语法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition </div><div class=\"line\"><span class=\"keyword\">then</span> </div><div class=\"line\">    statements</div><div class=\"line\">[<span class=\"keyword\">elif</span> condition </div><div class=\"line\">    <span class=\"keyword\">then</span> statements. ..] </div><div class=\"line\">[<span class=\"keyword\">else</span> </div><div class=\"line\">    statements ] </div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"7-判断语句\"><a href=\"#7-判断语句\" class=\"headerlink\" title=\"7. 判断语句\"></a>7. 判断语句</h1><p>[ condition ] <strong>(注意condition前后要有空格)</strong></p>\n<h1 id=\"8-非空返回true，可使用-验证（0为true，-gt-1为false）\"><a href=\"#8-非空返回true，可使用-验证（0为true，-gt-1为false）\" class=\"headerlink\" title=\"8. 非空返回true，可使用$?验证（0为true，&gt;1为false）\"></a>8. 非空返回true，可使用$?验证（0为true，&gt;1为false）</h1><p>[ test ]</p>\n<h1 id=\"9-空返回false\"><a href=\"#9-空返回false\" class=\"headerlink\" title=\"9. 空返回false\"></a>9. 空返回false</h1><p>[  ]</p>\n<blockquote>\n<p>[ condition ] &amp;&amp; echo OK || echo notok</p>\n</blockquote>\n<p>条件满足，执行后面的语句 不满足执行 || 后面的语句</p>\n<h1 id=\"10-常用判断条件\"><a href=\"#10-常用判断条件\" class=\"headerlink\" title=\"10. 常用判断条件\"></a>10. 常用判断条件</h1><ul>\n<li>= 字符串比较</li>\n<li>-lt 小于</li>\n<li>-le 小于等于</li>\n<li>-eq 等于</li>\n<li>-gt 大于</li>\n<li>-ge 大于等于</li>\n<li><p>-ne 不等于</p>\n</li>\n<li><p>-r 有读的权限</p>\n</li>\n<li>-w 有写的权限</li>\n<li>-x 有执行的权限</li>\n<li><strong>-f 文件存在并且是一个常规的文件</strong></li>\n<li>-s 文件存在且不为空</li>\n<li>-d 文件存在并是一个目录</li>\n<li>-b文件存在并且是一个块设备</li>\n<li>-L 文件存在并且是一个链接</li>\n</ul>\n<h1 id=\"11-Shell自定义函数\"><a href=\"#11-Shell自定义函数\" class=\"headerlink\" title=\"11. Shell自定义函数\"></a>11. Shell自定义函数</h1><p>语法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> [ <span class=\"keyword\">function</span> ] funname [()]</div><div class=\"line\">&#123;</div><div class=\"line\">    action;</div><div class=\"line\">    [<span class=\"built_in\">return</span> int;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>三种声明方式:</p>\n<ul>\n<li>function start()  </li>\n<li>function start </li>\n<li>start()</li>\n</ul>\n<p>注意</p>\n<ol>\n<li>必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先预编译</li>\n<li>函数返回值，只能通过$? 系统变量获得，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</li>\n</ol>\n<h2 id=\"11-1-例子\"><a href=\"#11-1-例子\" class=\"headerlink\" title=\"11.1. 例子\"></a>11.1. 例子</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\">fSum 3 2;</div><div class=\"line\"><span class=\"keyword\">function</span> fSum()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span>,<span class=\"variable\">$2</span>;</div><div class=\"line\">    <span class=\"built_in\">return</span> $((<span class=\"variable\">$1</span>+<span class=\"variable\">$2</span>));</div><div class=\"line\">&#125;</div><div class=\"line\">fSum 5 7;</div><div class=\"line\">total=$?;</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$total</span>,$?;</div></pre></td></tr></table></figure>\n<p>结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[vagrant@mysql1 ~]$ sh test </div><div class=\"line\">test: line 2: fSum: command not found</div><div class=\"line\">5,7</div><div class=\"line\">12,0</div></pre></td></tr></table></figure></p>\n<h1 id=\"12-脚本调试\"><a href=\"#12-脚本调试\" class=\"headerlink\" title=\"12. 脚本调试\"></a>12. 脚本调试</h1><ul>\n<li>sh -vx helloWorld.sh</li>\n<li>或者在脚本中增加set -x</li>\n</ul>\n<h1 id=\"13-cut命令\"><a href=\"#13-cut命令\" class=\"headerlink\" title=\"13. cut命令\"></a>13. cut命令</h1><p>cut命令可以从一个文本文件或者文本流中提取文本列。</p>\n<h2 id=\"13-1-语法\"><a href=\"#13-1-语法\" class=\"headerlink\" title=\"13.1. 语法\"></a>13.1. 语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cut -d&apos;分隔字符&apos; -f fields &lt;==用于有特定分隔字符</div><div class=\"line\">cut -c 字符区间            &lt;==用于排列整齐的信息</div></pre></td></tr></table></figure>\n<ul>\n<li>-d  ：后面接分隔字符。与 -f 一起使用；</li>\n<li>-f  ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思；</li>\n<li>-c  ：以字符 (characters) 的单位取出固定字符区间；</li>\n</ul>\n<h2 id=\"13-2-例子\"><a href=\"#13-2-例子\" class=\"headerlink\" title=\"13.2. 例子\"></a>13.2. 例子</h2><h3 id=\"13-2-1-PATH-变量如下\"><a href=\"#13-2-1-PATH-变量如下\" class=\"headerlink\" title=\"13.2.1. PATH 变量如下\"></a>13.2.1. PATH 变量如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@www ~]# echo $PATH</div><div class=\"line\">/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games</div><div class=\"line\"># 1 | 2       | 3   | 4       | 5            | 6            | 7</div></pre></td></tr></table></figure>\n<h3 id=\"13-2-2-将-PATH-变量取出，我要找出第五个路径。\"><a href=\"#13-2-2-将-PATH-变量取出，我要找出第五个路径。\" class=\"headerlink\" title=\"13.2.2. 将 PATH 变量取出，我要找出第五个路径。\"></a>13.2.2. 将 PATH 变量取出，我要找出第五个路径。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#echo $PATH | cut -d &apos;:&apos; -f 5</div><div class=\"line\">/usr/local/bin</div></pre></td></tr></table></figure>\n<h3 id=\"13-2-3-将-PATH-变量取出，我要找出第三和第五个路径。\"><a href=\"#13-2-3-将-PATH-变量取出，我要找出第三和第五个路径。\" class=\"headerlink\" title=\"13.2.3. 将 PATH 变量取出，我要找出第三和第五个路径。\"></a>13.2.3. 将 PATH 变量取出，我要找出第三和第五个路径。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#echo $PATH | cut -d &apos;:&apos; -f 3,5</div><div class=\"line\">/sbin:/usr/local/bin</div></pre></td></tr></table></figure>\n<h3 id=\"13-2-4-将-PATH-变量取出，我要找出第三到最后一个路径。\"><a href=\"#13-2-4-将-PATH-变量取出，我要找出第三到最后一个路径。\" class=\"headerlink\" title=\"13.2.4. 将 PATH 变量取出，我要找出第三到最后一个路径。\"></a>13.2.4. 将 PATH 变量取出，我要找出第三到最后一个路径。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo $PATH | cut -d &apos;:&apos; -f 3-</div><div class=\"line\">/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games</div></pre></td></tr></table></figure>\n<h3 id=\"13-2-5-将-PATH-变量取出，我要找出第一到第三个路径。\"><a href=\"#13-2-5-将-PATH-变量取出，我要找出第一到第三个路径。\" class=\"headerlink\" title=\"13.2.5. 将 PATH 变量取出，我要找出第一到第三个路径。\"></a>13.2.5. 将 PATH 变量取出，我要找出第一到第三个路径。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#echo $PATH | cut -d &apos;:&apos; -f 1-3</div><div class=\"line\">/bin:/usr/bin:/sbin:</div></pre></td></tr></table></figure>\n<h3 id=\"13-2-6-将-PATH-变量取出，我要找出第一到第三，还有第五个路径。\"><a href=\"#13-2-6-将-PATH-变量取出，我要找出第一到第三，还有第五个路径。\" class=\"headerlink\" title=\"13.2.6. 将 PATH 变量取出，我要找出第一到第三，还有第五个路径。\"></a>13.2.6. 将 PATH 变量取出，我要找出第一到第三，还有第五个路径。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo $PATH | cut -d &apos;:&apos; -f 1-3,5</div><div class=\"line\">/bin:/usr/bin:/sbin:/usr/local/bin</div></pre></td></tr></table></figure>\n<h2 id=\"13-3-实用例子-只显示-etc-passwd的用户和shell\"><a href=\"#13-3-实用例子-只显示-etc-passwd的用户和shell\" class=\"headerlink\" title=\"13.3. 实用例子:只显示/etc/passwd的用户和shell\"></a>13.3. 实用例子:只显示/etc/passwd的用户和shell</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cat /etc/passwd | cut -d &apos;:&apos; -f 1,7 </div><div class=\"line\">root:/bin/bash</div><div class=\"line\">daemon:/bin/sh</div><div class=\"line\">bin:/bin/sh</div></pre></td></tr></table></figure>\n<h1 id=\"14-sort命令\"><a href=\"#14-sort命令\" class=\"headerlink\" title=\"14. sort命令\"></a>14. sort命令</h1><p>sort 命令对 File 参数指定的文件中的行排序，并将结果写到标准输出。如果 File 参数指定多个文件，那么 sort 命令将这些文件连接起来，并当作一个文件进行排序。</p>\n<h2 id=\"14-1-语法\"><a href=\"#14-1-语法\" class=\"headerlink\" title=\"14.1. 语法\"></a>14.1. 语法</h2><p><code>[root@www ~]# sort [-fbMnrtuk] [file or stdin]</code><br>选项与参数：</p>\n<ul>\n<li>-f  ：忽略大小写的差异，例如 A 与 a 视为编码相同；</li>\n<li>-b  ：忽略最前面的空格符部分；</li>\n<li>-M  ：以月份的名字来排序，例如 JAN, DEC 等等的排序方法；</li>\n<li>-n  ：使用『纯数字』进行排序(默认是以文字型态来排序的)；</li>\n<li>-r  ：反向排序；</li>\n<li>-u  ：就是 uniq ，相同的数据中，仅出现一行代表；</li>\n<li>-t  ：分隔符，默认是用 [tab] 键来分隔；</li>\n<li>-k  ：以那个区间 (field) 来进行排序的意思</li>\n</ul>\n<h2 id=\"14-2-对-etc-passwd-的账号进行排序\"><a href=\"#14-2-对-etc-passwd-的账号进行排序\" class=\"headerlink\" title=\"14.2. 对/etc/passwd 的账号进行排序\"></a>14.2. 对/etc/passwd 的账号进行排序</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@www ~]<span class=\"comment\"># cat /etc/passwd | sort</span></div><div class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</div><div class=\"line\">apache:x:48:48:Apache:/var/www:/sbin/nologin</div><div class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</div><div class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</div></pre></td></tr></table></figure>\n<p>sort 是默认以第一个数据来排序，而且默认是以字符串形式来排序,所以由字母 a 开始升序排序。</p>\n<h2 id=\"14-3-etc-passwd-内容是以-来分隔的，我想以第三栏来排序，该如何\"><a href=\"#14-3-etc-passwd-内容是以-来分隔的，我想以第三栏来排序，该如何\" class=\"headerlink\" title=\"14.3. /etc/passwd 内容是以 : 来分隔的，我想以第三栏来排序，该如何\"></a>14.3. /etc/passwd 内容是以 : 来分隔的，我想以第三栏来排序，该如何</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@www ~]# cat /etc/passwd | sort -t &apos;:&apos; -k 3</div><div class=\"line\">root:x:0:0:root:/root:/bin/bash</div><div class=\"line\">uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin</div><div class=\"line\">operator:x:11:0:operator:/root:/sbin/nologin</div><div class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</div><div class=\"line\">games:x:12:100:games:/usr/games:/sbin/nologin</div></pre></td></tr></table></figure>\n<h2 id=\"14-4-默认是以字符串来排序的，如果想要使用数字排序：\"><a href=\"#14-4-默认是以字符串来排序的，如果想要使用数字排序：\" class=\"headerlink\" title=\"14.4. 默认是以字符串来排序的，如果想要使用数字排序：\"></a>14.4. 默认是以字符串来排序的，如果想要使用数字排序：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd | sort -t &apos;:&apos; -k 3n</div><div class=\"line\">root:x:0:0:root:/root:/bin/bash</div><div class=\"line\">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class=\"line\">bin:x:2:2:bin:/bin:/bin/sh</div></pre></td></tr></table></figure>\n<h2 id=\"14-5-默认是升序排序，如果要倒序排序，如下\"><a href=\"#14-5-默认是升序排序，如果要倒序排序，如下\" class=\"headerlink\" title=\"14.5. 默认是升序排序，如果要倒序排序，如下\"></a>14.5. 默认是升序排序，如果要倒序排序，如下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd | sort -t &apos;:&apos; -k 3nr</div><div class=\"line\">nobody:x:65534:65534:nobody:/nonexistent:/bin/sh</div><div class=\"line\">ntp:x:106:113::/home/ntp:/bin/false</div><div class=\"line\">messagebus:x:105:109::/var/run/dbus:/bin/false</div><div class=\"line\">sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin</div></pre></td></tr></table></figure>\n<h2 id=\"14-6-如果要对-etc-passwd-先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。\"><a href=\"#14-6-如果要对-etc-passwd-先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。\" class=\"headerlink\" title=\"14.6. 如果要对/etc/passwd,先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。\"></a>14.6. 如果要对/etc/passwd,先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd |  sort -t&apos;:&apos; -k 6.2,6.4 -k 1r      </div><div class=\"line\">sync:x:4:65534:sync:/bin:/bin/sync</div><div class=\"line\">proxy:x:13:13:proxy:/bin:/bin/sh</div><div class=\"line\">bin:x:2:2:bin:/bin:/bin/sh</div><div class=\"line\">sys:x:3:3:sys:/dev:/bin/sh</div></pre></td></tr></table></figure>\n<h2 id=\"14-7-查看-etc-passwd有多少个shell-对-etc-passwd的第七个域进行排序，然后去重\"><a href=\"#14-7-查看-etc-passwd有多少个shell-对-etc-passwd的第七个域进行排序，然后去重\" class=\"headerlink\" title=\"14.7. 查看/etc/passwd有多少个shell:对/etc/passwd的第七个域进行排序，然后去重:\"></a>14.7. 查看/etc/passwd有多少个shell:对/etc/passwd的第七个域进行排序，然后去重:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd |  sort -t&apos;:&apos; -k 7 -u</div><div class=\"line\">root:x:0:0:root:/root:/bin/bash</div><div class=\"line\">syslog:x:101:102::/home/syslog:/bin/false</div><div class=\"line\">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class=\"line\">sync:x:4:65534:sync:/bin:/bin/sync</div><div class=\"line\">sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin</div></pre></td></tr></table></figure>\n<h1 id=\"15-uniq去重命令\"><a href=\"#15-uniq去重命令\" class=\"headerlink\" title=\"15. uniq去重命令\"></a>15. uniq去重命令</h1><p> uniq命令可以去除排序过的文件中的重复行，因此uniq经常和sort合用。也就是说，为了使uniq起作用，所有的重复行必须是相邻的。</p>\n<h2 id=\"15-1-uniq语法\"><a href=\"#15-1-uniq语法\" class=\"headerlink\" title=\"15.1. uniq语法\"></a>15.1. uniq语法</h2><p><code>[root@www ~]# uniq [-icu]</code><br>选项与参数：</p>\n<ul>\n<li>-i   ：忽略大小写字符的不同；</li>\n<li>-c  ：进行计数</li>\n<li>-u  ：只显示唯一的行</li>\n</ul>\n<p>testfile的内容如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat testfile</div><div class=\"line\">hello</div><div class=\"line\">world</div><div class=\"line\">friend</div><div class=\"line\">hello</div><div class=\"line\">world</div><div class=\"line\">hello</div></pre></td></tr></table></figure></p>\n<p>直接删除未经排序的文件，将会发现没有任何行被删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#uniq testfile  </div><div class=\"line\">hello</div><div class=\"line\">world</div><div class=\"line\">friend</div><div class=\"line\">hello</div><div class=\"line\">world</div><div class=\"line\">hello</div></pre></td></tr></table></figure></p>\n<p>排序文件，默认是去重<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cat testfile | sort |uniq</div><div class=\"line\">friend</div><div class=\"line\">hello</div><div class=\"line\">world</div></pre></td></tr></table></figure></p>\n<p>排序之后删除了重复行，同时在行首位置输出该行重复的次数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#sort testfile | uniq -c</div><div class=\"line\">1 friend</div><div class=\"line\">3 hello</div><div class=\"line\">2 world</div></pre></td></tr></table></figure></p>\n<p>仅显示存在重复的行，并在行首显示该行重复的次数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#sort testfile | uniq -dc</div><div class=\"line\">3 hello</div><div class=\"line\">2 world</div></pre></td></tr></table></figure></p>\n<p>仅显示不重复的行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sort testfile | uniq -u</div><div class=\"line\">friend</div></pre></td></tr></table></figure></p>\n<h1 id=\"16-wc命令\"><a href=\"#16-wc命令\" class=\"headerlink\" title=\"16. wc命令\"></a>16. wc命令</h1><h2 id=\"16-1-语法\"><a href=\"#16-1-语法\" class=\"headerlink\" title=\"16.1. 语法\"></a>16.1. 语法</h2><p><code>[root@www ~]# wc [-lwm]</code><br>选项与参数：</p>\n<ul>\n<li>-l  ：仅列出行；</li>\n<li>-w  ：仅列出多少字(英文单字)；</li>\n<li>-m  ：多少字符；<h2 id=\"16-2-默认使用wc统计-etc-passwd\"><a href=\"#16-2-默认使用wc统计-etc-passwd\" class=\"headerlink\" title=\"16.2. 默认使用wc统计/etc/passwd\"></a>16.2. 默认使用wc统计/etc/passwd</h2></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#wc /etc/passwd</div><div class=\"line\">40   45 1719 /etc/passwd</div><div class=\"line\">40是行数，45是单词数，1719是字节数</div></pre></td></tr></table></figure>\n<p>wc的命令比较简单使用，每个参数使用如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#wc -l /etc/passwd   #统计行数，在对记录数时，很常用</div><div class=\"line\">40 /etc/passwd       #表示系统有40个账户</div><div class=\"line\"></div><div class=\"line\">#wc -w /etc/passwd  #统计单词出现次数</div><div class=\"line\">45 /etc/passwd</div><div class=\"line\"></div><div class=\"line\">#wc -m /etc/passwd  #统计文件的字符数</div><div class=\"line\">1719</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1. 变量\"></a>1. 变量</h1><h2 id=\"1-1-系统变量\"><a href=\"#1-1-系统变量\" class=\"headerlink\" title=\"1.1. 系统变量\"></a>1.1. 系统变量</h2><ul>\n<li>$HOME</li>\n<li>$PWD</li>\n<li>$SHELL</li>\n<li>$USER<br>显示当前shell中所有变量</li>\n</ul>\n<p>set</p>","more":"<h2 id=\"1-2-用户自定义变量\"><a href=\"#1-2-用户自定义变量\" class=\"headerlink\" title=\"1.2. 用户自定义变量\"></a>1.2. 用户自定义变量</h2><p>定义变量</p>\n<blockquote>\n<p>STR=”hello world”</p>\n<p>A=9</p>\n<p>unset A 撤销变量 A</p>\n<p>readonly B=2 声明静态的变量 B=2 ，不能 unset</p>\n<p>export 变量名 可把变量提升为全局环境变量，可供其他shell程序使用</p>\n</blockquote>\n<p>将命令的返回值赋给变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A=`ls -la` 反引号，运行里面的命令，并把结果返回给变量A</div><div class=\"line\">A=$(ls -la) 等价于反引号</div></pre></td></tr></table></figure>\n<h2 id=\"1-3-shell中的特殊变量\"><a href=\"#1-3-shell中的特殊变量\" class=\"headerlink\" title=\"1.3. shell中的特殊变量\"></a>1.3. shell中的特殊变量</h2><ul>\n<li>$? 表示上一个命令退出的状态  true 0 false 1 错误127</li>\n<li>$$ 表示当前进程编号</li>\n<li>$0 表示当前脚本名称</li>\n<li>$n 表示n位置的输入参数（n代表数字，n&gt;=1）</li>\n<li>$#     表示参数的个数，常用于循环</li>\n<li>$*和$@ 都表示参数列表 <h3 id=\"1-3-1-与-区别\"><a href=\"#1-3-1-与-区别\" class=\"headerlink\" title=\"1.3.1. $*与$@区别\"></a>1.3.1. $*与$@区别</h3></li>\n<li>$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号” “包含时，都以$1  $2  … $n 的形式输出所有参数  </li>\n<li>当它们被双引号” “包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数</li>\n</ul>\n<h2 id=\"1-4-运算符\"><a href=\"#1-4-运算符\" class=\"headerlink\" title=\"1.4. 运算符\"></a>1.4. 运算符</h2><blockquote>\n<p>格式 :expr m + n 或$((m+n)) 注意expr运算符间要有空格</p>\n</blockquote>\n<p>例如计算（2 ＋3 ）×4 的值<br>1 .分步计算\u000b    S=<code>expr 2 + 3</code>\u000b    expr $S * 4<br>2.一步完成计算<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">expr `expr 2 + 3 ` \\* 4</div><div class=\"line\"><span class=\"built_in\">echo</span> `expr \\`expr 2 + 3\\` \\* 4`</div><div class=\"line\">或</div><div class=\"line\">$(((2+3)*4))</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-for循环\"><a href=\"#2-for循环\" class=\"headerlink\" title=\"2. for循环\"></a>2. for循环</h1><h2 id=\"2-1-第一种：\"><a href=\"#2-1-第一种：\" class=\"headerlink\" title=\"2.1. 第一种：\"></a>2.1. 第一种：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> N <span class=\"keyword\">in</span> 1 2 3</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$N</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\">或</div><div class=\"line\"><span class=\"keyword\">for</span> N <span class=\"keyword\">in</span> 1 2 3; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$N</span>; <span class=\"keyword\">done</span></div><div class=\"line\">或</div><div class=\"line\"><span class=\"keyword\">for</span> N <span class=\"keyword\">in</span> &#123;1..3&#125;; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$N</span>; <span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<h2 id=\"2-2-第二种：\"><a href=\"#2-2-第二种：\" class=\"headerlink\" title=\"2.2. 第二种：\"></a>2.2. 第二种：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ((i = 0; i &lt;= 5; i++))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"welcome <span class=\"variable\">$i</span> times\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\">或</div><div class=\"line\"><span class=\"keyword\">for</span> ((i = 0; i &lt;= 5; i++)); <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"welcome <span class=\"variable\">$i</span> times\"</span>; <span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<h1 id=\"3-while循环\"><a href=\"#3-while循环\" class=\"headerlink\" title=\"3. while循环\"></a>3. while循环</h1><h2 id=\"3-1-第一种\"><a href=\"#3-1-第一种\" class=\"headerlink\" title=\"3.1. 第一种\"></a>3.1. 第一种</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> expression</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\"><span class=\"built_in\">command</span></div><div class=\"line\">…</div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<h2 id=\"3-2-第二种\"><a href=\"#3-2-第二种\" class=\"headerlink\" title=\"3.2. 第二种\"></a>3.2. 第二种</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">i=1</div><div class=\"line\"><span class=\"keyword\">while</span> ((i&lt;=3))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></div><div class=\"line\">  <span class=\"built_in\">let</span> i++</div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<h1 id=\"4-case语句\"><a href=\"#4-case语句\" class=\"headerlink\" title=\"4. case语句\"></a>4. case语句</h1><p>格式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></div><div class=\"line\">start)</div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"starting\"</span></div><div class=\"line\">\t;;</div><div class=\"line\">stop)</div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"stoping\"</span></div><div class=\"line\">\t;;</div><div class=\"line\">*)</div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: &#123;start|stop&#125; “</span></div><div class=\"line\"><span class=\"string\">esac</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"5-read命令\"><a href=\"#5-read命令\" class=\"headerlink\" title=\"5. read命令\"></a>5. read命令</h1><p>read -p(提示语句)-n(字符个数) -t(等待时间)<br>    read -p “please input your name: “ NAME</p>\n<p>使用示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[vagrant@mysql1 ~]$ read -p &quot;please enter a number:&quot; numb</div><div class=\"line\">please enter a number:1</div><div class=\"line\">[vagrant@mysql1 ~]$ echo $numb</div><div class=\"line\">1</div><div class=\"line\">[vagrant@mysql1 ~]$</div></pre></td></tr></table></figure></p>\n<h1 id=\"6-if判断\"><a href=\"#6-if判断\" class=\"headerlink\" title=\"6. if判断\"></a>6. if判断</h1><p>语法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition </div><div class=\"line\"><span class=\"keyword\">then</span> </div><div class=\"line\">    statements</div><div class=\"line\">[<span class=\"keyword\">elif</span> condition </div><div class=\"line\">    <span class=\"keyword\">then</span> statements. ..] </div><div class=\"line\">[<span class=\"keyword\">else</span> </div><div class=\"line\">    statements ] </div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"7-判断语句\"><a href=\"#7-判断语句\" class=\"headerlink\" title=\"7. 判断语句\"></a>7. 判断语句</h1><p>[ condition ] <strong>(注意condition前后要有空格)</strong></p>\n<h1 id=\"8-非空返回true，可使用-验证（0为true，-gt-1为false）\"><a href=\"#8-非空返回true，可使用-验证（0为true，-gt-1为false）\" class=\"headerlink\" title=\"8. 非空返回true，可使用$?验证（0为true，&gt;1为false）\"></a>8. 非空返回true，可使用$?验证（0为true，&gt;1为false）</h1><p>[ test ]</p>\n<h1 id=\"9-空返回false\"><a href=\"#9-空返回false\" class=\"headerlink\" title=\"9. 空返回false\"></a>9. 空返回false</h1><p>[  ]</p>\n<blockquote>\n<p>[ condition ] &amp;&amp; echo OK || echo notok</p>\n</blockquote>\n<p>条件满足，执行后面的语句 不满足执行 || 后面的语句</p>\n<h1 id=\"10-常用判断条件\"><a href=\"#10-常用判断条件\" class=\"headerlink\" title=\"10. 常用判断条件\"></a>10. 常用判断条件</h1><ul>\n<li>= 字符串比较</li>\n<li>-lt 小于</li>\n<li>-le 小于等于</li>\n<li>-eq 等于</li>\n<li>-gt 大于</li>\n<li>-ge 大于等于</li>\n<li><p>-ne 不等于</p>\n</li>\n<li><p>-r 有读的权限</p>\n</li>\n<li>-w 有写的权限</li>\n<li>-x 有执行的权限</li>\n<li><strong>-f 文件存在并且是一个常规的文件</strong></li>\n<li>-s 文件存在且不为空</li>\n<li>-d 文件存在并是一个目录</li>\n<li>-b文件存在并且是一个块设备</li>\n<li>-L 文件存在并且是一个链接</li>\n</ul>\n<h1 id=\"11-Shell自定义函数\"><a href=\"#11-Shell自定义函数\" class=\"headerlink\" title=\"11. Shell自定义函数\"></a>11. Shell自定义函数</h1><p>语法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> [ <span class=\"keyword\">function</span> ] funname [()]</div><div class=\"line\">&#123;</div><div class=\"line\">    action;</div><div class=\"line\">    [<span class=\"built_in\">return</span> int;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>三种声明方式:</p>\n<ul>\n<li>function start()  </li>\n<li>function start </li>\n<li>start()</li>\n</ul>\n<p>注意</p>\n<ol>\n<li>必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先预编译</li>\n<li>函数返回值，只能通过$? 系统变量获得，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</li>\n</ol>\n<h2 id=\"11-1-例子\"><a href=\"#11-1-例子\" class=\"headerlink\" title=\"11.1. 例子\"></a>11.1. 例子</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\">fSum 3 2;</div><div class=\"line\"><span class=\"keyword\">function</span> fSum()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span>,<span class=\"variable\">$2</span>;</div><div class=\"line\">    <span class=\"built_in\">return</span> $((<span class=\"variable\">$1</span>+<span class=\"variable\">$2</span>));</div><div class=\"line\">&#125;</div><div class=\"line\">fSum 5 7;</div><div class=\"line\">total=$?;</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$total</span>,$?;</div></pre></td></tr></table></figure>\n<p>结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[vagrant@mysql1 ~]$ sh test </div><div class=\"line\">test: line 2: fSum: command not found</div><div class=\"line\">5,7</div><div class=\"line\">12,0</div></pre></td></tr></table></figure></p>\n<h1 id=\"12-脚本调试\"><a href=\"#12-脚本调试\" class=\"headerlink\" title=\"12. 脚本调试\"></a>12. 脚本调试</h1><ul>\n<li>sh -vx helloWorld.sh</li>\n<li>或者在脚本中增加set -x</li>\n</ul>\n<h1 id=\"13-cut命令\"><a href=\"#13-cut命令\" class=\"headerlink\" title=\"13. cut命令\"></a>13. cut命令</h1><p>cut命令可以从一个文本文件或者文本流中提取文本列。</p>\n<h2 id=\"13-1-语法\"><a href=\"#13-1-语法\" class=\"headerlink\" title=\"13.1. 语法\"></a>13.1. 语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cut -d&apos;分隔字符&apos; -f fields &lt;==用于有特定分隔字符</div><div class=\"line\">cut -c 字符区间            &lt;==用于排列整齐的信息</div></pre></td></tr></table></figure>\n<ul>\n<li>-d  ：后面接分隔字符。与 -f 一起使用；</li>\n<li>-f  ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思；</li>\n<li>-c  ：以字符 (characters) 的单位取出固定字符区间；</li>\n</ul>\n<h2 id=\"13-2-例子\"><a href=\"#13-2-例子\" class=\"headerlink\" title=\"13.2. 例子\"></a>13.2. 例子</h2><h3 id=\"13-2-1-PATH-变量如下\"><a href=\"#13-2-1-PATH-变量如下\" class=\"headerlink\" title=\"13.2.1. PATH 变量如下\"></a>13.2.1. PATH 变量如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@www ~]# echo $PATH</div><div class=\"line\">/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games</div><div class=\"line\"># 1 | 2       | 3   | 4       | 5            | 6            | 7</div></pre></td></tr></table></figure>\n<h3 id=\"13-2-2-将-PATH-变量取出，我要找出第五个路径。\"><a href=\"#13-2-2-将-PATH-变量取出，我要找出第五个路径。\" class=\"headerlink\" title=\"13.2.2. 将 PATH 变量取出，我要找出第五个路径。\"></a>13.2.2. 将 PATH 变量取出，我要找出第五个路径。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#echo $PATH | cut -d &apos;:&apos; -f 5</div><div class=\"line\">/usr/local/bin</div></pre></td></tr></table></figure>\n<h3 id=\"13-2-3-将-PATH-变量取出，我要找出第三和第五个路径。\"><a href=\"#13-2-3-将-PATH-变量取出，我要找出第三和第五个路径。\" class=\"headerlink\" title=\"13.2.3. 将 PATH 变量取出，我要找出第三和第五个路径。\"></a>13.2.3. 将 PATH 变量取出，我要找出第三和第五个路径。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#echo $PATH | cut -d &apos;:&apos; -f 3,5</div><div class=\"line\">/sbin:/usr/local/bin</div></pre></td></tr></table></figure>\n<h3 id=\"13-2-4-将-PATH-变量取出，我要找出第三到最后一个路径。\"><a href=\"#13-2-4-将-PATH-变量取出，我要找出第三到最后一个路径。\" class=\"headerlink\" title=\"13.2.4. 将 PATH 变量取出，我要找出第三到最后一个路径。\"></a>13.2.4. 将 PATH 变量取出，我要找出第三到最后一个路径。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo $PATH | cut -d &apos;:&apos; -f 3-</div><div class=\"line\">/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games</div></pre></td></tr></table></figure>\n<h3 id=\"13-2-5-将-PATH-变量取出，我要找出第一到第三个路径。\"><a href=\"#13-2-5-将-PATH-变量取出，我要找出第一到第三个路径。\" class=\"headerlink\" title=\"13.2.5. 将 PATH 变量取出，我要找出第一到第三个路径。\"></a>13.2.5. 将 PATH 变量取出，我要找出第一到第三个路径。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#echo $PATH | cut -d &apos;:&apos; -f 1-3</div><div class=\"line\">/bin:/usr/bin:/sbin:</div></pre></td></tr></table></figure>\n<h3 id=\"13-2-6-将-PATH-变量取出，我要找出第一到第三，还有第五个路径。\"><a href=\"#13-2-6-将-PATH-变量取出，我要找出第一到第三，还有第五个路径。\" class=\"headerlink\" title=\"13.2.6. 将 PATH 变量取出，我要找出第一到第三，还有第五个路径。\"></a>13.2.6. 将 PATH 变量取出，我要找出第一到第三，还有第五个路径。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo $PATH | cut -d &apos;:&apos; -f 1-3,5</div><div class=\"line\">/bin:/usr/bin:/sbin:/usr/local/bin</div></pre></td></tr></table></figure>\n<h2 id=\"13-3-实用例子-只显示-etc-passwd的用户和shell\"><a href=\"#13-3-实用例子-只显示-etc-passwd的用户和shell\" class=\"headerlink\" title=\"13.3. 实用例子:只显示/etc/passwd的用户和shell\"></a>13.3. 实用例子:只显示/etc/passwd的用户和shell</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cat /etc/passwd | cut -d &apos;:&apos; -f 1,7 </div><div class=\"line\">root:/bin/bash</div><div class=\"line\">daemon:/bin/sh</div><div class=\"line\">bin:/bin/sh</div></pre></td></tr></table></figure>\n<h1 id=\"14-sort命令\"><a href=\"#14-sort命令\" class=\"headerlink\" title=\"14. sort命令\"></a>14. sort命令</h1><p>sort 命令对 File 参数指定的文件中的行排序，并将结果写到标准输出。如果 File 参数指定多个文件，那么 sort 命令将这些文件连接起来，并当作一个文件进行排序。</p>\n<h2 id=\"14-1-语法\"><a href=\"#14-1-语法\" class=\"headerlink\" title=\"14.1. 语法\"></a>14.1. 语法</h2><p><code>[root@www ~]# sort [-fbMnrtuk] [file or stdin]</code><br>选项与参数：</p>\n<ul>\n<li>-f  ：忽略大小写的差异，例如 A 与 a 视为编码相同；</li>\n<li>-b  ：忽略最前面的空格符部分；</li>\n<li>-M  ：以月份的名字来排序，例如 JAN, DEC 等等的排序方法；</li>\n<li>-n  ：使用『纯数字』进行排序(默认是以文字型态来排序的)；</li>\n<li>-r  ：反向排序；</li>\n<li>-u  ：就是 uniq ，相同的数据中，仅出现一行代表；</li>\n<li>-t  ：分隔符，默认是用 [tab] 键来分隔；</li>\n<li>-k  ：以那个区间 (field) 来进行排序的意思</li>\n</ul>\n<h2 id=\"14-2-对-etc-passwd-的账号进行排序\"><a href=\"#14-2-对-etc-passwd-的账号进行排序\" class=\"headerlink\" title=\"14.2. 对/etc/passwd 的账号进行排序\"></a>14.2. 对/etc/passwd 的账号进行排序</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@www ~]<span class=\"comment\"># cat /etc/passwd | sort</span></div><div class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</div><div class=\"line\">apache:x:48:48:Apache:/var/www:/sbin/nologin</div><div class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</div><div class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</div></pre></td></tr></table></figure>\n<p>sort 是默认以第一个数据来排序，而且默认是以字符串形式来排序,所以由字母 a 开始升序排序。</p>\n<h2 id=\"14-3-etc-passwd-内容是以-来分隔的，我想以第三栏来排序，该如何\"><a href=\"#14-3-etc-passwd-内容是以-来分隔的，我想以第三栏来排序，该如何\" class=\"headerlink\" title=\"14.3. /etc/passwd 内容是以 : 来分隔的，我想以第三栏来排序，该如何\"></a>14.3. /etc/passwd 内容是以 : 来分隔的，我想以第三栏来排序，该如何</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@www ~]# cat /etc/passwd | sort -t &apos;:&apos; -k 3</div><div class=\"line\">root:x:0:0:root:/root:/bin/bash</div><div class=\"line\">uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin</div><div class=\"line\">operator:x:11:0:operator:/root:/sbin/nologin</div><div class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</div><div class=\"line\">games:x:12:100:games:/usr/games:/sbin/nologin</div></pre></td></tr></table></figure>\n<h2 id=\"14-4-默认是以字符串来排序的，如果想要使用数字排序：\"><a href=\"#14-4-默认是以字符串来排序的，如果想要使用数字排序：\" class=\"headerlink\" title=\"14.4. 默认是以字符串来排序的，如果想要使用数字排序：\"></a>14.4. 默认是以字符串来排序的，如果想要使用数字排序：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd | sort -t &apos;:&apos; -k 3n</div><div class=\"line\">root:x:0:0:root:/root:/bin/bash</div><div class=\"line\">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class=\"line\">bin:x:2:2:bin:/bin:/bin/sh</div></pre></td></tr></table></figure>\n<h2 id=\"14-5-默认是升序排序，如果要倒序排序，如下\"><a href=\"#14-5-默认是升序排序，如果要倒序排序，如下\" class=\"headerlink\" title=\"14.5. 默认是升序排序，如果要倒序排序，如下\"></a>14.5. 默认是升序排序，如果要倒序排序，如下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd | sort -t &apos;:&apos; -k 3nr</div><div class=\"line\">nobody:x:65534:65534:nobody:/nonexistent:/bin/sh</div><div class=\"line\">ntp:x:106:113::/home/ntp:/bin/false</div><div class=\"line\">messagebus:x:105:109::/var/run/dbus:/bin/false</div><div class=\"line\">sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin</div></pre></td></tr></table></figure>\n<h2 id=\"14-6-如果要对-etc-passwd-先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。\"><a href=\"#14-6-如果要对-etc-passwd-先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。\" class=\"headerlink\" title=\"14.6. 如果要对/etc/passwd,先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。\"></a>14.6. 如果要对/etc/passwd,先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd |  sort -t&apos;:&apos; -k 6.2,6.4 -k 1r      </div><div class=\"line\">sync:x:4:65534:sync:/bin:/bin/sync</div><div class=\"line\">proxy:x:13:13:proxy:/bin:/bin/sh</div><div class=\"line\">bin:x:2:2:bin:/bin:/bin/sh</div><div class=\"line\">sys:x:3:3:sys:/dev:/bin/sh</div></pre></td></tr></table></figure>\n<h2 id=\"14-7-查看-etc-passwd有多少个shell-对-etc-passwd的第七个域进行排序，然后去重\"><a href=\"#14-7-查看-etc-passwd有多少个shell-对-etc-passwd的第七个域进行排序，然后去重\" class=\"headerlink\" title=\"14.7. 查看/etc/passwd有多少个shell:对/etc/passwd的第七个域进行排序，然后去重:\"></a>14.7. 查看/etc/passwd有多少个shell:对/etc/passwd的第七个域进行排序，然后去重:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd |  sort -t&apos;:&apos; -k 7 -u</div><div class=\"line\">root:x:0:0:root:/root:/bin/bash</div><div class=\"line\">syslog:x:101:102::/home/syslog:/bin/false</div><div class=\"line\">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class=\"line\">sync:x:4:65534:sync:/bin:/bin/sync</div><div class=\"line\">sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin</div></pre></td></tr></table></figure>\n<h1 id=\"15-uniq去重命令\"><a href=\"#15-uniq去重命令\" class=\"headerlink\" title=\"15. uniq去重命令\"></a>15. uniq去重命令</h1><p> uniq命令可以去除排序过的文件中的重复行，因此uniq经常和sort合用。也就是说，为了使uniq起作用，所有的重复行必须是相邻的。</p>\n<h2 id=\"15-1-uniq语法\"><a href=\"#15-1-uniq语法\" class=\"headerlink\" title=\"15.1. uniq语法\"></a>15.1. uniq语法</h2><p><code>[root@www ~]# uniq [-icu]</code><br>选项与参数：</p>\n<ul>\n<li>-i   ：忽略大小写字符的不同；</li>\n<li>-c  ：进行计数</li>\n<li>-u  ：只显示唯一的行</li>\n</ul>\n<p>testfile的内容如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat testfile</div><div class=\"line\">hello</div><div class=\"line\">world</div><div class=\"line\">friend</div><div class=\"line\">hello</div><div class=\"line\">world</div><div class=\"line\">hello</div></pre></td></tr></table></figure></p>\n<p>直接删除未经排序的文件，将会发现没有任何行被删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#uniq testfile  </div><div class=\"line\">hello</div><div class=\"line\">world</div><div class=\"line\">friend</div><div class=\"line\">hello</div><div class=\"line\">world</div><div class=\"line\">hello</div></pre></td></tr></table></figure></p>\n<p>排序文件，默认是去重<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cat testfile | sort |uniq</div><div class=\"line\">friend</div><div class=\"line\">hello</div><div class=\"line\">world</div></pre></td></tr></table></figure></p>\n<p>排序之后删除了重复行，同时在行首位置输出该行重复的次数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#sort testfile | uniq -c</div><div class=\"line\">1 friend</div><div class=\"line\">3 hello</div><div class=\"line\">2 world</div></pre></td></tr></table></figure></p>\n<p>仅显示存在重复的行，并在行首显示该行重复的次数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#sort testfile | uniq -dc</div><div class=\"line\">3 hello</div><div class=\"line\">2 world</div></pre></td></tr></table></figure></p>\n<p>仅显示不重复的行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sort testfile | uniq -u</div><div class=\"line\">friend</div></pre></td></tr></table></figure></p>\n<h1 id=\"16-wc命令\"><a href=\"#16-wc命令\" class=\"headerlink\" title=\"16. wc命令\"></a>16. wc命令</h1><h2 id=\"16-1-语法\"><a href=\"#16-1-语法\" class=\"headerlink\" title=\"16.1. 语法\"></a>16.1. 语法</h2><p><code>[root@www ~]# wc [-lwm]</code><br>选项与参数：</p>\n<ul>\n<li>-l  ：仅列出行；</li>\n<li>-w  ：仅列出多少字(英文单字)；</li>\n<li>-m  ：多少字符；<h2 id=\"16-2-默认使用wc统计-etc-passwd\"><a href=\"#16-2-默认使用wc统计-etc-passwd\" class=\"headerlink\" title=\"16.2. 默认使用wc统计/etc/passwd\"></a>16.2. 默认使用wc统计/etc/passwd</h2></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#wc /etc/passwd</div><div class=\"line\">40   45 1719 /etc/passwd</div><div class=\"line\">40是行数，45是单词数，1719是字节数</div></pre></td></tr></table></figure>\n<p>wc的命令比较简单使用，每个参数使用如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#wc -l /etc/passwd   #统计行数，在对记录数时，很常用</div><div class=\"line\">40 /etc/passwd       #表示系统有40个账户</div><div class=\"line\"></div><div class=\"line\">#wc -w /etc/passwd  #统计单词出现次数</div><div class=\"line\">45 /etc/passwd</div><div class=\"line\"></div><div class=\"line\">#wc -m /etc/passwd  #统计文件的字符数</div><div class=\"line\">1719</div></pre></td></tr></table></figure>"},{"title":"大数据02-05-shell编程-awk命令","toc":true,"date":"2017-11-06T15:25:05.000Z","scaffolds":null,"_content":"# 1. 简介\nawk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。\n\nawk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。\n\nawk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。\n<!--more -->\n \n\n# 2. 使用方法\n> `awk '{pattern + action}' {filenames}`\n\n尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。\n\nawk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。\n\n通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。\n\n \n## 2.1. 调用awk\n\n有三种方式调用awk\n\n \n### 2.1.1. 命令行方式\n> awk [-F  field-separator]  'commands'  input-file(s)\n其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。\n在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。\n\n### 2.1.2. shell脚本方式\n将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。\n相当于shell脚本首行的：#!/bin/sh\n可以换成：#!/bin/awk\n\n### 2.1.3. 将所有的awk命令插入一个单独文件，然后调用：\n> awk -f awk-script-file input-file(s)\n其中，-f选项加载awk-script-file中的awk脚本，input-file(s)跟上面的是一样的。\n \n 本章重点介绍命令行方式。\n\n \n\n## 2.2. 入门实例\n假设last -n 5的输出如下\n\n> [root@www ~]# last -n 5 <==仅取出前五行\n\n```\nroot     pts/1   192.168.1.100  Tue Feb 10 11:21   still logged in\nroot     pts/1   192.168.1.100  Tue Feb 10 00:46 - 02:28  (01:41)\nroot     pts/1   192.168.1.100  Mon Feb  9 11:41 - 18:30  (06:48)\ndmtsai   pts/1   192.168.1.100  Mon Feb  9 11:41 - 11:41  (00:00)\nroot     tty1                   Fri Sep  5 14:09 - 14:10  (00:01)\n\n```\n如果只是显示最近登录的5个帐号\n\n```\n#last -n 5 | awk  '{print $1}'\nroot\nroot\nroot\ndmtsai\nroot\n\n```\nawk工作流程是这样的：读入有'\\n'换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是\"空白键\" 或 \"[tab]键\",所以$1表示登录用户，$3表示登录用户ip,以此类推。\n\n \n\n如果只是显示/etc/passwd的账户\n\n```\n#cat /etc/passwd |awk  -F ':'  '{print $1}'  \nroot\ndaemon\nbin\nsys\n\n```\n这种是awk+action的示例，每行都会执行action{print $1}。\n\n> -F指定域分隔符为':'。\n\n \n\n如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割\n\n```\n#cat /etc/passwd |awk  -F ':'  '{print $1\"\\t\"$7}'\nroot    /bin/bash\ndaemon  /bin/sh\nbin     /bin/sh\nsys     /bin/sh\n\n``` \n\n如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加\"blue,/bin/nosh\"。\n\n \n```\ncat /etc/passwd |awk  -F ':'  'BEGIN {print \"name,shell\"}  {print $1\",\"$7} END {print \"blue,/bin/nosh\"}'\nname,shell\nroot,/bin/bash\ndaemon,/bin/sh\nbin,/bin/sh\nsys,/bin/sh\n....\nblue,/bin/nosh\n\n``` \n\nawk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。\n\n \n\n搜索/etc/passwd有root关键字的所有行\n\n> #awk -F: '/root/' /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\n这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。\n\n搜索支持正则，例如找root开头的: ```awk -F: '/^root/' /etc/passwd```\n\n \n\n搜索/etc/passwd有root关键字的所有行，并显示对应的shell\n\n> # awk -F: '/root/{print $7}' /etc/passwd             \n/bin/bash\n 这里指定了action{print $7}\n\n \n\n## 2.3. awk内置变量\nawk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。\n\n \n    ARGC               命令行参数个数\n    ARGV               命令行参数排列\n    ENVIRON            支持队列中系统环境变量的使用\n    FILENAME           awk浏览的文件名\n    FNR                浏览文件的记录数\n    FS                 设置输入域分隔符，等价于命令行 -F选项\n    NF                 浏览记录的域的个数\n    NR                 已读的记录数\n    OFS                输出域分隔符\n    ORS                输出记录分隔符\n    RS                 控制记录分隔符\n \n 此外,$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,......以此类推。\n\n \n\n统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:\n\n> #awk  -F ':'  '{print \"filename:\" FILENAME \",linenumber:\" NR \",columns:\" NF \",linecontent:\"$0}' /etc/passwd\n```\nfilename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash\nfilename:/etc/passwd,linenumber:2,columns:7,linecontent:daemon:x:1:1:daemon:/usr/sbin:/bin/sh\nfilename:/etc/passwd,linenumber:3,columns:7,linecontent:bin:x:2:2:bin:/bin:/bin/sh\nfilename:/etc/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev:/bin/sh\n\n``` \n\n使用printf替代print,可以让代码更加简洁，易读\n\n > awk  -F ':'  '{printf(\"filename:%s,linenumber:%s,columns:%s,linecontent:%s\\n\",FILENAME,NR,NF,$0)}' /etc/passwd\n \n\n## 2.4. print和printf\nawk中同时提供了print和printf两种打印输出的函数。\n\n其中print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。\n\nprintf函数，其用法和c语言中printf基本相似,可以格式化字符串,输出复杂时，printf更加好用，代码更易懂。\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \n\n# 3. awk编程\n 变量和赋值\n\n除了awk的内置变量，awk还可以自定义变量。\n\n## 3.1. 下面统计/etc/passwd的账户人数\n```\n\nawk '{count++;print $0;} END{print \"user count is \", count}' /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\n......\nuser count is  40\n\n```\n\ncount是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。\n\n \n\n这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:\n\n```\nawk 'BEGIN {count=0;print \"[start]user count is \", count} {count=count+1;print $0;} END{print \"[end]user count is \", count}' /etc/passwd\n[start]user count is  0\nroot:x:0:0:root:/root:/bin/bash\n...\n[end]user count is  40\n\n``` \n\n统计某个文件夹下的文件占用的字节数\n\n```\nls -l |awk 'BEGIN {size=0;} {size=size+$5;} END{print \"[end]size is \", size}'\n[end]size is  8657198\n\n``` \n\n如果以M为单位显示:\n\n```\nls -l |awk 'BEGIN {size=0;} {size=size+$5;} END{print \"[end]size is \", size/1024/1024,\"M\"}' \n[end]size is  8.25889 M\n\n```\n注意，统计不包括文件夹的子目录。\n\n \n\n### 3.1.1. 条件语句\n\n awk中的条件语句是从C语言中借鉴来的，见如下声明方式：\n\n \n```\nif (expression) {\n    statement;\n    statement;\n    ... ...\n}\n\n\nif (expression) {\n    statement;\n} else {\n    statement2;\n}\n\nif (expression) {\n    statement1;\n} else if (expression1) {\n    statement2;\n} else {\n    statement3;\n}\n \n ```\n\n统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):\n\n```\nls -l |awk 'BEGIN {size=0;print \"[start]size is \", size} {if($5!=4096){size=size+$5;}} END{print \"[end]size is \", size/1024/1024,\"M\"}' \n[end]size is  8.22339 M\n\n``` \n\n### 循环语句\n\nawk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。\n\n \n\n### 数组\n\n  因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。\n\n \n\n显示/etc/passwd的账户\n\n \n```\nawk -F ':' 'BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i < NR; i++) print i, name[i]}' /etc/passwd\n0 root\n1 daemon\n2 bin\n3 sys\n4 sync\n5 games\n......\n\n``` \n这里使用for循环遍历数组\n\n \n\nawk编程的内容极多，这里只罗列简单常用的用法，更多请参考 http://www.gnu.org/software/gawk/manual/gawk.html","source":"_posts/大数据/大数据02-05-shell编程-awk命令.md","raw":"---\ntitle: 大数据02-05-shell编程-awk命令\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - linux\n  - centos7\n  - linux命令\ntoc: true\ndate: 2017-11-06 23:25:05\nscaffolds:\n---\n# 1. 简介\nawk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。\n\nawk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。\n\nawk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。\n<!--more -->\n \n\n# 2. 使用方法\n> `awk '{pattern + action}' {filenames}`\n\n尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。\n\nawk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。\n\n通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。\n\n \n## 2.1. 调用awk\n\n有三种方式调用awk\n\n \n### 2.1.1. 命令行方式\n> awk [-F  field-separator]  'commands'  input-file(s)\n其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。\n在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。\n\n### 2.1.2. shell脚本方式\n将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。\n相当于shell脚本首行的：#!/bin/sh\n可以换成：#!/bin/awk\n\n### 2.1.3. 将所有的awk命令插入一个单独文件，然后调用：\n> awk -f awk-script-file input-file(s)\n其中，-f选项加载awk-script-file中的awk脚本，input-file(s)跟上面的是一样的。\n \n 本章重点介绍命令行方式。\n\n \n\n## 2.2. 入门实例\n假设last -n 5的输出如下\n\n> [root@www ~]# last -n 5 <==仅取出前五行\n\n```\nroot     pts/1   192.168.1.100  Tue Feb 10 11:21   still logged in\nroot     pts/1   192.168.1.100  Tue Feb 10 00:46 - 02:28  (01:41)\nroot     pts/1   192.168.1.100  Mon Feb  9 11:41 - 18:30  (06:48)\ndmtsai   pts/1   192.168.1.100  Mon Feb  9 11:41 - 11:41  (00:00)\nroot     tty1                   Fri Sep  5 14:09 - 14:10  (00:01)\n\n```\n如果只是显示最近登录的5个帐号\n\n```\n#last -n 5 | awk  '{print $1}'\nroot\nroot\nroot\ndmtsai\nroot\n\n```\nawk工作流程是这样的：读入有'\\n'换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是\"空白键\" 或 \"[tab]键\",所以$1表示登录用户，$3表示登录用户ip,以此类推。\n\n \n\n如果只是显示/etc/passwd的账户\n\n```\n#cat /etc/passwd |awk  -F ':'  '{print $1}'  \nroot\ndaemon\nbin\nsys\n\n```\n这种是awk+action的示例，每行都会执行action{print $1}。\n\n> -F指定域分隔符为':'。\n\n \n\n如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割\n\n```\n#cat /etc/passwd |awk  -F ':'  '{print $1\"\\t\"$7}'\nroot    /bin/bash\ndaemon  /bin/sh\nbin     /bin/sh\nsys     /bin/sh\n\n``` \n\n如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加\"blue,/bin/nosh\"。\n\n \n```\ncat /etc/passwd |awk  -F ':'  'BEGIN {print \"name,shell\"}  {print $1\",\"$7} END {print \"blue,/bin/nosh\"}'\nname,shell\nroot,/bin/bash\ndaemon,/bin/sh\nbin,/bin/sh\nsys,/bin/sh\n....\nblue,/bin/nosh\n\n``` \n\nawk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。\n\n \n\n搜索/etc/passwd有root关键字的所有行\n\n> #awk -F: '/root/' /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\n这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。\n\n搜索支持正则，例如找root开头的: ```awk -F: '/^root/' /etc/passwd```\n\n \n\n搜索/etc/passwd有root关键字的所有行，并显示对应的shell\n\n> # awk -F: '/root/{print $7}' /etc/passwd             \n/bin/bash\n 这里指定了action{print $7}\n\n \n\n## 2.3. awk内置变量\nawk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。\n\n \n    ARGC               命令行参数个数\n    ARGV               命令行参数排列\n    ENVIRON            支持队列中系统环境变量的使用\n    FILENAME           awk浏览的文件名\n    FNR                浏览文件的记录数\n    FS                 设置输入域分隔符，等价于命令行 -F选项\n    NF                 浏览记录的域的个数\n    NR                 已读的记录数\n    OFS                输出域分隔符\n    ORS                输出记录分隔符\n    RS                 控制记录分隔符\n \n 此外,$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,......以此类推。\n\n \n\n统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:\n\n> #awk  -F ':'  '{print \"filename:\" FILENAME \",linenumber:\" NR \",columns:\" NF \",linecontent:\"$0}' /etc/passwd\n```\nfilename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash\nfilename:/etc/passwd,linenumber:2,columns:7,linecontent:daemon:x:1:1:daemon:/usr/sbin:/bin/sh\nfilename:/etc/passwd,linenumber:3,columns:7,linecontent:bin:x:2:2:bin:/bin:/bin/sh\nfilename:/etc/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev:/bin/sh\n\n``` \n\n使用printf替代print,可以让代码更加简洁，易读\n\n > awk  -F ':'  '{printf(\"filename:%s,linenumber:%s,columns:%s,linecontent:%s\\n\",FILENAME,NR,NF,$0)}' /etc/passwd\n \n\n## 2.4. print和printf\nawk中同时提供了print和printf两种打印输出的函数。\n\n其中print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。\n\nprintf函数，其用法和c语言中printf基本相似,可以格式化字符串,输出复杂时，printf更加好用，代码更易懂。\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \n\n# 3. awk编程\n 变量和赋值\n\n除了awk的内置变量，awk还可以自定义变量。\n\n## 3.1. 下面统计/etc/passwd的账户人数\n```\n\nawk '{count++;print $0;} END{print \"user count is \", count}' /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\n......\nuser count is  40\n\n```\n\ncount是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。\n\n \n\n这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:\n\n```\nawk 'BEGIN {count=0;print \"[start]user count is \", count} {count=count+1;print $0;} END{print \"[end]user count is \", count}' /etc/passwd\n[start]user count is  0\nroot:x:0:0:root:/root:/bin/bash\n...\n[end]user count is  40\n\n``` \n\n统计某个文件夹下的文件占用的字节数\n\n```\nls -l |awk 'BEGIN {size=0;} {size=size+$5;} END{print \"[end]size is \", size}'\n[end]size is  8657198\n\n``` \n\n如果以M为单位显示:\n\n```\nls -l |awk 'BEGIN {size=0;} {size=size+$5;} END{print \"[end]size is \", size/1024/1024,\"M\"}' \n[end]size is  8.25889 M\n\n```\n注意，统计不包括文件夹的子目录。\n\n \n\n### 3.1.1. 条件语句\n\n awk中的条件语句是从C语言中借鉴来的，见如下声明方式：\n\n \n```\nif (expression) {\n    statement;\n    statement;\n    ... ...\n}\n\n\nif (expression) {\n    statement;\n} else {\n    statement2;\n}\n\nif (expression) {\n    statement1;\n} else if (expression1) {\n    statement2;\n} else {\n    statement3;\n}\n \n ```\n\n统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):\n\n```\nls -l |awk 'BEGIN {size=0;print \"[start]size is \", size} {if($5!=4096){size=size+$5;}} END{print \"[end]size is \", size/1024/1024,\"M\"}' \n[end]size is  8.22339 M\n\n``` \n\n### 循环语句\n\nawk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。\n\n \n\n### 数组\n\n  因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。\n\n \n\n显示/etc/passwd的账户\n\n \n```\nawk -F ':' 'BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i < NR; i++) print i, name[i]}' /etc/passwd\n0 root\n1 daemon\n2 bin\n3 sys\n4 sync\n5 games\n......\n\n``` \n这里使用for循环遍历数组\n\n \n\nawk编程的内容极多，这里只罗列简单常用的用法，更多请参考 http://www.gnu.org/software/gawk/manual/gawk.html","slug":"大数据/大数据02-05-shell编程-awk命令","published":1,"updated":"2018-02-06T07:49:09.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89yq000ov4vfzs6l69e0","content":"<h1 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h1><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>\n<p>awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。</p>\n<p>awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。<br><a id=\"more\"></a></p>\n<h1 id=\"2-使用方法\"><a href=\"#2-使用方法\" class=\"headerlink\" title=\"2. 使用方法\"></a>2. 使用方法</h1><blockquote>\n<p><code>awk &#39;{pattern + action}&#39; {filenames}</code></p>\n</blockquote>\n<p>尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</p>\n<p>awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。</p>\n<p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p>\n<h2 id=\"2-1-调用awk\"><a href=\"#2-1-调用awk\" class=\"headerlink\" title=\"2.1. 调用awk\"></a>2.1. 调用awk</h2><p>有三种方式调用awk</p>\n<h3 id=\"2-1-1-命令行方式\"><a href=\"#2-1-1-命令行方式\" class=\"headerlink\" title=\"2.1.1. 命令行方式\"></a>2.1.1. 命令行方式</h3><blockquote>\n<p>awk [-F  field-separator]  ‘commands’  input-file(s)<br>其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。<br>在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。</p>\n</blockquote>\n<h3 id=\"2-1-2-shell脚本方式\"><a href=\"#2-1-2-shell脚本方式\" class=\"headerlink\" title=\"2.1.2. shell脚本方式\"></a>2.1.2. shell脚本方式</h3><p>将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。<br>相当于shell脚本首行的：#!/bin/sh<br>可以换成：#!/bin/awk</p>\n<h3 id=\"2-1-3-将所有的awk命令插入一个单独文件，然后调用：\"><a href=\"#2-1-3-将所有的awk命令插入一个单独文件，然后调用：\" class=\"headerlink\" title=\"2.1.3. 将所有的awk命令插入一个单独文件，然后调用：\"></a>2.1.3. 将所有的awk命令插入一个单独文件，然后调用：</h3><blockquote>\n<p>awk -f awk-script-file input-file(s)<br>其中，-f选项加载awk-script-file中的awk脚本，input-file(s)跟上面的是一样的。</p>\n</blockquote>\n<p> 本章重点介绍命令行方式。</p>\n<h2 id=\"2-2-入门实例\"><a href=\"#2-2-入门实例\" class=\"headerlink\" title=\"2.2. 入门实例\"></a>2.2. 入门实例</h2><p>假设last -n 5的输出如下</p>\n<blockquote>\n<p>[root@www ~]# last -n 5 &lt;==仅取出前五行</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root     pts/1   192.168.1.100  Tue Feb 10 11:21   still logged in</div><div class=\"line\">root     pts/1   192.168.1.100  Tue Feb 10 00:46 - 02:28  (01:41)</div><div class=\"line\">root     pts/1   192.168.1.100  Mon Feb  9 11:41 - 18:30  (06:48)</div><div class=\"line\">dmtsai   pts/1   192.168.1.100  Mon Feb  9 11:41 - 11:41  (00:00)</div><div class=\"line\">root     tty1                   Fri Sep  5 14:09 - 14:10  (00:01)</div></pre></td></tr></table></figure>\n<p>如果只是显示最近登录的5个帐号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#last -n 5 | awk  &apos;&#123;print $1&#125;&apos;</div><div class=\"line\">root</div><div class=\"line\">root</div><div class=\"line\">root</div><div class=\"line\">dmtsai</div><div class=\"line\">root</div></pre></td></tr></table></figure>\n<p>awk工作流程是这样的：读入有’\\n’换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是”空白键” 或 “[tab]键”,所以$1表示登录用户，$3表示登录用户ip,以此类推。</p>\n<p>如果只是显示/etc/passwd的账户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cat /etc/passwd |awk  -F &apos;:&apos;  &apos;&#123;print $1&#125;&apos;  </div><div class=\"line\">root</div><div class=\"line\">daemon</div><div class=\"line\">bin</div><div class=\"line\">sys</div></pre></td></tr></table></figure>\n<p>这种是awk+action的示例，每行都会执行action{print $1}。</p>\n<blockquote>\n<p>-F指定域分隔符为’:’。</p>\n</blockquote>\n<p>如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cat /etc/passwd |awk  -F &apos;:&apos;  &apos;&#123;print $1&quot;\\t&quot;$7&#125;&apos;</div><div class=\"line\">root    /bin/bash</div><div class=\"line\">daemon  /bin/sh</div><div class=\"line\">bin     /bin/sh</div><div class=\"line\">sys     /bin/sh</div><div class=\"line\"></div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加&quot;blue,/bin/nosh&quot;。</div></pre></td></tr></table></figure>\n<p>cat /etc/passwd |awk  -F ‘:’  ‘BEGIN {print “name,shell”}  {print $1”,”$7} END {print “blue,/bin/nosh”}’<br>name,shell<br>root,/bin/bash<br>daemon,/bin/sh<br>bin,/bin/sh<br>sys,/bin/sh<br>….<br>blue,/bin/nosh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">搜索/etc/passwd有root关键字的所有行</div><div class=\"line\"></div><div class=\"line\">&gt; #awk -F: &apos;/root/&apos; /etc/passwd</div><div class=\"line\">root:x:0:0:root:/root:/bin/bash</div><div class=\"line\">这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。</div><div class=\"line\"></div><div class=\"line\">搜索支持正则，例如找root开头的: ```awk -F: &apos;/^root/&apos; /etc/passwd</div></pre></td></tr></table></figure>\n<p>搜索/etc/passwd有root关键字的所有行，并显示对应的shell</p>\n<blockquote>\n<h1 id=\"awk-F-‘-root-print-7-’-etc-passwd\"><a href=\"#awk-F-‘-root-print-7-’-etc-passwd\" class=\"headerlink\" title=\"awk -F: ‘/root/{print $7}’ /etc/passwd\"></a>awk -F: ‘/root/{print $7}’ /etc/passwd</h1><p>/bin/bash<br> 这里指定了action{print $7}</p>\n</blockquote>\n<h2 id=\"2-3-awk内置变量\"><a href=\"#2-3-awk内置变量\" class=\"headerlink\" title=\"2.3. awk内置变量\"></a>2.3. awk内置变量</h2><p>awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。</p>\n<pre><code>ARGC               命令行参数个数\nARGV               命令行参数排列\nENVIRON            支持队列中系统环境变量的使用\nFILENAME           awk浏览的文件名\nFNR                浏览文件的记录数\nFS                 设置输入域分隔符，等价于命令行 -F选项\nNF                 浏览记录的域的个数\nNR                 已读的记录数\nOFS                输出域分隔符\nORS                输出记录分隔符\nRS                 控制记录分隔符\n</code></pre><p> 此外,$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,……以此类推。</p>\n<p>统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:</p>\n<blockquote>\n<p>#awk  -F ‘:’  ‘{print “filename:” FILENAME “,linenumber:” NR “,columns:” NF “,linecontent:”$0}’ /etc/passwd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">filename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash</div><div class=\"line\">filename:/etc/passwd,linenumber:2,columns:7,linecontent:daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class=\"line\">filename:/etc/passwd,linenumber:3,columns:7,linecontent:bin:x:2:2:bin:/bin:/bin/sh</div><div class=\"line\">filename:/etc/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev:/bin/sh</div><div class=\"line\"></div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">使用printf替代print,可以让代码更加简洁，易读</div><div class=\"line\"></div><div class=\"line\"> &gt; awk  -F &apos;:&apos;  &apos;&#123;printf(&quot;filename:%s,linenumber:%s,columns:%s,linecontent:%s\\n&quot;,FILENAME,NR,NF,$0)&#125;&apos; /etc/passwd</div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">## 2.4. print和printf</div><div class=\"line\">awk中同时提供了print和printf两种打印输出的函数。</div><div class=\"line\"></div><div class=\"line\">其中print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。</div><div class=\"line\"></div><div class=\"line\">printf函数，其用法和c语言中printf基本相似,可以格式化字符串,输出复杂时，printf更加好用，代码更易懂。</div><div class=\"line\"></div><div class=\"line\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% </div><div class=\"line\"></div><div class=\"line\"># 3. awk编程</div><div class=\"line\"> 变量和赋值</div><div class=\"line\"></div><div class=\"line\">除了awk的内置变量，awk还可以自定义变量。</div><div class=\"line\"></div><div class=\"line\">## 3.1. 下面统计/etc/passwd的账户人数</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>awk ‘{count++;print $0;} END{print “user count is “, count}’ /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>……<br>user count is  40</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">count是自定义变量。之前的action&#123;&#125;里都是只有一个print,其实print只是一个语句，而action&#123;&#125;可以有多个语句，以;号隔开。</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:</div></pre></td></tr></table></figure>\n<p>awk ‘BEGIN {count=0;print “[start]user count is “, count} {count=count+1;print $0;} END{print “[end]user count is “, count}’ /etc/passwd<br>[start]user count is  0<br>root:x:0:0:root:/root:/bin/bash<br>…<br>[end]user count is  40</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">统计某个文件夹下的文件占用的字节数</div></pre></td></tr></table></figure>\n<p>ls -l |awk ‘BEGIN {size=0;} {size=size+$5;} END{print “[end]size is “, size}’<br>[end]size is  8657198</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">如果以M为单位显示:</div></pre></td></tr></table></figure>\n<p>ls -l |awk ‘BEGIN {size=0;} {size=size+$5;} END{print “[end]size is “, size/1024/1024,”M”}’<br>[end]size is  8.25889 M</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意，统计不包括文件夹的子目录。</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">### 3.1.1. 条件语句</div><div class=\"line\"></div><div class=\"line\"> awk中的条件语句是从C语言中借鉴来的，见如下声明方式：</div></pre></td></tr></table></figure>\n<p>if (expression) {<br>    statement;<br>    statement;<br>    … …<br>}</p>\n<p>if (expression) {<br>    statement;<br>} else {<br>    statement2;<br>}</p>\n<p>if (expression) {<br>    statement1;<br>} else if (expression1) {<br>    statement2;<br>} else {<br>    statement3;<br>}</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):</div></pre></td></tr></table></figure>\n<p>ls -l |awk ‘BEGIN {size=0;print “[start]size is “, size} {if($5!=4096){size=size+$5;}} END{print “[end]size is “, size/1024/1024,”M”}’<br>[end]size is  8.22339 M</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 循环语句</div><div class=\"line\"></div><div class=\"line\">awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">### 数组</div><div class=\"line\"></div><div class=\"line\">  因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">显示/etc/passwd的账户</div></pre></td></tr></table></figure>\n<p>awk -F ‘:’ ‘BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i &lt; NR; i++) print i, name[i]}’ /etc/passwd<br>0 root<br>1 daemon<br>2 bin<br>3 sys<br>4 sync<br>5 games<br>……</p>\n<p>```<br>这里使用for循环遍历数组</p>\n<p>awk编程的内容极多，这里只罗列简单常用的用法，更多请参考 <a href=\"http://www.gnu.org/software/gawk/manual/gawk.html\" target=\"_blank\" rel=\"external\">http://www.gnu.org/software/gawk/manual/gawk.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h1><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>\n<p>awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。</p>\n<p>awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。<br>","more":"</p>\n<h1 id=\"2-使用方法\"><a href=\"#2-使用方法\" class=\"headerlink\" title=\"2. 使用方法\"></a>2. 使用方法</h1><blockquote>\n<p><code>awk &#39;{pattern + action}&#39; {filenames}</code></p>\n</blockquote>\n<p>尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</p>\n<p>awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。</p>\n<p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p>\n<h2 id=\"2-1-调用awk\"><a href=\"#2-1-调用awk\" class=\"headerlink\" title=\"2.1. 调用awk\"></a>2.1. 调用awk</h2><p>有三种方式调用awk</p>\n<h3 id=\"2-1-1-命令行方式\"><a href=\"#2-1-1-命令行方式\" class=\"headerlink\" title=\"2.1.1. 命令行方式\"></a>2.1.1. 命令行方式</h3><blockquote>\n<p>awk [-F  field-separator]  ‘commands’  input-file(s)<br>其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。<br>在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。</p>\n</blockquote>\n<h3 id=\"2-1-2-shell脚本方式\"><a href=\"#2-1-2-shell脚本方式\" class=\"headerlink\" title=\"2.1.2. shell脚本方式\"></a>2.1.2. shell脚本方式</h3><p>将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。<br>相当于shell脚本首行的：#!/bin/sh<br>可以换成：#!/bin/awk</p>\n<h3 id=\"2-1-3-将所有的awk命令插入一个单独文件，然后调用：\"><a href=\"#2-1-3-将所有的awk命令插入一个单独文件，然后调用：\" class=\"headerlink\" title=\"2.1.3. 将所有的awk命令插入一个单独文件，然后调用：\"></a>2.1.3. 将所有的awk命令插入一个单独文件，然后调用：</h3><blockquote>\n<p>awk -f awk-script-file input-file(s)<br>其中，-f选项加载awk-script-file中的awk脚本，input-file(s)跟上面的是一样的。</p>\n</blockquote>\n<p> 本章重点介绍命令行方式。</p>\n<h2 id=\"2-2-入门实例\"><a href=\"#2-2-入门实例\" class=\"headerlink\" title=\"2.2. 入门实例\"></a>2.2. 入门实例</h2><p>假设last -n 5的输出如下</p>\n<blockquote>\n<p>[root@www ~]# last -n 5 &lt;==仅取出前五行</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root     pts/1   192.168.1.100  Tue Feb 10 11:21   still logged in</div><div class=\"line\">root     pts/1   192.168.1.100  Tue Feb 10 00:46 - 02:28  (01:41)</div><div class=\"line\">root     pts/1   192.168.1.100  Mon Feb  9 11:41 - 18:30  (06:48)</div><div class=\"line\">dmtsai   pts/1   192.168.1.100  Mon Feb  9 11:41 - 11:41  (00:00)</div><div class=\"line\">root     tty1                   Fri Sep  5 14:09 - 14:10  (00:01)</div></pre></td></tr></table></figure>\n<p>如果只是显示最近登录的5个帐号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#last -n 5 | awk  &apos;&#123;print $1&#125;&apos;</div><div class=\"line\">root</div><div class=\"line\">root</div><div class=\"line\">root</div><div class=\"line\">dmtsai</div><div class=\"line\">root</div></pre></td></tr></table></figure>\n<p>awk工作流程是这样的：读入有’\\n’换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是”空白键” 或 “[tab]键”,所以$1表示登录用户，$3表示登录用户ip,以此类推。</p>\n<p>如果只是显示/etc/passwd的账户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cat /etc/passwd |awk  -F &apos;:&apos;  &apos;&#123;print $1&#125;&apos;  </div><div class=\"line\">root</div><div class=\"line\">daemon</div><div class=\"line\">bin</div><div class=\"line\">sys</div></pre></td></tr></table></figure>\n<p>这种是awk+action的示例，每行都会执行action{print $1}。</p>\n<blockquote>\n<p>-F指定域分隔符为’:’。</p>\n</blockquote>\n<p>如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cat /etc/passwd |awk  -F &apos;:&apos;  &apos;&#123;print $1&quot;\\t&quot;$7&#125;&apos;</div><div class=\"line\">root    /bin/bash</div><div class=\"line\">daemon  /bin/sh</div><div class=\"line\">bin     /bin/sh</div><div class=\"line\">sys     /bin/sh</div><div class=\"line\"></div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加&quot;blue,/bin/nosh&quot;。</div></pre></td></tr></table></figure>\n<p>cat /etc/passwd |awk  -F ‘:’  ‘BEGIN {print “name,shell”}  {print $1”,”$7} END {print “blue,/bin/nosh”}’<br>name,shell<br>root,/bin/bash<br>daemon,/bin/sh<br>bin,/bin/sh<br>sys,/bin/sh<br>….<br>blue,/bin/nosh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">搜索/etc/passwd有root关键字的所有行</div><div class=\"line\"></div><div class=\"line\">&gt; #awk -F: &apos;/root/&apos; /etc/passwd</div><div class=\"line\">root:x:0:0:root:/root:/bin/bash</div><div class=\"line\">这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。</div><div class=\"line\"></div><div class=\"line\">搜索支持正则，例如找root开头的: ```awk -F: &apos;/^root/&apos; /etc/passwd</div></pre></td></tr></table></figure>\n<p>搜索/etc/passwd有root关键字的所有行，并显示对应的shell</p>\n<blockquote>\n<h1 id=\"awk-F-‘-root-print-7-’-etc-passwd\"><a href=\"#awk-F-‘-root-print-7-’-etc-passwd\" class=\"headerlink\" title=\"awk -F: ‘/root/{print $7}’ /etc/passwd\"></a>awk -F: ‘/root/{print $7}’ /etc/passwd</h1><p>/bin/bash<br> 这里指定了action{print $7}</p>\n</blockquote>\n<h2 id=\"2-3-awk内置变量\"><a href=\"#2-3-awk内置变量\" class=\"headerlink\" title=\"2.3. awk内置变量\"></a>2.3. awk内置变量</h2><p>awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。</p>\n<pre><code>ARGC               命令行参数个数\nARGV               命令行参数排列\nENVIRON            支持队列中系统环境变量的使用\nFILENAME           awk浏览的文件名\nFNR                浏览文件的记录数\nFS                 设置输入域分隔符，等价于命令行 -F选项\nNF                 浏览记录的域的个数\nNR                 已读的记录数\nOFS                输出域分隔符\nORS                输出记录分隔符\nRS                 控制记录分隔符\n</code></pre><p> 此外,$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,……以此类推。</p>\n<p>统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:</p>\n<blockquote>\n<p>#awk  -F ‘:’  ‘{print “filename:” FILENAME “,linenumber:” NR “,columns:” NF “,linecontent:”$0}’ /etc/passwd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">filename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash</div><div class=\"line\">filename:/etc/passwd,linenumber:2,columns:7,linecontent:daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class=\"line\">filename:/etc/passwd,linenumber:3,columns:7,linecontent:bin:x:2:2:bin:/bin:/bin/sh</div><div class=\"line\">filename:/etc/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev:/bin/sh</div><div class=\"line\"></div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">使用printf替代print,可以让代码更加简洁，易读</div><div class=\"line\"></div><div class=\"line\"> &gt; awk  -F &apos;:&apos;  &apos;&#123;printf(&quot;filename:%s,linenumber:%s,columns:%s,linecontent:%s\\n&quot;,FILENAME,NR,NF,$0)&#125;&apos; /etc/passwd</div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">## 2.4. print和printf</div><div class=\"line\">awk中同时提供了print和printf两种打印输出的函数。</div><div class=\"line\"></div><div class=\"line\">其中print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。</div><div class=\"line\"></div><div class=\"line\">printf函数，其用法和c语言中printf基本相似,可以格式化字符串,输出复杂时，printf更加好用，代码更易懂。</div><div class=\"line\"></div><div class=\"line\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% </div><div class=\"line\"></div><div class=\"line\"># 3. awk编程</div><div class=\"line\"> 变量和赋值</div><div class=\"line\"></div><div class=\"line\">除了awk的内置变量，awk还可以自定义变量。</div><div class=\"line\"></div><div class=\"line\">## 3.1. 下面统计/etc/passwd的账户人数</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>awk ‘{count++;print $0;} END{print “user count is “, count}’ /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>……<br>user count is  40</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">count是自定义变量。之前的action&#123;&#125;里都是只有一个print,其实print只是一个语句，而action&#123;&#125;可以有多个语句，以;号隔开。</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:</div></pre></td></tr></table></figure>\n<p>awk ‘BEGIN {count=0;print “[start]user count is “, count} {count=count+1;print $0;} END{print “[end]user count is “, count}’ /etc/passwd<br>[start]user count is  0<br>root:x:0:0:root:/root:/bin/bash<br>…<br>[end]user count is  40</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">统计某个文件夹下的文件占用的字节数</div></pre></td></tr></table></figure>\n<p>ls -l |awk ‘BEGIN {size=0;} {size=size+$5;} END{print “[end]size is “, size}’<br>[end]size is  8657198</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">如果以M为单位显示:</div></pre></td></tr></table></figure>\n<p>ls -l |awk ‘BEGIN {size=0;} {size=size+$5;} END{print “[end]size is “, size/1024/1024,”M”}’<br>[end]size is  8.25889 M</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意，统计不包括文件夹的子目录。</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">### 3.1.1. 条件语句</div><div class=\"line\"></div><div class=\"line\"> awk中的条件语句是从C语言中借鉴来的，见如下声明方式：</div></pre></td></tr></table></figure>\n<p>if (expression) {<br>    statement;<br>    statement;<br>    … …<br>}</p>\n<p>if (expression) {<br>    statement;<br>} else {<br>    statement2;<br>}</p>\n<p>if (expression) {<br>    statement1;<br>} else if (expression1) {<br>    statement2;<br>} else {<br>    statement3;<br>}</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):</div></pre></td></tr></table></figure>\n<p>ls -l |awk ‘BEGIN {size=0;print “[start]size is “, size} {if($5!=4096){size=size+$5;}} END{print “[end]size is “, size/1024/1024,”M”}’<br>[end]size is  8.22339 M</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 循环语句</div><div class=\"line\"></div><div class=\"line\">awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">### 数组</div><div class=\"line\"></div><div class=\"line\">  因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">显示/etc/passwd的账户</div></pre></td></tr></table></figure>\n<p>awk -F ‘:’ ‘BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i &lt; NR; i++) print i, name[i]}’ /etc/passwd<br>0 root<br>1 daemon<br>2 bin<br>3 sys<br>4 sync<br>5 games<br>……</p>\n<p>```<br>这里使用for循环遍历数组</p>\n<p>awk编程的内容极多，这里只罗列简单常用的用法，更多请参考 <a href=\"http://www.gnu.org/software/gawk/manual/gawk.html\" target=\"_blank\" rel=\"external\">http://www.gnu.org/software/gawk/manual/gawk.html</a></p>"},{"title":"大数据03-01-自动化部署脚本","toc":true,"date":"2017-11-14T14:43:45.000Z","scaffolds":null,"_content":"实现ssh免密登录及jdk的自动安装\n# 1. boot.sh\n免密登录 及复制安装脚本到目标机器\n<!-- more -->\n```bash\n#!/bin/bash\n\nSERVERS=\"node-3.itcast.cn node-4.itcast.cn\"\nPASSWORD=123456\nBASE_SERVER=172.16.203.100\n\nauto_ssh_copy_id() {\n    expect -c \"set timeout -1;\n        spawn ssh-copy-id $1;\n        expect {\n            *(yes/no)* {send -- yes\\r;exp_continue;}\n            *assword:* {send -- $2\\r;exp_continue;}\n            eof        {exit 0;}\n        }\";\n}\n\nssh_copy_id_to_all() {\n    for SERVER in $SERVERS\n    do\n        auto_ssh_copy_id $SERVER $PASSWORD\n    done\n}\n\nssh_copy_id_to_all\n\n\nfor SERVER in $SERVERS\ndo\n    scp install.sh root@$SERVER:/root\n    ssh root@$SERVER /root/install.sh\ndone\n```\n# 2. install_everyone.sh\n安装jdk\n```bash\n#!/bin/bash\n\nBASE_SERVER=mini4\nyum install -y wget\nwget $BASE_SERVER/soft/jdk-7u45-linux-x64.tar.gz\ntar -zxvf jdk-7u45-linux-x64.tar.gz -C /usr/local\ncat >> /etc/profile << EOF\nexport JAVA_HOME=/usr/local/jdk1.7.0_45\nexport PATH=\\$PATH:\\$JAVA_HOME/bin\nEOF\n```\n说明:\n- expect 模拟人机交互\n- EOF临时文本输入","source":"_posts/大数据/大数据03-01-自动化部署脚本.md","raw":"---\ntitle: 大数据03-01-自动化部署脚本\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - linux\n  - centos7\ntoc: true\ndate: 2017-11-14 22:43:45\nscaffolds:\n---\n实现ssh免密登录及jdk的自动安装\n# 1. boot.sh\n免密登录 及复制安装脚本到目标机器\n<!-- more -->\n```bash\n#!/bin/bash\n\nSERVERS=\"node-3.itcast.cn node-4.itcast.cn\"\nPASSWORD=123456\nBASE_SERVER=172.16.203.100\n\nauto_ssh_copy_id() {\n    expect -c \"set timeout -1;\n        spawn ssh-copy-id $1;\n        expect {\n            *(yes/no)* {send -- yes\\r;exp_continue;}\n            *assword:* {send -- $2\\r;exp_continue;}\n            eof        {exit 0;}\n        }\";\n}\n\nssh_copy_id_to_all() {\n    for SERVER in $SERVERS\n    do\n        auto_ssh_copy_id $SERVER $PASSWORD\n    done\n}\n\nssh_copy_id_to_all\n\n\nfor SERVER in $SERVERS\ndo\n    scp install.sh root@$SERVER:/root\n    ssh root@$SERVER /root/install.sh\ndone\n```\n# 2. install_everyone.sh\n安装jdk\n```bash\n#!/bin/bash\n\nBASE_SERVER=mini4\nyum install -y wget\nwget $BASE_SERVER/soft/jdk-7u45-linux-x64.tar.gz\ntar -zxvf jdk-7u45-linux-x64.tar.gz -C /usr/local\ncat >> /etc/profile << EOF\nexport JAVA_HOME=/usr/local/jdk1.7.0_45\nexport PATH=\\$PATH:\\$JAVA_HOME/bin\nEOF\n```\n说明:\n- expect 模拟人机交互\n- EOF临时文本输入","slug":"大数据/大数据03-01-自动化部署脚本","published":1,"updated":"2018-02-06T07:49:14.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89ys000rv4vfakf4e5yw","content":"<p>实现ssh免密登录及jdk的自动安装</p>\n<h1 id=\"1-boot-sh\"><a href=\"#1-boot-sh\" class=\"headerlink\" title=\"1. boot.sh\"></a>1. boot.sh</h1><p>免密登录 及复制安装脚本到目标机器<br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">SERVERS=<span class=\"string\">\"node-3.itcast.cn node-4.itcast.cn\"</span></div><div class=\"line\">PASSWORD=123456</div><div class=\"line\">BASE_SERVER=172.16.203.100</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">auto_ssh_copy_id</span></span>() &#123;</div><div class=\"line\">    expect -c <span class=\"string\">\"set timeout -1;</span></div><div class=\"line\"><span class=\"string\">        spawn ssh-copy-id <span class=\"variable\">$1</span>;</span></div><div class=\"line\"><span class=\"string\">        expect &#123;</span></div><div class=\"line\"><span class=\"string\">            *(yes/no)* &#123;send -- yes\\r;exp_continue;&#125;</span></div><div class=\"line\"><span class=\"string\">            *assword:* &#123;send -- <span class=\"variable\">$2</span>\\r;exp_continue;&#125;</span></div><div class=\"line\"><span class=\"string\">            eof        &#123;exit 0;&#125;</span></div><div class=\"line\"><span class=\"string\">        &#125;\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">ssh_copy_id_to_all</span></span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> SERVER <span class=\"keyword\">in</span> <span class=\"variable\">$SERVERS</span></div><div class=\"line\">    <span class=\"keyword\">do</span></div><div class=\"line\">        auto_ssh_copy_id <span class=\"variable\">$SERVER</span> <span class=\"variable\">$PASSWORD</span></div><div class=\"line\">    <span class=\"keyword\">done</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ssh_copy_id_to_all</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> SERVER <span class=\"keyword\">in</span> <span class=\"variable\">$SERVERS</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    scp install.sh root@<span class=\"variable\">$SERVER</span>:/root</div><div class=\"line\">    ssh root@<span class=\"variable\">$SERVER</span> /root/install.sh</div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"2-install-everyone-sh\"><a href=\"#2-install-everyone-sh\" class=\"headerlink\" title=\"2. install_everyone.sh\"></a>2. install_everyone.sh</h1><p>安装jdk<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">BASE_SERVER=mini4</div><div class=\"line\">yum install -y wget</div><div class=\"line\">wget <span class=\"variable\">$BASE_SERVER</span>/soft/jdk-7u45-linux-x64.tar.gz</div><div class=\"line\">tar -zxvf jdk-7u45-linux-x64.tar.gz -C /usr/<span class=\"built_in\">local</span></div><div class=\"line\">cat &gt;&gt; /etc/profile &lt;&lt; EOF</div><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk1.7.0_45</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=\\<span class=\"variable\">$PATH</span>:\\<span class=\"variable\">$JAVA_HOME</span>/bin</div><div class=\"line\">EOF</div></pre></td></tr></table></figure></p>\n<p>说明:</p>\n<ul>\n<li>expect 模拟人机交互</li>\n<li>EOF临时文本输入</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>实现ssh免密登录及jdk的自动安装</p>\n<h1 id=\"1-boot-sh\"><a href=\"#1-boot-sh\" class=\"headerlink\" title=\"1. boot.sh\"></a>1. boot.sh</h1><p>免密登录 及复制安装脚本到目标机器<br>","more":"<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">SERVERS=<span class=\"string\">\"node-3.itcast.cn node-4.itcast.cn\"</span></div><div class=\"line\">PASSWORD=123456</div><div class=\"line\">BASE_SERVER=172.16.203.100</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">auto_ssh_copy_id</span></span>() &#123;</div><div class=\"line\">    expect -c <span class=\"string\">\"set timeout -1;</span></div><div class=\"line\"><span class=\"string\">        spawn ssh-copy-id <span class=\"variable\">$1</span>;</span></div><div class=\"line\"><span class=\"string\">        expect &#123;</span></div><div class=\"line\"><span class=\"string\">            *(yes/no)* &#123;send -- yes\\r;exp_continue;&#125;</span></div><div class=\"line\"><span class=\"string\">            *assword:* &#123;send -- <span class=\"variable\">$2</span>\\r;exp_continue;&#125;</span></div><div class=\"line\"><span class=\"string\">            eof        &#123;exit 0;&#125;</span></div><div class=\"line\"><span class=\"string\">        &#125;\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">ssh_copy_id_to_all</span></span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> SERVER <span class=\"keyword\">in</span> <span class=\"variable\">$SERVERS</span></div><div class=\"line\">    <span class=\"keyword\">do</span></div><div class=\"line\">        auto_ssh_copy_id <span class=\"variable\">$SERVER</span> <span class=\"variable\">$PASSWORD</span></div><div class=\"line\">    <span class=\"keyword\">done</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ssh_copy_id_to_all</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> SERVER <span class=\"keyword\">in</span> <span class=\"variable\">$SERVERS</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    scp install.sh root@<span class=\"variable\">$SERVER</span>:/root</div><div class=\"line\">    ssh root@<span class=\"variable\">$SERVER</span> /root/install.sh</div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"2-install-everyone-sh\"><a href=\"#2-install-everyone-sh\" class=\"headerlink\" title=\"2. install_everyone.sh\"></a>2. install_everyone.sh</h1><p>安装jdk<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">BASE_SERVER=mini4</div><div class=\"line\">yum install -y wget</div><div class=\"line\">wget <span class=\"variable\">$BASE_SERVER</span>/soft/jdk-7u45-linux-x64.tar.gz</div><div class=\"line\">tar -zxvf jdk-7u45-linux-x64.tar.gz -C /usr/<span class=\"built_in\">local</span></div><div class=\"line\">cat &gt;&gt; /etc/profile &lt;&lt; EOF</div><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk1.7.0_45</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=\\<span class=\"variable\">$PATH</span>:\\<span class=\"variable\">$JAVA_HOME</span>/bin</div><div class=\"line\">EOF</div></pre></td></tr></table></figure></p>\n<p>说明:</p>\n<ul>\n<li>expect 模拟人机交互</li>\n<li>EOF临时文本输入</li>\n</ul>"},{"title":"大数据03-02-zookeeper 简介","toc":true,"date":"2017-11-19T12:22:13.000Z","scaffolds":null,"_content":"\n# 1. 学软件，框架\n需要明白三点\n1. 应用场景：干什么的 在哪里用的\n2. 核心工作机制流程功能：组成，角色\n3. 怎么用\n4. 再深一层，原理细节：选择性的深入了解，重要框架\n<!--more-->\n\n# 2. zookeeper\nzookeeper会用\n# 3. 概念简介\n分布式**协调服务**，\n- zookeeper是为别的分布式程序服务的\n- Zookeeper**本身就是一个分布式程序**（只要有半数以上节点存活，zk就能正常服务）\n- Zookeeper所提供的服务涵盖：主从协调、服务器节点动态上下线、统一配置管理、分布式共享锁、统一名称服务……\n- 虽然说可以提供各种服务，但是zookeeper在底层其实只提供了两个功能：\n    - **管理(存储，读取)用户程序提交的数据；**\n    - **并为用户程序提供数据节点监听服务；**\n\n\n## 3.1. zookeeper一些应用场景\n![20171118194439](http://ovasdkxqr.bkt.clouddn.com/image/blog/20171118194439.png)\n\n## 3.2. 集群角色分配原理\n![20171118201716](http://ovasdkxqr.bkt.clouddn.com/image/blog/20171118201716.png)\n\n## 3.3. 集群机制\n半数机制：集群中半数以上机器存活，集群可用。  \nzookeeper适合装在奇数台机器上！！！\n## 3.4. 安装\n### 3.4.1. 上传文件\n```\nzookeeper-3.4.5.tar.gz\n```\n### 3.4.2. 解压\n```\ntar -zxvf zookeeper-3.4.5.tar.gz\n```\n### 3.4.3. 重命名\n```\nmv zookeeper-3.4.5 zookeeper（重命名文件夹zookeeper-3.4.5为zookeeper）\n```\n### 3.4.4. 修改环境变量\n1.  su root (切换到root用户)\n2.  vi /etc/profile (修改文件)\n3.  添加内容：\n    ```\n    export ZOOKEEPER_HOME=/home/hadoop/zookeeper\n    export PATH=$PATH:$ZOOKEEPER_HOME/bin\n    ```\n4.  重新编译文件：\nsource /etc/profile\n5.  注意：3台zookeeper都需要修改\n6.  修改完成后切换回hadoop用户：\n    ```\n    su - hadoop\n    ```\n### 3.4.5. 修改配置文件\n1. 用hadoop用户操作\n    ```\n    cd zookeeper/conf\n    cp zoo_sample.cfg zoo.cfg\n    ```\n2. vi zoo.cfg\n3. 添加内容：\n    ```\n    dataDir=/home/hadoop/zookeeper/data\n    dataLogDir=/home/hadoop/zookeeper/log\n    server.1=zk1:2888:3888 (主机名, 心跳端口、数据端口)\n    server.2=zk2:2888:3888\n    server.3=zk3:2888:3888\n    ```\n### 3.4.6. 创建文件夹\n```\ncd /home/hadoop/zookeeper/\nmkdir -m 755 data\nmkdir -m 755 log  \n```\n### 3.4.7. 在data文件夹下新建myid文件，myid的文件内容为：\ncd data\nvi myid\n添加内容：（数字递增）\n```\n1\n```\n上面的操作都是所有机器一起操作的，如果是单台操作需要把内容复制到其他的机器上\n#### 3.4.7.1. 将集群下发到其他机器上\n```\nscp -r /home/hadoop/zookeeper hadoop@slave2:/home/hadoop/\nscp -r /home/hadoop/zookeeper hadoop@slave3:/home/hadoop/\n```\n#### 3.4.7.2. 修改其他机器的配置文件\n```\n到slave2上：修改myid为：2\n到slave3上：修改myid为：3\n```\n### 3.4.8. 启动每台机器\n```\n/root/zookeeper/bin/zkServer.sh start\n```\n### 3.4.9. 查看集群状态\n- jps（查看进程）\n- zkServer.sh status（查看集群状态，主从信息）\n\n\n# 4. 其他 \n## 4.1. 一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问\n```\nservice iptables stop\nchkconfig iptables off\n```\n\n## 4.2. 遇到错误启动不了\n查看bin下的 zookeeper.out\n## 4.3. 注意\nconf/zoo.cfg中节点ID必须与myid文件中的id相对应","source":"_posts/大数据/大数据03-02-zookeeper-简介.md","raw":"---\ntitle: 大数据03-02-zookeeper 简介\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - zookeeper\ntoc: true\ndate: 2017-11-19 20:22:13\nscaffolds:\n---\n\n# 1. 学软件，框架\n需要明白三点\n1. 应用场景：干什么的 在哪里用的\n2. 核心工作机制流程功能：组成，角色\n3. 怎么用\n4. 再深一层，原理细节：选择性的深入了解，重要框架\n<!--more-->\n\n# 2. zookeeper\nzookeeper会用\n# 3. 概念简介\n分布式**协调服务**，\n- zookeeper是为别的分布式程序服务的\n- Zookeeper**本身就是一个分布式程序**（只要有半数以上节点存活，zk就能正常服务）\n- Zookeeper所提供的服务涵盖：主从协调、服务器节点动态上下线、统一配置管理、分布式共享锁、统一名称服务……\n- 虽然说可以提供各种服务，但是zookeeper在底层其实只提供了两个功能：\n    - **管理(存储，读取)用户程序提交的数据；**\n    - **并为用户程序提供数据节点监听服务；**\n\n\n## 3.1. zookeeper一些应用场景\n![20171118194439](http://ovasdkxqr.bkt.clouddn.com/image/blog/20171118194439.png)\n\n## 3.2. 集群角色分配原理\n![20171118201716](http://ovasdkxqr.bkt.clouddn.com/image/blog/20171118201716.png)\n\n## 3.3. 集群机制\n半数机制：集群中半数以上机器存活，集群可用。  \nzookeeper适合装在奇数台机器上！！！\n## 3.4. 安装\n### 3.4.1. 上传文件\n```\nzookeeper-3.4.5.tar.gz\n```\n### 3.4.2. 解压\n```\ntar -zxvf zookeeper-3.4.5.tar.gz\n```\n### 3.4.3. 重命名\n```\nmv zookeeper-3.4.5 zookeeper（重命名文件夹zookeeper-3.4.5为zookeeper）\n```\n### 3.4.4. 修改环境变量\n1.  su root (切换到root用户)\n2.  vi /etc/profile (修改文件)\n3.  添加内容：\n    ```\n    export ZOOKEEPER_HOME=/home/hadoop/zookeeper\n    export PATH=$PATH:$ZOOKEEPER_HOME/bin\n    ```\n4.  重新编译文件：\nsource /etc/profile\n5.  注意：3台zookeeper都需要修改\n6.  修改完成后切换回hadoop用户：\n    ```\n    su - hadoop\n    ```\n### 3.4.5. 修改配置文件\n1. 用hadoop用户操作\n    ```\n    cd zookeeper/conf\n    cp zoo_sample.cfg zoo.cfg\n    ```\n2. vi zoo.cfg\n3. 添加内容：\n    ```\n    dataDir=/home/hadoop/zookeeper/data\n    dataLogDir=/home/hadoop/zookeeper/log\n    server.1=zk1:2888:3888 (主机名, 心跳端口、数据端口)\n    server.2=zk2:2888:3888\n    server.3=zk3:2888:3888\n    ```\n### 3.4.6. 创建文件夹\n```\ncd /home/hadoop/zookeeper/\nmkdir -m 755 data\nmkdir -m 755 log  \n```\n### 3.4.7. 在data文件夹下新建myid文件，myid的文件内容为：\ncd data\nvi myid\n添加内容：（数字递增）\n```\n1\n```\n上面的操作都是所有机器一起操作的，如果是单台操作需要把内容复制到其他的机器上\n#### 3.4.7.1. 将集群下发到其他机器上\n```\nscp -r /home/hadoop/zookeeper hadoop@slave2:/home/hadoop/\nscp -r /home/hadoop/zookeeper hadoop@slave3:/home/hadoop/\n```\n#### 3.4.7.2. 修改其他机器的配置文件\n```\n到slave2上：修改myid为：2\n到slave3上：修改myid为：3\n```\n### 3.4.8. 启动每台机器\n```\n/root/zookeeper/bin/zkServer.sh start\n```\n### 3.4.9. 查看集群状态\n- jps（查看进程）\n- zkServer.sh status（查看集群状态，主从信息）\n\n\n# 4. 其他 \n## 4.1. 一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问\n```\nservice iptables stop\nchkconfig iptables off\n```\n\n## 4.2. 遇到错误启动不了\n查看bin下的 zookeeper.out\n## 4.3. 注意\nconf/zoo.cfg中节点ID必须与myid文件中的id相对应","slug":"大数据/大数据03-02-zookeeper-简介","published":1,"updated":"2018-02-06T07:49:16.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89yu000uv4vfye3vsw26","content":"<h1 id=\"1-学软件，框架\"><a href=\"#1-学软件，框架\" class=\"headerlink\" title=\"1. 学软件，框架\"></a>1. 学软件，框架</h1><p>需要明白三点</p>\n<ol>\n<li>应用场景：干什么的 在哪里用的</li>\n<li>核心工作机制流程功能：组成，角色</li>\n<li>怎么用</li>\n<li>再深一层，原理细节：选择性的深入了解，重要框架<a id=\"more\"></a>\n</li>\n</ol>\n<h1 id=\"2-zookeeper\"><a href=\"#2-zookeeper\" class=\"headerlink\" title=\"2. zookeeper\"></a>2. zookeeper</h1><p>zookeeper会用</p>\n<h1 id=\"3-概念简介\"><a href=\"#3-概念简介\" class=\"headerlink\" title=\"3. 概念简介\"></a>3. 概念简介</h1><p>分布式<strong>协调服务</strong>，</p>\n<ul>\n<li>zookeeper是为别的分布式程序服务的</li>\n<li>Zookeeper<strong>本身就是一个分布式程序</strong>（只要有半数以上节点存活，zk就能正常服务）</li>\n<li>Zookeeper所提供的服务涵盖：主从协调、服务器节点动态上下线、统一配置管理、分布式共享锁、统一名称服务……</li>\n<li>虽然说可以提供各种服务，但是zookeeper在底层其实只提供了两个功能：<ul>\n<li><strong>管理(存储，读取)用户程序提交的数据；</strong></li>\n<li><strong>并为用户程序提供数据节点监听服务；</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-1-zookeeper一些应用场景\"><a href=\"#3-1-zookeeper一些应用场景\" class=\"headerlink\" title=\"3.1. zookeeper一些应用场景\"></a>3.1. zookeeper一些应用场景</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20171118194439.png\" alt=\"20171118194439\"></p>\n<h2 id=\"3-2-集群角色分配原理\"><a href=\"#3-2-集群角色分配原理\" class=\"headerlink\" title=\"3.2. 集群角色分配原理\"></a>3.2. 集群角色分配原理</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20171118201716.png\" alt=\"20171118201716\"></p>\n<h2 id=\"3-3-集群机制\"><a href=\"#3-3-集群机制\" class=\"headerlink\" title=\"3.3. 集群机制\"></a>3.3. 集群机制</h2><p>半数机制：集群中半数以上机器存活，集群可用。<br>zookeeper适合装在奇数台机器上！！！</p>\n<h2 id=\"3-4-安装\"><a href=\"#3-4-安装\" class=\"headerlink\" title=\"3.4. 安装\"></a>3.4. 安装</h2><h3 id=\"3-4-1-上传文件\"><a href=\"#3-4-1-上传文件\" class=\"headerlink\" title=\"3.4.1. 上传文件\"></a>3.4.1. 上传文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">zookeeper-3.4.5.tar.gz</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-2-解压\"><a href=\"#3-4-2-解压\" class=\"headerlink\" title=\"3.4.2. 解压\"></a>3.4.2. 解压</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf zookeeper-3.4.5.tar.gz</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-3-重命名\"><a href=\"#3-4-3-重命名\" class=\"headerlink\" title=\"3.4.3. 重命名\"></a>3.4.3. 重命名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv zookeeper-3.4.5 zookeeper（重命名文件夹zookeeper-3.4.5为zookeeper）</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-4-修改环境变量\"><a href=\"#3-4-4-修改环境变量\" class=\"headerlink\" title=\"3.4.4. 修改环境变量\"></a>3.4.4. 修改环境变量</h3><ol>\n<li>su root (切换到root用户)</li>\n<li>vi /etc/profile (修改文件)</li>\n<li><p>添加内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ZOOKEEPER_HOME=/home/hadoop/zookeeper</div><div class=\"line\">export PATH=$PATH:$ZOOKEEPER_HOME/bin</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新编译文件：<br>source /etc/profile</p>\n</li>\n<li>注意：3台zookeeper都需要修改</li>\n<li>修改完成后切换回hadoop用户：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">su - hadoop</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"3-4-5-修改配置文件\"><a href=\"#3-4-5-修改配置文件\" class=\"headerlink\" title=\"3.4.5. 修改配置文件\"></a>3.4.5. 修改配置文件</h3><ol>\n<li><p>用hadoop用户操作</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd zookeeper/conf</div><div class=\"line\">cp zoo_sample.cfg zoo.cfg</div></pre></td></tr></table></figure>\n</li>\n<li><p>vi zoo.cfg</p>\n</li>\n<li>添加内容： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dataDir=/home/hadoop/zookeeper/data</div><div class=\"line\">dataLogDir=/home/hadoop/zookeeper/log</div><div class=\"line\">server.1=zk1:2888:3888 (主机名, 心跳端口、数据端口)</div><div class=\"line\">server.2=zk2:2888:3888</div><div class=\"line\">server.3=zk3:2888:3888</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"3-4-6-创建文件夹\"><a href=\"#3-4-6-创建文件夹\" class=\"headerlink\" title=\"3.4.6. 创建文件夹\"></a>3.4.6. 创建文件夹</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /home/hadoop/zookeeper/</div><div class=\"line\">mkdir -m 755 data</div><div class=\"line\">mkdir -m 755 log</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-7-在data文件夹下新建myid文件，myid的文件内容为：\"><a href=\"#3-4-7-在data文件夹下新建myid文件，myid的文件内容为：\" class=\"headerlink\" title=\"3.4.7. 在data文件夹下新建myid文件，myid的文件内容为：\"></a>3.4.7. 在data文件夹下新建myid文件，myid的文件内容为：</h3><p>cd data<br>vi myid<br>添加内容：（数字递增）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">1</div></pre></td></tr></table></figure></p>\n<p>上面的操作都是所有机器一起操作的，如果是单台操作需要把内容复制到其他的机器上</p>\n<h4 id=\"3-4-7-1-将集群下发到其他机器上\"><a href=\"#3-4-7-1-将集群下发到其他机器上\" class=\"headerlink\" title=\"3.4.7.1. 将集群下发到其他机器上\"></a>3.4.7.1. 将集群下发到其他机器上</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp -r /home/hadoop/zookeeper hadoop@slave2:/home/hadoop/</div><div class=\"line\">scp -r /home/hadoop/zookeeper hadoop@slave3:/home/hadoop/</div></pre></td></tr></table></figure>\n<h4 id=\"3-4-7-2-修改其他机器的配置文件\"><a href=\"#3-4-7-2-修改其他机器的配置文件\" class=\"headerlink\" title=\"3.4.7.2. 修改其他机器的配置文件\"></a>3.4.7.2. 修改其他机器的配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">到slave2上：修改myid为：2</div><div class=\"line\">到slave3上：修改myid为：3</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-8-启动每台机器\"><a href=\"#3-4-8-启动每台机器\" class=\"headerlink\" title=\"3.4.8. 启动每台机器\"></a>3.4.8. 启动每台机器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/root/zookeeper/bin/zkServer.sh start</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-9-查看集群状态\"><a href=\"#3-4-9-查看集群状态\" class=\"headerlink\" title=\"3.4.9. 查看集群状态\"></a>3.4.9. 查看集群状态</h3><ul>\n<li>jps（查看进程）</li>\n<li>zkServer.sh status（查看集群状态，主从信息）</li>\n</ul>\n<h1 id=\"4-其他\"><a href=\"#4-其他\" class=\"headerlink\" title=\"4. 其他\"></a>4. 其他</h1><h2 id=\"4-1-一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问\"><a href=\"#4-1-一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问\" class=\"headerlink\" title=\"4.1. 一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问\"></a>4.1. 一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">service iptables stop</div><div class=\"line\">chkconfig iptables off</div></pre></td></tr></table></figure>\n<h2 id=\"4-2-遇到错误启动不了\"><a href=\"#4-2-遇到错误启动不了\" class=\"headerlink\" title=\"4.2. 遇到错误启动不了\"></a>4.2. 遇到错误启动不了</h2><p>查看bin下的 zookeeper.out</p>\n<h2 id=\"4-3-注意\"><a href=\"#4-3-注意\" class=\"headerlink\" title=\"4.3. 注意\"></a>4.3. 注意</h2><p>conf/zoo.cfg中节点ID必须与myid文件中的id相对应</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-学软件，框架\"><a href=\"#1-学软件，框架\" class=\"headerlink\" title=\"1. 学软件，框架\"></a>1. 学软件，框架</h1><p>需要明白三点</p>\n<ol>\n<li>应用场景：干什么的 在哪里用的</li>\n<li>核心工作机制流程功能：组成，角色</li>\n<li>怎么用</li>\n<li>再深一层，原理细节：选择性的深入了解，重要框架","more":"</li>\n</ol>\n<h1 id=\"2-zookeeper\"><a href=\"#2-zookeeper\" class=\"headerlink\" title=\"2. zookeeper\"></a>2. zookeeper</h1><p>zookeeper会用</p>\n<h1 id=\"3-概念简介\"><a href=\"#3-概念简介\" class=\"headerlink\" title=\"3. 概念简介\"></a>3. 概念简介</h1><p>分布式<strong>协调服务</strong>，</p>\n<ul>\n<li>zookeeper是为别的分布式程序服务的</li>\n<li>Zookeeper<strong>本身就是一个分布式程序</strong>（只要有半数以上节点存活，zk就能正常服务）</li>\n<li>Zookeeper所提供的服务涵盖：主从协调、服务器节点动态上下线、统一配置管理、分布式共享锁、统一名称服务……</li>\n<li>虽然说可以提供各种服务，但是zookeeper在底层其实只提供了两个功能：<ul>\n<li><strong>管理(存储，读取)用户程序提交的数据；</strong></li>\n<li><strong>并为用户程序提供数据节点监听服务；</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-1-zookeeper一些应用场景\"><a href=\"#3-1-zookeeper一些应用场景\" class=\"headerlink\" title=\"3.1. zookeeper一些应用场景\"></a>3.1. zookeeper一些应用场景</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20171118194439.png\" alt=\"20171118194439\"></p>\n<h2 id=\"3-2-集群角色分配原理\"><a href=\"#3-2-集群角色分配原理\" class=\"headerlink\" title=\"3.2. 集群角色分配原理\"></a>3.2. 集群角色分配原理</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20171118201716.png\" alt=\"20171118201716\"></p>\n<h2 id=\"3-3-集群机制\"><a href=\"#3-3-集群机制\" class=\"headerlink\" title=\"3.3. 集群机制\"></a>3.3. 集群机制</h2><p>半数机制：集群中半数以上机器存活，集群可用。<br>zookeeper适合装在奇数台机器上！！！</p>\n<h2 id=\"3-4-安装\"><a href=\"#3-4-安装\" class=\"headerlink\" title=\"3.4. 安装\"></a>3.4. 安装</h2><h3 id=\"3-4-1-上传文件\"><a href=\"#3-4-1-上传文件\" class=\"headerlink\" title=\"3.4.1. 上传文件\"></a>3.4.1. 上传文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">zookeeper-3.4.5.tar.gz</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-2-解压\"><a href=\"#3-4-2-解压\" class=\"headerlink\" title=\"3.4.2. 解压\"></a>3.4.2. 解压</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf zookeeper-3.4.5.tar.gz</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-3-重命名\"><a href=\"#3-4-3-重命名\" class=\"headerlink\" title=\"3.4.3. 重命名\"></a>3.4.3. 重命名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv zookeeper-3.4.5 zookeeper（重命名文件夹zookeeper-3.4.5为zookeeper）</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-4-修改环境变量\"><a href=\"#3-4-4-修改环境变量\" class=\"headerlink\" title=\"3.4.4. 修改环境变量\"></a>3.4.4. 修改环境变量</h3><ol>\n<li>su root (切换到root用户)</li>\n<li>vi /etc/profile (修改文件)</li>\n<li><p>添加内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ZOOKEEPER_HOME=/home/hadoop/zookeeper</div><div class=\"line\">export PATH=$PATH:$ZOOKEEPER_HOME/bin</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新编译文件：<br>source /etc/profile</p>\n</li>\n<li>注意：3台zookeeper都需要修改</li>\n<li>修改完成后切换回hadoop用户：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">su - hadoop</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"3-4-5-修改配置文件\"><a href=\"#3-4-5-修改配置文件\" class=\"headerlink\" title=\"3.4.5. 修改配置文件\"></a>3.4.5. 修改配置文件</h3><ol>\n<li><p>用hadoop用户操作</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd zookeeper/conf</div><div class=\"line\">cp zoo_sample.cfg zoo.cfg</div></pre></td></tr></table></figure>\n</li>\n<li><p>vi zoo.cfg</p>\n</li>\n<li>添加内容： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dataDir=/home/hadoop/zookeeper/data</div><div class=\"line\">dataLogDir=/home/hadoop/zookeeper/log</div><div class=\"line\">server.1=zk1:2888:3888 (主机名, 心跳端口、数据端口)</div><div class=\"line\">server.2=zk2:2888:3888</div><div class=\"line\">server.3=zk3:2888:3888</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"3-4-6-创建文件夹\"><a href=\"#3-4-6-创建文件夹\" class=\"headerlink\" title=\"3.4.6. 创建文件夹\"></a>3.4.6. 创建文件夹</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /home/hadoop/zookeeper/</div><div class=\"line\">mkdir -m 755 data</div><div class=\"line\">mkdir -m 755 log</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-7-在data文件夹下新建myid文件，myid的文件内容为：\"><a href=\"#3-4-7-在data文件夹下新建myid文件，myid的文件内容为：\" class=\"headerlink\" title=\"3.4.7. 在data文件夹下新建myid文件，myid的文件内容为：\"></a>3.4.7. 在data文件夹下新建myid文件，myid的文件内容为：</h3><p>cd data<br>vi myid<br>添加内容：（数字递增）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">1</div></pre></td></tr></table></figure></p>\n<p>上面的操作都是所有机器一起操作的，如果是单台操作需要把内容复制到其他的机器上</p>\n<h4 id=\"3-4-7-1-将集群下发到其他机器上\"><a href=\"#3-4-7-1-将集群下发到其他机器上\" class=\"headerlink\" title=\"3.4.7.1. 将集群下发到其他机器上\"></a>3.4.7.1. 将集群下发到其他机器上</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp -r /home/hadoop/zookeeper hadoop@slave2:/home/hadoop/</div><div class=\"line\">scp -r /home/hadoop/zookeeper hadoop@slave3:/home/hadoop/</div></pre></td></tr></table></figure>\n<h4 id=\"3-4-7-2-修改其他机器的配置文件\"><a href=\"#3-4-7-2-修改其他机器的配置文件\" class=\"headerlink\" title=\"3.4.7.2. 修改其他机器的配置文件\"></a>3.4.7.2. 修改其他机器的配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">到slave2上：修改myid为：2</div><div class=\"line\">到slave3上：修改myid为：3</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-8-启动每台机器\"><a href=\"#3-4-8-启动每台机器\" class=\"headerlink\" title=\"3.4.8. 启动每台机器\"></a>3.4.8. 启动每台机器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/root/zookeeper/bin/zkServer.sh start</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-9-查看集群状态\"><a href=\"#3-4-9-查看集群状态\" class=\"headerlink\" title=\"3.4.9. 查看集群状态\"></a>3.4.9. 查看集群状态</h3><ul>\n<li>jps（查看进程）</li>\n<li>zkServer.sh status（查看集群状态，主从信息）</li>\n</ul>\n<h1 id=\"4-其他\"><a href=\"#4-其他\" class=\"headerlink\" title=\"4. 其他\"></a>4. 其他</h1><h2 id=\"4-1-一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问\"><a href=\"#4-1-一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问\" class=\"headerlink\" title=\"4.1. 一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问\"></a>4.1. 一般集群公司内部使用的时候防火墙是关掉了，不会被外界访问</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">service iptables stop</div><div class=\"line\">chkconfig iptables off</div></pre></td></tr></table></figure>\n<h2 id=\"4-2-遇到错误启动不了\"><a href=\"#4-2-遇到错误启动不了\" class=\"headerlink\" title=\"4.2. 遇到错误启动不了\"></a>4.2. 遇到错误启动不了</h2><p>查看bin下的 zookeeper.out</p>\n<h2 id=\"4-3-注意\"><a href=\"#4-3-注意\" class=\"headerlink\" title=\"4.3. 注意\"></a>4.3. 注意</h2><p>conf/zoo.cfg中节点ID必须与myid文件中的id相对应</p>"},{"title":"大数据03-03-zookeeper-命令行客户端及znode数据结构类型监听等功能","toc":true,"date":"2017-11-19T15:54:06.000Z","scaffolds":null,"_content":"\n# 1. 进入客户端\n```\nbin/zkCli.sh (连到本机)\nconnect zk2:2181（连到zk2机器上）\n\n[zk: zk2:2181(CONNECTED) 3] \n```\n# 2. zookeeper结构\n## 2.1. 特性\n1. Zookeeper：一个leader，多个follower组成的集群\n1. 全局数据一致：每个server保存一份相同的数据副本，client无论连接到哪个server，数据都是一致的\n1. 分布式读写，更新请求转发，由leader实施\n1. 更新请求顺序进行，来自同一个client的更新请求按其发送顺序依次执行\n1. 数据更新原子性，一次数据更新要么成功，要么失败\n1. 实时性，在一定时间范围内，client能读到最新数据\n\n<!-- more -->\n\n## 2.2. 数据结构 \n1. 层次化的目录结构，命名符合常规文件系统规范(见下图)\n1. 每个节点在zookeeper中叫做znode,并且其有一个唯一的路径标识\n1. 节点Znode可以包含数据和子节点（但是EPHEMERAL类型的节点不能有子节点，下一页详细讲解）\n1. 客户端应用可以在节点上设置监视器（后续详细讲解）\t\n\n## 2.3. 数据结构图\n![20171119232757](http://ovasdkxqr.bkt.clouddn.com/image/blog/20171119232757.png)\n\n## 2.4. 节点类型\n1. Znode有两种类型：\n    - 短暂（ephemeral）（断开连接自己删除）\n    - 持久（persistent）（断开连接不删除）\n1. Znode有四种形式的目录节点（默认是persistent ）\n    - PERSISTENT\n    - PERSISTENT_SEQUENTIAL（持久序列/test0000000019 ）\n    - EPHEMERAL\n    - EPHEMERAL_SEQUENTIAL\n1. 创建znode时设置顺序标识，znode名称后会附加一个值，顺序号是一个单调递增的计数器，由父节点维护\n1. 在分布式系统中，顺序号可以被用于为所有的事件进行全局排序，这样客户端可以通过顺序号推断事件的顺序\n\n# 3. 命令行操作\n> 运行 zkCli.sh –server <ip>进入命令行工具\n\n```\n    [zk: zk2:2181(CONNECTED) 2] help\n    ZooKeeper -server host:port cmd args\n            connect host:port\n            get path [watch]\n            ls path [watch]\n            set path data [version]\n            rmr path\n            delquota [-n|-b] path\n            quit \n            printwatches on|off\n            create [-s] [-e] path data acl\n            stat path [watch]\n            close \n            ls2 path [watch]\n            history \n            listquota path\n            setAcl path acl\n            getAcl path\n            sync path\n            redo cmdno\n            addauth scheme auth\n            delete path [version]\n            setquota -n|-b val path\n```\n1. 使用 ls 命令来查看当前 ZooKeeper 中所包含的内容：\n    ```\n    [zk: zk2:2181(CONNECTED) 3] ls /\n    [zookeeper]\n    ```\n1. 创建一个新的 znode ，使用 create /zk myData 。这个命令创建了一个新的 znode 节点“ zk ”以及与它**关联的**字符串：\n    ```\n    [zk: zk2:2181(CONNECTED) 4] create /app 1234\n    Created /app\n    ```\n\n1. 我们运行 get 命令来确认 znode 是否包含我们所创建的字符串：\n    ```\n    [zk: zk2:2181(CONNECTED) 5] get /app\n    1234\n    cZxid = 0x300000004\n    ctime = Sun Nov 19 15:48:32 UTC 2017\n    mZxid = 0x300000004\n    mtime = Sun Nov 19 15:48:32 UTC 2017\n    pZxid = 0x300000004\n    cversion = 0\n    dataVersion = 0\n    aclVersion = 0\n    ephemeralOwner = 0x0\n    dataLength = 4\n    numChildren = 0\n\n    ```\n\n    ```\n    [zk: localhost:2181(CONNECTED) 4] get /app watch\n    #监听这个节点的变化,当另外一个客户端改变/app,它会打出下面的\n    #WATCHER::\n    #WatchedEvent state:SyncConnected type:NodeDataChanged path:/app\n    ```\n\n1. 下面我们通过 set 命令来对 zk 所关联的字符串进行设置：\n    ```\n    [zk: zk2:2181(CONNECTED) 6] set /app 222\n    cZxid = 0x300000004\n    ctime = Sun Nov 19 15:48:32 UTC 2017\n    mZxid = 0x300000005\n    mtime = Sun Nov 19 15:50:46 UTC 2017\n    pZxid = 0x300000004\n    cversion = 0\n    dataVersion = 1\n    aclVersion = 0\n    ephemeralOwner = 0x0\n    dataLength = 3\n    numChildren = 0\n\n    [zk: zk2:2181(CONNECTED) 7] get /app\n    222\n    cZxid = 0x300000004\n    ctime = Sun Nov 19 15:48:32 UTC 2017\n    mZxid = 0x300000005\n    mtime = Sun Nov 19 15:50:46 UTC 2017\n    pZxid = 0x300000004\n    cversion = 0\n    dataVersion = 1\n    aclVersion = 0\n    ephemeralOwner = 0x0\n    dataLength = 3\n    numChildren = 0\n    ```\n1. 下面我们将刚才创建的 znode 删除：只能删除没有子节点的节点\n    ```\n    [zk: zk2:2181(CONNECTED) 8] delete /app\n    [zk: zk2:2181(CONNECTED) 9] ls /\n    [zookeeper]\n    ```\n1. 删除节点：rmr 删除节点及其子节点\n    ```\n    [zk: zk2:2181(CONNECTED) 11] create /app2 12\n    Created /app2\n    [zk: zk2:2181(CONNECTED) 12] rmr /app2\n    [zk: zk2:2181(CONNECTED) 13] ls /           \n    [zookeeper]\n    ```\n","source":"_posts/大数据/大数据03-03-zookeeper-命令行客户端及znode数据结构类型监听等功能.md","raw":"---\ntitle: 大数据03-03-zookeeper-命令行客户端及znode数据结构类型监听等功能\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - zookeeper\ntoc: true\ndate: 2017-11-19 23:54:06\nscaffolds:\n---\n\n# 1. 进入客户端\n```\nbin/zkCli.sh (连到本机)\nconnect zk2:2181（连到zk2机器上）\n\n[zk: zk2:2181(CONNECTED) 3] \n```\n# 2. zookeeper结构\n## 2.1. 特性\n1. Zookeeper：一个leader，多个follower组成的集群\n1. 全局数据一致：每个server保存一份相同的数据副本，client无论连接到哪个server，数据都是一致的\n1. 分布式读写，更新请求转发，由leader实施\n1. 更新请求顺序进行，来自同一个client的更新请求按其发送顺序依次执行\n1. 数据更新原子性，一次数据更新要么成功，要么失败\n1. 实时性，在一定时间范围内，client能读到最新数据\n\n<!-- more -->\n\n## 2.2. 数据结构 \n1. 层次化的目录结构，命名符合常规文件系统规范(见下图)\n1. 每个节点在zookeeper中叫做znode,并且其有一个唯一的路径标识\n1. 节点Znode可以包含数据和子节点（但是EPHEMERAL类型的节点不能有子节点，下一页详细讲解）\n1. 客户端应用可以在节点上设置监视器（后续详细讲解）\t\n\n## 2.3. 数据结构图\n![20171119232757](http://ovasdkxqr.bkt.clouddn.com/image/blog/20171119232757.png)\n\n## 2.4. 节点类型\n1. Znode有两种类型：\n    - 短暂（ephemeral）（断开连接自己删除）\n    - 持久（persistent）（断开连接不删除）\n1. Znode有四种形式的目录节点（默认是persistent ）\n    - PERSISTENT\n    - PERSISTENT_SEQUENTIAL（持久序列/test0000000019 ）\n    - EPHEMERAL\n    - EPHEMERAL_SEQUENTIAL\n1. 创建znode时设置顺序标识，znode名称后会附加一个值，顺序号是一个单调递增的计数器，由父节点维护\n1. 在分布式系统中，顺序号可以被用于为所有的事件进行全局排序，这样客户端可以通过顺序号推断事件的顺序\n\n# 3. 命令行操作\n> 运行 zkCli.sh –server <ip>进入命令行工具\n\n```\n    [zk: zk2:2181(CONNECTED) 2] help\n    ZooKeeper -server host:port cmd args\n            connect host:port\n            get path [watch]\n            ls path [watch]\n            set path data [version]\n            rmr path\n            delquota [-n|-b] path\n            quit \n            printwatches on|off\n            create [-s] [-e] path data acl\n            stat path [watch]\n            close \n            ls2 path [watch]\n            history \n            listquota path\n            setAcl path acl\n            getAcl path\n            sync path\n            redo cmdno\n            addauth scheme auth\n            delete path [version]\n            setquota -n|-b val path\n```\n1. 使用 ls 命令来查看当前 ZooKeeper 中所包含的内容：\n    ```\n    [zk: zk2:2181(CONNECTED) 3] ls /\n    [zookeeper]\n    ```\n1. 创建一个新的 znode ，使用 create /zk myData 。这个命令创建了一个新的 znode 节点“ zk ”以及与它**关联的**字符串：\n    ```\n    [zk: zk2:2181(CONNECTED) 4] create /app 1234\n    Created /app\n    ```\n\n1. 我们运行 get 命令来确认 znode 是否包含我们所创建的字符串：\n    ```\n    [zk: zk2:2181(CONNECTED) 5] get /app\n    1234\n    cZxid = 0x300000004\n    ctime = Sun Nov 19 15:48:32 UTC 2017\n    mZxid = 0x300000004\n    mtime = Sun Nov 19 15:48:32 UTC 2017\n    pZxid = 0x300000004\n    cversion = 0\n    dataVersion = 0\n    aclVersion = 0\n    ephemeralOwner = 0x0\n    dataLength = 4\n    numChildren = 0\n\n    ```\n\n    ```\n    [zk: localhost:2181(CONNECTED) 4] get /app watch\n    #监听这个节点的变化,当另外一个客户端改变/app,它会打出下面的\n    #WATCHER::\n    #WatchedEvent state:SyncConnected type:NodeDataChanged path:/app\n    ```\n\n1. 下面我们通过 set 命令来对 zk 所关联的字符串进行设置：\n    ```\n    [zk: zk2:2181(CONNECTED) 6] set /app 222\n    cZxid = 0x300000004\n    ctime = Sun Nov 19 15:48:32 UTC 2017\n    mZxid = 0x300000005\n    mtime = Sun Nov 19 15:50:46 UTC 2017\n    pZxid = 0x300000004\n    cversion = 0\n    dataVersion = 1\n    aclVersion = 0\n    ephemeralOwner = 0x0\n    dataLength = 3\n    numChildren = 0\n\n    [zk: zk2:2181(CONNECTED) 7] get /app\n    222\n    cZxid = 0x300000004\n    ctime = Sun Nov 19 15:48:32 UTC 2017\n    mZxid = 0x300000005\n    mtime = Sun Nov 19 15:50:46 UTC 2017\n    pZxid = 0x300000004\n    cversion = 0\n    dataVersion = 1\n    aclVersion = 0\n    ephemeralOwner = 0x0\n    dataLength = 3\n    numChildren = 0\n    ```\n1. 下面我们将刚才创建的 znode 删除：只能删除没有子节点的节点\n    ```\n    [zk: zk2:2181(CONNECTED) 8] delete /app\n    [zk: zk2:2181(CONNECTED) 9] ls /\n    [zookeeper]\n    ```\n1. 删除节点：rmr 删除节点及其子节点\n    ```\n    [zk: zk2:2181(CONNECTED) 11] create /app2 12\n    Created /app2\n    [zk: zk2:2181(CONNECTED) 12] rmr /app2\n    [zk: zk2:2181(CONNECTED) 13] ls /           \n    [zookeeper]\n    ```\n","slug":"大数据/大数据03-03-zookeeper-命令行客户端及znode数据结构类型监听等功能","published":1,"updated":"2018-02-06T07:49:23.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89yw000yv4vff2o87ygy","content":"<h1 id=\"1-进入客户端\"><a href=\"#1-进入客户端\" class=\"headerlink\" title=\"1. 进入客户端\"></a>1. 进入客户端</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/zkCli.sh (连到本机)</div><div class=\"line\">connect zk2:2181（连到zk2机器上）</div><div class=\"line\"></div><div class=\"line\">[zk: zk2:2181(CONNECTED) 3]</div></pre></td></tr></table></figure>\n<h1 id=\"2-zookeeper结构\"><a href=\"#2-zookeeper结构\" class=\"headerlink\" title=\"2. zookeeper结构\"></a>2. zookeeper结构</h1><h2 id=\"2-1-特性\"><a href=\"#2-1-特性\" class=\"headerlink\" title=\"2.1. 特性\"></a>2.1. 特性</h2><ol>\n<li>Zookeeper：一个leader，多个follower组成的集群</li>\n<li>全局数据一致：每个server保存一份相同的数据副本，client无论连接到哪个server，数据都是一致的</li>\n<li>分布式读写，更新请求转发，由leader实施</li>\n<li>更新请求顺序进行，来自同一个client的更新请求按其发送顺序依次执行</li>\n<li>数据更新原子性，一次数据更新要么成功，要么失败</li>\n<li>实时性，在一定时间范围内，client能读到最新数据</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"2-2-数据结构\"><a href=\"#2-2-数据结构\" class=\"headerlink\" title=\"2.2. 数据结构\"></a>2.2. 数据结构</h2><ol>\n<li>层次化的目录结构，命名符合常规文件系统规范(见下图)</li>\n<li>每个节点在zookeeper中叫做znode,并且其有一个唯一的路径标识</li>\n<li>节点Znode可以包含数据和子节点（但是EPHEMERAL类型的节点不能有子节点，下一页详细讲解）</li>\n<li>客户端应用可以在节点上设置监视器（后续详细讲解）    </li>\n</ol>\n<h2 id=\"2-3-数据结构图\"><a href=\"#2-3-数据结构图\" class=\"headerlink\" title=\"2.3. 数据结构图\"></a>2.3. 数据结构图</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20171119232757.png\" alt=\"20171119232757\"></p>\n<h2 id=\"2-4-节点类型\"><a href=\"#2-4-节点类型\" class=\"headerlink\" title=\"2.4. 节点类型\"></a>2.4. 节点类型</h2><ol>\n<li>Znode有两种类型：<ul>\n<li>短暂（ephemeral）（断开连接自己删除）</li>\n<li>持久（persistent）（断开连接不删除）</li>\n</ul>\n</li>\n<li>Znode有四种形式的目录节点（默认是persistent ）<ul>\n<li>PERSISTENT</li>\n<li>PERSISTENT_SEQUENTIAL（持久序列/test0000000019 ）</li>\n<li>EPHEMERAL</li>\n<li>EPHEMERAL_SEQUENTIAL</li>\n</ul>\n</li>\n<li>创建znode时设置顺序标识，znode名称后会附加一个值，顺序号是一个单调递增的计数器，由父节点维护</li>\n<li>在分布式系统中，顺序号可以被用于为所有的事件进行全局排序，这样客户端可以通过顺序号推断事件的顺序</li>\n</ol>\n<h1 id=\"3-命令行操作\"><a href=\"#3-命令行操作\" class=\"headerlink\" title=\"3. 命令行操作\"></a>3. 命令行操作</h1><blockquote>\n<p>运行 zkCli.sh –server <ip>进入命令行工具</ip></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 2] help</div><div class=\"line\">ZooKeeper -server host:port cmd args</div><div class=\"line\">        connect host:port</div><div class=\"line\">        get path [watch]</div><div class=\"line\">        ls path [watch]</div><div class=\"line\">        set path data [version]</div><div class=\"line\">        rmr path</div><div class=\"line\">        delquota [-n|-b] path</div><div class=\"line\">        quit </div><div class=\"line\">        printwatches on|off</div><div class=\"line\">        create [-s] [-e] path data acl</div><div class=\"line\">        stat path [watch]</div><div class=\"line\">        close </div><div class=\"line\">        ls2 path [watch]</div><div class=\"line\">        history </div><div class=\"line\">        listquota path</div><div class=\"line\">        setAcl path acl</div><div class=\"line\">        getAcl path</div><div class=\"line\">        sync path</div><div class=\"line\">        redo cmdno</div><div class=\"line\">        addauth scheme auth</div><div class=\"line\">        delete path [version]</div><div class=\"line\">        setquota -n|-b val path</div></pre></td></tr></table></figure>\n<ol>\n<li><p>使用 ls 命令来查看当前 ZooKeeper 中所包含的内容：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 3] ls /</div><div class=\"line\">[zookeeper]</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个新的 znode ，使用 create /zk myData 。这个命令创建了一个新的 znode 节点“ zk ”以及与它<strong>关联的</strong>字符串：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 4] create /app 1234</div><div class=\"line\">Created /app</div></pre></td></tr></table></figure>\n</li>\n<li><p>我们运行 get 命令来确认 znode 是否包含我们所创建的字符串：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 5] get /app</div><div class=\"line\">1234</div><div class=\"line\">cZxid = 0x300000004</div><div class=\"line\">ctime = Sun Nov 19 15:48:32 UTC 2017</div><div class=\"line\">mZxid = 0x300000004</div><div class=\"line\">mtime = Sun Nov 19 15:48:32 UTC 2017</div><div class=\"line\">pZxid = 0x300000004</div><div class=\"line\">cversion = 0</div><div class=\"line\">dataVersion = 0</div><div class=\"line\">aclVersion = 0</div><div class=\"line\">ephemeralOwner = 0x0</div><div class=\"line\">dataLength = 4</div><div class=\"line\">numChildren = 0</div></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: localhost:2181(CONNECTED) 4] get /app watch</div><div class=\"line\">#监听这个节点的变化,当另外一个客户端改变/app,它会打出下面的</div><div class=\"line\">#WATCHER::</div><div class=\"line\">#WatchedEvent state:SyncConnected type:NodeDataChanged path:/app</div></pre></td></tr></table></figure>\n</li>\n<li><p>下面我们通过 set 命令来对 zk 所关联的字符串进行设置：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 6] set /app 222</div><div class=\"line\">cZxid = 0x300000004</div><div class=\"line\">ctime = Sun Nov 19 15:48:32 UTC 2017</div><div class=\"line\">mZxid = 0x300000005</div><div class=\"line\">mtime = Sun Nov 19 15:50:46 UTC 2017</div><div class=\"line\">pZxid = 0x300000004</div><div class=\"line\">cversion = 0</div><div class=\"line\">dataVersion = 1</div><div class=\"line\">aclVersion = 0</div><div class=\"line\">ephemeralOwner = 0x0</div><div class=\"line\">dataLength = 3</div><div class=\"line\">numChildren = 0</div><div class=\"line\"></div><div class=\"line\">[zk: zk2:2181(CONNECTED) 7] get /app</div><div class=\"line\">222</div><div class=\"line\">cZxid = 0x300000004</div><div class=\"line\">ctime = Sun Nov 19 15:48:32 UTC 2017</div><div class=\"line\">mZxid = 0x300000005</div><div class=\"line\">mtime = Sun Nov 19 15:50:46 UTC 2017</div><div class=\"line\">pZxid = 0x300000004</div><div class=\"line\">cversion = 0</div><div class=\"line\">dataVersion = 1</div><div class=\"line\">aclVersion = 0</div><div class=\"line\">ephemeralOwner = 0x0</div><div class=\"line\">dataLength = 3</div><div class=\"line\">numChildren = 0</div></pre></td></tr></table></figure>\n</li>\n<li><p>下面我们将刚才创建的 znode 删除：只能删除没有子节点的节点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 8] delete /app</div><div class=\"line\">[zk: zk2:2181(CONNECTED) 9] ls /</div><div class=\"line\">[zookeeper]</div></pre></td></tr></table></figure>\n</li>\n<li><p>删除节点：rmr 删除节点及其子节点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 11] create /app2 12</div><div class=\"line\">Created /app2</div><div class=\"line\">[zk: zk2:2181(CONNECTED) 12] rmr /app2</div><div class=\"line\">[zk: zk2:2181(CONNECTED) 13] ls /           </div><div class=\"line\">[zookeeper]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-进入客户端\"><a href=\"#1-进入客户端\" class=\"headerlink\" title=\"1. 进入客户端\"></a>1. 进入客户端</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/zkCli.sh (连到本机)</div><div class=\"line\">connect zk2:2181（连到zk2机器上）</div><div class=\"line\"></div><div class=\"line\">[zk: zk2:2181(CONNECTED) 3]</div></pre></td></tr></table></figure>\n<h1 id=\"2-zookeeper结构\"><a href=\"#2-zookeeper结构\" class=\"headerlink\" title=\"2. zookeeper结构\"></a>2. zookeeper结构</h1><h2 id=\"2-1-特性\"><a href=\"#2-1-特性\" class=\"headerlink\" title=\"2.1. 特性\"></a>2.1. 特性</h2><ol>\n<li>Zookeeper：一个leader，多个follower组成的集群</li>\n<li>全局数据一致：每个server保存一份相同的数据副本，client无论连接到哪个server，数据都是一致的</li>\n<li>分布式读写，更新请求转发，由leader实施</li>\n<li>更新请求顺序进行，来自同一个client的更新请求按其发送顺序依次执行</li>\n<li>数据更新原子性，一次数据更新要么成功，要么失败</li>\n<li>实时性，在一定时间范围内，client能读到最新数据</li>\n</ol>","more":"<h2 id=\"2-2-数据结构\"><a href=\"#2-2-数据结构\" class=\"headerlink\" title=\"2.2. 数据结构\"></a>2.2. 数据结构</h2><ol>\n<li>层次化的目录结构，命名符合常规文件系统规范(见下图)</li>\n<li>每个节点在zookeeper中叫做znode,并且其有一个唯一的路径标识</li>\n<li>节点Znode可以包含数据和子节点（但是EPHEMERAL类型的节点不能有子节点，下一页详细讲解）</li>\n<li>客户端应用可以在节点上设置监视器（后续详细讲解）    </li>\n</ol>\n<h2 id=\"2-3-数据结构图\"><a href=\"#2-3-数据结构图\" class=\"headerlink\" title=\"2.3. 数据结构图\"></a>2.3. 数据结构图</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20171119232757.png\" alt=\"20171119232757\"></p>\n<h2 id=\"2-4-节点类型\"><a href=\"#2-4-节点类型\" class=\"headerlink\" title=\"2.4. 节点类型\"></a>2.4. 节点类型</h2><ol>\n<li>Znode有两种类型：<ul>\n<li>短暂（ephemeral）（断开连接自己删除）</li>\n<li>持久（persistent）（断开连接不删除）</li>\n</ul>\n</li>\n<li>Znode有四种形式的目录节点（默认是persistent ）<ul>\n<li>PERSISTENT</li>\n<li>PERSISTENT_SEQUENTIAL（持久序列/test0000000019 ）</li>\n<li>EPHEMERAL</li>\n<li>EPHEMERAL_SEQUENTIAL</li>\n</ul>\n</li>\n<li>创建znode时设置顺序标识，znode名称后会附加一个值，顺序号是一个单调递增的计数器，由父节点维护</li>\n<li>在分布式系统中，顺序号可以被用于为所有的事件进行全局排序，这样客户端可以通过顺序号推断事件的顺序</li>\n</ol>\n<h1 id=\"3-命令行操作\"><a href=\"#3-命令行操作\" class=\"headerlink\" title=\"3. 命令行操作\"></a>3. 命令行操作</h1><blockquote>\n<p>运行 zkCli.sh –server <ip>进入命令行工具</ip></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 2] help</div><div class=\"line\">ZooKeeper -server host:port cmd args</div><div class=\"line\">        connect host:port</div><div class=\"line\">        get path [watch]</div><div class=\"line\">        ls path [watch]</div><div class=\"line\">        set path data [version]</div><div class=\"line\">        rmr path</div><div class=\"line\">        delquota [-n|-b] path</div><div class=\"line\">        quit </div><div class=\"line\">        printwatches on|off</div><div class=\"line\">        create [-s] [-e] path data acl</div><div class=\"line\">        stat path [watch]</div><div class=\"line\">        close </div><div class=\"line\">        ls2 path [watch]</div><div class=\"line\">        history </div><div class=\"line\">        listquota path</div><div class=\"line\">        setAcl path acl</div><div class=\"line\">        getAcl path</div><div class=\"line\">        sync path</div><div class=\"line\">        redo cmdno</div><div class=\"line\">        addauth scheme auth</div><div class=\"line\">        delete path [version]</div><div class=\"line\">        setquota -n|-b val path</div></pre></td></tr></table></figure>\n<ol>\n<li><p>使用 ls 命令来查看当前 ZooKeeper 中所包含的内容：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 3] ls /</div><div class=\"line\">[zookeeper]</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个新的 znode ，使用 create /zk myData 。这个命令创建了一个新的 znode 节点“ zk ”以及与它<strong>关联的</strong>字符串：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 4] create /app 1234</div><div class=\"line\">Created /app</div></pre></td></tr></table></figure>\n</li>\n<li><p>我们运行 get 命令来确认 znode 是否包含我们所创建的字符串：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 5] get /app</div><div class=\"line\">1234</div><div class=\"line\">cZxid = 0x300000004</div><div class=\"line\">ctime = Sun Nov 19 15:48:32 UTC 2017</div><div class=\"line\">mZxid = 0x300000004</div><div class=\"line\">mtime = Sun Nov 19 15:48:32 UTC 2017</div><div class=\"line\">pZxid = 0x300000004</div><div class=\"line\">cversion = 0</div><div class=\"line\">dataVersion = 0</div><div class=\"line\">aclVersion = 0</div><div class=\"line\">ephemeralOwner = 0x0</div><div class=\"line\">dataLength = 4</div><div class=\"line\">numChildren = 0</div></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: localhost:2181(CONNECTED) 4] get /app watch</div><div class=\"line\">#监听这个节点的变化,当另外一个客户端改变/app,它会打出下面的</div><div class=\"line\">#WATCHER::</div><div class=\"line\">#WatchedEvent state:SyncConnected type:NodeDataChanged path:/app</div></pre></td></tr></table></figure>\n</li>\n<li><p>下面我们通过 set 命令来对 zk 所关联的字符串进行设置：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 6] set /app 222</div><div class=\"line\">cZxid = 0x300000004</div><div class=\"line\">ctime = Sun Nov 19 15:48:32 UTC 2017</div><div class=\"line\">mZxid = 0x300000005</div><div class=\"line\">mtime = Sun Nov 19 15:50:46 UTC 2017</div><div class=\"line\">pZxid = 0x300000004</div><div class=\"line\">cversion = 0</div><div class=\"line\">dataVersion = 1</div><div class=\"line\">aclVersion = 0</div><div class=\"line\">ephemeralOwner = 0x0</div><div class=\"line\">dataLength = 3</div><div class=\"line\">numChildren = 0</div><div class=\"line\"></div><div class=\"line\">[zk: zk2:2181(CONNECTED) 7] get /app</div><div class=\"line\">222</div><div class=\"line\">cZxid = 0x300000004</div><div class=\"line\">ctime = Sun Nov 19 15:48:32 UTC 2017</div><div class=\"line\">mZxid = 0x300000005</div><div class=\"line\">mtime = Sun Nov 19 15:50:46 UTC 2017</div><div class=\"line\">pZxid = 0x300000004</div><div class=\"line\">cversion = 0</div><div class=\"line\">dataVersion = 1</div><div class=\"line\">aclVersion = 0</div><div class=\"line\">ephemeralOwner = 0x0</div><div class=\"line\">dataLength = 3</div><div class=\"line\">numChildren = 0</div></pre></td></tr></table></figure>\n</li>\n<li><p>下面我们将刚才创建的 znode 删除：只能删除没有子节点的节点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 8] delete /app</div><div class=\"line\">[zk: zk2:2181(CONNECTED) 9] ls /</div><div class=\"line\">[zookeeper]</div></pre></td></tr></table></figure>\n</li>\n<li><p>删除节点：rmr 删除节点及其子节点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[zk: zk2:2181(CONNECTED) 11] create /app2 12</div><div class=\"line\">Created /app2</div><div class=\"line\">[zk: zk2:2181(CONNECTED) 12] rmr /app2</div><div class=\"line\">[zk: zk2:2181(CONNECTED) 13] ls /           </div><div class=\"line\">[zookeeper]</div></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"大数据03-04-zookeeper集群自动启动脚本及export变量作用域的解析","toc":true,"date":"2017-11-21T15:22:14.000Z","scaffolds":null,"_content":"1. export A=1 定义的变量，会对自己所在的shell进程及其子进程生效\n2. B=1 定义的变量，只对自己所在的shell进程生效\n3. 在script.sh中定义的变量，在当前登录的shell进程中 source script.sh 时，脚本中定义的变量也会进入当前登录的进程\n<!-- more -->\n\n```bash\n#!/bin/sh\necho \"start zkServer...\"\nfor i in 1 2 3\ndo \nssh zk$i \"source /etc/profile;/home/vagrant/apps/zookeeper/bin/zkServer.sh start\"\ndone \n```\n1. 提示输入密码，配置免密登录\n```\nssh-keygen \nssh-copy-id zk1\n```\n2. 可以放到/root/bin 目录下，该目录直接就在环境变量中，不需要配置，可以在其他位置执行了\n","source":"_posts/大数据/大数据03-04-zookeeper集群自动启动脚本及export变量作用域的解析.md","raw":"---\ntitle: 大数据03-04-zookeeper集群自动启动脚本及export变量作用域的解析\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - zookeeper\ntoc: true\ndate: 2017-11-21 23:22:14\nscaffolds:\n---\n1. export A=1 定义的变量，会对自己所在的shell进程及其子进程生效\n2. B=1 定义的变量，只对自己所在的shell进程生效\n3. 在script.sh中定义的变量，在当前登录的shell进程中 source script.sh 时，脚本中定义的变量也会进入当前登录的进程\n<!-- more -->\n\n```bash\n#!/bin/sh\necho \"start zkServer...\"\nfor i in 1 2 3\ndo \nssh zk$i \"source /etc/profile;/home/vagrant/apps/zookeeper/bin/zkServer.sh start\"\ndone \n```\n1. 提示输入密码，配置免密登录\n```\nssh-keygen \nssh-copy-id zk1\n```\n2. 可以放到/root/bin 目录下，该目录直接就在环境变量中，不需要配置，可以在其他位置执行了\n","slug":"大数据/大数据03-04-zookeeper集群自动启动脚本及export变量作用域的解析","published":1,"updated":"2018-02-06T07:49:28.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89yy0011v4vfll899vfa","content":"<ol>\n<li>export A=1 定义的变量，会对自己所在的shell进程及其子进程生效</li>\n<li>B=1 定义的变量，只对自己所在的shell进程生效</li>\n<li>在script.sh中定义的变量，在当前登录的shell进程中 source script.sh 时，脚本中定义的变量也会进入当前登录的进程<a id=\"more\"></a>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"start zkServer...\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> 1 2 3</div><div class=\"line\"><span class=\"keyword\">do</span> </div><div class=\"line\">ssh zk<span class=\"variable\">$i</span> <span class=\"string\">\"source /etc/profile;/home/vagrant/apps/zookeeper/bin/zkServer.sh start\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>提示输入密码，配置免密登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen </div><div class=\"line\">ssh-copy-id zk1</div></pre></td></tr></table></figure>\n</li>\n<li><p>可以放到/root/bin 目录下，该目录直接就在环境变量中，不需要配置，可以在其他位置执行了</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li>export A=1 定义的变量，会对自己所在的shell进程及其子进程生效</li>\n<li>B=1 定义的变量，只对自己所在的shell进程生效</li>\n<li>在script.sh中定义的变量，在当前登录的shell进程中 source script.sh 时，脚本中定义的变量也会进入当前登录的进程","more":"</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"start zkServer...\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> 1 2 3</div><div class=\"line\"><span class=\"keyword\">do</span> </div><div class=\"line\">ssh zk<span class=\"variable\">$i</span> <span class=\"string\">\"source /etc/profile;/home/vagrant/apps/zookeeper/bin/zkServer.sh start\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>提示输入密码，配置免密登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen </div><div class=\"line\">ssh-copy-id zk1</div></pre></td></tr></table></figure>\n</li>\n<li><p>可以放到/root/bin 目录下，该目录直接就在环境变量中，不需要配置，可以在其他位置执行了</p>\n</li>\n</ol>"},{"title":"大数据03-05-java api","toc":true,"date":"2017-11-25T17:10:40.000Z","scaffolds":null,"_content":"\njava api\n\n<!-- more -->\n```java\npackage cn.itcast.bigdata.zk;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.zookeeper.CreateMode;\nimport org.apache.zookeeper.KeeperException;\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.ZooDefs.Ids;\nimport org.apache.zookeeper.ZooKeeper;\nimport org.apache.zookeeper.data.Stat;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class SimpleZkClient {\n\n\tprivate static final String connectString = \"mini1:2181,mini2:2181,mini3:2181\";\n\tprivate static final int sessionTimeout = 2000;\n\n\tZooKeeper zkClient = null;\n\n\t@Before\n\tpublic void init() throws Exception {\n\t\tzkClient = new ZooKeeper(connectString, sessionTimeout, new Watcher() {\n\t\t\t@Override\n\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）\n\t\t\t\tSystem.out.println(event.getType() + \"---\" + event.getPath());\n\t\t\t\ttry {\n\t\t\t\t\tzkClient.getChildren(\"/\", true);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\t/**\n\t * 数据的增删改查\n\t * \n\t * @throws InterruptedException\n\t * @throws KeeperException\n\t */\n\n\t// 创建数据节点到zk中\n\tpublic void testCreate() throws KeeperException, InterruptedException {\n\t\t// 参数1：要创建的节点的路径 参数2：节点大数据 参数3：节点的权限 参数4：节点的类型\n\t\tString nodeCreated = zkClient.create(\"/eclipse\", \"hellozk\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t\t//上传的数据可以是任何类型，但都要转成byte[]\n\t}\n\n\t//判断znode是否存在\n\t@Test\t\n\tpublic void testExist() throws Exception{\n\t\tStat stat = zkClient.exists(\"/eclipse\", false);\n\t\tSystem.out.println(stat==null?\"not exist\":\"exist\");\n\t\t\n\t\t\n\t}\n\t\n\t// 获取子节点\n\t@Test\n\tpublic void getChildren() throws Exception {\n\t\tList<String> children = zkClient.getChildren(\"/\", true);\n\t\tfor (String child : children) {\n\t\t\tSystem.out.println(child);\n\t\t}\n\t\tThread.sleep(Long.MAX_VALUE);\n\t}\n\n\t//获取znode的数据\n\t@Test\n\tpublic void getData() throws Exception {\n\t\t\n\t\tbyte[] data = zkClient.getData(\"/eclipse\", false, null);\n\t\tSystem.out.println(new String(data));\n\t\t\n\t}\n\t\n\t//删除znode\n\t@Test\n\tpublic void deleteZnode() throws Exception {\n\t\t\n\t\t//参数2：指定要删除的版本，-1表示删除所有版本\n\t\tzkClient.delete(\"/eclipse\", -1);\n\t\t\n\t\t\n\t}\n\t//删除znode\n\t@Test\n\tpublic void setData() throws Exception {\n\t\t\n\t\tzkClient.setData(\"/app1\", \"imissyou angelababy\".getBytes(), -1);\n\t\t\n\t\tbyte[] data = zkClient.getData(\"/app1\", false, null);\n\t\tSystem.out.println(new String(data));\n\t\t\n\t}\n}\n```","source":"_posts/大数据/大数据03-05-java-api.md","raw":"---\ntitle: 大数据03-05-java api\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - zookeeper\ntoc: true\ndate: 2017-11-26 01:10:40\nscaffolds:\n---\n\njava api\n\n<!-- more -->\n```java\npackage cn.itcast.bigdata.zk;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.zookeeper.CreateMode;\nimport org.apache.zookeeper.KeeperException;\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.ZooDefs.Ids;\nimport org.apache.zookeeper.ZooKeeper;\nimport org.apache.zookeeper.data.Stat;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class SimpleZkClient {\n\n\tprivate static final String connectString = \"mini1:2181,mini2:2181,mini3:2181\";\n\tprivate static final int sessionTimeout = 2000;\n\n\tZooKeeper zkClient = null;\n\n\t@Before\n\tpublic void init() throws Exception {\n\t\tzkClient = new ZooKeeper(connectString, sessionTimeout, new Watcher() {\n\t\t\t@Override\n\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）\n\t\t\t\tSystem.out.println(event.getType() + \"---\" + event.getPath());\n\t\t\t\ttry {\n\t\t\t\t\tzkClient.getChildren(\"/\", true);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\t/**\n\t * 数据的增删改查\n\t * \n\t * @throws InterruptedException\n\t * @throws KeeperException\n\t */\n\n\t// 创建数据节点到zk中\n\tpublic void testCreate() throws KeeperException, InterruptedException {\n\t\t// 参数1：要创建的节点的路径 参数2：节点大数据 参数3：节点的权限 参数4：节点的类型\n\t\tString nodeCreated = zkClient.create(\"/eclipse\", \"hellozk\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t\t//上传的数据可以是任何类型，但都要转成byte[]\n\t}\n\n\t//判断znode是否存在\n\t@Test\t\n\tpublic void testExist() throws Exception{\n\t\tStat stat = zkClient.exists(\"/eclipse\", false);\n\t\tSystem.out.println(stat==null?\"not exist\":\"exist\");\n\t\t\n\t\t\n\t}\n\t\n\t// 获取子节点\n\t@Test\n\tpublic void getChildren() throws Exception {\n\t\tList<String> children = zkClient.getChildren(\"/\", true);\n\t\tfor (String child : children) {\n\t\t\tSystem.out.println(child);\n\t\t}\n\t\tThread.sleep(Long.MAX_VALUE);\n\t}\n\n\t//获取znode的数据\n\t@Test\n\tpublic void getData() throws Exception {\n\t\t\n\t\tbyte[] data = zkClient.getData(\"/eclipse\", false, null);\n\t\tSystem.out.println(new String(data));\n\t\t\n\t}\n\t\n\t//删除znode\n\t@Test\n\tpublic void deleteZnode() throws Exception {\n\t\t\n\t\t//参数2：指定要删除的版本，-1表示删除所有版本\n\t\tzkClient.delete(\"/eclipse\", -1);\n\t\t\n\t\t\n\t}\n\t//删除znode\n\t@Test\n\tpublic void setData() throws Exception {\n\t\t\n\t\tzkClient.setData(\"/app1\", \"imissyou angelababy\".getBytes(), -1);\n\t\t\n\t\tbyte[] data = zkClient.getData(\"/app1\", false, null);\n\t\tSystem.out.println(new String(data));\n\t\t\n\t}\n}\n```","slug":"大数据/大数据03-05-java-api","published":1,"updated":"2018-02-06T07:49:35.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89z00013v4vfzxlv47aa","content":"<p>java api</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.zk;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.CreateMode;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.KeeperException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooDefs.Ids;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.data.Stat;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleZkClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String connectString = <span class=\"string\">\"mini1:2181,mini2:2181,mini3:2181\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">2000</span>;</div><div class=\"line\"></div><div class=\"line\">\tZooKeeper zkClient = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Before</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tzkClient = <span class=\"keyword\">new</span> ZooKeeper(connectString, sessionTimeout, <span class=\"keyword\">new</span> Watcher() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent event)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</span></div><div class=\"line\">\t\t\t\tSystem.out.println(event.getType() + <span class=\"string\">\"---\"</span> + event.getPath());</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tzkClient.getChildren(<span class=\"string\">\"/\"</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 数据的增删改查</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> KeeperException</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 创建数据节点到zk中</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCreate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 参数1：要创建的节点的路径 参数2：节点大数据 参数3：节点的权限 参数4：节点的类型</span></div><div class=\"line\">\t\tString nodeCreated = zkClient.create(<span class=\"string\">\"/eclipse\"</span>, <span class=\"string\">\"hellozk\"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</div><div class=\"line\">\t\t<span class=\"comment\">//上传的数据可以是任何类型，但都要转成byte[]</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//判断znode是否存在</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span>\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testExist</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\tStat stat = zkClient.exists(<span class=\"string\">\"/eclipse\"</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\tSystem.out.println(stat==<span class=\"keyword\">null</span>?<span class=\"string\">\"not exist\"</span>:<span class=\"string\">\"exist\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// 获取子节点</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getChildren</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tList&lt;String&gt; children = zkClient.getChildren(<span class=\"string\">\"/\"</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (String child : children) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(child);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tThread.sleep(Long.MAX_VALUE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//获取znode的数据</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] data = zkClient.getData(<span class=\"string\">\"/eclipse\"</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> String(data));</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//删除znode</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteZnode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//参数2：指定要删除的版本，-1表示删除所有版本</span></div><div class=\"line\">\t\tzkClient.delete(<span class=\"string\">\"/eclipse\"</span>, -<span class=\"number\">1</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//删除znode</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tzkClient.setData(<span class=\"string\">\"/app1\"</span>, <span class=\"string\">\"imissyou angelababy\"</span>.getBytes(), -<span class=\"number\">1</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] data = zkClient.getData(<span class=\"string\">\"/app1\"</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> String(data));</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>java api</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.zk;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.CreateMode;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.KeeperException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooDefs.Ids;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.data.Stat;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleZkClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String connectString = <span class=\"string\">\"mini1:2181,mini2:2181,mini3:2181\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">2000</span>;</div><div class=\"line\"></div><div class=\"line\">\tZooKeeper zkClient = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Before</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tzkClient = <span class=\"keyword\">new</span> ZooKeeper(connectString, sessionTimeout, <span class=\"keyword\">new</span> Watcher() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent event)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</span></div><div class=\"line\">\t\t\t\tSystem.out.println(event.getType() + <span class=\"string\">\"---\"</span> + event.getPath());</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tzkClient.getChildren(<span class=\"string\">\"/\"</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 数据的增删改查</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> KeeperException</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 创建数据节点到zk中</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCreate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 参数1：要创建的节点的路径 参数2：节点大数据 参数3：节点的权限 参数4：节点的类型</span></div><div class=\"line\">\t\tString nodeCreated = zkClient.create(<span class=\"string\">\"/eclipse\"</span>, <span class=\"string\">\"hellozk\"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</div><div class=\"line\">\t\t<span class=\"comment\">//上传的数据可以是任何类型，但都要转成byte[]</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//判断znode是否存在</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span>\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testExist</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\tStat stat = zkClient.exists(<span class=\"string\">\"/eclipse\"</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\tSystem.out.println(stat==<span class=\"keyword\">null</span>?<span class=\"string\">\"not exist\"</span>:<span class=\"string\">\"exist\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// 获取子节点</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getChildren</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tList&lt;String&gt; children = zkClient.getChildren(<span class=\"string\">\"/\"</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (String child : children) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(child);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tThread.sleep(Long.MAX_VALUE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//获取znode的数据</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] data = zkClient.getData(<span class=\"string\">\"/eclipse\"</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> String(data));</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//删除znode</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteZnode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//参数2：指定要删除的版本，-1表示删除所有版本</span></div><div class=\"line\">\t\tzkClient.delete(<span class=\"string\">\"/eclipse\"</span>, -<span class=\"number\">1</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//删除znode</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tzkClient.setData(<span class=\"string\">\"/app1\"</span>, <span class=\"string\">\"imissyou angelababy\"</span>.getBytes(), -<span class=\"number\">1</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] data = zkClient.getData(<span class=\"string\">\"/app1\"</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> String(data));</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"大数据03-06-系统服务器上下线感知程序","toc":true,"date":"2017-11-25T17:10:58.000Z","scaffolds":null,"_content":"\n分布式服务注册，客户端获取等\n<!-- more -->\n\n# 1. zookeeper动态感知节点的示意图\n\n![2017112604948](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017112604948.png)\n\n# 2. 代码\n\n## 2.1. 客户端\n```java\npackage cn.itcast.bigdata.zkdist;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.zookeeper.KeeperException;\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.ZooKeeper;\n\npublic class DistributedClient {\n\n\tprivate static final String connectString = \"mini1:2181,mini2:2181,mini3:2181\";\n\tprivate static final int sessionTimeout = 2000;\n\tprivate static final String parentNode = \"/servers\";\n\t// 注意:加volatile的意义何在？\n\tprivate volatile List<String> serverList;\n\tprivate ZooKeeper zk = null;\n\n\t/**\n\t * 创建到zk的客户端连接\n\t * \n\t * @throws Exception\n\t */\n\tpublic void getConnect() throws Exception {\n\n\t\tzk = new ZooKeeper(connectString, sessionTimeout, new Watcher() {\n\t\t\t@Override\n\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）\n\t\t\t\ttry {\n\t\t\t\t\t//重新更新服务器列表，并且注册了监听\n\t\t\t\t\tgetServerList();\n\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\t/**\n\t * 获取服务器信息列表\n\t * \n\t * @throws Exception\n\t */\n\tpublic void getServerList() throws Exception {\n\n\t\t// 获取服务器子节点信息，并且对父节点进行监听\n\t\tList<String> children = zk.getChildren(parentNode, true);\n\n\t\t// 先创建一个局部的list来存服务器信息\n\t\tList<String> servers = new ArrayList<String>();\n\t\tfor (String child : children) {\n\t\t\t// child只是子节点的节点名\n\t\t\tbyte[] data = zk.getData(parentNode + \"/\" + child, false, null);\n\t\t\tservers.add(new String(data));\n\t\t}\n\t\t// 把servers赋值给成员变量serverList，已提供给各业务线程使用\n\t\tserverList = servers;\n\t\t\n\t\t//打印服务器列表\n\t\tSystem.out.println(serverList);\n\t\t\n\t}\n\n\t/**\n\t * 业务功能\n\t * \n\t * @throws InterruptedException\n\t */\n\tpublic void handleBussiness() throws InterruptedException {\n\t\tSystem.out.println(\"client start working.....\");\n\t\tThread.sleep(Long.MAX_VALUE);\n\t}\n\t\n\t\n\t\n\t\n\tpublic static void main(String[] args) throws Exception {\n\n\t\t// 获取zk连接\n\t\tDistributedClient client = new DistributedClient();\n\t\tclient.getConnect();\n\t\t// 获取servers的子节点信息（并监听），从中获取服务器信息列表\n\t\tclient.getServerList();\n\n\t\t// 业务线程启动\n\t\tclient.handleBussiness();\n\t\t\n\t}\n\n}\n```\n\n## 2.2. 服务端\n```java\npackage cn.itcast.bigdata.zkdist;\n\nimport org.apache.zookeeper.CreateMode;\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.ZooDefs.Ids;\nimport org.apache.zookeeper.ZooKeeper;\n\npublic class DistributedServer {\n\tprivate static final String connectString = \"mini1:2181,mini2:2181,mini3:2181\";\n\tprivate static final int sessionTimeout = 2000;\n\tprivate static final String parentNode = \"/servers\";\n\n\tprivate ZooKeeper zk = null;\n\n\t/**\n\t * 创建到zk的客户端连接\n\t * \n\t * @throws Exception\n\t */\n\tpublic void getConnect() throws Exception {\n\n\t\tzk = new ZooKeeper(connectString, sessionTimeout, new Watcher() {\n\t\t\t@Override\n\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）\n\t\t\t\tSystem.out.println(event.getType() + \"---\" + event.getPath());\n\t\t\t\ttry {\n\t\t\t\t\tzk.getChildren(\"/\", true);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\t/**\n\t * 向zk集群注册服务器信息\n\t * \n\t * @param hostname\n\t * @throws Exception\n\t */\n\tpublic void registerServer(String hostname) throws Exception {\n\n\t\tString create = zk.create(parentNode + \"/server\", hostname.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);\n\t\tSystem.out.println(hostname + \"is online..\" + create);\n\n\t}\n\n\t/**\n\t * 业务功能\n\t * \n\t * @throws InterruptedException\n\t */\n\tpublic void handleBussiness(String hostname) throws InterruptedException {\n\t\tSystem.out.println(hostname + \"start working.....\");\n\t\tThread.sleep(Long.MAX_VALUE);\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\t// 获取zk连接\n\t\tDistributedServer server = new DistributedServer();\n\t\tserver.getConnect();\n\n\t\t// 利用zk连接注册服务器信息\n\t\tserver.registerServer(args[0]);\n\n\t\t// 启动业务功能\n\t\tserver.handleBussiness(args[0]);\n\n\t}\n\n}\n```","source":"_posts/大数据/大数据03-06-系统服务器上下线感知程序.md","raw":"---\ntitle: 大数据03-06-系统服务器上下线感知程序\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - zookeeper\ntoc: true\ndate: 2017-11-26 01:10:58\nscaffolds:\n---\n\n分布式服务注册，客户端获取等\n<!-- more -->\n\n# 1. zookeeper动态感知节点的示意图\n\n![2017112604948](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017112604948.png)\n\n# 2. 代码\n\n## 2.1. 客户端\n```java\npackage cn.itcast.bigdata.zkdist;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.zookeeper.KeeperException;\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.ZooKeeper;\n\npublic class DistributedClient {\n\n\tprivate static final String connectString = \"mini1:2181,mini2:2181,mini3:2181\";\n\tprivate static final int sessionTimeout = 2000;\n\tprivate static final String parentNode = \"/servers\";\n\t// 注意:加volatile的意义何在？\n\tprivate volatile List<String> serverList;\n\tprivate ZooKeeper zk = null;\n\n\t/**\n\t * 创建到zk的客户端连接\n\t * \n\t * @throws Exception\n\t */\n\tpublic void getConnect() throws Exception {\n\n\t\tzk = new ZooKeeper(connectString, sessionTimeout, new Watcher() {\n\t\t\t@Override\n\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）\n\t\t\t\ttry {\n\t\t\t\t\t//重新更新服务器列表，并且注册了监听\n\t\t\t\t\tgetServerList();\n\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\t/**\n\t * 获取服务器信息列表\n\t * \n\t * @throws Exception\n\t */\n\tpublic void getServerList() throws Exception {\n\n\t\t// 获取服务器子节点信息，并且对父节点进行监听\n\t\tList<String> children = zk.getChildren(parentNode, true);\n\n\t\t// 先创建一个局部的list来存服务器信息\n\t\tList<String> servers = new ArrayList<String>();\n\t\tfor (String child : children) {\n\t\t\t// child只是子节点的节点名\n\t\t\tbyte[] data = zk.getData(parentNode + \"/\" + child, false, null);\n\t\t\tservers.add(new String(data));\n\t\t}\n\t\t// 把servers赋值给成员变量serverList，已提供给各业务线程使用\n\t\tserverList = servers;\n\t\t\n\t\t//打印服务器列表\n\t\tSystem.out.println(serverList);\n\t\t\n\t}\n\n\t/**\n\t * 业务功能\n\t * \n\t * @throws InterruptedException\n\t */\n\tpublic void handleBussiness() throws InterruptedException {\n\t\tSystem.out.println(\"client start working.....\");\n\t\tThread.sleep(Long.MAX_VALUE);\n\t}\n\t\n\t\n\t\n\t\n\tpublic static void main(String[] args) throws Exception {\n\n\t\t// 获取zk连接\n\t\tDistributedClient client = new DistributedClient();\n\t\tclient.getConnect();\n\t\t// 获取servers的子节点信息（并监听），从中获取服务器信息列表\n\t\tclient.getServerList();\n\n\t\t// 业务线程启动\n\t\tclient.handleBussiness();\n\t\t\n\t}\n\n}\n```\n\n## 2.2. 服务端\n```java\npackage cn.itcast.bigdata.zkdist;\n\nimport org.apache.zookeeper.CreateMode;\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.Watcher;\nimport org.apache.zookeeper.ZooDefs.Ids;\nimport org.apache.zookeeper.ZooKeeper;\n\npublic class DistributedServer {\n\tprivate static final String connectString = \"mini1:2181,mini2:2181,mini3:2181\";\n\tprivate static final int sessionTimeout = 2000;\n\tprivate static final String parentNode = \"/servers\";\n\n\tprivate ZooKeeper zk = null;\n\n\t/**\n\t * 创建到zk的客户端连接\n\t * \n\t * @throws Exception\n\t */\n\tpublic void getConnect() throws Exception {\n\n\t\tzk = new ZooKeeper(connectString, sessionTimeout, new Watcher() {\n\t\t\t@Override\n\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）\n\t\t\t\tSystem.out.println(event.getType() + \"---\" + event.getPath());\n\t\t\t\ttry {\n\t\t\t\t\tzk.getChildren(\"/\", true);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\t/**\n\t * 向zk集群注册服务器信息\n\t * \n\t * @param hostname\n\t * @throws Exception\n\t */\n\tpublic void registerServer(String hostname) throws Exception {\n\n\t\tString create = zk.create(parentNode + \"/server\", hostname.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);\n\t\tSystem.out.println(hostname + \"is online..\" + create);\n\n\t}\n\n\t/**\n\t * 业务功能\n\t * \n\t * @throws InterruptedException\n\t */\n\tpublic void handleBussiness(String hostname) throws InterruptedException {\n\t\tSystem.out.println(hostname + \"start working.....\");\n\t\tThread.sleep(Long.MAX_VALUE);\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\t// 获取zk连接\n\t\tDistributedServer server = new DistributedServer();\n\t\tserver.getConnect();\n\n\t\t// 利用zk连接注册服务器信息\n\t\tserver.registerServer(args[0]);\n\n\t\t// 启动业务功能\n\t\tserver.handleBussiness(args[0]);\n\n\t}\n\n}\n```","slug":"大数据/大数据03-06-系统服务器上下线感知程序","published":1,"updated":"2018-02-06T07:49:40.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89z20017v4vfshk5vyqk","content":"<p>分布式服务注册，客户端获取等<br><a id=\"more\"></a></p>\n<h1 id=\"1-zookeeper动态感知节点的示意图\"><a href=\"#1-zookeeper动态感知节点的示意图\" class=\"headerlink\" title=\"1. zookeeper动态感知节点的示意图\"></a>1. zookeeper动态感知节点的示意图</h1><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017112604948.png\" alt=\"2017112604948\"></p>\n<h1 id=\"2-代码\"><a href=\"#2-代码\" class=\"headerlink\" title=\"2. 代码\"></a>2. 代码</h1><h2 id=\"2-1-客户端\"><a href=\"#2-1-客户端\" class=\"headerlink\" title=\"2.1. 客户端\"></a>2.1. 客户端</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.zkdist;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.KeeperException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DistributedClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String connectString = <span class=\"string\">\"mini1:2181,mini2:2181,mini3:2181\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">2000</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String parentNode = <span class=\"string\">\"/servers\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 注意:加volatile的意义何在？</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> List&lt;String&gt; serverList;</div><div class=\"line\">\t<span class=\"keyword\">private</span> ZooKeeper zk = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 创建到zk的客户端连接</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tzk = <span class=\"keyword\">new</span> ZooKeeper(connectString, sessionTimeout, <span class=\"keyword\">new</span> Watcher() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent event)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//重新更新服务器列表，并且注册了监听</span></div><div class=\"line\">\t\t\t\t\tgetServerList();</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 获取服务器信息列表</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getServerList</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 获取服务器子节点信息，并且对父节点进行监听</span></div><div class=\"line\">\t\tList&lt;String&gt; children = zk.getChildren(parentNode, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 先创建一个局部的list来存服务器信息</span></div><div class=\"line\">\t\tList&lt;String&gt; servers = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (String child : children) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// child只是子节点的节点名</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] data = zk.getData(parentNode + <span class=\"string\">\"/\"</span> + child, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\t\tservers.add(<span class=\"keyword\">new</span> String(data));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 把servers赋值给成员变量serverList，已提供给各业务线程使用</span></div><div class=\"line\">\t\tserverList = servers;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//打印服务器列表</span></div><div class=\"line\">\t\tSystem.out.println(serverList);</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 业务功能</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleBussiness</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"client start working.....\"</span>);</div><div class=\"line\">\t\tThread.sleep(Long.MAX_VALUE);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 获取zk连接</span></div><div class=\"line\">\t\tDistributedClient client = <span class=\"keyword\">new</span> DistributedClient();</div><div class=\"line\">\t\tclient.getConnect();</div><div class=\"line\">\t\t<span class=\"comment\">// 获取servers的子节点信息（并监听），从中获取服务器信息列表</span></div><div class=\"line\">\t\tclient.getServerList();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 业务线程启动</span></div><div class=\"line\">\t\tclient.handleBussiness();</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-2-服务端\"><a href=\"#2-2-服务端\" class=\"headerlink\" title=\"2.2. 服务端\"></a>2.2. 服务端</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.zkdist;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.CreateMode;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooDefs.Ids;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DistributedServer</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String connectString = <span class=\"string\">\"mini1:2181,mini2:2181,mini3:2181\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">2000</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String parentNode = <span class=\"string\">\"/servers\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> ZooKeeper zk = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 创建到zk的客户端连接</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tzk = <span class=\"keyword\">new</span> ZooKeeper(connectString, sessionTimeout, <span class=\"keyword\">new</span> Watcher() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent event)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</span></div><div class=\"line\">\t\t\t\tSystem.out.println(event.getType() + <span class=\"string\">\"---\"</span> + event.getPath());</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tzk.getChildren(<span class=\"string\">\"/\"</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 向zk集群注册服务器信息</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> hostname</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerServer</span><span class=\"params\">(String hostname)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tString create = zk.create(parentNode + <span class=\"string\">\"/server\"</span>, hostname.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class=\"line\">\t\tSystem.out.println(hostname + <span class=\"string\">\"is online..\"</span> + create);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 业务功能</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleBussiness</span><span class=\"params\">(String hostname)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(hostname + <span class=\"string\">\"start working.....\"</span>);</div><div class=\"line\">\t\tThread.sleep(Long.MAX_VALUE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 获取zk连接</span></div><div class=\"line\">\t\tDistributedServer server = <span class=\"keyword\">new</span> DistributedServer();</div><div class=\"line\">\t\tserver.getConnect();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 利用zk连接注册服务器信息</span></div><div class=\"line\">\t\tserver.registerServer(args[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 启动业务功能</span></div><div class=\"line\">\t\tserver.handleBussiness(args[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>分布式服务注册，客户端获取等<br>","more":"</p>\n<h1 id=\"1-zookeeper动态感知节点的示意图\"><a href=\"#1-zookeeper动态感知节点的示意图\" class=\"headerlink\" title=\"1. zookeeper动态感知节点的示意图\"></a>1. zookeeper动态感知节点的示意图</h1><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017112604948.png\" alt=\"2017112604948\"></p>\n<h1 id=\"2-代码\"><a href=\"#2-代码\" class=\"headerlink\" title=\"2. 代码\"></a>2. 代码</h1><h2 id=\"2-1-客户端\"><a href=\"#2-1-客户端\" class=\"headerlink\" title=\"2.1. 客户端\"></a>2.1. 客户端</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.zkdist;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.KeeperException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DistributedClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String connectString = <span class=\"string\">\"mini1:2181,mini2:2181,mini3:2181\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">2000</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String parentNode = <span class=\"string\">\"/servers\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 注意:加volatile的意义何在？</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> List&lt;String&gt; serverList;</div><div class=\"line\">\t<span class=\"keyword\">private</span> ZooKeeper zk = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 创建到zk的客户端连接</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tzk = <span class=\"keyword\">new</span> ZooKeeper(connectString, sessionTimeout, <span class=\"keyword\">new</span> Watcher() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent event)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//重新更新服务器列表，并且注册了监听</span></div><div class=\"line\">\t\t\t\t\tgetServerList();</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 获取服务器信息列表</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getServerList</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 获取服务器子节点信息，并且对父节点进行监听</span></div><div class=\"line\">\t\tList&lt;String&gt; children = zk.getChildren(parentNode, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 先创建一个局部的list来存服务器信息</span></div><div class=\"line\">\t\tList&lt;String&gt; servers = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (String child : children) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// child只是子节点的节点名</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] data = zk.getData(parentNode + <span class=\"string\">\"/\"</span> + child, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\t\tservers.add(<span class=\"keyword\">new</span> String(data));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 把servers赋值给成员变量serverList，已提供给各业务线程使用</span></div><div class=\"line\">\t\tserverList = servers;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//打印服务器列表</span></div><div class=\"line\">\t\tSystem.out.println(serverList);</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 业务功能</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleBussiness</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"client start working.....\"</span>);</div><div class=\"line\">\t\tThread.sleep(Long.MAX_VALUE);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 获取zk连接</span></div><div class=\"line\">\t\tDistributedClient client = <span class=\"keyword\">new</span> DistributedClient();</div><div class=\"line\">\t\tclient.getConnect();</div><div class=\"line\">\t\t<span class=\"comment\">// 获取servers的子节点信息（并监听），从中获取服务器信息列表</span></div><div class=\"line\">\t\tclient.getServerList();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 业务线程启动</span></div><div class=\"line\">\t\tclient.handleBussiness();</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-2-服务端\"><a href=\"#2-2-服务端\" class=\"headerlink\" title=\"2.2. 服务端\"></a>2.2. 服务端</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.zkdist;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.CreateMode;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.WatchedEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.Watcher;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooDefs.Ids;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.zookeeper.ZooKeeper;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DistributedServer</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String connectString = <span class=\"string\">\"mini1:2181,mini2:2181,mini3:2181\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sessionTimeout = <span class=\"number\">2000</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String parentNode = <span class=\"string\">\"/servers\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> ZooKeeper zk = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 创建到zk的客户端连接</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tzk = <span class=\"keyword\">new</span> ZooKeeper(connectString, sessionTimeout, <span class=\"keyword\">new</span> Watcher() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent event)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</span></div><div class=\"line\">\t\t\t\tSystem.out.println(event.getType() + <span class=\"string\">\"---\"</span> + event.getPath());</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tzk.getChildren(<span class=\"string\">\"/\"</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 向zk集群注册服务器信息</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> hostname</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerServer</span><span class=\"params\">(String hostname)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tString create = zk.create(parentNode + <span class=\"string\">\"/server\"</span>, hostname.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class=\"line\">\t\tSystem.out.println(hostname + <span class=\"string\">\"is online..\"</span> + create);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 业务功能</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleBussiness</span><span class=\"params\">(String hostname)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(hostname + <span class=\"string\">\"start working.....\"</span>);</div><div class=\"line\">\t\tThread.sleep(Long.MAX_VALUE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 获取zk连接</span></div><div class=\"line\">\t\tDistributedServer server = <span class=\"keyword\">new</span> DistributedServer();</div><div class=\"line\">\t\tserver.getConnect();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 利用zk连接注册服务器信息</span></div><div class=\"line\">\t\tserver.registerServer(args[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 启动业务功能</span></div><div class=\"line\">\t\tserver.handleBussiness(args[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"大数据0401-java多线程并发","toc":true,"date":"2017-12-01T14:59:38.000Z","scaffolds":null,"_content":"\n内容包含\n\n1. 掌握多线程\n1. 掌握并发包下的队列\n\n做个笔记，方便查看\n<!-- more -->\n# 1. java多线程增强\n\n## 1.1. 进程介绍\n不管是我们开发的应用程序，还是我们运行的其他的应用程序，都需要先把程序安装在本地的硬盘上。然后找到这个程序的启动文件，启动程序的时候，其实是电脑把当前的这个程序加载到内存中，在<font color=\"red\">内存中需要给当前的程序分配一段独立的运行空间</font>。这片空间就专门负责当前这个程序的运行。  \n\n不同的应用程序运行的过程中都需要在内存中分配自己独立的运行空间，彼此之间不会相互的影响。我们把每个独立应用程序在内存的独立空间称为当前应用程序运行的一个进程。  \n\n进程：它是内存中的一段独立的空间，可以负责当前应用程序的运行。当前这个进程负责调度当前程序中的所有运行细节。\n\n## 1.2. 线程介绍\n在一个进程中，每个独立的功能都需要独立的去运行，这时又需要把当前这个进程划分成多个运行区域，每个独立的小区域（小单元）称为一个线程。\n\n线程：它是位于进程中，负责当前进程中的某个具备独立运行资格的空间。  \n进程是负责整个程序的运行，而线程是程序中具体的某个独立功能的运行。一个进程中至少应该有一个线程。\n\n## 1.3. 多线程介绍\n多线程：<font color=\"red\">在一个进程中，我们同时开启多个线程，让多个线程同时去完成某些任务（功能）。\n(比如后台服务系统，就可以用多个线程同时响应多个客户的请求)</font>  \n多线程的目的：提高程序的运行效率。\n\n## 1.4. 多线程运行的原理\n\ncpu在线程中做时间片的切换。\n\n其实真正电脑中的程序的运行不是同时在运行的。CPU负责程序的运行，而CPU在运行程序的过程中某个时刻点上，它其实只能运行一个程序。而不是多个程序。而CPU它可以在多个程序之间进行高速的切换。而切换频率和速度太快，导致人的肉眼看不到。  \n每个程序就是进程， 而每个进程中会有多个线程，而CPU是在这些线程之间进行切换。  \n了解了CPU对一个任务的执行过程，我们就必须知道，多线程可以提高程序的运行效率，但不能无限制的开线程。  \n\n## 1.5. 实现线程的两种方式\n### 1.5.1. 继承Thread的方式  \n```java\npackage cn.itcast_01_mythread.thread.testThread;\nimport java.util.Random;\npublic class MyThreadWithExtends extends Thread {\n\tString flag;\n\tpublic MyThreadWithExtends(String flag){\n\t\tthis.flag = flag;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tString tname = Thread.currentThread().getName();\n\t\tSystem.out.println(tname+\"线程的run方法被调用……\");\n\t\tRandom random = new Random();\n\t\tfor(int i=0;i<20;i++){\n\t\t\ttry {\n\t\t\t\tThread.sleep(random.nextInt(10)*100);\n\t\t\t\tSystem.out.println(tname+ \"....\"+ flag);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tThread thread1 = new MyThreadWithExtends(\"a\");\n\t\tThread thread2 = new MyThreadWithExtends(\"b\");\n\t\tthread1.start();\n\t\tthread2.start();\n\t\t/**\n\t\t * 如果是调用thread的run方法，则只是一个普通的方法调用，不会开启新的线程\n\t\t */\n//\t\tthread1.run();\n//\t\tthread2.run();\n\t}\n}\n```\n### 1.5.2. 声明实现 Runnable 接口的方式  \n```java\npackage cn.itcast_01_mythread.thread.testThread;\npublic class MyThreadWithImpliment implements Runnable {\n\tint x;\n\tpublic MyThreadWithImpliment(int x) {\n\t\tthis.x = x;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tString name = Thread.currentThread().getName();\n\t\tSystem.out.println(\"线程\" + name + \"的run方法被调用……\");\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tSystem.out.println(x);\n\t\t\ttry {\n\t\t\t\tThread.sleep(100);\n\t\t\t\t\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tThread thread1 = new Thread(new MyThreadWithImpliment(1), \"thread-1\");\n\t\tThread thread2 = new Thread(new MyThreadWithImpliment(2), \"thread-2\");\n\t\t thread1.start();\n\t\t thread2.start();\n\t\t// 注意调用run和调用start的区别,直接调用run，则都运行在main线程中\n//\t\tthread1.run();\n//\t\tthread2.run();\n\t}\n}\n```\n# 2. java同步关键词解释\n## 2.1. synchronized\n### 2.1.1. 加同步格式：\n```\nsynchronized( 需要一个任意的对象（锁） ){\n\t代码块中放操作共享数据的代码。\n}\n```\n```java\npackage cn.itcast_01_mythread.thread.testThread;\npublic class MySynchronized {\n\tpublic static void main(String[] args) {\n\t\tfinal MySynchronized mySynchronized = new MySynchronized();\n\t\tfinal MySynchronized mySynchronized2 = new MySynchronized();\n\t\tnew Thread(\"thread1\") {\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (mySynchronized) {\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(this.getName()+\" start\");\n\t\t\t\t\tint i =1/0;   //如果发生异常，jvm会将锁释放\n\t\t\t\t\tThread.sleep(5000);\n\t\t\t\t\tSystem.out.println(this.getName()+\"醒了\");\n\t\t\t\t\tSystem.out.println(this.getName()+\" end\");\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}.start();\n\t\tnew Thread(\"thread2\") {\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (mySynchronized) {         //争抢同一把锁时，线程1没释放之前，线程2只能等待\n//\t\t\t\t\tsynchronized (mySynchronized2) {    //如果不是一把锁，可以看到两句话同时打印\n\t\t\t\t\tSystem.out.println(this.getName()+\" start\");\n\t\t\t\t\tSystem.out.println(this.getName()+\" end\");\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}.start();\n\t}\n}\n```\n### 2.1.2. synchronized的缺陷\nsynchronized是java中的一个关键字，也就是说是Java语言内置的特性。  \n如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：\n1. 获取锁的线程执行完了该代码块，然后线程释放对锁的占有；\n2. 线程执行发生异常，此时JVM会让线程自动释放锁。\n\n例子1：  \n如果这个获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。\n因此就需要有一种机制<font color=\"red\">可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间或者能够响应中断），通过Lock就可以办到。</font>\n\n例子2：  \n当有多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作会发生冲突现象，但是读操作和读操作不会发生冲突现象。  \n但是采用synchronized关键字来实现同步的话，就会导致一个问题：  \n如果多个线程都只是进行读操作，当一个线程在进行读操作时，其他线程只能等待无法进行读操作。  \n \n因此就需要一种机制来使得多个线程都只是进行读操作时，线程之间不会发生冲突，通过Lock就可以办到。  \n另外，通过Lock可以知道线程有没有成功获取到锁。这个是synchronized无法办到的。  \n总的来说，也就是说Lock提供了比synchronized更多的功能。  \n\n## 2.2. lock\n### 2.2.1. lock和synchronized的区别\n1. Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；\n2. Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。\n### 2.2.2. java.util.concurrent.locks包下常用的类\n#### 2.2.2.1. Lock         \n首先要说明的就是Lock，通过查看Lock的源码可知，Lock是一个接口：\n```java\npublic interface Lock {\n    void lock();\n    void lockInterruptibly() throws InterruptedException;\n    boolean tryLock();\n    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;\n    void unlock();\n}\n```\n获取锁：lock()，lockInterruptibly()， tryLock()，tryLock(long time, TimeUnit unit)  \n释放锁：unlock()\n\n区别： \n- lock()  \n平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。  \n由于在前面讲到如果采用Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用Lock必须在try{}catch{}块中进行，并且将释放锁的操作放在finally块中进行，以保证锁一定被被释放，防止死锁的发生。\n\n- tryLock()  \n有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。\n\n- tryLock(long time, TimeUnit unit)  \n和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。\n\n- lockInterruptibly()  \n比较特殊，当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就使说，当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程。  \n注意，当一个线程获取了锁之后，是不会被interrupt()方法中断的。  \n因此当通过lockInterruptibly()方法获取某个锁时，如果不能获取到，只有进行等待的情况下，是可以响应中断的。  \n而用synchronized修饰的话，当一个线程处于等待某个锁的状态，是无法被中断的，只有一直等待下去。  \n\n#### 2.2.2.2. ReentrantLock\n直接使用lock接口的话，我们需要实现很多方法，不太方便，ReentrantLock是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法，ReentrantLock，意思是“可重入锁”。\n- lock()的正确使用方法\n```java\npackage cn.itcast_01_mythread.thread.lock;\nimport java.util.ArrayList;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\npublic class MyLockTest {\n\tprivate static ArrayList<Integer> arrayList = new ArrayList<Integer>();\n\tstatic Lock lock = new ReentrantLock(); // 注意这个地方\n\tpublic static <E> void main(String[] args) {\n\t\tnew Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tThread thread = Thread.currentThread();\n\t\t\t\tlock.lock();\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(thread.getName() + \"得到了锁\");\n\t\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\t\tarrayList.add(i);\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// TODO: handle exception\n\t\t\t\t} finally {\n\t\t\t\t\tSystem.out.println(thread.getName() + \"释放了锁\");\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\t\t\t};\n\t\t}.start();\n\t\t\n\t\tnew Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tThread thread = Thread.currentThread();\n\t\t\t\tlock.lock();\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(thread.getName() + \"得到了锁\");\n\t\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\t\tarrayList.add(i);\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// TODO: handle exception\n\t\t\t\t} finally {\n\t\t\t\t\tSystem.out.println(thread.getName() + \"释放了锁\");\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\n\t\t\t};\n\t\t}.start();\n\t}\n}\n```\n- tryLock()的使用方法\n```java\npackage cn.itcast_01_mythread.thread.lock;\nimport java.util.ArrayList;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n/**\n * 观察现象：一个线程获得锁后，另一个线程取不到锁，不会一直等待\n * @author\n *\n */\npublic class MyTryLock {\n\tprivate static ArrayList<Integer> arrayList = new ArrayList<Integer>();\n\tstatic Lock lock = new ReentrantLock(); // 注意这个地方\n\tpublic static void main(String[] args) {\n\t\tnew Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tThread thread = Thread.currentThread();\n\t\t\t\tboolean tryLock = lock.tryLock();\n\t\t\t\tSystem.out.println(thread.getName()+\" \"+tryLock);\n\t\t\t\tif (tryLock) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tSystem.out.println(thread.getName() + \"得到了锁\");\n\t\t\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\t\t\tarrayList.add(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t// TODO: handle exception\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tSystem.out.println(thread.getName() + \"释放了锁\");\n\t\t\t\t\t\tlock.unlock();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}.start();\n\n\t\tnew Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tThread thread = Thread.currentThread();\n\t\t\t\tboolean tryLock = lock.tryLock();\n\t\t\t\tSystem.out.println(thread.getName()+\" \"+tryLock);\n\t\t\t\tif (tryLock) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tSystem.out.println(thread.getName() + \"得到了锁\");\n\t\t\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\t\t\tarrayList.add(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t// TODO: handle exception\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tSystem.out.println(thread.getName() + \"释放了锁\");\n\t\t\t\t\t\tlock.unlock();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\t\t}.start();\n\t}\n}\n```\n- lockInterruptibly()响应中断的使用方法：\n```java\npackage cn.itcast_01_mythread.thread.lock;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n/**\n * 观察现象：如果thread-0得到了锁，阻塞。。。thread-1尝试获取锁，如果拿不到，则可以被中断等待\n * @author\n *\n */\npublic class MyInterruptibly {\n\t private Lock lock = new ReentrantLock();  \n\t    public static void main(String[] args)  {\n\t    \tMyInterruptibly test = new MyInterruptibly();\n\t        MyThread thread0 = new MyThread(test);\n\t        MyThread thread1 = new MyThread(test);\n\t        thread0.start();\n\t        thread1.start();\n\t         \n\t        try {\n\t            Thread.sleep(2000);\n\t        } catch (InterruptedException e) {\n\t            e.printStackTrace();\n\t        }\n\t        thread1.interrupt();\n\t        System.out.println(\"=====================\");\n\t    }  \n\t     \n\t    public void insert(Thread thread) throws InterruptedException{\n\t        lock.lockInterruptibly();   //注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出\n\t        try {  \n\t            System.out.println(thread.getName()+\"得到了锁\");\n\t            long startTime = System.currentTimeMillis();\n\t            for(    ;     ;) {\n\t                if(System.currentTimeMillis() - startTime >= Integer.MAX_VALUE)\n\t                    break;\n\t                //插入数据\n\t            }\n\t        }\n\t        finally {\n\t            System.out.println(Thread.currentThread().getName()+\"执行finally\");\n\t            lock.unlock();\n\t            System.out.println(thread.getName()+\"释放了锁\");\n\t        }  \n\t    }\n\t}\n\t \n\tclass MyThread extends Thread {\n\t    private MyInterruptibly test = null;\n\t    public MyThread(MyInterruptibly test) {\n\t        this.test = test;\n\t    }\n\t    @Override\n\t    public void run() {\n\t         \n\t        try {\n\t            test.insert(Thread.currentThread());\n\t        } catch (Exception e) {\n\t            System.out.println(Thread.currentThread().getName()+\"被中断\");\n\t        }\n\t    }\n}\n```\n#### 2.2.2.3. ReadWriteLock\nReadWriteLock也是一个接口，在它里面只定义了两个方法：\n```java\npublic interface ReadWriteLock {\n    /**\n     * Returns the lock used for reading.\n     *\n     * @return the lock used for reading.\n     */\n    Lock readLock();\n \n    /**\n     * Returns the lock used for writing.\n     *\n     * @return the lock used for writing.\n     */\n    Lock writeLock();\n}\n```\n一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。下面的ReentrantReadWriteLock实现了ReadWriteLock接口。\n#### 2.2.2.4. ReentrantReadWriteLock\nReentrantReadWriteLock里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和writeLock()用来获取读锁和写锁。\n\nReentrantReadWriteLock具体用法\n\n假如有多个线程要同时进行读操作的话，先看一下synchronized达到的效果\n```java\npackage cn.itcast_01_mythread.thread.lock;\n/**\n * 一个线程又要读又要写，用synchronize来实现的话，读写操作都只能锁住后一个线程一个线程地进行\n * @author\n *\n */\npublic class MySynchronizedReadWrite {\n    \n    public static void main(String[] args)  {\n        final MySynchronizedReadWrite test = new MySynchronizedReadWrite();\n         \n        new Thread(){\n            public void run() {\n                test.get(Thread.currentThread());\n            };\n        }.start();\n         \n        new Thread(){\n            public void run() {\n                test.get(Thread.currentThread());\n            };\n        }.start();\n         \n    }  \n     \n    public synchronized void get(Thread thread) {\n        long start = System.currentTimeMillis();\n        int i=0;\n        while(System.currentTimeMillis() - start <= 1) {\n        \ti++;\n        \tif(i%4==0){\n            System.out.println(thread.getName()+\"正在进行写操作\");\n        \t}else {\n        \t\tSystem.out.println(thread.getName()+\"正在进行读操作\");\t\n\t\t\t}\n        }\n        System.out.println(thread.getName()+\"读写操作完毕\");\n    }\n}\n```\n改成用读写锁的话：\n```java\npackage cn.itcast_01_mythread.thread.lock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n/**\n * 使用读写锁，可以实现读写分离锁定，读操作并发进行，写操作锁定单个线程\n * \n * 如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。\n * 如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。\n * @author\n *\n */\npublic class MyReentrantReadWriteLock {\n\t private ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\n     \n\t    public static void main(String[] args)  {\n\t        final MyReentrantReadWriteLock test = new MyReentrantReadWriteLock();\n\t         \n\t        new Thread(){\n\t            public void run() {\n\t                test.get(Thread.currentThread());\n\t                test.write(Thread.currentThread());\n\t            };\n\t        }.start();\n\t         \n\t        new Thread(){\n\t            public void run() {\n\t                test.get(Thread.currentThread());\n\t                test.write(Thread.currentThread());\n\t            };\n\t        }.start();\n\t    }  \n\t    \n\t    /**\n\t     * 读操作,用读锁来锁定\n\t     * @param thread\n\t     */\n\t    public void get(Thread thread) {\n\t        rwl.readLock().lock();\n\t        try {\n\t            long start = System.currentTimeMillis();\n\t             \n\t            while(System.currentTimeMillis() - start <= 1) {\n\t                System.out.println(thread.getName()+\"正在进行读操作\");\n\t            }\n\t            System.out.println(thread.getName()+\"读操作完毕\");\n\t        } finally {\n\t            rwl.readLock().unlock();\n\t        }\n\t    }\n\n\t    /**\n\t     * 写操作，用写锁来锁定\n\t     * @param thread\n\t     */\n\t    public void write(Thread thread) {\n\t        rwl.writeLock().lock();;\n\t        try {\n\t            long start = System.currentTimeMillis();\n\t            while(System.currentTimeMillis() - start <= 1) {\n\t                System.out.println(thread.getName()+\"正在进行写操作\");\n\t            }\n\t            System.out.println(thread.getName()+\"写操作完毕\");\n\t        } finally {\n\t            rwl.writeLock().unlock();\n\t        }\n\t    }\n}\n\n```\n> 注意：\n- 不过要注意的是，如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。\n- 如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。\n\n\n## 2.3. Lock和synchronized的选择\n1. Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现；\n2. synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；\n3. Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；\n4. 通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。\n5. Lock可以提高多个线程进行读操作的效率。\n\n在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。\n\n# 3. java并发包\n## 3.1. java并发包介绍\nJDK5.0 以后的版本都引入了高级并发特性，大多数的特性在java.util.concurrent 包中，是专门用于多线程发编程的，充分利用了现代多处理器和多核心系统的功能以编写大规模并发应用程序。主要包含<font color=\"red\">原子量、并发集合、同步器、</font>可重入锁，并对线程池的构造提供了强力的支持。\n\n### 3.1.1. 线程池\n#### 3.1.1.1. 创建方式\n五种创建方式\n##### 3.1.1.1.1. Single Thread Executor \n只有一个线程的线程池，因此所有提交的任务是顺序执行  \n```Executors.newSingleThreadExecutor()```\n\n##### Cached Thread Pool \n线程池里有很多线程需要同时执行，老的可用线程将被新的任务触发重新执行，<font color=\"red\">如果线程超过60秒内没执行，那么将被终止并从池中删除</font>  \n```Executors.newCachedThreadPool()```\n\n##### 3.1.1.1.2. Fixed Thread Pool \n\n<font color=\"red\">拥有固定线程数的线程池，如果没有任务执行，那么线程会一直等待</font>  \n```Executors.newFixedThreadPool(4)```  \n在构造函数中的参数4是线程池的大小，你可以随意设置，也可以和cpu的核数量保持一致，获取cpu的核数量  \n```int cpuNums = Runtime.getRuntime().availableProcessors();```\n\n##### 3.1.1.1.3. Scheduled Thread Pool \n用来调度即将执行的任务的线程池，可能是不是直接执行, 每隔多久执行一次... 策略型的  \n```Executors.newScheduledThreadPool()```\n\n##### Single Thread Scheduled Pool \n只有一个线程，用来调度任务在指定时间执行\n```Executors.newSingleThreadScheduledExecutor()```\n### 3.1.2. 线程池的使用\n提交 Runnable ，任务完成后 Future 对象返回 null   \n调用excute,提交任务, 匿名Runable重写run方法, run方法里是业务逻辑\n```java\npackage cn.itcast_01_mythread.pool;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\npublic class ThreadPoolWithRunable {\n\t/**\n\t * 通过线程池执行线程\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t//创建一个线程池\n\t\tExecutorService pool = Executors.newCachedThreadPool();\n\t\tfor(int i = 1; i < 5; i++){\n\t\t\tpool.execute(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSystem.out.println(\"thread name: \" + Thread.currentThread().getName());\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tpool.shutdown();\n\t}\n}\n```\n\n提交 Callable，该方法返回一个 Future 实例表示任务的状态  \n调用submit提交任务, 匿名Callable,重写call方法, 有返回值, 获取返回值会阻塞,一直要等到线程任务返回结果  \n```java\npackage cn.itcast_01_mythread.pool;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n/**\n * callable 跟runnable的区别：\n * runnable的run方法不会有任何返回结果，所以主线程无法获得任务线程的返回值\n * \n * callable的call方法可以返回结果，但是主线程在获取时是被阻塞，需要等待任务线程返回才能拿到结果\n * @author\n *\n */\npublic class ThreadPoolWithcallable {\n\n\tpublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t\tExecutorService pool = Executors.newFixedThreadPool(4); \n\t\t\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\tFuture<String> submit = pool.submit(new Callable<String>(){\n\t\t\t\t@Override\n\t\t\t\tpublic String call() throws Exception {\n\t\t\t\t\t//System.out.println(\"a\");\n\t\t\t\t\tThread.sleep(5000);\n\t\t\t\t\treturn \"b--\"+Thread.currentThread().getName();\n\t\t\t\t}\t\t\t   \n\t\t\t   });\n\t\t\t//从Future中get结果，这个方法是会被阻塞的，一直要等到线程任务返回结果\n\t\t\tSystem.out.println(submit.get());\n\t\t} \n\t\t\tpool.shutdown();\n\n\t}\n\n}\n```\n\n## 3.2. java并发包消息队列及在开源软件中的应用\n### 3.2.1. BlockingQueue\n也是java.util.concurrent下的主要用来<font color=\"red\">控制线程同步的工具</font>。  \n主要的方法是：put、take一对阻塞存取；add、poll一对非阻塞存取。  \n- 插入:\n\t1. add(anObject):把anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则抛出异常,不好\n\t1. offer(anObject):表示如果可能的话,将anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则返回false.\n\t1. put(anObject):把anObject加到BlockingQueue里,如果BlockQueue没有空间,则调用此方法的线程被阻断直到BlockingQueue里面有空间再继续, 有阻塞, 放不进去就等待\n- 读取：\n\t1. poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间,取不到时返回null; 取不到返回null\n\t1. take():取走BlockingQueue里排在首位的对象,若BlockingQueue为空,阻断进入等待状态直到Blocking有新的对象被加入为止; <font color=\"red\">阻塞, 取不到就一直等</font>\n- 其他\n\t1. int remainingCapacity();返回队列剩余的容量，在队列插入和获取的时候，<font color=\"red\">不要瞎搞，数据可能不准, 不能保证数据的准确性</font>\n\t2. boolean remove(Object o); 从队列移除元素，如果存在，即移除一个或者更多，队列改\t变了返回true\n\t3. public boolean contains(Object o); 查看队列是否存在这个元素，存在返回true\n\t4. int drainTo(Collection<? super E> c); //移除此队列中所有可用的元素,并将它们添加到给定 collection 中。<font color=\"red\">取出放到集合中</font>\n\t5. int drainTo(Collection<? super E> c, int maxElements); 和上面方法的区别在于，指定了移动的数量;取出指定个数放到集合\n\nBlockingQueue有四个具体的实现类,常用的两种实现类为：\n\n### 3.2.2. ArrayBlockingQueue\n一个由数组支持的有界阻塞队列，规定大小的BlockingQueue,其构造函数必须带一个int参数来指明其大小.其所含的对象是以FIFO(先入先出)顺序排序的。\n\n### 3.2.3. LinkedBlockingQueue\n大小不定的BlockingQueue,若其构造函数带一个规定大小的参数,生成的BlockingQueue有大小限制,若不带大小参数,所生成的BlockingQueue的大小由Integer.MAX_VALUE来决定.其所含的对象是以FIFO(先入先出)顺序排序的。 \nLinkedBlockingQueue 可以指定容量，也可以不指定，不指定的话，默认最大是Integer.MAX_VALUE,其中主要用到put和take方法，put方法在队列满的时候会阻塞直到有队列成员被消费，take方法在队列空的时候会阻塞，直到有队列成员被放进来。\n\n### 3.2.4. LinkedBlockingQueue和ArrayBlockingQueue区别\n\nLinkedBlockingQueue和ArrayBlockingQueue比较起来,它们背后所用的数据结构不一样,导致LinkedBlockingQueue的数据吞吐量要大于ArrayBlockingQueue,但在线程数量很大时其性能的可预见性低于ArrayBlockingQueue.\n\n生产者消费者的示例代码：\n```java\npackage cn.itcast_02_blockingqueue.main;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport cn.itcast_02_blockingqueue.consumer.Consumer;\nimport cn.itcast_02_blockingqueue.producer.Producer;\npublic class Test {\n\tpublic static void main(String[] args) throws Exception {\n\t\tBlockingQueue<String> queue = new LinkedBlockingQueue<String>(2);\n\t\t// BlockingQueue<String> queue = new LinkedBlockingQueue<String>();\n\t\t// 不设置的话，LinkedBlockingQueue默认大小为Integer.MAX_VALUE\n\t\t// BlockingQueue<String> queue = new ArrayBlockingQueue<String>(2);\n\t\tConsumer consumer = new Consumer(queue);\n\t\tProducer producer = new Producer(queue);\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tnew Thread(producer, \"Producer\" + (i + 1)).start();\n\t\t}\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tnew Thread(consumer, \"Consumer\" + (i + 1)).start();\n\t\t}\n\t\tnew Thread(producer, \"Producer\" + (5)).start();\n\t}\n}\n\n=====================================================================\npackage cn.itcast_02_blockingqueue.main;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\npublic class TestBlockingQueue {\n\tpublic static void main(String[] args) {\n\t\tBlockingQueue<String> queue = new LinkedBlockingQueue<String>(2);\n\t\t// BlockingQueue<String> queue = new LinkedBlockingQueue<String>();\n\t\t// 不设置的话，LinkedBlockingQueue默认大小为Integer.MAX_VALUE\n\t\t// BlockingQueue<String> queue = new ArrayBlockingQueue<String>(2);\n\t\tTestBlockingQueueConsumer consumer = new TestBlockingQueueConsumer(queue);\n\t\tTestBlockingQueueProducer producer = new TestBlockingQueueProducer(queue);\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tnew Thread(producer, \"Producer\" + (i + 1)).start();\n\t\t}\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tnew Thread(consumer, \"Consumer\" + (i + 1)).start();\n\t\t}\n\t\tnew Thread(producer, \"Producer\" + (5)).start();\n\t}\n}\n=====================================================================\npackage cn.itcast_02_blockingqueue.main;\nimport java.util.Random;\nimport java.util.concurrent.BlockingQueue;\npublic class TestBlockingQueueConsumer implements Runnable{  \n    BlockingQueue<String> queue; \n    Random random = new Random();\n    public TestBlockingQueueConsumer(BlockingQueue<String> queue){  \n        this.queue = queue;  \n    }        \n    @Override  \n    public void run() {  \n        try {  \n        \tThread.sleep(random.nextInt(10));\n        \tSystem.out.println(Thread.currentThread().getName()+ \"trying...\");\n            String temp = queue.take();//如果队列为空，会阻塞当前线程  \n            System.out.println(Thread.currentThread().getName() + \" get a job \" +temp);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n    }  \n}\n=====================================================================\npackage cn.itcast_02_blockingqueue.main;\nimport java.util.Random;\nimport java.util.concurrent.BlockingQueue;\npublic class TestBlockingQueueProducer implements Runnable {\n\tBlockingQueue<String> queue;\n\tRandom random = new Random();\n\tpublic TestBlockingQueueProducer(BlockingQueue<String> queue) {\n\t\tthis.queue = queue;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\ttry {\n\t\t\t\tThread.sleep(random.nextInt(10));\n\t\t\t\tString task = Thread.currentThread().getName() + \" made a product \" + i;\n\t\t\t\tSystem.out.println(task);\n\t\t\t\tqueue.put(task);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n=====================================================================\npackage cn.itcast_02_blockingqueue.producer;\nimport java.util.concurrent.BlockingQueue;\npublic class Producer implements Runnable {  \n    BlockingQueue<String> queue;    \n    public Producer(BlockingQueue<String> queue) {  \n        this.queue = queue;  \n    }    \n    @Override  \n    public void run() {  \n        try {  \n            \n            System.out.println(\"I have made a product:\"  \n                    + Thread.currentThread().getName()); \n            String temp = \"A Product, 生产线程：\"  \n                    + Thread.currentThread().getName();  \n            queue.put(temp);//如果队列是满的话，会阻塞当前线程  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n    }    \n}  \n=====================================================================\npackage cn.itcast_02_blockingqueue.consumer;\nimport java.util.concurrent.BlockingQueue;\npublic class Consumer implements Runnable{  \n    BlockingQueue<String> queue; \n    public Consumer(BlockingQueue<String> queue){  \n        this.queue = queue;  \n    }        \n    @Override  \n    public void run() {  \n        try {  \n        \tString consumer = Thread.currentThread().getName();\n        \tSystem.out.println(consumer);  \n            String temp = queue.take();//如果队列为空，会阻塞当前线程  \n            System.out.println(consumer+\"get a product:\"+temp);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n    }  \n}  \n\n\n```\n# 4. java并发编程的一些总结\n## 4.1. 不应用线程池的缺点\n有些开发者图省事，遇到需要多线程处理的地方，直接new Thread(...).start()，对于一般场景是没问题的，但如果是在并发请求很高的情况下，就会有些隐患：\n- 新建线程的开销。线程虽然比进程要轻量许多，但对于JVM来说，新建一个线程的代价还是挺大的，决不同于新建一个对象\n- 资源消耗量。没有一个池来限制线程的数量，会导致线程的数量直接取决于应用的并发量，这样有潜在的线程数据巨大的可能，那么资源消耗量将是巨大的\n- 稳定性。当线程数量超过系统资源所能承受的程度，稳定性就会成问题\n## 4.2. 制定执行策略\n在每个需要多线程处理的地方，不管并发量有多大，需要考虑线程的执行策略\n- 任务以什么顺序执行\n- 可以有多少个任务并发执行\n- 可以有多少个任务进入等待执行队列\n- 系统过载的时候，应该放弃哪些任务？如何通知到应用程序？\n- 一个任务的执行前后应该做什么处理\n\n## 4.3. 线程池的类型\n不管是通过Executors创建线程池，还是通过Spring来管理，都得清楚知道有哪几种线程池：\n- FixedThreadPool：定长线程池，提交任务时创建线程，直到池的最大容量，如果有线程非预期结束，会补充新线程\n- CachedThreadPool：可变线程池，它犹如一个弹簧，如果没有任务需求时，它回收空闲线程，如果需求增加，则按需增加线程，不对池的大小做限制\n- SingleThreadExecutor：单线程。处理不过来的任务会进入FIFO队列等待执行\n- SecheduledThreadPool：周期性线程池。支持执行周期性线程任务\n其实，这些不同类型的线程池都是通过构建一个ThreadPoolExecutor来完成的，所不同的是corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,threadFactory这么几个参数。具体可以参见JDK DOC。\n\n## 4.4. 线程池饱和策略\n由以上线程池类型可知，除了CachedThreadPool其他线程池都有饱和的可能，当饱和以后就需要相应的策略处理请求线程的任务，比如，达到上限时通过ThreadPoolExecutor.setRejectedExecutionHandler方法设置一个拒绝任务的策略，JDK提供了AbortPolicy、CallerRunsPolicy、DiscardPolicy、DiscardOldestPolicy几种策略，具体差异可见JDK DOC\n\n## 4.5. 线程无依赖性\n<font color=\"red\">多线程任务设计上尽量使得各任务是独立无依赖的</font>，所谓依赖性可两个方面：\n- 线程之间的依赖性。如果线程有依赖可能会造成死锁或饥饿\n- 调用者与线程的依赖性。调用者得监视线程的完成情况，影响可并发量\n当然，在有些业务里确实需要一定的依赖性，比如调用者需要得到线程完成后结果，传统的Thread是不便完成的，因为run方法无返回值，只能通过一些共享的变量来传递结果，但在Executor框架里可以通过Future和Callable实现需要有返回值的任务，当然线程的异步性导致需要有相应机制来保证调用者能等待任务完成，关于Future和Callable的用法前文已讲解；\n","source":"_posts/大数据/大数据0401-java多线程并发.md","raw":"---\ntitle: 大数据0401-java多线程并发\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - java\ntoc: true\ndate: 2017-12-01 22:59:38\nscaffolds:\n---\n\n内容包含\n\n1. 掌握多线程\n1. 掌握并发包下的队列\n\n做个笔记，方便查看\n<!-- more -->\n# 1. java多线程增强\n\n## 1.1. 进程介绍\n不管是我们开发的应用程序，还是我们运行的其他的应用程序，都需要先把程序安装在本地的硬盘上。然后找到这个程序的启动文件，启动程序的时候，其实是电脑把当前的这个程序加载到内存中，在<font color=\"red\">内存中需要给当前的程序分配一段独立的运行空间</font>。这片空间就专门负责当前这个程序的运行。  \n\n不同的应用程序运行的过程中都需要在内存中分配自己独立的运行空间，彼此之间不会相互的影响。我们把每个独立应用程序在内存的独立空间称为当前应用程序运行的一个进程。  \n\n进程：它是内存中的一段独立的空间，可以负责当前应用程序的运行。当前这个进程负责调度当前程序中的所有运行细节。\n\n## 1.2. 线程介绍\n在一个进程中，每个独立的功能都需要独立的去运行，这时又需要把当前这个进程划分成多个运行区域，每个独立的小区域（小单元）称为一个线程。\n\n线程：它是位于进程中，负责当前进程中的某个具备独立运行资格的空间。  \n进程是负责整个程序的运行，而线程是程序中具体的某个独立功能的运行。一个进程中至少应该有一个线程。\n\n## 1.3. 多线程介绍\n多线程：<font color=\"red\">在一个进程中，我们同时开启多个线程，让多个线程同时去完成某些任务（功能）。\n(比如后台服务系统，就可以用多个线程同时响应多个客户的请求)</font>  \n多线程的目的：提高程序的运行效率。\n\n## 1.4. 多线程运行的原理\n\ncpu在线程中做时间片的切换。\n\n其实真正电脑中的程序的运行不是同时在运行的。CPU负责程序的运行，而CPU在运行程序的过程中某个时刻点上，它其实只能运行一个程序。而不是多个程序。而CPU它可以在多个程序之间进行高速的切换。而切换频率和速度太快，导致人的肉眼看不到。  \n每个程序就是进程， 而每个进程中会有多个线程，而CPU是在这些线程之间进行切换。  \n了解了CPU对一个任务的执行过程，我们就必须知道，多线程可以提高程序的运行效率，但不能无限制的开线程。  \n\n## 1.5. 实现线程的两种方式\n### 1.5.1. 继承Thread的方式  \n```java\npackage cn.itcast_01_mythread.thread.testThread;\nimport java.util.Random;\npublic class MyThreadWithExtends extends Thread {\n\tString flag;\n\tpublic MyThreadWithExtends(String flag){\n\t\tthis.flag = flag;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tString tname = Thread.currentThread().getName();\n\t\tSystem.out.println(tname+\"线程的run方法被调用……\");\n\t\tRandom random = new Random();\n\t\tfor(int i=0;i<20;i++){\n\t\t\ttry {\n\t\t\t\tThread.sleep(random.nextInt(10)*100);\n\t\t\t\tSystem.out.println(tname+ \"....\"+ flag);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tThread thread1 = new MyThreadWithExtends(\"a\");\n\t\tThread thread2 = new MyThreadWithExtends(\"b\");\n\t\tthread1.start();\n\t\tthread2.start();\n\t\t/**\n\t\t * 如果是调用thread的run方法，则只是一个普通的方法调用，不会开启新的线程\n\t\t */\n//\t\tthread1.run();\n//\t\tthread2.run();\n\t}\n}\n```\n### 1.5.2. 声明实现 Runnable 接口的方式  \n```java\npackage cn.itcast_01_mythread.thread.testThread;\npublic class MyThreadWithImpliment implements Runnable {\n\tint x;\n\tpublic MyThreadWithImpliment(int x) {\n\t\tthis.x = x;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tString name = Thread.currentThread().getName();\n\t\tSystem.out.println(\"线程\" + name + \"的run方法被调用……\");\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tSystem.out.println(x);\n\t\t\ttry {\n\t\t\t\tThread.sleep(100);\n\t\t\t\t\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tThread thread1 = new Thread(new MyThreadWithImpliment(1), \"thread-1\");\n\t\tThread thread2 = new Thread(new MyThreadWithImpliment(2), \"thread-2\");\n\t\t thread1.start();\n\t\t thread2.start();\n\t\t// 注意调用run和调用start的区别,直接调用run，则都运行在main线程中\n//\t\tthread1.run();\n//\t\tthread2.run();\n\t}\n}\n```\n# 2. java同步关键词解释\n## 2.1. synchronized\n### 2.1.1. 加同步格式：\n```\nsynchronized( 需要一个任意的对象（锁） ){\n\t代码块中放操作共享数据的代码。\n}\n```\n```java\npackage cn.itcast_01_mythread.thread.testThread;\npublic class MySynchronized {\n\tpublic static void main(String[] args) {\n\t\tfinal MySynchronized mySynchronized = new MySynchronized();\n\t\tfinal MySynchronized mySynchronized2 = new MySynchronized();\n\t\tnew Thread(\"thread1\") {\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (mySynchronized) {\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(this.getName()+\" start\");\n\t\t\t\t\tint i =1/0;   //如果发生异常，jvm会将锁释放\n\t\t\t\t\tThread.sleep(5000);\n\t\t\t\t\tSystem.out.println(this.getName()+\"醒了\");\n\t\t\t\t\tSystem.out.println(this.getName()+\" end\");\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}.start();\n\t\tnew Thread(\"thread2\") {\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (mySynchronized) {         //争抢同一把锁时，线程1没释放之前，线程2只能等待\n//\t\t\t\t\tsynchronized (mySynchronized2) {    //如果不是一把锁，可以看到两句话同时打印\n\t\t\t\t\tSystem.out.println(this.getName()+\" start\");\n\t\t\t\t\tSystem.out.println(this.getName()+\" end\");\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}.start();\n\t}\n}\n```\n### 2.1.2. synchronized的缺陷\nsynchronized是java中的一个关键字，也就是说是Java语言内置的特性。  \n如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：\n1. 获取锁的线程执行完了该代码块，然后线程释放对锁的占有；\n2. 线程执行发生异常，此时JVM会让线程自动释放锁。\n\n例子1：  \n如果这个获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。\n因此就需要有一种机制<font color=\"red\">可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间或者能够响应中断），通过Lock就可以办到。</font>\n\n例子2：  \n当有多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作会发生冲突现象，但是读操作和读操作不会发生冲突现象。  \n但是采用synchronized关键字来实现同步的话，就会导致一个问题：  \n如果多个线程都只是进行读操作，当一个线程在进行读操作时，其他线程只能等待无法进行读操作。  \n \n因此就需要一种机制来使得多个线程都只是进行读操作时，线程之间不会发生冲突，通过Lock就可以办到。  \n另外，通过Lock可以知道线程有没有成功获取到锁。这个是synchronized无法办到的。  \n总的来说，也就是说Lock提供了比synchronized更多的功能。  \n\n## 2.2. lock\n### 2.2.1. lock和synchronized的区别\n1. Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；\n2. Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。\n### 2.2.2. java.util.concurrent.locks包下常用的类\n#### 2.2.2.1. Lock         \n首先要说明的就是Lock，通过查看Lock的源码可知，Lock是一个接口：\n```java\npublic interface Lock {\n    void lock();\n    void lockInterruptibly() throws InterruptedException;\n    boolean tryLock();\n    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;\n    void unlock();\n}\n```\n获取锁：lock()，lockInterruptibly()， tryLock()，tryLock(long time, TimeUnit unit)  \n释放锁：unlock()\n\n区别： \n- lock()  \n平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。  \n由于在前面讲到如果采用Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用Lock必须在try{}catch{}块中进行，并且将释放锁的操作放在finally块中进行，以保证锁一定被被释放，防止死锁的发生。\n\n- tryLock()  \n有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。\n\n- tryLock(long time, TimeUnit unit)  \n和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。\n\n- lockInterruptibly()  \n比较特殊，当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就使说，当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程。  \n注意，当一个线程获取了锁之后，是不会被interrupt()方法中断的。  \n因此当通过lockInterruptibly()方法获取某个锁时，如果不能获取到，只有进行等待的情况下，是可以响应中断的。  \n而用synchronized修饰的话，当一个线程处于等待某个锁的状态，是无法被中断的，只有一直等待下去。  \n\n#### 2.2.2.2. ReentrantLock\n直接使用lock接口的话，我们需要实现很多方法，不太方便，ReentrantLock是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法，ReentrantLock，意思是“可重入锁”。\n- lock()的正确使用方法\n```java\npackage cn.itcast_01_mythread.thread.lock;\nimport java.util.ArrayList;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\npublic class MyLockTest {\n\tprivate static ArrayList<Integer> arrayList = new ArrayList<Integer>();\n\tstatic Lock lock = new ReentrantLock(); // 注意这个地方\n\tpublic static <E> void main(String[] args) {\n\t\tnew Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tThread thread = Thread.currentThread();\n\t\t\t\tlock.lock();\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(thread.getName() + \"得到了锁\");\n\t\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\t\tarrayList.add(i);\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// TODO: handle exception\n\t\t\t\t} finally {\n\t\t\t\t\tSystem.out.println(thread.getName() + \"释放了锁\");\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\t\t\t};\n\t\t}.start();\n\t\t\n\t\tnew Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tThread thread = Thread.currentThread();\n\t\t\t\tlock.lock();\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(thread.getName() + \"得到了锁\");\n\t\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\t\tarrayList.add(i);\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// TODO: handle exception\n\t\t\t\t} finally {\n\t\t\t\t\tSystem.out.println(thread.getName() + \"释放了锁\");\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\n\t\t\t};\n\t\t}.start();\n\t}\n}\n```\n- tryLock()的使用方法\n```java\npackage cn.itcast_01_mythread.thread.lock;\nimport java.util.ArrayList;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n/**\n * 观察现象：一个线程获得锁后，另一个线程取不到锁，不会一直等待\n * @author\n *\n */\npublic class MyTryLock {\n\tprivate static ArrayList<Integer> arrayList = new ArrayList<Integer>();\n\tstatic Lock lock = new ReentrantLock(); // 注意这个地方\n\tpublic static void main(String[] args) {\n\t\tnew Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tThread thread = Thread.currentThread();\n\t\t\t\tboolean tryLock = lock.tryLock();\n\t\t\t\tSystem.out.println(thread.getName()+\" \"+tryLock);\n\t\t\t\tif (tryLock) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tSystem.out.println(thread.getName() + \"得到了锁\");\n\t\t\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\t\t\tarrayList.add(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t// TODO: handle exception\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tSystem.out.println(thread.getName() + \"释放了锁\");\n\t\t\t\t\t\tlock.unlock();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}.start();\n\n\t\tnew Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tThread thread = Thread.currentThread();\n\t\t\t\tboolean tryLock = lock.tryLock();\n\t\t\t\tSystem.out.println(thread.getName()+\" \"+tryLock);\n\t\t\t\tif (tryLock) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tSystem.out.println(thread.getName() + \"得到了锁\");\n\t\t\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\t\t\tarrayList.add(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t// TODO: handle exception\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tSystem.out.println(thread.getName() + \"释放了锁\");\n\t\t\t\t\t\tlock.unlock();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\t\t}.start();\n\t}\n}\n```\n- lockInterruptibly()响应中断的使用方法：\n```java\npackage cn.itcast_01_mythread.thread.lock;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n/**\n * 观察现象：如果thread-0得到了锁，阻塞。。。thread-1尝试获取锁，如果拿不到，则可以被中断等待\n * @author\n *\n */\npublic class MyInterruptibly {\n\t private Lock lock = new ReentrantLock();  \n\t    public static void main(String[] args)  {\n\t    \tMyInterruptibly test = new MyInterruptibly();\n\t        MyThread thread0 = new MyThread(test);\n\t        MyThread thread1 = new MyThread(test);\n\t        thread0.start();\n\t        thread1.start();\n\t         \n\t        try {\n\t            Thread.sleep(2000);\n\t        } catch (InterruptedException e) {\n\t            e.printStackTrace();\n\t        }\n\t        thread1.interrupt();\n\t        System.out.println(\"=====================\");\n\t    }  \n\t     \n\t    public void insert(Thread thread) throws InterruptedException{\n\t        lock.lockInterruptibly();   //注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出\n\t        try {  \n\t            System.out.println(thread.getName()+\"得到了锁\");\n\t            long startTime = System.currentTimeMillis();\n\t            for(    ;     ;) {\n\t                if(System.currentTimeMillis() - startTime >= Integer.MAX_VALUE)\n\t                    break;\n\t                //插入数据\n\t            }\n\t        }\n\t        finally {\n\t            System.out.println(Thread.currentThread().getName()+\"执行finally\");\n\t            lock.unlock();\n\t            System.out.println(thread.getName()+\"释放了锁\");\n\t        }  \n\t    }\n\t}\n\t \n\tclass MyThread extends Thread {\n\t    private MyInterruptibly test = null;\n\t    public MyThread(MyInterruptibly test) {\n\t        this.test = test;\n\t    }\n\t    @Override\n\t    public void run() {\n\t         \n\t        try {\n\t            test.insert(Thread.currentThread());\n\t        } catch (Exception e) {\n\t            System.out.println(Thread.currentThread().getName()+\"被中断\");\n\t        }\n\t    }\n}\n```\n#### 2.2.2.3. ReadWriteLock\nReadWriteLock也是一个接口，在它里面只定义了两个方法：\n```java\npublic interface ReadWriteLock {\n    /**\n     * Returns the lock used for reading.\n     *\n     * @return the lock used for reading.\n     */\n    Lock readLock();\n \n    /**\n     * Returns the lock used for writing.\n     *\n     * @return the lock used for writing.\n     */\n    Lock writeLock();\n}\n```\n一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。下面的ReentrantReadWriteLock实现了ReadWriteLock接口。\n#### 2.2.2.4. ReentrantReadWriteLock\nReentrantReadWriteLock里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和writeLock()用来获取读锁和写锁。\n\nReentrantReadWriteLock具体用法\n\n假如有多个线程要同时进行读操作的话，先看一下synchronized达到的效果\n```java\npackage cn.itcast_01_mythread.thread.lock;\n/**\n * 一个线程又要读又要写，用synchronize来实现的话，读写操作都只能锁住后一个线程一个线程地进行\n * @author\n *\n */\npublic class MySynchronizedReadWrite {\n    \n    public static void main(String[] args)  {\n        final MySynchronizedReadWrite test = new MySynchronizedReadWrite();\n         \n        new Thread(){\n            public void run() {\n                test.get(Thread.currentThread());\n            };\n        }.start();\n         \n        new Thread(){\n            public void run() {\n                test.get(Thread.currentThread());\n            };\n        }.start();\n         \n    }  \n     \n    public synchronized void get(Thread thread) {\n        long start = System.currentTimeMillis();\n        int i=0;\n        while(System.currentTimeMillis() - start <= 1) {\n        \ti++;\n        \tif(i%4==0){\n            System.out.println(thread.getName()+\"正在进行写操作\");\n        \t}else {\n        \t\tSystem.out.println(thread.getName()+\"正在进行读操作\");\t\n\t\t\t}\n        }\n        System.out.println(thread.getName()+\"读写操作完毕\");\n    }\n}\n```\n改成用读写锁的话：\n```java\npackage cn.itcast_01_mythread.thread.lock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n/**\n * 使用读写锁，可以实现读写分离锁定，读操作并发进行，写操作锁定单个线程\n * \n * 如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。\n * 如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。\n * @author\n *\n */\npublic class MyReentrantReadWriteLock {\n\t private ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\n     \n\t    public static void main(String[] args)  {\n\t        final MyReentrantReadWriteLock test = new MyReentrantReadWriteLock();\n\t         \n\t        new Thread(){\n\t            public void run() {\n\t                test.get(Thread.currentThread());\n\t                test.write(Thread.currentThread());\n\t            };\n\t        }.start();\n\t         \n\t        new Thread(){\n\t            public void run() {\n\t                test.get(Thread.currentThread());\n\t                test.write(Thread.currentThread());\n\t            };\n\t        }.start();\n\t    }  \n\t    \n\t    /**\n\t     * 读操作,用读锁来锁定\n\t     * @param thread\n\t     */\n\t    public void get(Thread thread) {\n\t        rwl.readLock().lock();\n\t        try {\n\t            long start = System.currentTimeMillis();\n\t             \n\t            while(System.currentTimeMillis() - start <= 1) {\n\t                System.out.println(thread.getName()+\"正在进行读操作\");\n\t            }\n\t            System.out.println(thread.getName()+\"读操作完毕\");\n\t        } finally {\n\t            rwl.readLock().unlock();\n\t        }\n\t    }\n\n\t    /**\n\t     * 写操作，用写锁来锁定\n\t     * @param thread\n\t     */\n\t    public void write(Thread thread) {\n\t        rwl.writeLock().lock();;\n\t        try {\n\t            long start = System.currentTimeMillis();\n\t            while(System.currentTimeMillis() - start <= 1) {\n\t                System.out.println(thread.getName()+\"正在进行写操作\");\n\t            }\n\t            System.out.println(thread.getName()+\"写操作完毕\");\n\t        } finally {\n\t            rwl.writeLock().unlock();\n\t        }\n\t    }\n}\n\n```\n> 注意：\n- 不过要注意的是，如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。\n- 如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。\n\n\n## 2.3. Lock和synchronized的选择\n1. Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现；\n2. synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；\n3. Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；\n4. 通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。\n5. Lock可以提高多个线程进行读操作的效率。\n\n在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。\n\n# 3. java并发包\n## 3.1. java并发包介绍\nJDK5.0 以后的版本都引入了高级并发特性，大多数的特性在java.util.concurrent 包中，是专门用于多线程发编程的，充分利用了现代多处理器和多核心系统的功能以编写大规模并发应用程序。主要包含<font color=\"red\">原子量、并发集合、同步器、</font>可重入锁，并对线程池的构造提供了强力的支持。\n\n### 3.1.1. 线程池\n#### 3.1.1.1. 创建方式\n五种创建方式\n##### 3.1.1.1.1. Single Thread Executor \n只有一个线程的线程池，因此所有提交的任务是顺序执行  \n```Executors.newSingleThreadExecutor()```\n\n##### Cached Thread Pool \n线程池里有很多线程需要同时执行，老的可用线程将被新的任务触发重新执行，<font color=\"red\">如果线程超过60秒内没执行，那么将被终止并从池中删除</font>  \n```Executors.newCachedThreadPool()```\n\n##### 3.1.1.1.2. Fixed Thread Pool \n\n<font color=\"red\">拥有固定线程数的线程池，如果没有任务执行，那么线程会一直等待</font>  \n```Executors.newFixedThreadPool(4)```  \n在构造函数中的参数4是线程池的大小，你可以随意设置，也可以和cpu的核数量保持一致，获取cpu的核数量  \n```int cpuNums = Runtime.getRuntime().availableProcessors();```\n\n##### 3.1.1.1.3. Scheduled Thread Pool \n用来调度即将执行的任务的线程池，可能是不是直接执行, 每隔多久执行一次... 策略型的  \n```Executors.newScheduledThreadPool()```\n\n##### Single Thread Scheduled Pool \n只有一个线程，用来调度任务在指定时间执行\n```Executors.newSingleThreadScheduledExecutor()```\n### 3.1.2. 线程池的使用\n提交 Runnable ，任务完成后 Future 对象返回 null   \n调用excute,提交任务, 匿名Runable重写run方法, run方法里是业务逻辑\n```java\npackage cn.itcast_01_mythread.pool;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\npublic class ThreadPoolWithRunable {\n\t/**\n\t * 通过线程池执行线程\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t//创建一个线程池\n\t\tExecutorService pool = Executors.newCachedThreadPool();\n\t\tfor(int i = 1; i < 5; i++){\n\t\t\tpool.execute(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSystem.out.println(\"thread name: \" + Thread.currentThread().getName());\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tpool.shutdown();\n\t}\n}\n```\n\n提交 Callable，该方法返回一个 Future 实例表示任务的状态  \n调用submit提交任务, 匿名Callable,重写call方法, 有返回值, 获取返回值会阻塞,一直要等到线程任务返回结果  \n```java\npackage cn.itcast_01_mythread.pool;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n/**\n * callable 跟runnable的区别：\n * runnable的run方法不会有任何返回结果，所以主线程无法获得任务线程的返回值\n * \n * callable的call方法可以返回结果，但是主线程在获取时是被阻塞，需要等待任务线程返回才能拿到结果\n * @author\n *\n */\npublic class ThreadPoolWithcallable {\n\n\tpublic static void main(String[] args) throws InterruptedException, ExecutionException {\n\t\tExecutorService pool = Executors.newFixedThreadPool(4); \n\t\t\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\tFuture<String> submit = pool.submit(new Callable<String>(){\n\t\t\t\t@Override\n\t\t\t\tpublic String call() throws Exception {\n\t\t\t\t\t//System.out.println(\"a\");\n\t\t\t\t\tThread.sleep(5000);\n\t\t\t\t\treturn \"b--\"+Thread.currentThread().getName();\n\t\t\t\t}\t\t\t   \n\t\t\t   });\n\t\t\t//从Future中get结果，这个方法是会被阻塞的，一直要等到线程任务返回结果\n\t\t\tSystem.out.println(submit.get());\n\t\t} \n\t\t\tpool.shutdown();\n\n\t}\n\n}\n```\n\n## 3.2. java并发包消息队列及在开源软件中的应用\n### 3.2.1. BlockingQueue\n也是java.util.concurrent下的主要用来<font color=\"red\">控制线程同步的工具</font>。  \n主要的方法是：put、take一对阻塞存取；add、poll一对非阻塞存取。  \n- 插入:\n\t1. add(anObject):把anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则抛出异常,不好\n\t1. offer(anObject):表示如果可能的话,将anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则返回false.\n\t1. put(anObject):把anObject加到BlockingQueue里,如果BlockQueue没有空间,则调用此方法的线程被阻断直到BlockingQueue里面有空间再继续, 有阻塞, 放不进去就等待\n- 读取：\n\t1. poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间,取不到时返回null; 取不到返回null\n\t1. take():取走BlockingQueue里排在首位的对象,若BlockingQueue为空,阻断进入等待状态直到Blocking有新的对象被加入为止; <font color=\"red\">阻塞, 取不到就一直等</font>\n- 其他\n\t1. int remainingCapacity();返回队列剩余的容量，在队列插入和获取的时候，<font color=\"red\">不要瞎搞，数据可能不准, 不能保证数据的准确性</font>\n\t2. boolean remove(Object o); 从队列移除元素，如果存在，即移除一个或者更多，队列改\t变了返回true\n\t3. public boolean contains(Object o); 查看队列是否存在这个元素，存在返回true\n\t4. int drainTo(Collection<? super E> c); //移除此队列中所有可用的元素,并将它们添加到给定 collection 中。<font color=\"red\">取出放到集合中</font>\n\t5. int drainTo(Collection<? super E> c, int maxElements); 和上面方法的区别在于，指定了移动的数量;取出指定个数放到集合\n\nBlockingQueue有四个具体的实现类,常用的两种实现类为：\n\n### 3.2.2. ArrayBlockingQueue\n一个由数组支持的有界阻塞队列，规定大小的BlockingQueue,其构造函数必须带一个int参数来指明其大小.其所含的对象是以FIFO(先入先出)顺序排序的。\n\n### 3.2.3. LinkedBlockingQueue\n大小不定的BlockingQueue,若其构造函数带一个规定大小的参数,生成的BlockingQueue有大小限制,若不带大小参数,所生成的BlockingQueue的大小由Integer.MAX_VALUE来决定.其所含的对象是以FIFO(先入先出)顺序排序的。 \nLinkedBlockingQueue 可以指定容量，也可以不指定，不指定的话，默认最大是Integer.MAX_VALUE,其中主要用到put和take方法，put方法在队列满的时候会阻塞直到有队列成员被消费，take方法在队列空的时候会阻塞，直到有队列成员被放进来。\n\n### 3.2.4. LinkedBlockingQueue和ArrayBlockingQueue区别\n\nLinkedBlockingQueue和ArrayBlockingQueue比较起来,它们背后所用的数据结构不一样,导致LinkedBlockingQueue的数据吞吐量要大于ArrayBlockingQueue,但在线程数量很大时其性能的可预见性低于ArrayBlockingQueue.\n\n生产者消费者的示例代码：\n```java\npackage cn.itcast_02_blockingqueue.main;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport cn.itcast_02_blockingqueue.consumer.Consumer;\nimport cn.itcast_02_blockingqueue.producer.Producer;\npublic class Test {\n\tpublic static void main(String[] args) throws Exception {\n\t\tBlockingQueue<String> queue = new LinkedBlockingQueue<String>(2);\n\t\t// BlockingQueue<String> queue = new LinkedBlockingQueue<String>();\n\t\t// 不设置的话，LinkedBlockingQueue默认大小为Integer.MAX_VALUE\n\t\t// BlockingQueue<String> queue = new ArrayBlockingQueue<String>(2);\n\t\tConsumer consumer = new Consumer(queue);\n\t\tProducer producer = new Producer(queue);\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tnew Thread(producer, \"Producer\" + (i + 1)).start();\n\t\t}\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tnew Thread(consumer, \"Consumer\" + (i + 1)).start();\n\t\t}\n\t\tnew Thread(producer, \"Producer\" + (5)).start();\n\t}\n}\n\n=====================================================================\npackage cn.itcast_02_blockingqueue.main;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\npublic class TestBlockingQueue {\n\tpublic static void main(String[] args) {\n\t\tBlockingQueue<String> queue = new LinkedBlockingQueue<String>(2);\n\t\t// BlockingQueue<String> queue = new LinkedBlockingQueue<String>();\n\t\t// 不设置的话，LinkedBlockingQueue默认大小为Integer.MAX_VALUE\n\t\t// BlockingQueue<String> queue = new ArrayBlockingQueue<String>(2);\n\t\tTestBlockingQueueConsumer consumer = new TestBlockingQueueConsumer(queue);\n\t\tTestBlockingQueueProducer producer = new TestBlockingQueueProducer(queue);\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tnew Thread(producer, \"Producer\" + (i + 1)).start();\n\t\t}\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tnew Thread(consumer, \"Consumer\" + (i + 1)).start();\n\t\t}\n\t\tnew Thread(producer, \"Producer\" + (5)).start();\n\t}\n}\n=====================================================================\npackage cn.itcast_02_blockingqueue.main;\nimport java.util.Random;\nimport java.util.concurrent.BlockingQueue;\npublic class TestBlockingQueueConsumer implements Runnable{  \n    BlockingQueue<String> queue; \n    Random random = new Random();\n    public TestBlockingQueueConsumer(BlockingQueue<String> queue){  \n        this.queue = queue;  \n    }        \n    @Override  \n    public void run() {  \n        try {  \n        \tThread.sleep(random.nextInt(10));\n        \tSystem.out.println(Thread.currentThread().getName()+ \"trying...\");\n            String temp = queue.take();//如果队列为空，会阻塞当前线程  \n            System.out.println(Thread.currentThread().getName() + \" get a job \" +temp);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n    }  \n}\n=====================================================================\npackage cn.itcast_02_blockingqueue.main;\nimport java.util.Random;\nimport java.util.concurrent.BlockingQueue;\npublic class TestBlockingQueueProducer implements Runnable {\n\tBlockingQueue<String> queue;\n\tRandom random = new Random();\n\tpublic TestBlockingQueueProducer(BlockingQueue<String> queue) {\n\t\tthis.queue = queue;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\ttry {\n\t\t\t\tThread.sleep(random.nextInt(10));\n\t\t\t\tString task = Thread.currentThread().getName() + \" made a product \" + i;\n\t\t\t\tSystem.out.println(task);\n\t\t\t\tqueue.put(task);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n=====================================================================\npackage cn.itcast_02_blockingqueue.producer;\nimport java.util.concurrent.BlockingQueue;\npublic class Producer implements Runnable {  \n    BlockingQueue<String> queue;    \n    public Producer(BlockingQueue<String> queue) {  \n        this.queue = queue;  \n    }    \n    @Override  \n    public void run() {  \n        try {  \n            \n            System.out.println(\"I have made a product:\"  \n                    + Thread.currentThread().getName()); \n            String temp = \"A Product, 生产线程：\"  \n                    + Thread.currentThread().getName();  \n            queue.put(temp);//如果队列是满的话，会阻塞当前线程  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n    }    \n}  \n=====================================================================\npackage cn.itcast_02_blockingqueue.consumer;\nimport java.util.concurrent.BlockingQueue;\npublic class Consumer implements Runnable{  \n    BlockingQueue<String> queue; \n    public Consumer(BlockingQueue<String> queue){  \n        this.queue = queue;  \n    }        \n    @Override  \n    public void run() {  \n        try {  \n        \tString consumer = Thread.currentThread().getName();\n        \tSystem.out.println(consumer);  \n            String temp = queue.take();//如果队列为空，会阻塞当前线程  \n            System.out.println(consumer+\"get a product:\"+temp);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n    }  \n}  \n\n\n```\n# 4. java并发编程的一些总结\n## 4.1. 不应用线程池的缺点\n有些开发者图省事，遇到需要多线程处理的地方，直接new Thread(...).start()，对于一般场景是没问题的，但如果是在并发请求很高的情况下，就会有些隐患：\n- 新建线程的开销。线程虽然比进程要轻量许多，但对于JVM来说，新建一个线程的代价还是挺大的，决不同于新建一个对象\n- 资源消耗量。没有一个池来限制线程的数量，会导致线程的数量直接取决于应用的并发量，这样有潜在的线程数据巨大的可能，那么资源消耗量将是巨大的\n- 稳定性。当线程数量超过系统资源所能承受的程度，稳定性就会成问题\n## 4.2. 制定执行策略\n在每个需要多线程处理的地方，不管并发量有多大，需要考虑线程的执行策略\n- 任务以什么顺序执行\n- 可以有多少个任务并发执行\n- 可以有多少个任务进入等待执行队列\n- 系统过载的时候，应该放弃哪些任务？如何通知到应用程序？\n- 一个任务的执行前后应该做什么处理\n\n## 4.3. 线程池的类型\n不管是通过Executors创建线程池，还是通过Spring来管理，都得清楚知道有哪几种线程池：\n- FixedThreadPool：定长线程池，提交任务时创建线程，直到池的最大容量，如果有线程非预期结束，会补充新线程\n- CachedThreadPool：可变线程池，它犹如一个弹簧，如果没有任务需求时，它回收空闲线程，如果需求增加，则按需增加线程，不对池的大小做限制\n- SingleThreadExecutor：单线程。处理不过来的任务会进入FIFO队列等待执行\n- SecheduledThreadPool：周期性线程池。支持执行周期性线程任务\n其实，这些不同类型的线程池都是通过构建一个ThreadPoolExecutor来完成的，所不同的是corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,threadFactory这么几个参数。具体可以参见JDK DOC。\n\n## 4.4. 线程池饱和策略\n由以上线程池类型可知，除了CachedThreadPool其他线程池都有饱和的可能，当饱和以后就需要相应的策略处理请求线程的任务，比如，达到上限时通过ThreadPoolExecutor.setRejectedExecutionHandler方法设置一个拒绝任务的策略，JDK提供了AbortPolicy、CallerRunsPolicy、DiscardPolicy、DiscardOldestPolicy几种策略，具体差异可见JDK DOC\n\n## 4.5. 线程无依赖性\n<font color=\"red\">多线程任务设计上尽量使得各任务是独立无依赖的</font>，所谓依赖性可两个方面：\n- 线程之间的依赖性。如果线程有依赖可能会造成死锁或饥饿\n- 调用者与线程的依赖性。调用者得监视线程的完成情况，影响可并发量\n当然，在有些业务里确实需要一定的依赖性，比如调用者需要得到线程完成后结果，传统的Thread是不便完成的，因为run方法无返回值，只能通过一些共享的变量来传递结果，但在Executor框架里可以通过Future和Callable实现需要有返回值的任务，当然线程的异步性导致需要有相应机制来保证调用者能等待任务完成，关于Future和Callable的用法前文已讲解；\n","slug":"大数据/大数据0401-java多线程并发","published":1,"updated":"2018-02-06T07:49:43.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89z4001av4vfsdj509fu","content":"<p>内容包含</p>\n<ol>\n<li>掌握多线程</li>\n<li>掌握并发包下的队列</li>\n</ol>\n<p>做个笔记，方便查看<br><a id=\"more\"></a></p>\n<h1 id=\"1-java多线程增强\"><a href=\"#1-java多线程增强\" class=\"headerlink\" title=\"1. java多线程增强\"></a>1. java多线程增强</h1><h2 id=\"1-1-进程介绍\"><a href=\"#1-1-进程介绍\" class=\"headerlink\" title=\"1.1. 进程介绍\"></a>1.1. 进程介绍</h2><p>不管是我们开发的应用程序，还是我们运行的其他的应用程序，都需要先把程序安装在本地的硬盘上。然后找到这个程序的启动文件，启动程序的时候，其实是电脑把当前的这个程序加载到内存中，在<font color=\"red\">内存中需要给当前的程序分配一段独立的运行空间</font>。这片空间就专门负责当前这个程序的运行。  </p>\n<p>不同的应用程序运行的过程中都需要在内存中分配自己独立的运行空间，彼此之间不会相互的影响。我们把每个独立应用程序在内存的独立空间称为当前应用程序运行的一个进程。  </p>\n<p>进程：它是内存中的一段独立的空间，可以负责当前应用程序的运行。当前这个进程负责调度当前程序中的所有运行细节。</p>\n<h2 id=\"1-2-线程介绍\"><a href=\"#1-2-线程介绍\" class=\"headerlink\" title=\"1.2. 线程介绍\"></a>1.2. 线程介绍</h2><p>在一个进程中，每个独立的功能都需要独立的去运行，这时又需要把当前这个进程划分成多个运行区域，每个独立的小区域（小单元）称为一个线程。</p>\n<p>线程：它是位于进程中，负责当前进程中的某个具备独立运行资格的空间。<br>进程是负责整个程序的运行，而线程是程序中具体的某个独立功能的运行。一个进程中至少应该有一个线程。</p>\n<h2 id=\"1-3-多线程介绍\"><a href=\"#1-3-多线程介绍\" class=\"headerlink\" title=\"1.3. 多线程介绍\"></a>1.3. 多线程介绍</h2><p>多线程：<font color=\"red\">在一个进程中，我们同时开启多个线程，让多个线程同时去完成某些任务（功能）。<br>(比如后台服务系统，就可以用多个线程同时响应多个客户的请求)</font><br>多线程的目的：提高程序的运行效率。</p>\n<h2 id=\"1-4-多线程运行的原理\"><a href=\"#1-4-多线程运行的原理\" class=\"headerlink\" title=\"1.4. 多线程运行的原理\"></a>1.4. 多线程运行的原理</h2><p>cpu在线程中做时间片的切换。</p>\n<p>其实真正电脑中的程序的运行不是同时在运行的。CPU负责程序的运行，而CPU在运行程序的过程中某个时刻点上，它其实只能运行一个程序。而不是多个程序。而CPU它可以在多个程序之间进行高速的切换。而切换频率和速度太快，导致人的肉眼看不到。<br>每个程序就是进程， 而每个进程中会有多个线程，而CPU是在这些线程之间进行切换。<br>了解了CPU对一个任务的执行过程，我们就必须知道，多线程可以提高程序的运行效率，但不能无限制的开线程。  </p>\n<h2 id=\"1-5-实现线程的两种方式\"><a href=\"#1-5-实现线程的两种方式\" class=\"headerlink\" title=\"1.5. 实现线程的两种方式\"></a>1.5. 实现线程的两种方式</h2><h3 id=\"1-5-1-继承Thread的方式\"><a href=\"#1-5-1-继承Thread的方式\" class=\"headerlink\" title=\"1.5.1. 继承Thread的方式\"></a>1.5.1. 继承Thread的方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.testThread;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadWithExtends</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\tString flag;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThreadWithExtends</span><span class=\"params\">(String flag)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.flag = flag;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tString tname = Thread.currentThread().getName();</div><div class=\"line\">\t\tSystem.out.println(tname+<span class=\"string\">\"线程的run方法被调用……\"</span>);</div><div class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(random.nextInt(<span class=\"number\">10</span>)*<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\tSystem.out.println(tname+ <span class=\"string\">\"....\"</span>+ flag);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tThread thread1 = <span class=\"keyword\">new</span> MyThreadWithExtends(<span class=\"string\">\"a\"</span>);</div><div class=\"line\">\t\tThread thread2 = <span class=\"keyword\">new</span> MyThreadWithExtends(<span class=\"string\">\"b\"</span>);</div><div class=\"line\">\t\tthread1.start();</div><div class=\"line\">\t\tthread2.start();</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t\t * 如果是调用thread的run方法，则只是一个普通的方法调用，不会开启新的线程</span></div><div class=\"line\"><span class=\"comment\">\t\t */</span></div><div class=\"line\"><span class=\"comment\">//\t\tthread1.run();</span></div><div class=\"line\"><span class=\"comment\">//\t\tthread2.run();</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"1-5-2-声明实现-Runnable-接口的方式\"><a href=\"#1-5-2-声明实现-Runnable-接口的方式\" class=\"headerlink\" title=\"1.5.2. 声明实现 Runnable 接口的方式\"></a>1.5.2. 声明实现 Runnable 接口的方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.testThread;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadWithImpliment</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThreadWithImpliment</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tString name = Thread.currentThread().getName();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"线程\"</span> + name + <span class=\"string\">\"的run方法被调用……\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(x);</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tThread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyThreadWithImpliment(<span class=\"number\">1</span>), <span class=\"string\">\"thread-1\"</span>);</div><div class=\"line\">\t\tThread thread2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyThreadWithImpliment(<span class=\"number\">2</span>), <span class=\"string\">\"thread-2\"</span>);</div><div class=\"line\">\t\t thread1.start();</div><div class=\"line\">\t\t thread2.start();</div><div class=\"line\">\t\t<span class=\"comment\">// 注意调用run和调用start的区别,直接调用run，则都运行在main线程中</span></div><div class=\"line\"><span class=\"comment\">//\t\tthread1.run();</span></div><div class=\"line\"><span class=\"comment\">//\t\tthread2.run();</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"2-java同步关键词解释\"><a href=\"#2-java同步关键词解释\" class=\"headerlink\" title=\"2. java同步关键词解释\"></a>2. java同步关键词解释</h1><h2 id=\"2-1-synchronized\"><a href=\"#2-1-synchronized\" class=\"headerlink\" title=\"2.1. synchronized\"></a>2.1. synchronized</h2><h3 id=\"2-1-1-加同步格式：\"><a href=\"#2-1-1-加同步格式：\" class=\"headerlink\" title=\"2.1.1. 加同步格式：\"></a>2.1.1. 加同步格式：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">synchronized( 需要一个任意的对象（锁） )&#123;</div><div class=\"line\">\t代码块中放操作共享数据的代码。</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.testThread;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySynchronized</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> MySynchronized mySynchronized = <span class=\"keyword\">new</span> MySynchronized();</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> MySynchronized mySynchronized2 = <span class=\"keyword\">new</span> MySynchronized();</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"string\">\"thread1\"</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (mySynchronized) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"keyword\">this</span>.getName()+<span class=\"string\">\" start\"</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>/<span class=\"number\">0</span>;   <span class=\"comment\">//如果发生异常，jvm会将锁释放</span></div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"keyword\">this</span>.getName()+<span class=\"string\">\"醒了\"</span>);</div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"keyword\">this</span>.getName()+<span class=\"string\">\" end\"</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"string\">\"thread2\"</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (mySynchronized) &#123;         <span class=\"comment\">//争抢同一把锁时，线程1没释放之前，线程2只能等待</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\tsynchronized (mySynchronized2) &#123;    //如果不是一把锁，可以看到两句话同时打印</span></div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"keyword\">this</span>.getName()+<span class=\"string\">\" start\"</span>);</div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"keyword\">this</span>.getName()+<span class=\"string\">\" end\"</span>);</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-1-2-synchronized的缺陷\"><a href=\"#2-1-2-synchronized的缺陷\" class=\"headerlink\" title=\"2.1.2. synchronized的缺陷\"></a>2.1.2. synchronized的缺陷</h3><p>synchronized是java中的一个关键字，也就是说是Java语言内置的特性。<br>如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：</p>\n<ol>\n<li>获取锁的线程执行完了该代码块，然后线程释放对锁的占有；</li>\n<li>线程执行发生异常，此时JVM会让线程自动释放锁。</li>\n</ol>\n<p>例子1：<br>如果这个获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。<br>因此就需要有一种机制<font color=\"red\">可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间或者能够响应中断），通过Lock就可以办到。</font></p>\n<p>例子2：<br>当有多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作会发生冲突现象，但是读操作和读操作不会发生冲突现象。<br>但是采用synchronized关键字来实现同步的话，就会导致一个问题：<br>如果多个线程都只是进行读操作，当一个线程在进行读操作时，其他线程只能等待无法进行读操作。  </p>\n<p>因此就需要一种机制来使得多个线程都只是进行读操作时，线程之间不会发生冲突，通过Lock就可以办到。<br>另外，通过Lock可以知道线程有没有成功获取到锁。这个是synchronized无法办到的。<br>总的来说，也就是说Lock提供了比synchronized更多的功能。  </p>\n<h2 id=\"2-2-lock\"><a href=\"#2-2-lock\" class=\"headerlink\" title=\"2.2. lock\"></a>2.2. lock</h2><h3 id=\"2-2-1-lock和synchronized的区别\"><a href=\"#2-2-1-lock和synchronized的区别\" class=\"headerlink\" title=\"2.2.1. lock和synchronized的区别\"></a>2.2.1. lock和synchronized的区别</h3><ol>\n<li>Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；</li>\n<li>Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。<h3 id=\"2-2-2-java-util-concurrent-locks包下常用的类\"><a href=\"#2-2-2-java-util-concurrent-locks包下常用的类\" class=\"headerlink\" title=\"2.2.2. java.util.concurrent.locks包下常用的类\"></a>2.2.2. java.util.concurrent.locks包下常用的类</h3><h4 id=\"2-2-2-1-Lock\"><a href=\"#2-2-2-1-Lock\" class=\"headerlink\" title=\"2.2.2.1. Lock\"></a>2.2.2.1. Lock</h4>首先要说明的就是Lock，通过查看Lock的源码可知，Lock是一个接口：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Lock</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lockInterruptibly</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">(<span class=\"keyword\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>获取锁：lock()，lockInterruptibly()， tryLock()，tryLock(long time, TimeUnit unit)<br>释放锁：unlock()</p>\n<p>区别： </p>\n<ul>\n<li><p>lock()<br>平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。<br>由于在前面讲到如果采用Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用Lock必须在try{}catch{}块中进行，并且将释放锁的操作放在finally块中进行，以保证锁一定被被释放，防止死锁的发生。</p>\n</li>\n<li><p>tryLock()<br>有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。</p>\n</li>\n<li><p>tryLock(long time, TimeUnit unit)<br>和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。</p>\n</li>\n<li><p>lockInterruptibly()<br>比较特殊，当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就使说，当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程。<br>注意，当一个线程获取了锁之后，是不会被interrupt()方法中断的。<br>因此当通过lockInterruptibly()方法获取某个锁时，如果不能获取到，只有进行等待的情况下，是可以响应中断的。<br>而用synchronized修饰的话，当一个线程处于等待某个锁的状态，是无法被中断的，只有一直等待下去。  </p>\n</li>\n</ul>\n<h4 id=\"2-2-2-2-ReentrantLock\"><a href=\"#2-2-2-2-ReentrantLock\" class=\"headerlink\" title=\"2.2.2.2. ReentrantLock\"></a>2.2.2.2. ReentrantLock</h4><p>直接使用lock接口的话，我们需要实现很多方法，不太方便，ReentrantLock是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法，ReentrantLock，意思是“可重入锁”。</p>\n<ul>\n<li><p>lock()的正确使用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLockTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">\t<span class=\"keyword\">static</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock(); <span class=\"comment\">// 注意这个地方</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;E&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tThread thread = Thread.currentThread();</div><div class=\"line\">\t\t\t\tlock.lock();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"得到了锁\"</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t\t\tarrayList.add(i);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"释放了锁\"</span>);</div><div class=\"line\">\t\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tThread thread = Thread.currentThread();</div><div class=\"line\">\t\t\t\tlock.lock();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"得到了锁\"</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t\t\tarrayList.add(i);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"释放了锁\"</span>);</div><div class=\"line\">\t\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>tryLock()的使用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 观察现象：一个线程获得锁后，另一个线程取不到锁，不会一直等待</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTryLock</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">\t<span class=\"keyword\">static</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock(); <span class=\"comment\">// 注意这个地方</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tThread thread = Thread.currentThread();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">boolean</span> tryLock = lock.tryLock();</div><div class=\"line\">\t\t\t\tSystem.out.println(thread.getName()+<span class=\"string\">\" \"</span>+tryLock);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (tryLock) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"得到了锁\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tarrayList.add(i);</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"释放了锁\"</span>);</div><div class=\"line\">\t\t\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tThread thread = Thread.currentThread();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">boolean</span> tryLock = lock.tryLock();</div><div class=\"line\">\t\t\t\tSystem.out.println(thread.getName()+<span class=\"string\">\" \"</span>+tryLock);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (tryLock) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"得到了锁\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tarrayList.add(i);</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"释放了锁\"</span>);</div><div class=\"line\">\t\t\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>lockInterruptibly()响应中断的使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 观察现象：如果thread-0得到了锁，阻塞。。。thread-1尝试获取锁，如果拿不到，则可以被中断等待</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInterruptibly</span> </span>&#123;</div><div class=\"line\">\t <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();  </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</div><div class=\"line\">\t    \tMyInterruptibly test = <span class=\"keyword\">new</span> MyInterruptibly();</div><div class=\"line\">\t        MyThread thread0 = <span class=\"keyword\">new</span> MyThread(test);</div><div class=\"line\">\t        MyThread thread1 = <span class=\"keyword\">new</span> MyThread(test);</div><div class=\"line\">\t        thread0.start();</div><div class=\"line\">\t        thread1.start();</div><div class=\"line\">\t         </div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t            Thread.sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">\t        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t            e.printStackTrace();</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        thread1.interrupt();</div><div class=\"line\">\t        System.out.println(<span class=\"string\">\"=====================\"</span>);</div><div class=\"line\">\t    &#125;  </div><div class=\"line\">\t     </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Thread thread)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</div><div class=\"line\">\t        lock.lockInterruptibly();   <span class=\"comment\">//注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出</span></div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">\t            System.out.println(thread.getName()+<span class=\"string\">\"得到了锁\"</span>);</div><div class=\"line\">\t            <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</div><div class=\"line\">\t            <span class=\"keyword\">for</span>(    ;     ;) &#123;</div><div class=\"line\">\t                <span class=\"keyword\">if</span>(System.currentTimeMillis() - startTime &gt;= Integer.MAX_VALUE)</div><div class=\"line\">\t                    <span class=\"keyword\">break</span>;</div><div class=\"line\">\t                <span class=\"comment\">//插入数据</span></div><div class=\"line\">\t            &#125;</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t            System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"执行finally\"</span>);</div><div class=\"line\">\t            lock.unlock();</div><div class=\"line\">\t            System.out.println(thread.getName()+<span class=\"string\">\"释放了锁\"</span>);</div><div class=\"line\">\t        &#125;  </div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">private</span> MyInterruptibly test = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread</span><span class=\"params\">(MyInterruptibly test)</span> </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">this</span>.test = test;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"meta\">@Override</span></div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t         </div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t            test.insert(Thread.currentThread());</div><div class=\"line\">\t        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t            System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"被中断\"</span>);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2-2-2-3-ReadWriteLock\"><a href=\"#2-2-2-3-ReadWriteLock\" class=\"headerlink\" title=\"2.2.2.3. ReadWriteLock\"></a>2.2.2.3. ReadWriteLock</h4><p>ReadWriteLock也是一个接口，在它里面只定义了两个方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ReadWriteLock</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Returns the lock used for reading.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the lock used for reading.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\">Lock <span class=\"title\">readLock</span><span class=\"params\">()</span></span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Returns the lock used for writing.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the lock used for writing.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\">Lock <span class=\"title\">writeLock</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。下面的ReentrantReadWriteLock实现了ReadWriteLock接口。</p>\n<h4 id=\"2-2-2-4-ReentrantReadWriteLock\"><a href=\"#2-2-2-4-ReentrantReadWriteLock\" class=\"headerlink\" title=\"2.2.2.4. ReentrantReadWriteLock\"></a>2.2.2.4. ReentrantReadWriteLock</h4><p>ReentrantReadWriteLock里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和writeLock()用来获取读锁和写锁。</p>\n<p>ReentrantReadWriteLock具体用法</p>\n<p>假如有多个线程要同时进行读操作的话，先看一下synchronized达到的效果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.lock;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 一个线程又要读又要写，用synchronize来实现的话，读写操作都只能锁住后一个线程一个线程地进行</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySynchronizedReadWrite</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> MySynchronizedReadWrite test = <span class=\"keyword\">new</span> MySynchronizedReadWrite();</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                test.get(Thread.currentThread());</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;.start();</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                test.get(Thread.currentThread());</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;.start();</div><div class=\"line\">         </div><div class=\"line\">    &#125;  </div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(Thread thread)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(System.currentTimeMillis() - start &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        \ti++;</div><div class=\"line\">        \t<span class=\"keyword\">if</span>(i%<span class=\"number\">4</span>==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">            System.out.println(thread.getName()+<span class=\"string\">\"正在进行写操作\"</span>);</div><div class=\"line\">        \t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        \t\tSystem.out.println(thread.getName()+<span class=\"string\">\"正在进行读操作\"</span>);\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(thread.getName()+<span class=\"string\">\"读写操作完毕\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>改成用读写锁的话：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 使用读写锁，可以实现读写分离锁定，读操作并发进行，写操作锁定单个线程</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * 如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。</span></div><div class=\"line\"><span class=\"comment\"> * 如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyReentrantReadWriteLock</span> </span>&#123;</div><div class=\"line\">\t <span class=\"keyword\">private</span> ReentrantReadWriteLock rwl = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</div><div class=\"line\">     </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">final</span> MyReentrantReadWriteLock test = <span class=\"keyword\">new</span> MyReentrantReadWriteLock();</div><div class=\"line\">\t         </div><div class=\"line\">\t        <span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">\t            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t                test.get(Thread.currentThread());</div><div class=\"line\">\t                test.write(Thread.currentThread());</div><div class=\"line\">\t            &#125;;</div><div class=\"line\">\t        &#125;.start();</div><div class=\"line\">\t         </div><div class=\"line\">\t        <span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">\t            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t                test.get(Thread.currentThread());</div><div class=\"line\">\t                test.write(Thread.currentThread());</div><div class=\"line\">\t            &#125;;</div><div class=\"line\">\t        &#125;.start();</div><div class=\"line\">\t    &#125;  </div><div class=\"line\">\t    </div><div class=\"line\">\t    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t     * 读操作,用读锁来锁定</span></div><div class=\"line\"><span class=\"comment\">\t     * <span class=\"doctag\">@param</span> thread</span></div><div class=\"line\"><span class=\"comment\">\t     */</span></div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(Thread thread)</span> </span>&#123;</div><div class=\"line\">\t        rwl.readLock().lock();</div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t            <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">\t             </div><div class=\"line\">\t            <span class=\"keyword\">while</span>(System.currentTimeMillis() - start &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t                System.out.println(thread.getName()+<span class=\"string\">\"正在进行读操作\"</span>);</div><div class=\"line\">\t            &#125;</div><div class=\"line\">\t            System.out.println(thread.getName()+<span class=\"string\">\"读操作完毕\"</span>);</div><div class=\"line\">\t        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t            rwl.readLock().unlock();</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t    &#125;</div><div class=\"line\"></div><div class=\"line\">\t    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t     * 写操作，用写锁来锁定</span></div><div class=\"line\"><span class=\"comment\">\t     * <span class=\"doctag\">@param</span> thread</span></div><div class=\"line\"><span class=\"comment\">\t     */</span></div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(Thread thread)</span> </span>&#123;</div><div class=\"line\">\t        rwl.writeLock().lock();;</div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t            <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">\t            <span class=\"keyword\">while</span>(System.currentTimeMillis() - start &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t                System.out.println(thread.getName()+<span class=\"string\">\"正在进行写操作\"</span>);</div><div class=\"line\">\t            &#125;</div><div class=\"line\">\t            System.out.println(thread.getName()+<span class=\"string\">\"写操作完毕\"</span>);</div><div class=\"line\">\t        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t            rwl.writeLock().unlock();</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>不过要注意的是，如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。</li>\n<li>如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</li>\n</ul>\n</blockquote>\n<h2 id=\"2-3-Lock和synchronized的选择\"><a href=\"#2-3-Lock和synchronized的选择\" class=\"headerlink\" title=\"2.3. Lock和synchronized的选择\"></a>2.3. Lock和synchronized的选择</h2><ol>\n<li>Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现；</li>\n<li>synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；</li>\n<li>Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；</li>\n<li>通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。</li>\n<li>Lock可以提高多个线程进行读操作的效率。</li>\n</ol>\n<p>在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。</p>\n<h1 id=\"3-java并发包\"><a href=\"#3-java并发包\" class=\"headerlink\" title=\"3. java并发包\"></a>3. java并发包</h1><h2 id=\"3-1-java并发包介绍\"><a href=\"#3-1-java并发包介绍\" class=\"headerlink\" title=\"3.1. java并发包介绍\"></a>3.1. java并发包介绍</h2><p>JDK5.0 以后的版本都引入了高级并发特性，大多数的特性在java.util.concurrent 包中，是专门用于多线程发编程的，充分利用了现代多处理器和多核心系统的功能以编写大规模并发应用程序。主要包含<font color=\"red\">原子量、并发集合、同步器、</font>可重入锁，并对线程池的构造提供了强力的支持。</p>\n<h3 id=\"3-1-1-线程池\"><a href=\"#3-1-1-线程池\" class=\"headerlink\" title=\"3.1.1. 线程池\"></a>3.1.1. 线程池</h3><h4 id=\"3-1-1-1-创建方式\"><a href=\"#3-1-1-1-创建方式\" class=\"headerlink\" title=\"3.1.1.1. 创建方式\"></a>3.1.1.1. 创建方式</h4><p>五种创建方式</p>\n<h5 id=\"3-1-1-1-1-Single-Thread-Executor\"><a href=\"#3-1-1-1-1-Single-Thread-Executor\" class=\"headerlink\" title=\"3.1.1.1.1. Single Thread Executor\"></a>3.1.1.1.1. Single Thread Executor</h5><p>只有一个线程的线程池，因此所有提交的任务是顺序执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">##### Cached Thread Pool </div><div class=\"line\">线程池里有很多线程需要同时执行，老的可用线程将被新的任务触发重新执行，&lt;font color=&quot;red&quot;&gt;如果线程超过60秒内没执行，那么将被终止并从池中删除&lt;/font&gt;  </div><div class=\"line\">```Executors.newCachedThreadPool()</div></pre></td></tr></table></figure></p>\n<h5 id=\"3-1-1-1-2-Fixed-Thread-Pool\"><a href=\"#3-1-1-1-2-Fixed-Thread-Pool\" class=\"headerlink\" title=\"3.1.1.1.2. Fixed Thread Pool\"></a>3.1.1.1.2. Fixed Thread Pool</h5><p><font color=\"red\">拥有固定线程数的线程池，如果没有任务执行，那么线程会一直等待</font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在构造函数中的参数4是线程池的大小，你可以随意设置，也可以和cpu的核数量保持一致，获取cpu的核数量  </div><div class=\"line\">```int cpuNums = Runtime.getRuntime().availableProcessors();</div></pre></td></tr></table></figure></p>\n<h5 id=\"3-1-1-1-3-Scheduled-Thread-Pool\"><a href=\"#3-1-1-1-3-Scheduled-Thread-Pool\" class=\"headerlink\" title=\"3.1.1.1.3. Scheduled Thread Pool\"></a>3.1.1.1.3. Scheduled Thread Pool</h5><p>用来调度即将执行的任务的线程池，可能是不是直接执行, 每隔多久执行一次… 策略型的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">##### Single Thread Scheduled Pool </div><div class=\"line\">只有一个线程，用来调度任务在指定时间执行</div><div class=\"line\">```Executors.newSingleThreadScheduledExecutor()</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-1-2-线程池的使用\"><a href=\"#3-1-2-线程池的使用\" class=\"headerlink\" title=\"3.1.2. 线程池的使用\"></a>3.1.2. 线程池的使用</h3><p>提交 Runnable ，任务完成后 Future 对象返回 null<br>调用excute,提交任务, 匿名Runable重写run方法, run方法里是业务逻辑<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.pool;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolWithRunable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 通过线程池执行线程</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> args</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//创建一个线程池</span></div><div class=\"line\">\t\tExecutorService pool = Executors.newCachedThreadPool();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</div><div class=\"line\">\t\t\tpool.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"thread name: \"</span> + Thread.currentThread().getName());</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tpool.shutdown();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>提交 Callable，该方法返回一个 Future 实例表示任务的状态<br>调用submit提交任务, 匿名Callable,重写call方法, 有返回值, 获取返回值会阻塞,一直要等到线程任务返回结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.pool;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * callable 跟runnable的区别：</span></div><div class=\"line\"><span class=\"comment\"> * runnable的run方法不会有任何返回结果，所以主线程无法获得任务线程的返回值</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * callable的call方法可以返回结果，但是主线程在获取时是被阻塞，需要等待任务线程返回才能拿到结果</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolWithcallable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class=\"line\">\t\tExecutorService pool = Executors.newFixedThreadPool(<span class=\"number\">4</span>); </div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">\t\t\tFuture&lt;String&gt; submit = pool.submit(<span class=\"keyword\">new</span> Callable&lt;String&gt;()&#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//System.out.println(\"a\");</span></div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"b--\"</span>+Thread.currentThread().getName();</div><div class=\"line\">\t\t\t\t&#125;\t\t\t   </div><div class=\"line\">\t\t\t   &#125;);</div><div class=\"line\">\t\t\t<span class=\"comment\">//从Future中get结果，这个方法是会被阻塞的，一直要等到线程任务返回结果</span></div><div class=\"line\">\t\t\tSystem.out.println(submit.get());</div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t\t\tpool.shutdown();</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-2-java并发包消息队列及在开源软件中的应用\"><a href=\"#3-2-java并发包消息队列及在开源软件中的应用\" class=\"headerlink\" title=\"3.2. java并发包消息队列及在开源软件中的应用\"></a>3.2. java并发包消息队列及在开源软件中的应用</h2><h3 id=\"3-2-1-BlockingQueue\"><a href=\"#3-2-1-BlockingQueue\" class=\"headerlink\" title=\"3.2.1. BlockingQueue\"></a>3.2.1. BlockingQueue</h3><p>也是java.util.concurrent下的主要用来<font color=\"red\">控制线程同步的工具</font>。<br>主要的方法是：put、take一对阻塞存取；add、poll一对非阻塞存取。  </p>\n<ul>\n<li>插入:<ol>\n<li>add(anObject):把anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则抛出异常,不好</li>\n<li>offer(anObject):表示如果可能的话,将anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则返回false.</li>\n<li>put(anObject):把anObject加到BlockingQueue里,如果BlockQueue没有空间,则调用此方法的线程被阻断直到BlockingQueue里面有空间再继续, 有阻塞, 放不进去就等待</li>\n</ol>\n</li>\n<li>读取：<ol>\n<li>poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间,取不到时返回null; 取不到返回null</li>\n<li>take():取走BlockingQueue里排在首位的对象,若BlockingQueue为空,阻断进入等待状态直到Blocking有新的对象被加入为止; <font color=\"red\">阻塞, 取不到就一直等</font></li>\n</ol>\n</li>\n<li>其他<ol>\n<li>int remainingCapacity();返回队列剩余的容量，在队列插入和获取的时候，<font color=\"red\">不要瞎搞，数据可能不准, 不能保证数据的准确性</font></li>\n<li>boolean remove(Object o); 从队列移除元素，如果存在，即移除一个或者更多，队列改    变了返回true</li>\n<li>public boolean contains(Object o); 查看队列是否存在这个元素，存在返回true</li>\n<li>int drainTo(Collection&lt;? super E&gt; c); //移除此队列中所有可用的元素,并将它们添加到给定 collection 中。<font color=\"red\">取出放到集合中</font></li>\n<li>int drainTo(Collection&lt;? super E&gt; c, int maxElements); 和上面方法的区别在于，指定了移动的数量;取出指定个数放到集合</li>\n</ol>\n</li>\n</ul>\n<p>BlockingQueue有四个具体的实现类,常用的两种实现类为：</p>\n<h3 id=\"3-2-2-ArrayBlockingQueue\"><a href=\"#3-2-2-ArrayBlockingQueue\" class=\"headerlink\" title=\"3.2.2. ArrayBlockingQueue\"></a>3.2.2. ArrayBlockingQueue</h3><p>一个由数组支持的有界阻塞队列，规定大小的BlockingQueue,其构造函数必须带一个int参数来指明其大小.其所含的对象是以FIFO(先入先出)顺序排序的。</p>\n<h3 id=\"3-2-3-LinkedBlockingQueue\"><a href=\"#3-2-3-LinkedBlockingQueue\" class=\"headerlink\" title=\"3.2.3. LinkedBlockingQueue\"></a>3.2.3. LinkedBlockingQueue</h3><p>大小不定的BlockingQueue,若其构造函数带一个规定大小的参数,生成的BlockingQueue有大小限制,若不带大小参数,所生成的BlockingQueue的大小由Integer.MAX_VALUE来决定.其所含的对象是以FIFO(先入先出)顺序排序的。<br>LinkedBlockingQueue 可以指定容量，也可以不指定，不指定的话，默认最大是Integer.MAX_VALUE,其中主要用到put和take方法，put方法在队列满的时候会阻塞直到有队列成员被消费，take方法在队列空的时候会阻塞，直到有队列成员被放进来。</p>\n<h3 id=\"3-2-4-LinkedBlockingQueue和ArrayBlockingQueue区别\"><a href=\"#3-2-4-LinkedBlockingQueue和ArrayBlockingQueue区别\" class=\"headerlink\" title=\"3.2.4. LinkedBlockingQueue和ArrayBlockingQueue区别\"></a>3.2.4. LinkedBlockingQueue和ArrayBlockingQueue区别</h3><p>LinkedBlockingQueue和ArrayBlockingQueue比较起来,它们背后所用的数据结构不一样,导致LinkedBlockingQueue的数据吞吐量要大于ArrayBlockingQueue,但在线程数量很大时其性能的可预见性低于ArrayBlockingQueue.</p>\n<p>生产者消费者的示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_02_blockingqueue.main;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.itcast_02_blockingqueue.consumer.Consumer;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.itcast_02_blockingqueue.producer.Producer;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tBlockingQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;String&gt;(<span class=\"number\">2</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// BlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;String&gt;();</span></div><div class=\"line\">\t\t<span class=\"comment\">// 不设置的话，LinkedBlockingQueue默认大小为Integer.MAX_VALUE</span></div><div class=\"line\">\t\t<span class=\"comment\">// BlockingQueue&lt;String&gt; queue = new ArrayBlockingQueue&lt;String&gt;(2);</span></div><div class=\"line\">\t\tConsumer consumer = <span class=\"keyword\">new</span> Consumer(queue);</div><div class=\"line\">\t\tProducer producer = <span class=\"keyword\">new</span> Producer(queue);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(producer, <span class=\"string\">\"Producer\"</span> + (i + <span class=\"number\">1</span>)).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(consumer, <span class=\"string\">\"Consumer\"</span> + (i + <span class=\"number\">1</span>)).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(producer, <span class=\"string\">\"Producer\"</span> + (<span class=\"number\">5</span>)).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">=====================================================================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_02_blockingqueue.main;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBlockingQueue</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tBlockingQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;String&gt;(<span class=\"number\">2</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// BlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;String&gt;();</span></div><div class=\"line\">\t\t<span class=\"comment\">// 不设置的话，LinkedBlockingQueue默认大小为Integer.MAX_VALUE</span></div><div class=\"line\">\t\t<span class=\"comment\">// BlockingQueue&lt;String&gt; queue = new ArrayBlockingQueue&lt;String&gt;(2);</span></div><div class=\"line\">\t\tTestBlockingQueueConsumer consumer = <span class=\"keyword\">new</span> TestBlockingQueueConsumer(queue);</div><div class=\"line\">\t\tTestBlockingQueueProducer producer = <span class=\"keyword\">new</span> TestBlockingQueueProducer(queue);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(producer, <span class=\"string\">\"Producer\"</span> + (i + <span class=\"number\">1</span>)).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(consumer, <span class=\"string\">\"Consumer\"</span> + (i + <span class=\"number\">1</span>)).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(producer, <span class=\"string\">\"Producer\"</span> + (<span class=\"number\">5</span>)).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">=====================================================================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_02_blockingqueue.main;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBlockingQueueConsumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;  </div><div class=\"line\">    BlockingQueue&lt;String&gt; queue; </div><div class=\"line\">    Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestBlockingQueueConsumer</span><span class=\"params\">(BlockingQueue&lt;String&gt; queue)</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;  </div><div class=\"line\">    &#125;        </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">        \tThread.sleep(random.nextInt(<span class=\"number\">10</span>));</div><div class=\"line\">        \tSystem.out.println(Thread.currentThread().getName()+ <span class=\"string\">\"trying...\"</span>);</div><div class=\"line\">            String temp = queue.take();<span class=\"comment\">//如果队列为空，会阻塞当前线程  </span></div><div class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" get a job \"</span> +temp);  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div><div class=\"line\">=====================================================================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_02_blockingqueue.main;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBlockingQueueProducer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\tBlockingQueue&lt;String&gt; queue;</div><div class=\"line\">\tRandom random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestBlockingQueueProducer</span><span class=\"params\">(BlockingQueue&lt;String&gt; queue)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.queue = queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(random.nextInt(<span class=\"number\">10</span>));</div><div class=\"line\">\t\t\t\tString task = Thread.currentThread().getName() + <span class=\"string\">\" made a product \"</span> + i;</div><div class=\"line\">\t\t\t\tSystem.out.println(task);</div><div class=\"line\">\t\t\t\tqueue.put(task);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">=====================================================================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_02_blockingqueue.producer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;  </div><div class=\"line\">    BlockingQueue&lt;String&gt; queue;    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(BlockingQueue&lt;String&gt; queue)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;  </div><div class=\"line\">    &#125;    </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            </div><div class=\"line\">            System.out.println(<span class=\"string\">\"I have made a product:\"</span>  </div><div class=\"line\">                    + Thread.currentThread().getName()); </div><div class=\"line\">            String temp = <span class=\"string\">\"A Product, 生产线程：\"</span>  </div><div class=\"line\">                    + Thread.currentThread().getName();  </div><div class=\"line\">            queue.put(temp);<span class=\"comment\">//如果队列是满的话，会阻塞当前线程  </span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;    </div><div class=\"line\">&#125;  </div><div class=\"line\">=====================================================================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_02_blockingqueue.consumer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;  </div><div class=\"line\">    BlockingQueue&lt;String&gt; queue; </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(BlockingQueue&lt;String&gt; queue)</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;  </div><div class=\"line\">    &#125;        </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">        \tString consumer = Thread.currentThread().getName();</div><div class=\"line\">        \tSystem.out.println(consumer);  </div><div class=\"line\">            String temp = queue.take();<span class=\"comment\">//如果队列为空，会阻塞当前线程  </span></div><div class=\"line\">            System.out.println(consumer+<span class=\"string\">\"get a product:\"</span>+temp);  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"4-java并发编程的一些总结\"><a href=\"#4-java并发编程的一些总结\" class=\"headerlink\" title=\"4. java并发编程的一些总结\"></a>4. java并发编程的一些总结</h1><h2 id=\"4-1-不应用线程池的缺点\"><a href=\"#4-1-不应用线程池的缺点\" class=\"headerlink\" title=\"4.1. 不应用线程池的缺点\"></a>4.1. 不应用线程池的缺点</h2><p>有些开发者图省事，遇到需要多线程处理的地方，直接new Thread(…).start()，对于一般场景是没问题的，但如果是在并发请求很高的情况下，就会有些隐患：</p>\n<ul>\n<li>新建线程的开销。线程虽然比进程要轻量许多，但对于JVM来说，新建一个线程的代价还是挺大的，决不同于新建一个对象</li>\n<li>资源消耗量。没有一个池来限制线程的数量，会导致线程的数量直接取决于应用的并发量，这样有潜在的线程数据巨大的可能，那么资源消耗量将是巨大的</li>\n<li>稳定性。当线程数量超过系统资源所能承受的程度，稳定性就会成问题<h2 id=\"4-2-制定执行策略\"><a href=\"#4-2-制定执行策略\" class=\"headerlink\" title=\"4.2. 制定执行策略\"></a>4.2. 制定执行策略</h2>在每个需要多线程处理的地方，不管并发量有多大，需要考虑线程的执行策略</li>\n<li>任务以什么顺序执行</li>\n<li>可以有多少个任务并发执行</li>\n<li>可以有多少个任务进入等待执行队列</li>\n<li>系统过载的时候，应该放弃哪些任务？如何通知到应用程序？</li>\n<li>一个任务的执行前后应该做什么处理</li>\n</ul>\n<h2 id=\"4-3-线程池的类型\"><a href=\"#4-3-线程池的类型\" class=\"headerlink\" title=\"4.3. 线程池的类型\"></a>4.3. 线程池的类型</h2><p>不管是通过Executors创建线程池，还是通过Spring来管理，都得清楚知道有哪几种线程池：</p>\n<ul>\n<li>FixedThreadPool：定长线程池，提交任务时创建线程，直到池的最大容量，如果有线程非预期结束，会补充新线程</li>\n<li>CachedThreadPool：可变线程池，它犹如一个弹簧，如果没有任务需求时，它回收空闲线程，如果需求增加，则按需增加线程，不对池的大小做限制</li>\n<li>SingleThreadExecutor：单线程。处理不过来的任务会进入FIFO队列等待执行</li>\n<li>SecheduledThreadPool：周期性线程池。支持执行周期性线程任务<br>其实，这些不同类型的线程池都是通过构建一个ThreadPoolExecutor来完成的，所不同的是corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,threadFactory这么几个参数。具体可以参见JDK DOC。</li>\n</ul>\n<h2 id=\"4-4-线程池饱和策略\"><a href=\"#4-4-线程池饱和策略\" class=\"headerlink\" title=\"4.4. 线程池饱和策略\"></a>4.4. 线程池饱和策略</h2><p>由以上线程池类型可知，除了CachedThreadPool其他线程池都有饱和的可能，当饱和以后就需要相应的策略处理请求线程的任务，比如，达到上限时通过ThreadPoolExecutor.setRejectedExecutionHandler方法设置一个拒绝任务的策略，JDK提供了AbortPolicy、CallerRunsPolicy、DiscardPolicy、DiscardOldestPolicy几种策略，具体差异可见JDK DOC</p>\n<h2 id=\"4-5-线程无依赖性\"><a href=\"#4-5-线程无依赖性\" class=\"headerlink\" title=\"4.5. 线程无依赖性\"></a>4.5. 线程无依赖性</h2><p><font color=\"red\">多线程任务设计上尽量使得各任务是独立无依赖的</font>，所谓依赖性可两个方面：</p>\n<ul>\n<li>线程之间的依赖性。如果线程有依赖可能会造成死锁或饥饿</li>\n<li>调用者与线程的依赖性。调用者得监视线程的完成情况，影响可并发量<br>当然，在有些业务里确实需要一定的依赖性，比如调用者需要得到线程完成后结果，传统的Thread是不便完成的，因为run方法无返回值，只能通过一些共享的变量来传递结果，但在Executor框架里可以通过Future和Callable实现需要有返回值的任务，当然线程的异步性导致需要有相应机制来保证调用者能等待任务完成，关于Future和Callable的用法前文已讲解；</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>内容包含</p>\n<ol>\n<li>掌握多线程</li>\n<li>掌握并发包下的队列</li>\n</ol>\n<p>做个笔记，方便查看<br>","more":"</p>\n<h1 id=\"1-java多线程增强\"><a href=\"#1-java多线程增强\" class=\"headerlink\" title=\"1. java多线程增强\"></a>1. java多线程增强</h1><h2 id=\"1-1-进程介绍\"><a href=\"#1-1-进程介绍\" class=\"headerlink\" title=\"1.1. 进程介绍\"></a>1.1. 进程介绍</h2><p>不管是我们开发的应用程序，还是我们运行的其他的应用程序，都需要先把程序安装在本地的硬盘上。然后找到这个程序的启动文件，启动程序的时候，其实是电脑把当前的这个程序加载到内存中，在<font color=\"red\">内存中需要给当前的程序分配一段独立的运行空间</font>。这片空间就专门负责当前这个程序的运行。  </p>\n<p>不同的应用程序运行的过程中都需要在内存中分配自己独立的运行空间，彼此之间不会相互的影响。我们把每个独立应用程序在内存的独立空间称为当前应用程序运行的一个进程。  </p>\n<p>进程：它是内存中的一段独立的空间，可以负责当前应用程序的运行。当前这个进程负责调度当前程序中的所有运行细节。</p>\n<h2 id=\"1-2-线程介绍\"><a href=\"#1-2-线程介绍\" class=\"headerlink\" title=\"1.2. 线程介绍\"></a>1.2. 线程介绍</h2><p>在一个进程中，每个独立的功能都需要独立的去运行，这时又需要把当前这个进程划分成多个运行区域，每个独立的小区域（小单元）称为一个线程。</p>\n<p>线程：它是位于进程中，负责当前进程中的某个具备独立运行资格的空间。<br>进程是负责整个程序的运行，而线程是程序中具体的某个独立功能的运行。一个进程中至少应该有一个线程。</p>\n<h2 id=\"1-3-多线程介绍\"><a href=\"#1-3-多线程介绍\" class=\"headerlink\" title=\"1.3. 多线程介绍\"></a>1.3. 多线程介绍</h2><p>多线程：<font color=\"red\">在一个进程中，我们同时开启多个线程，让多个线程同时去完成某些任务（功能）。<br>(比如后台服务系统，就可以用多个线程同时响应多个客户的请求)</font><br>多线程的目的：提高程序的运行效率。</p>\n<h2 id=\"1-4-多线程运行的原理\"><a href=\"#1-4-多线程运行的原理\" class=\"headerlink\" title=\"1.4. 多线程运行的原理\"></a>1.4. 多线程运行的原理</h2><p>cpu在线程中做时间片的切换。</p>\n<p>其实真正电脑中的程序的运行不是同时在运行的。CPU负责程序的运行，而CPU在运行程序的过程中某个时刻点上，它其实只能运行一个程序。而不是多个程序。而CPU它可以在多个程序之间进行高速的切换。而切换频率和速度太快，导致人的肉眼看不到。<br>每个程序就是进程， 而每个进程中会有多个线程，而CPU是在这些线程之间进行切换。<br>了解了CPU对一个任务的执行过程，我们就必须知道，多线程可以提高程序的运行效率，但不能无限制的开线程。  </p>\n<h2 id=\"1-5-实现线程的两种方式\"><a href=\"#1-5-实现线程的两种方式\" class=\"headerlink\" title=\"1.5. 实现线程的两种方式\"></a>1.5. 实现线程的两种方式</h2><h3 id=\"1-5-1-继承Thread的方式\"><a href=\"#1-5-1-继承Thread的方式\" class=\"headerlink\" title=\"1.5.1. 继承Thread的方式\"></a>1.5.1. 继承Thread的方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.testThread;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadWithExtends</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\tString flag;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThreadWithExtends</span><span class=\"params\">(String flag)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.flag = flag;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tString tname = Thread.currentThread().getName();</div><div class=\"line\">\t\tSystem.out.println(tname+<span class=\"string\">\"线程的run方法被调用……\"</span>);</div><div class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(random.nextInt(<span class=\"number\">10</span>)*<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\tSystem.out.println(tname+ <span class=\"string\">\"....\"</span>+ flag);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tThread thread1 = <span class=\"keyword\">new</span> MyThreadWithExtends(<span class=\"string\">\"a\"</span>);</div><div class=\"line\">\t\tThread thread2 = <span class=\"keyword\">new</span> MyThreadWithExtends(<span class=\"string\">\"b\"</span>);</div><div class=\"line\">\t\tthread1.start();</div><div class=\"line\">\t\tthread2.start();</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t\t * 如果是调用thread的run方法，则只是一个普通的方法调用，不会开启新的线程</span></div><div class=\"line\"><span class=\"comment\">\t\t */</span></div><div class=\"line\"><span class=\"comment\">//\t\tthread1.run();</span></div><div class=\"line\"><span class=\"comment\">//\t\tthread2.run();</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"1-5-2-声明实现-Runnable-接口的方式\"><a href=\"#1-5-2-声明实现-Runnable-接口的方式\" class=\"headerlink\" title=\"1.5.2. 声明实现 Runnable 接口的方式\"></a>1.5.2. 声明实现 Runnable 接口的方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.testThread;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadWithImpliment</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThreadWithImpliment</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tString name = Thread.currentThread().getName();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"线程\"</span> + name + <span class=\"string\">\"的run方法被调用……\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(x);</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tThread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyThreadWithImpliment(<span class=\"number\">1</span>), <span class=\"string\">\"thread-1\"</span>);</div><div class=\"line\">\t\tThread thread2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyThreadWithImpliment(<span class=\"number\">2</span>), <span class=\"string\">\"thread-2\"</span>);</div><div class=\"line\">\t\t thread1.start();</div><div class=\"line\">\t\t thread2.start();</div><div class=\"line\">\t\t<span class=\"comment\">// 注意调用run和调用start的区别,直接调用run，则都运行在main线程中</span></div><div class=\"line\"><span class=\"comment\">//\t\tthread1.run();</span></div><div class=\"line\"><span class=\"comment\">//\t\tthread2.run();</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"2-java同步关键词解释\"><a href=\"#2-java同步关键词解释\" class=\"headerlink\" title=\"2. java同步关键词解释\"></a>2. java同步关键词解释</h1><h2 id=\"2-1-synchronized\"><a href=\"#2-1-synchronized\" class=\"headerlink\" title=\"2.1. synchronized\"></a>2.1. synchronized</h2><h3 id=\"2-1-1-加同步格式：\"><a href=\"#2-1-1-加同步格式：\" class=\"headerlink\" title=\"2.1.1. 加同步格式：\"></a>2.1.1. 加同步格式：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">synchronized( 需要一个任意的对象（锁） )&#123;</div><div class=\"line\">\t代码块中放操作共享数据的代码。</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.testThread;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySynchronized</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> MySynchronized mySynchronized = <span class=\"keyword\">new</span> MySynchronized();</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> MySynchronized mySynchronized2 = <span class=\"keyword\">new</span> MySynchronized();</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"string\">\"thread1\"</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (mySynchronized) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"keyword\">this</span>.getName()+<span class=\"string\">\" start\"</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>/<span class=\"number\">0</span>;   <span class=\"comment\">//如果发生异常，jvm会将锁释放</span></div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"keyword\">this</span>.getName()+<span class=\"string\">\"醒了\"</span>);</div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"keyword\">this</span>.getName()+<span class=\"string\">\" end\"</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"string\">\"thread2\"</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (mySynchronized) &#123;         <span class=\"comment\">//争抢同一把锁时，线程1没释放之前，线程2只能等待</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\tsynchronized (mySynchronized2) &#123;    //如果不是一把锁，可以看到两句话同时打印</span></div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"keyword\">this</span>.getName()+<span class=\"string\">\" start\"</span>);</div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"keyword\">this</span>.getName()+<span class=\"string\">\" end\"</span>);</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-1-2-synchronized的缺陷\"><a href=\"#2-1-2-synchronized的缺陷\" class=\"headerlink\" title=\"2.1.2. synchronized的缺陷\"></a>2.1.2. synchronized的缺陷</h3><p>synchronized是java中的一个关键字，也就是说是Java语言内置的特性。<br>如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：</p>\n<ol>\n<li>获取锁的线程执行完了该代码块，然后线程释放对锁的占有；</li>\n<li>线程执行发生异常，此时JVM会让线程自动释放锁。</li>\n</ol>\n<p>例子1：<br>如果这个获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。<br>因此就需要有一种机制<font color=\"red\">可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间或者能够响应中断），通过Lock就可以办到。</font></p>\n<p>例子2：<br>当有多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作会发生冲突现象，但是读操作和读操作不会发生冲突现象。<br>但是采用synchronized关键字来实现同步的话，就会导致一个问题：<br>如果多个线程都只是进行读操作，当一个线程在进行读操作时，其他线程只能等待无法进行读操作。  </p>\n<p>因此就需要一种机制来使得多个线程都只是进行读操作时，线程之间不会发生冲突，通过Lock就可以办到。<br>另外，通过Lock可以知道线程有没有成功获取到锁。这个是synchronized无法办到的。<br>总的来说，也就是说Lock提供了比synchronized更多的功能。  </p>\n<h2 id=\"2-2-lock\"><a href=\"#2-2-lock\" class=\"headerlink\" title=\"2.2. lock\"></a>2.2. lock</h2><h3 id=\"2-2-1-lock和synchronized的区别\"><a href=\"#2-2-1-lock和synchronized的区别\" class=\"headerlink\" title=\"2.2.1. lock和synchronized的区别\"></a>2.2.1. lock和synchronized的区别</h3><ol>\n<li>Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；</li>\n<li>Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。<h3 id=\"2-2-2-java-util-concurrent-locks包下常用的类\"><a href=\"#2-2-2-java-util-concurrent-locks包下常用的类\" class=\"headerlink\" title=\"2.2.2. java.util.concurrent.locks包下常用的类\"></a>2.2.2. java.util.concurrent.locks包下常用的类</h3><h4 id=\"2-2-2-1-Lock\"><a href=\"#2-2-2-1-Lock\" class=\"headerlink\" title=\"2.2.2.1. Lock\"></a>2.2.2.1. Lock</h4>首先要说明的就是Lock，通过查看Lock的源码可知，Lock是一个接口：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Lock</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lockInterruptibly</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">(<span class=\"keyword\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>获取锁：lock()，lockInterruptibly()， tryLock()，tryLock(long time, TimeUnit unit)<br>释放锁：unlock()</p>\n<p>区别： </p>\n<ul>\n<li><p>lock()<br>平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。<br>由于在前面讲到如果采用Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用Lock必须在try{}catch{}块中进行，并且将释放锁的操作放在finally块中进行，以保证锁一定被被释放，防止死锁的发生。</p>\n</li>\n<li><p>tryLock()<br>有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。</p>\n</li>\n<li><p>tryLock(long time, TimeUnit unit)<br>和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。</p>\n</li>\n<li><p>lockInterruptibly()<br>比较特殊，当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就使说，当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程。<br>注意，当一个线程获取了锁之后，是不会被interrupt()方法中断的。<br>因此当通过lockInterruptibly()方法获取某个锁时，如果不能获取到，只有进行等待的情况下，是可以响应中断的。<br>而用synchronized修饰的话，当一个线程处于等待某个锁的状态，是无法被中断的，只有一直等待下去。  </p>\n</li>\n</ul>\n<h4 id=\"2-2-2-2-ReentrantLock\"><a href=\"#2-2-2-2-ReentrantLock\" class=\"headerlink\" title=\"2.2.2.2. ReentrantLock\"></a>2.2.2.2. ReentrantLock</h4><p>直接使用lock接口的话，我们需要实现很多方法，不太方便，ReentrantLock是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法，ReentrantLock，意思是“可重入锁”。</p>\n<ul>\n<li><p>lock()的正确使用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLockTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">\t<span class=\"keyword\">static</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock(); <span class=\"comment\">// 注意这个地方</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;E&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tThread thread = Thread.currentThread();</div><div class=\"line\">\t\t\t\tlock.lock();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"得到了锁\"</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t\t\tarrayList.add(i);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"释放了锁\"</span>);</div><div class=\"line\">\t\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tThread thread = Thread.currentThread();</div><div class=\"line\">\t\t\t\tlock.lock();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"得到了锁\"</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t\t\tarrayList.add(i);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"释放了锁\"</span>);</div><div class=\"line\">\t\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>tryLock()的使用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 观察现象：一个线程获得锁后，另一个线程取不到锁，不会一直等待</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTryLock</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">\t<span class=\"keyword\">static</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock(); <span class=\"comment\">// 注意这个地方</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tThread thread = Thread.currentThread();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">boolean</span> tryLock = lock.tryLock();</div><div class=\"line\">\t\t\t\tSystem.out.println(thread.getName()+<span class=\"string\">\" \"</span>+tryLock);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (tryLock) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"得到了锁\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tarrayList.add(i);</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"释放了锁\"</span>);</div><div class=\"line\">\t\t\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread() &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tThread thread = Thread.currentThread();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">boolean</span> tryLock = lock.tryLock();</div><div class=\"line\">\t\t\t\tSystem.out.println(thread.getName()+<span class=\"string\">\" \"</span>+tryLock);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (tryLock) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"得到了锁\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tarrayList.add(i);</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tSystem.out.println(thread.getName() + <span class=\"string\">\"释放了锁\"</span>);</div><div class=\"line\">\t\t\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>lockInterruptibly()响应中断的使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 观察现象：如果thread-0得到了锁，阻塞。。。thread-1尝试获取锁，如果拿不到，则可以被中断等待</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInterruptibly</span> </span>&#123;</div><div class=\"line\">\t <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();  </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</div><div class=\"line\">\t    \tMyInterruptibly test = <span class=\"keyword\">new</span> MyInterruptibly();</div><div class=\"line\">\t        MyThread thread0 = <span class=\"keyword\">new</span> MyThread(test);</div><div class=\"line\">\t        MyThread thread1 = <span class=\"keyword\">new</span> MyThread(test);</div><div class=\"line\">\t        thread0.start();</div><div class=\"line\">\t        thread1.start();</div><div class=\"line\">\t         </div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t            Thread.sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">\t        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t            e.printStackTrace();</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        thread1.interrupt();</div><div class=\"line\">\t        System.out.println(<span class=\"string\">\"=====================\"</span>);</div><div class=\"line\">\t    &#125;  </div><div class=\"line\">\t     </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Thread thread)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</div><div class=\"line\">\t        lock.lockInterruptibly();   <span class=\"comment\">//注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出</span></div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">\t            System.out.println(thread.getName()+<span class=\"string\">\"得到了锁\"</span>);</div><div class=\"line\">\t            <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</div><div class=\"line\">\t            <span class=\"keyword\">for</span>(    ;     ;) &#123;</div><div class=\"line\">\t                <span class=\"keyword\">if</span>(System.currentTimeMillis() - startTime &gt;= Integer.MAX_VALUE)</div><div class=\"line\">\t                    <span class=\"keyword\">break</span>;</div><div class=\"line\">\t                <span class=\"comment\">//插入数据</span></div><div class=\"line\">\t            &#125;</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t            System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"执行finally\"</span>);</div><div class=\"line\">\t            lock.unlock();</div><div class=\"line\">\t            System.out.println(thread.getName()+<span class=\"string\">\"释放了锁\"</span>);</div><div class=\"line\">\t        &#125;  </div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">private</span> MyInterruptibly test = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread</span><span class=\"params\">(MyInterruptibly test)</span> </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">this</span>.test = test;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"meta\">@Override</span></div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t         </div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t            test.insert(Thread.currentThread());</div><div class=\"line\">\t        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t            System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"被中断\"</span>);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2-2-2-3-ReadWriteLock\"><a href=\"#2-2-2-3-ReadWriteLock\" class=\"headerlink\" title=\"2.2.2.3. ReadWriteLock\"></a>2.2.2.3. ReadWriteLock</h4><p>ReadWriteLock也是一个接口，在它里面只定义了两个方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ReadWriteLock</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Returns the lock used for reading.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the lock used for reading.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\">Lock <span class=\"title\">readLock</span><span class=\"params\">()</span></span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Returns the lock used for writing.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the lock used for writing.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\">Lock <span class=\"title\">writeLock</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。下面的ReentrantReadWriteLock实现了ReadWriteLock接口。</p>\n<h4 id=\"2-2-2-4-ReentrantReadWriteLock\"><a href=\"#2-2-2-4-ReentrantReadWriteLock\" class=\"headerlink\" title=\"2.2.2.4. ReentrantReadWriteLock\"></a>2.2.2.4. ReentrantReadWriteLock</h4><p>ReentrantReadWriteLock里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和writeLock()用来获取读锁和写锁。</p>\n<p>ReentrantReadWriteLock具体用法</p>\n<p>假如有多个线程要同时进行读操作的话，先看一下synchronized达到的效果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.lock;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 一个线程又要读又要写，用synchronize来实现的话，读写操作都只能锁住后一个线程一个线程地进行</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySynchronizedReadWrite</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> MySynchronizedReadWrite test = <span class=\"keyword\">new</span> MySynchronizedReadWrite();</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                test.get(Thread.currentThread());</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;.start();</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                test.get(Thread.currentThread());</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;.start();</div><div class=\"line\">         </div><div class=\"line\">    &#125;  </div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(Thread thread)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(System.currentTimeMillis() - start &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        \ti++;</div><div class=\"line\">        \t<span class=\"keyword\">if</span>(i%<span class=\"number\">4</span>==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">            System.out.println(thread.getName()+<span class=\"string\">\"正在进行写操作\"</span>);</div><div class=\"line\">        \t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        \t\tSystem.out.println(thread.getName()+<span class=\"string\">\"正在进行读操作\"</span>);\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(thread.getName()+<span class=\"string\">\"读写操作完毕\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>改成用读写锁的话：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.thread.lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 使用读写锁，可以实现读写分离锁定，读操作并发进行，写操作锁定单个线程</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * 如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。</span></div><div class=\"line\"><span class=\"comment\"> * 如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyReentrantReadWriteLock</span> </span>&#123;</div><div class=\"line\">\t <span class=\"keyword\">private</span> ReentrantReadWriteLock rwl = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</div><div class=\"line\">     </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">final</span> MyReentrantReadWriteLock test = <span class=\"keyword\">new</span> MyReentrantReadWriteLock();</div><div class=\"line\">\t         </div><div class=\"line\">\t        <span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">\t            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t                test.get(Thread.currentThread());</div><div class=\"line\">\t                test.write(Thread.currentThread());</div><div class=\"line\">\t            &#125;;</div><div class=\"line\">\t        &#125;.start();</div><div class=\"line\">\t         </div><div class=\"line\">\t        <span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">\t            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t                test.get(Thread.currentThread());</div><div class=\"line\">\t                test.write(Thread.currentThread());</div><div class=\"line\">\t            &#125;;</div><div class=\"line\">\t        &#125;.start();</div><div class=\"line\">\t    &#125;  </div><div class=\"line\">\t    </div><div class=\"line\">\t    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t     * 读操作,用读锁来锁定</span></div><div class=\"line\"><span class=\"comment\">\t     * <span class=\"doctag\">@param</span> thread</span></div><div class=\"line\"><span class=\"comment\">\t     */</span></div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(Thread thread)</span> </span>&#123;</div><div class=\"line\">\t        rwl.readLock().lock();</div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t            <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">\t             </div><div class=\"line\">\t            <span class=\"keyword\">while</span>(System.currentTimeMillis() - start &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t                System.out.println(thread.getName()+<span class=\"string\">\"正在进行读操作\"</span>);</div><div class=\"line\">\t            &#125;</div><div class=\"line\">\t            System.out.println(thread.getName()+<span class=\"string\">\"读操作完毕\"</span>);</div><div class=\"line\">\t        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t            rwl.readLock().unlock();</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t    &#125;</div><div class=\"line\"></div><div class=\"line\">\t    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t     * 写操作，用写锁来锁定</span></div><div class=\"line\"><span class=\"comment\">\t     * <span class=\"doctag\">@param</span> thread</span></div><div class=\"line\"><span class=\"comment\">\t     */</span></div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(Thread thread)</span> </span>&#123;</div><div class=\"line\">\t        rwl.writeLock().lock();;</div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t            <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">\t            <span class=\"keyword\">while</span>(System.currentTimeMillis() - start &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t                System.out.println(thread.getName()+<span class=\"string\">\"正在进行写操作\"</span>);</div><div class=\"line\">\t            &#125;</div><div class=\"line\">\t            System.out.println(thread.getName()+<span class=\"string\">\"写操作完毕\"</span>);</div><div class=\"line\">\t        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t            rwl.writeLock().unlock();</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>不过要注意的是，如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。</li>\n<li>如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</li>\n</ul>\n</blockquote>\n<h2 id=\"2-3-Lock和synchronized的选择\"><a href=\"#2-3-Lock和synchronized的选择\" class=\"headerlink\" title=\"2.3. Lock和synchronized的选择\"></a>2.3. Lock和synchronized的选择</h2><ol>\n<li>Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现；</li>\n<li>synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；</li>\n<li>Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；</li>\n<li>通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。</li>\n<li>Lock可以提高多个线程进行读操作的效率。</li>\n</ol>\n<p>在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。</p>\n<h1 id=\"3-java并发包\"><a href=\"#3-java并发包\" class=\"headerlink\" title=\"3. java并发包\"></a>3. java并发包</h1><h2 id=\"3-1-java并发包介绍\"><a href=\"#3-1-java并发包介绍\" class=\"headerlink\" title=\"3.1. java并发包介绍\"></a>3.1. java并发包介绍</h2><p>JDK5.0 以后的版本都引入了高级并发特性，大多数的特性在java.util.concurrent 包中，是专门用于多线程发编程的，充分利用了现代多处理器和多核心系统的功能以编写大规模并发应用程序。主要包含<font color=\"red\">原子量、并发集合、同步器、</font>可重入锁，并对线程池的构造提供了强力的支持。</p>\n<h3 id=\"3-1-1-线程池\"><a href=\"#3-1-1-线程池\" class=\"headerlink\" title=\"3.1.1. 线程池\"></a>3.1.1. 线程池</h3><h4 id=\"3-1-1-1-创建方式\"><a href=\"#3-1-1-1-创建方式\" class=\"headerlink\" title=\"3.1.1.1. 创建方式\"></a>3.1.1.1. 创建方式</h4><p>五种创建方式</p>\n<h5 id=\"3-1-1-1-1-Single-Thread-Executor\"><a href=\"#3-1-1-1-1-Single-Thread-Executor\" class=\"headerlink\" title=\"3.1.1.1.1. Single Thread Executor\"></a>3.1.1.1.1. Single Thread Executor</h5><p>只有一个线程的线程池，因此所有提交的任务是顺序执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">##### Cached Thread Pool </div><div class=\"line\">线程池里有很多线程需要同时执行，老的可用线程将被新的任务触发重新执行，&lt;font color=&quot;red&quot;&gt;如果线程超过60秒内没执行，那么将被终止并从池中删除&lt;/font&gt;  </div><div class=\"line\">```Executors.newCachedThreadPool()</div></pre></td></tr></table></figure></p>\n<h5 id=\"3-1-1-1-2-Fixed-Thread-Pool\"><a href=\"#3-1-1-1-2-Fixed-Thread-Pool\" class=\"headerlink\" title=\"3.1.1.1.2. Fixed Thread Pool\"></a>3.1.1.1.2. Fixed Thread Pool</h5><p><font color=\"red\">拥有固定线程数的线程池，如果没有任务执行，那么线程会一直等待</font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在构造函数中的参数4是线程池的大小，你可以随意设置，也可以和cpu的核数量保持一致，获取cpu的核数量  </div><div class=\"line\">```int cpuNums = Runtime.getRuntime().availableProcessors();</div></pre></td></tr></table></figure></p>\n<h5 id=\"3-1-1-1-3-Scheduled-Thread-Pool\"><a href=\"#3-1-1-1-3-Scheduled-Thread-Pool\" class=\"headerlink\" title=\"3.1.1.1.3. Scheduled Thread Pool\"></a>3.1.1.1.3. Scheduled Thread Pool</h5><p>用来调度即将执行的任务的线程池，可能是不是直接执行, 每隔多久执行一次… 策略型的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">##### Single Thread Scheduled Pool </div><div class=\"line\">只有一个线程，用来调度任务在指定时间执行</div><div class=\"line\">```Executors.newSingleThreadScheduledExecutor()</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-1-2-线程池的使用\"><a href=\"#3-1-2-线程池的使用\" class=\"headerlink\" title=\"3.1.2. 线程池的使用\"></a>3.1.2. 线程池的使用</h3><p>提交 Runnable ，任务完成后 Future 对象返回 null<br>调用excute,提交任务, 匿名Runable重写run方法, run方法里是业务逻辑<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.pool;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolWithRunable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 通过线程池执行线程</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> args</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//创建一个线程池</span></div><div class=\"line\">\t\tExecutorService pool = Executors.newCachedThreadPool();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</div><div class=\"line\">\t\t\tpool.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"thread name: \"</span> + Thread.currentThread().getName());</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tpool.shutdown();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>提交 Callable，该方法返回一个 Future 实例表示任务的状态<br>调用submit提交任务, 匿名Callable,重写call方法, 有返回值, 获取返回值会阻塞,一直要等到线程任务返回结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_01_mythread.pool;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * callable 跟runnable的区别：</span></div><div class=\"line\"><span class=\"comment\"> * runnable的run方法不会有任何返回结果，所以主线程无法获得任务线程的返回值</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * callable的call方法可以返回结果，但是主线程在获取时是被阻塞，需要等待任务线程返回才能拿到结果</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolWithcallable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class=\"line\">\t\tExecutorService pool = Executors.newFixedThreadPool(<span class=\"number\">4</span>); </div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">\t\t\tFuture&lt;String&gt; submit = pool.submit(<span class=\"keyword\">new</span> Callable&lt;String&gt;()&#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//System.out.println(\"a\");</span></div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"b--\"</span>+Thread.currentThread().getName();</div><div class=\"line\">\t\t\t\t&#125;\t\t\t   </div><div class=\"line\">\t\t\t   &#125;);</div><div class=\"line\">\t\t\t<span class=\"comment\">//从Future中get结果，这个方法是会被阻塞的，一直要等到线程任务返回结果</span></div><div class=\"line\">\t\t\tSystem.out.println(submit.get());</div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t\t\tpool.shutdown();</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-2-java并发包消息队列及在开源软件中的应用\"><a href=\"#3-2-java并发包消息队列及在开源软件中的应用\" class=\"headerlink\" title=\"3.2. java并发包消息队列及在开源软件中的应用\"></a>3.2. java并发包消息队列及在开源软件中的应用</h2><h3 id=\"3-2-1-BlockingQueue\"><a href=\"#3-2-1-BlockingQueue\" class=\"headerlink\" title=\"3.2.1. BlockingQueue\"></a>3.2.1. BlockingQueue</h3><p>也是java.util.concurrent下的主要用来<font color=\"red\">控制线程同步的工具</font>。<br>主要的方法是：put、take一对阻塞存取；add、poll一对非阻塞存取。  </p>\n<ul>\n<li>插入:<ol>\n<li>add(anObject):把anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则抛出异常,不好</li>\n<li>offer(anObject):表示如果可能的话,将anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则返回false.</li>\n<li>put(anObject):把anObject加到BlockingQueue里,如果BlockQueue没有空间,则调用此方法的线程被阻断直到BlockingQueue里面有空间再继续, 有阻塞, 放不进去就等待</li>\n</ol>\n</li>\n<li>读取：<ol>\n<li>poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间,取不到时返回null; 取不到返回null</li>\n<li>take():取走BlockingQueue里排在首位的对象,若BlockingQueue为空,阻断进入等待状态直到Blocking有新的对象被加入为止; <font color=\"red\">阻塞, 取不到就一直等</font></li>\n</ol>\n</li>\n<li>其他<ol>\n<li>int remainingCapacity();返回队列剩余的容量，在队列插入和获取的时候，<font color=\"red\">不要瞎搞，数据可能不准, 不能保证数据的准确性</font></li>\n<li>boolean remove(Object o); 从队列移除元素，如果存在，即移除一个或者更多，队列改    变了返回true</li>\n<li>public boolean contains(Object o); 查看队列是否存在这个元素，存在返回true</li>\n<li>int drainTo(Collection&lt;? super E&gt; c); //移除此队列中所有可用的元素,并将它们添加到给定 collection 中。<font color=\"red\">取出放到集合中</font></li>\n<li>int drainTo(Collection&lt;? super E&gt; c, int maxElements); 和上面方法的区别在于，指定了移动的数量;取出指定个数放到集合</li>\n</ol>\n</li>\n</ul>\n<p>BlockingQueue有四个具体的实现类,常用的两种实现类为：</p>\n<h3 id=\"3-2-2-ArrayBlockingQueue\"><a href=\"#3-2-2-ArrayBlockingQueue\" class=\"headerlink\" title=\"3.2.2. ArrayBlockingQueue\"></a>3.2.2. ArrayBlockingQueue</h3><p>一个由数组支持的有界阻塞队列，规定大小的BlockingQueue,其构造函数必须带一个int参数来指明其大小.其所含的对象是以FIFO(先入先出)顺序排序的。</p>\n<h3 id=\"3-2-3-LinkedBlockingQueue\"><a href=\"#3-2-3-LinkedBlockingQueue\" class=\"headerlink\" title=\"3.2.3. LinkedBlockingQueue\"></a>3.2.3. LinkedBlockingQueue</h3><p>大小不定的BlockingQueue,若其构造函数带一个规定大小的参数,生成的BlockingQueue有大小限制,若不带大小参数,所生成的BlockingQueue的大小由Integer.MAX_VALUE来决定.其所含的对象是以FIFO(先入先出)顺序排序的。<br>LinkedBlockingQueue 可以指定容量，也可以不指定，不指定的话，默认最大是Integer.MAX_VALUE,其中主要用到put和take方法，put方法在队列满的时候会阻塞直到有队列成员被消费，take方法在队列空的时候会阻塞，直到有队列成员被放进来。</p>\n<h3 id=\"3-2-4-LinkedBlockingQueue和ArrayBlockingQueue区别\"><a href=\"#3-2-4-LinkedBlockingQueue和ArrayBlockingQueue区别\" class=\"headerlink\" title=\"3.2.4. LinkedBlockingQueue和ArrayBlockingQueue区别\"></a>3.2.4. LinkedBlockingQueue和ArrayBlockingQueue区别</h3><p>LinkedBlockingQueue和ArrayBlockingQueue比较起来,它们背后所用的数据结构不一样,导致LinkedBlockingQueue的数据吞吐量要大于ArrayBlockingQueue,但在线程数量很大时其性能的可预见性低于ArrayBlockingQueue.</p>\n<p>生产者消费者的示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_02_blockingqueue.main;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.itcast_02_blockingqueue.consumer.Consumer;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.itcast_02_blockingqueue.producer.Producer;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tBlockingQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;String&gt;(<span class=\"number\">2</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// BlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;String&gt;();</span></div><div class=\"line\">\t\t<span class=\"comment\">// 不设置的话，LinkedBlockingQueue默认大小为Integer.MAX_VALUE</span></div><div class=\"line\">\t\t<span class=\"comment\">// BlockingQueue&lt;String&gt; queue = new ArrayBlockingQueue&lt;String&gt;(2);</span></div><div class=\"line\">\t\tConsumer consumer = <span class=\"keyword\">new</span> Consumer(queue);</div><div class=\"line\">\t\tProducer producer = <span class=\"keyword\">new</span> Producer(queue);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(producer, <span class=\"string\">\"Producer\"</span> + (i + <span class=\"number\">1</span>)).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(consumer, <span class=\"string\">\"Consumer\"</span> + (i + <span class=\"number\">1</span>)).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(producer, <span class=\"string\">\"Producer\"</span> + (<span class=\"number\">5</span>)).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">=====================================================================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_02_blockingqueue.main;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBlockingQueue</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tBlockingQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;String&gt;(<span class=\"number\">2</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// BlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;String&gt;();</span></div><div class=\"line\">\t\t<span class=\"comment\">// 不设置的话，LinkedBlockingQueue默认大小为Integer.MAX_VALUE</span></div><div class=\"line\">\t\t<span class=\"comment\">// BlockingQueue&lt;String&gt; queue = new ArrayBlockingQueue&lt;String&gt;(2);</span></div><div class=\"line\">\t\tTestBlockingQueueConsumer consumer = <span class=\"keyword\">new</span> TestBlockingQueueConsumer(queue);</div><div class=\"line\">\t\tTestBlockingQueueProducer producer = <span class=\"keyword\">new</span> TestBlockingQueueProducer(queue);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(producer, <span class=\"string\">\"Producer\"</span> + (i + <span class=\"number\">1</span>)).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(consumer, <span class=\"string\">\"Consumer\"</span> + (i + <span class=\"number\">1</span>)).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(producer, <span class=\"string\">\"Producer\"</span> + (<span class=\"number\">5</span>)).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">=====================================================================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_02_blockingqueue.main;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBlockingQueueConsumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;  </div><div class=\"line\">    BlockingQueue&lt;String&gt; queue; </div><div class=\"line\">    Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestBlockingQueueConsumer</span><span class=\"params\">(BlockingQueue&lt;String&gt; queue)</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;  </div><div class=\"line\">    &#125;        </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">        \tThread.sleep(random.nextInt(<span class=\"number\">10</span>));</div><div class=\"line\">        \tSystem.out.println(Thread.currentThread().getName()+ <span class=\"string\">\"trying...\"</span>);</div><div class=\"line\">            String temp = queue.take();<span class=\"comment\">//如果队列为空，会阻塞当前线程  </span></div><div class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" get a job \"</span> +temp);  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div><div class=\"line\">=====================================================================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_02_blockingqueue.main;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBlockingQueueProducer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\tBlockingQueue&lt;String&gt; queue;</div><div class=\"line\">\tRandom random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestBlockingQueueProducer</span><span class=\"params\">(BlockingQueue&lt;String&gt; queue)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.queue = queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tThread.sleep(random.nextInt(<span class=\"number\">10</span>));</div><div class=\"line\">\t\t\t\tString task = Thread.currentThread().getName() + <span class=\"string\">\" made a product \"</span> + i;</div><div class=\"line\">\t\t\t\tSystem.out.println(task);</div><div class=\"line\">\t\t\t\tqueue.put(task);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">=====================================================================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_02_blockingqueue.producer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;  </div><div class=\"line\">    BlockingQueue&lt;String&gt; queue;    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(BlockingQueue&lt;String&gt; queue)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;  </div><div class=\"line\">    &#125;    </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            </div><div class=\"line\">            System.out.println(<span class=\"string\">\"I have made a product:\"</span>  </div><div class=\"line\">                    + Thread.currentThread().getName()); </div><div class=\"line\">            String temp = <span class=\"string\">\"A Product, 生产线程：\"</span>  </div><div class=\"line\">                    + Thread.currentThread().getName();  </div><div class=\"line\">            queue.put(temp);<span class=\"comment\">//如果队列是满的话，会阻塞当前线程  </span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;    </div><div class=\"line\">&#125;  </div><div class=\"line\">=====================================================================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_02_blockingqueue.consumer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;  </div><div class=\"line\">    BlockingQueue&lt;String&gt; queue; </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(BlockingQueue&lt;String&gt; queue)</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;  </div><div class=\"line\">    &#125;        </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">        \tString consumer = Thread.currentThread().getName();</div><div class=\"line\">        \tSystem.out.println(consumer);  </div><div class=\"line\">            String temp = queue.take();<span class=\"comment\">//如果队列为空，会阻塞当前线程  </span></div><div class=\"line\">            System.out.println(consumer+<span class=\"string\">\"get a product:\"</span>+temp);  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"4-java并发编程的一些总结\"><a href=\"#4-java并发编程的一些总结\" class=\"headerlink\" title=\"4. java并发编程的一些总结\"></a>4. java并发编程的一些总结</h1><h2 id=\"4-1-不应用线程池的缺点\"><a href=\"#4-1-不应用线程池的缺点\" class=\"headerlink\" title=\"4.1. 不应用线程池的缺点\"></a>4.1. 不应用线程池的缺点</h2><p>有些开发者图省事，遇到需要多线程处理的地方，直接new Thread(…).start()，对于一般场景是没问题的，但如果是在并发请求很高的情况下，就会有些隐患：</p>\n<ul>\n<li>新建线程的开销。线程虽然比进程要轻量许多，但对于JVM来说，新建一个线程的代价还是挺大的，决不同于新建一个对象</li>\n<li>资源消耗量。没有一个池来限制线程的数量，会导致线程的数量直接取决于应用的并发量，这样有潜在的线程数据巨大的可能，那么资源消耗量将是巨大的</li>\n<li>稳定性。当线程数量超过系统资源所能承受的程度，稳定性就会成问题<h2 id=\"4-2-制定执行策略\"><a href=\"#4-2-制定执行策略\" class=\"headerlink\" title=\"4.2. 制定执行策略\"></a>4.2. 制定执行策略</h2>在每个需要多线程处理的地方，不管并发量有多大，需要考虑线程的执行策略</li>\n<li>任务以什么顺序执行</li>\n<li>可以有多少个任务并发执行</li>\n<li>可以有多少个任务进入等待执行队列</li>\n<li>系统过载的时候，应该放弃哪些任务？如何通知到应用程序？</li>\n<li>一个任务的执行前后应该做什么处理</li>\n</ul>\n<h2 id=\"4-3-线程池的类型\"><a href=\"#4-3-线程池的类型\" class=\"headerlink\" title=\"4.3. 线程池的类型\"></a>4.3. 线程池的类型</h2><p>不管是通过Executors创建线程池，还是通过Spring来管理，都得清楚知道有哪几种线程池：</p>\n<ul>\n<li>FixedThreadPool：定长线程池，提交任务时创建线程，直到池的最大容量，如果有线程非预期结束，会补充新线程</li>\n<li>CachedThreadPool：可变线程池，它犹如一个弹簧，如果没有任务需求时，它回收空闲线程，如果需求增加，则按需增加线程，不对池的大小做限制</li>\n<li>SingleThreadExecutor：单线程。处理不过来的任务会进入FIFO队列等待执行</li>\n<li>SecheduledThreadPool：周期性线程池。支持执行周期性线程任务<br>其实，这些不同类型的线程池都是通过构建一个ThreadPoolExecutor来完成的，所不同的是corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,threadFactory这么几个参数。具体可以参见JDK DOC。</li>\n</ul>\n<h2 id=\"4-4-线程池饱和策略\"><a href=\"#4-4-线程池饱和策略\" class=\"headerlink\" title=\"4.4. 线程池饱和策略\"></a>4.4. 线程池饱和策略</h2><p>由以上线程池类型可知，除了CachedThreadPool其他线程池都有饱和的可能，当饱和以后就需要相应的策略处理请求线程的任务，比如，达到上限时通过ThreadPoolExecutor.setRejectedExecutionHandler方法设置一个拒绝任务的策略，JDK提供了AbortPolicy、CallerRunsPolicy、DiscardPolicy、DiscardOldestPolicy几种策略，具体差异可见JDK DOC</p>\n<h2 id=\"4-5-线程无依赖性\"><a href=\"#4-5-线程无依赖性\" class=\"headerlink\" title=\"4.5. 线程无依赖性\"></a>4.5. 线程无依赖性</h2><p><font color=\"red\">多线程任务设计上尽量使得各任务是独立无依赖的</font>，所谓依赖性可两个方面：</p>\n<ul>\n<li>线程之间的依赖性。如果线程有依赖可能会造成死锁或饥饿</li>\n<li>调用者与线程的依赖性。调用者得监视线程的完成情况，影响可并发量<br>当然，在有些业务里确实需要一定的依赖性，比如调用者需要得到线程完成后结果，传统的Thread是不便完成的，因为run方法无返回值，只能通过一些共享的变量来传递结果，但在Executor框架里可以通过Future和Callable实现需要有返回值的任务，当然线程的异步性导致需要有相应机制来保证调用者能等待任务完成，关于Future和Callable的用法前文已讲解；</li>\n</ul>"},{"title":"大数据0403-java反射","toc":true,"date":"2017-12-03T08:34:00.000Z","scaffolds":null,"_content":"\n通过反射的方式可以获取class对象中的属性、方法、构造函数等:\n<!-- more -->\n```java\npackage cn.itcast_04_reflect;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class MyReflect {\n\tpublic String className = null;\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Class personClass = null;\n\t/**\n\t * 反射Person类\n\t * @throws Exception \n\t */\n\t@Before\n\tpublic void init() throws Exception {\n\t\tclassName = \"cn.itcast_04_reflect.Person\";\n\t\tpersonClass = Class.forName(className);\n\t}\n\t/**\n\t *获取某个class文件对象\n\t */\n\t@Test\n\tpublic void getClassName() throws Exception {\n\t\tSystem.out.println(personClass);\n\t}\n\t/**\n\t *获取某个class文件对象的另一种方式\n\t */\n\t@Test\n\tpublic void getClassName2() throws Exception {\n\t\tSystem.out.println(Person.class);\n\t}\n\t/**\n\t *创建一个class文件表示的实例对象，底层会调用空参数的构造方法\n\t */\n\t@Test\n\tpublic void getNewInstance() throws Exception {\n\t\tSystem.out.println(personClass.newInstance());\n\t}\n\t/**\n\t *获取非私有的构造函数\n\t */\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t@Test\n\tpublic void getPublicConstructor() throws Exception {\n\t\tConstructor  constructor  = personClass.getConstructor(Long.class,String.class);\n\t\tPerson person = (Person)constructor.newInstance(100L,\"zhangsan\");\n\t\tSystem.out.println(person.getId());\n\t\tSystem.out.println(person.getName());\n\t}\n\t/**\n\t *获得私有的构造函数\n\t */\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t@Test\n\tpublic void getPrivateConstructor() throws Exception {\n\t\tConstructor con = personClass.getDeclaredConstructor(String.class);\n\t\tcon.setAccessible(true);//强制取消Java的权限检测\n\t\tPerson person2 = (Person)con.newInstance(\"zhangsan\");\n\t\tSystem.out.println(\"**\"+person2.getName());\n\t}\n\t/**\n\t *访问非私有的成员变量\n\t */\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t@Test\n\tpublic void getNotPrivateField() throws Exception {\n\t\tConstructor  constructor  = personClass.getConstructor(Long.class,String.class);\n\t\tObject obj = constructor.newInstance(100L,\"zhangsan\");\n\t\t\n\t\tField field = personClass.getField(\"name\");\n\t\tfield.set(obj, \"lisi\");\n\t\tSystem.out.println(field.get(obj));\n\t}\n\t/**\n\t *访问私有的成员变量\n\t */\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t@Test\n\tpublic void getPrivateField() throws Exception {\n\t\tConstructor  constructor  = personClass.getConstructor(Long.class);\n\t\tObject obj = constructor.newInstance(100L);\n\t\t\n\t\tField field2 = personClass.getDeclaredField(\"id\");\n\t\tfield2.setAccessible(true);//强制取消Java的权限检测\n\t\tfield2.set(obj,10000L);\n\t\tSystem.out.println(field2.get(obj));\n\t}\n\t/**\n\t *获取非私有的成员函数\n\t */\n\t@SuppressWarnings({ \"unchecked\" })\n\t@Test\n\tpublic void getNotPrivateMethod() throws Exception {\n\t\tSystem.out.println(personClass.getMethod(\"toString\"));\n\t\t\n\t\tObject obj = personClass.newInstance();//获取空参的构造函数\n\t\tMethod toStringMethod = personClass.getMethod(\"toString\");\n\t\tObject object = toStringMethod.invoke(obj);\n\t\tSystem.out.println(object);\n\t}\n\t/**\n\t *获取私有的成员函数\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\t@Test\n\tpublic void getPrivateMethod() throws Exception {\n\t\tObject obj = personClass.newInstance();//获取空参的构造函数\n\t\tMethod method = personClass.getDeclaredMethod(\"getSomeThing\");\n\t\tmethod.setAccessible(true);\n\t\tObject value = method.invoke(obj);\n\t\tSystem.out.println(value);\n\n\t}\n\t/**\n\t *\n\t */\n\t@Test\n\tpublic void otherMethod() throws Exception {\n\t\t//当前加载这个class文件的那个类加载器对象\n\t\tSystem.out.println(personClass.getClassLoader());\n\t\t//获取某个类实现的所有接口\n\t\tClass[] interfaces = personClass.getInterfaces();\n\t\tfor (Class class1 : interfaces) {\n\t\t\tSystem.out.println(class1);\n\t\t}\n\t\t//反射当前这个类的直接父类\n\t\tSystem.out.println(personClass.getGenericSuperclass());\n\t\t/**\n\t\t * getResourceAsStream这个方法可以获取到一个输入流，这个输入流会关联到name所表示的那个文件上。\n\t\t */\n\t\t//path 不以’/'开头时默认是从此类所在的包下取资源，以’/'开头则是从ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。\n\t\tSystem.out.println(personClass.getResourceAsStream(\"/log4j.properties\"));\n\t\tSystem.out.println(personClass.getResourceAsStream(\"log4j.properties\"));\n\t\t\n\t\t//判断当前的Class对象表示是否是数组\n\t\tSystem.out.println(personClass.isArray());\n\t\tSystem.out.println(new String[3].getClass().isArray());\n\t\t\n\t\t//判断当前的Class对象表示是否是枚举类\n\t\tSystem.out.println(personClass.isEnum());\n\t\tSystem.out.println(Class.forName(\"cn.itcast_04_reflect.City\").isEnum());\n\t\t\n\t\t//判断当前的Class对象表示是否是接口\n\t\tSystem.out.println(personClass.isInterface());\n\t\tSystem.out.println(Class.forName(\"cn.itcast_04_reflect.TestInterface\").isInterface());\n\t\t\n\t\t\n\t}\n\n}\n\n\n```","source":"_posts/大数据/大数据0403-java反射.md","raw":"---\ntitle: 大数据0403-java反射\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - java\n  - 反射\ntoc: true\ndate: 2017-12-03 16:34:00\nscaffolds:\n---\n\n通过反射的方式可以获取class对象中的属性、方法、构造函数等:\n<!-- more -->\n```java\npackage cn.itcast_04_reflect;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class MyReflect {\n\tpublic String className = null;\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Class personClass = null;\n\t/**\n\t * 反射Person类\n\t * @throws Exception \n\t */\n\t@Before\n\tpublic void init() throws Exception {\n\t\tclassName = \"cn.itcast_04_reflect.Person\";\n\t\tpersonClass = Class.forName(className);\n\t}\n\t/**\n\t *获取某个class文件对象\n\t */\n\t@Test\n\tpublic void getClassName() throws Exception {\n\t\tSystem.out.println(personClass);\n\t}\n\t/**\n\t *获取某个class文件对象的另一种方式\n\t */\n\t@Test\n\tpublic void getClassName2() throws Exception {\n\t\tSystem.out.println(Person.class);\n\t}\n\t/**\n\t *创建一个class文件表示的实例对象，底层会调用空参数的构造方法\n\t */\n\t@Test\n\tpublic void getNewInstance() throws Exception {\n\t\tSystem.out.println(personClass.newInstance());\n\t}\n\t/**\n\t *获取非私有的构造函数\n\t */\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t@Test\n\tpublic void getPublicConstructor() throws Exception {\n\t\tConstructor  constructor  = personClass.getConstructor(Long.class,String.class);\n\t\tPerson person = (Person)constructor.newInstance(100L,\"zhangsan\");\n\t\tSystem.out.println(person.getId());\n\t\tSystem.out.println(person.getName());\n\t}\n\t/**\n\t *获得私有的构造函数\n\t */\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t@Test\n\tpublic void getPrivateConstructor() throws Exception {\n\t\tConstructor con = personClass.getDeclaredConstructor(String.class);\n\t\tcon.setAccessible(true);//强制取消Java的权限检测\n\t\tPerson person2 = (Person)con.newInstance(\"zhangsan\");\n\t\tSystem.out.println(\"**\"+person2.getName());\n\t}\n\t/**\n\t *访问非私有的成员变量\n\t */\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t@Test\n\tpublic void getNotPrivateField() throws Exception {\n\t\tConstructor  constructor  = personClass.getConstructor(Long.class,String.class);\n\t\tObject obj = constructor.newInstance(100L,\"zhangsan\");\n\t\t\n\t\tField field = personClass.getField(\"name\");\n\t\tfield.set(obj, \"lisi\");\n\t\tSystem.out.println(field.get(obj));\n\t}\n\t/**\n\t *访问私有的成员变量\n\t */\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t@Test\n\tpublic void getPrivateField() throws Exception {\n\t\tConstructor  constructor  = personClass.getConstructor(Long.class);\n\t\tObject obj = constructor.newInstance(100L);\n\t\t\n\t\tField field2 = personClass.getDeclaredField(\"id\");\n\t\tfield2.setAccessible(true);//强制取消Java的权限检测\n\t\tfield2.set(obj,10000L);\n\t\tSystem.out.println(field2.get(obj));\n\t}\n\t/**\n\t *获取非私有的成员函数\n\t */\n\t@SuppressWarnings({ \"unchecked\" })\n\t@Test\n\tpublic void getNotPrivateMethod() throws Exception {\n\t\tSystem.out.println(personClass.getMethod(\"toString\"));\n\t\t\n\t\tObject obj = personClass.newInstance();//获取空参的构造函数\n\t\tMethod toStringMethod = personClass.getMethod(\"toString\");\n\t\tObject object = toStringMethod.invoke(obj);\n\t\tSystem.out.println(object);\n\t}\n\t/**\n\t *获取私有的成员函数\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\t@Test\n\tpublic void getPrivateMethod() throws Exception {\n\t\tObject obj = personClass.newInstance();//获取空参的构造函数\n\t\tMethod method = personClass.getDeclaredMethod(\"getSomeThing\");\n\t\tmethod.setAccessible(true);\n\t\tObject value = method.invoke(obj);\n\t\tSystem.out.println(value);\n\n\t}\n\t/**\n\t *\n\t */\n\t@Test\n\tpublic void otherMethod() throws Exception {\n\t\t//当前加载这个class文件的那个类加载器对象\n\t\tSystem.out.println(personClass.getClassLoader());\n\t\t//获取某个类实现的所有接口\n\t\tClass[] interfaces = personClass.getInterfaces();\n\t\tfor (Class class1 : interfaces) {\n\t\t\tSystem.out.println(class1);\n\t\t}\n\t\t//反射当前这个类的直接父类\n\t\tSystem.out.println(personClass.getGenericSuperclass());\n\t\t/**\n\t\t * getResourceAsStream这个方法可以获取到一个输入流，这个输入流会关联到name所表示的那个文件上。\n\t\t */\n\t\t//path 不以’/'开头时默认是从此类所在的包下取资源，以’/'开头则是从ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。\n\t\tSystem.out.println(personClass.getResourceAsStream(\"/log4j.properties\"));\n\t\tSystem.out.println(personClass.getResourceAsStream(\"log4j.properties\"));\n\t\t\n\t\t//判断当前的Class对象表示是否是数组\n\t\tSystem.out.println(personClass.isArray());\n\t\tSystem.out.println(new String[3].getClass().isArray());\n\t\t\n\t\t//判断当前的Class对象表示是否是枚举类\n\t\tSystem.out.println(personClass.isEnum());\n\t\tSystem.out.println(Class.forName(\"cn.itcast_04_reflect.City\").isEnum());\n\t\t\n\t\t//判断当前的Class对象表示是否是接口\n\t\tSystem.out.println(personClass.isInterface());\n\t\tSystem.out.println(Class.forName(\"cn.itcast_04_reflect.TestInterface\").isInterface());\n\t\t\n\t\t\n\t}\n\n}\n\n\n```","slug":"大数据/大数据0403-java反射","published":1,"updated":"2018-02-06T07:49:56.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89z7001dv4vffunak3hz","content":"<p>通过反射的方式可以获取class对象中的属性、方法、构造函数等:<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_04_reflect;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyReflect</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> String className = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"rawtypes\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">public</span> Class personClass = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 反射Person类</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception </span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Before</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tclassName = <span class=\"string\">\"cn.itcast_04_reflect.Person\"</span>;</div><div class=\"line\">\t\tpersonClass = Class.forName(className);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *获取某个class文件对象</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getClassName</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(personClass);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *获取某个class文件对象的另一种方式</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getClassName2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(Person.class);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *创建一个class文件表示的实例对象，底层会调用空参数的构造方法</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getNewInstance</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(personClass.newInstance());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *获取非私有的构造函数</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getPublicConstructor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tConstructor  constructor  = personClass.getConstructor(Long.class,String.class);</div><div class=\"line\">\t\tPerson person = (Person)constructor.newInstance(<span class=\"number\">100L</span>,<span class=\"string\">\"zhangsan\"</span>);</div><div class=\"line\">\t\tSystem.out.println(person.getId());</div><div class=\"line\">\t\tSystem.out.println(person.getName());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *获得私有的构造函数</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getPrivateConstructor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tConstructor con = personClass.getDeclaredConstructor(String.class);</div><div class=\"line\">\t\tcon.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//强制取消Java的权限检测</span></div><div class=\"line\">\t\tPerson person2 = (Person)con.newInstance(<span class=\"string\">\"zhangsan\"</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**\"</span>+person2.getName());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *访问非私有的成员变量</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getNotPrivateField</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tConstructor  constructor  = personClass.getConstructor(Long.class,String.class);</div><div class=\"line\">\t\tObject obj = constructor.newInstance(<span class=\"number\">100L</span>,<span class=\"string\">\"zhangsan\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tField field = personClass.getField(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">\t\tfield.set(obj, <span class=\"string\">\"lisi\"</span>);</div><div class=\"line\">\t\tSystem.out.println(field.get(obj));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *访问私有的成员变量</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getPrivateField</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tConstructor  constructor  = personClass.getConstructor(Long.class);</div><div class=\"line\">\t\tObject obj = constructor.newInstance(<span class=\"number\">100L</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tField field2 = personClass.getDeclaredField(<span class=\"string\">\"id\"</span>);</div><div class=\"line\">\t\tfield2.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//强制取消Java的权限检测</span></div><div class=\"line\">\t\tfield2.set(obj,<span class=\"number\">10000L</span>);</div><div class=\"line\">\t\tSystem.out.println(field2.get(obj));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *获取非私有的成员函数</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"unchecked\"</span> &#125;)</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getNotPrivateMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(personClass.getMethod(<span class=\"string\">\"toString\"</span>));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tObject obj = personClass.newInstance();<span class=\"comment\">//获取空参的构造函数</span></div><div class=\"line\">\t\tMethod toStringMethod = personClass.getMethod(<span class=\"string\">\"toString\"</span>);</div><div class=\"line\">\t\tObject object = toStringMethod.invoke(obj);</div><div class=\"line\">\t\tSystem.out.println(object);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *获取私有的成员函数</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getPrivateMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tObject obj = personClass.newInstance();<span class=\"comment\">//获取空参的构造函数</span></div><div class=\"line\">\t\tMethod method = personClass.getDeclaredMethod(<span class=\"string\">\"getSomeThing\"</span>);</div><div class=\"line\">\t\tmethod.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\tObject value = method.invoke(obj);</div><div class=\"line\">\t\tSystem.out.println(value);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">otherMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//当前加载这个class文件的那个类加载器对象</span></div><div class=\"line\">\t\tSystem.out.println(personClass.getClassLoader());</div><div class=\"line\">\t\t<span class=\"comment\">//获取某个类实现的所有接口</span></div><div class=\"line\">\t\tClass[] interfaces = personClass.getInterfaces();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Class class1 : interfaces) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(class1);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//反射当前这个类的直接父类</span></div><div class=\"line\">\t\tSystem.out.println(personClass.getGenericSuperclass());</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t\t * getResourceAsStream这个方法可以获取到一个输入流，这个输入流会关联到name所表示的那个文件上。</span></div><div class=\"line\"><span class=\"comment\">\t\t */</span></div><div class=\"line\">\t\t<span class=\"comment\">//path 不以’/'开头时默认是从此类所在的包下取资源，以’/'开头则是从ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。</span></div><div class=\"line\">\t\tSystem.out.println(personClass.getResourceAsStream(<span class=\"string\">\"/log4j.properties\"</span>));</div><div class=\"line\">\t\tSystem.out.println(personClass.getResourceAsStream(<span class=\"string\">\"log4j.properties\"</span>));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//判断当前的Class对象表示是否是数组</span></div><div class=\"line\">\t\tSystem.out.println(personClass.isArray());</div><div class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> String[<span class=\"number\">3</span>].getClass().isArray());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//判断当前的Class对象表示是否是枚举类</span></div><div class=\"line\">\t\tSystem.out.println(personClass.isEnum());</div><div class=\"line\">\t\tSystem.out.println(Class.forName(<span class=\"string\">\"cn.itcast_04_reflect.City\"</span>).isEnum());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//判断当前的Class对象表示是否是接口</span></div><div class=\"line\">\t\tSystem.out.println(personClass.isInterface());</div><div class=\"line\">\t\tSystem.out.println(Class.forName(<span class=\"string\">\"cn.itcast_04_reflect.TestInterface\"</span>).isInterface());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>通过反射的方式可以获取class对象中的属性、方法、构造函数等:<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_04_reflect;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyReflect</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> String className = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"rawtypes\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">public</span> Class personClass = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 反射Person类</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception </span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Before</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tclassName = <span class=\"string\">\"cn.itcast_04_reflect.Person\"</span>;</div><div class=\"line\">\t\tpersonClass = Class.forName(className);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *获取某个class文件对象</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getClassName</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(personClass);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *获取某个class文件对象的另一种方式</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getClassName2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(Person.class);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *创建一个class文件表示的实例对象，底层会调用空参数的构造方法</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getNewInstance</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(personClass.newInstance());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *获取非私有的构造函数</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getPublicConstructor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tConstructor  constructor  = personClass.getConstructor(Long.class,String.class);</div><div class=\"line\">\t\tPerson person = (Person)constructor.newInstance(<span class=\"number\">100L</span>,<span class=\"string\">\"zhangsan\"</span>);</div><div class=\"line\">\t\tSystem.out.println(person.getId());</div><div class=\"line\">\t\tSystem.out.println(person.getName());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *获得私有的构造函数</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getPrivateConstructor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tConstructor con = personClass.getDeclaredConstructor(String.class);</div><div class=\"line\">\t\tcon.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//强制取消Java的权限检测</span></div><div class=\"line\">\t\tPerson person2 = (Person)con.newInstance(<span class=\"string\">\"zhangsan\"</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"**\"</span>+person2.getName());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *访问非私有的成员变量</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getNotPrivateField</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tConstructor  constructor  = personClass.getConstructor(Long.class,String.class);</div><div class=\"line\">\t\tObject obj = constructor.newInstance(<span class=\"number\">100L</span>,<span class=\"string\">\"zhangsan\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tField field = personClass.getField(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">\t\tfield.set(obj, <span class=\"string\">\"lisi\"</span>);</div><div class=\"line\">\t\tSystem.out.println(field.get(obj));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *访问私有的成员变量</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getPrivateField</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tConstructor  constructor  = personClass.getConstructor(Long.class);</div><div class=\"line\">\t\tObject obj = constructor.newInstance(<span class=\"number\">100L</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tField field2 = personClass.getDeclaredField(<span class=\"string\">\"id\"</span>);</div><div class=\"line\">\t\tfield2.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//强制取消Java的权限检测</span></div><div class=\"line\">\t\tfield2.set(obj,<span class=\"number\">10000L</span>);</div><div class=\"line\">\t\tSystem.out.println(field2.get(obj));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *获取非私有的成员函数</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"unchecked\"</span> &#125;)</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getNotPrivateMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(personClass.getMethod(<span class=\"string\">\"toString\"</span>));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tObject obj = personClass.newInstance();<span class=\"comment\">//获取空参的构造函数</span></div><div class=\"line\">\t\tMethod toStringMethod = personClass.getMethod(<span class=\"string\">\"toString\"</span>);</div><div class=\"line\">\t\tObject object = toStringMethod.invoke(obj);</div><div class=\"line\">\t\tSystem.out.println(object);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *获取私有的成员函数</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getPrivateMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tObject obj = personClass.newInstance();<span class=\"comment\">//获取空参的构造函数</span></div><div class=\"line\">\t\tMethod method = personClass.getDeclaredMethod(<span class=\"string\">\"getSomeThing\"</span>);</div><div class=\"line\">\t\tmethod.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\tObject value = method.invoke(obj);</div><div class=\"line\">\t\tSystem.out.println(value);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">otherMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//当前加载这个class文件的那个类加载器对象</span></div><div class=\"line\">\t\tSystem.out.println(personClass.getClassLoader());</div><div class=\"line\">\t\t<span class=\"comment\">//获取某个类实现的所有接口</span></div><div class=\"line\">\t\tClass[] interfaces = personClass.getInterfaces();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Class class1 : interfaces) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(class1);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//反射当前这个类的直接父类</span></div><div class=\"line\">\t\tSystem.out.println(personClass.getGenericSuperclass());</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t\t * getResourceAsStream这个方法可以获取到一个输入流，这个输入流会关联到name所表示的那个文件上。</span></div><div class=\"line\"><span class=\"comment\">\t\t */</span></div><div class=\"line\">\t\t<span class=\"comment\">//path 不以’/'开头时默认是从此类所在的包下取资源，以’/'开头则是从ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。</span></div><div class=\"line\">\t\tSystem.out.println(personClass.getResourceAsStream(<span class=\"string\">\"/log4j.properties\"</span>));</div><div class=\"line\">\t\tSystem.out.println(personClass.getResourceAsStream(<span class=\"string\">\"log4j.properties\"</span>));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//判断当前的Class对象表示是否是数组</span></div><div class=\"line\">\t\tSystem.out.println(personClass.isArray());</div><div class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> String[<span class=\"number\">3</span>].getClass().isArray());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//判断当前的Class对象表示是否是枚举类</span></div><div class=\"line\">\t\tSystem.out.println(personClass.isEnum());</div><div class=\"line\">\t\tSystem.out.println(Class.forName(<span class=\"string\">\"cn.itcast_04_reflect.City\"</span>).isEnum());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//判断当前的Class对象表示是否是接口</span></div><div class=\"line\">\t\tSystem.out.println(personClass.isInterface());</div><div class=\"line\">\t\tSystem.out.println(Class.forName(<span class=\"string\">\"cn.itcast_04_reflect.TestInterface\"</span>).isInterface());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"大数据0404-java动态代理","toc":true,"date":"2017-12-03T10:18:16.000Z","scaffolds":null,"_content":"\n# 1. 动态代理\n在之前的代码调用阶段，我们用action调用service的方法实现业务即可。  \n由于之前在service中实现的业务可能不能够满足当先客户的要求，需要我们重新修改service中的方法，但是service的方法不只在我们这个模块使用，在其他模块也在调用，其他模块调用的时候，现有的service方法已经能够满足业务需求，所以我们不能只为了我们的业务而修改service，导致其他模块授影响。  \n那怎么办呢？  \n可以通过动态代理的方式，扩展我们的service中的方法实现，使得在原有的方法中增加更多的业务，而不是实际修改service中的方法，这种实现技术就叫做动态代理。  \n动态代理：在不修改原业务的基础上，基于原业务方法，进行重新的扩展，实现新的业务。  \n## 1.1. 例如下面的例子：  \n- 旧业务  \n买家调用action，购买衣服，衣服在数据库的标价为50元，购买流程就是简单的调用。\n- 新业务  \n在原先的价格上可以使用优惠券，但是这个功能在以前没有实现过，我们通过代理类，代理了原先的接口方法，在这个方法的基础上，修改了返回值。\n\t \n代理实现流程：\n1. 书写代理类和代理方法，在代理方法中实现代理Proxy.newProxyInstance\n1. 代理中需要的参数分别为：被代理的类的类加载器soneObjectclass.getClassLoader()，被代理类的所有实现接口new Class[] { Interface.class }，句柄方法new InvocationHandler()\n1. 在句柄方法中复写invoke方法，invoke方法的输入有3个参数Object proxy（代理类对象）, Method method（被代理类的方法）,Object[] args（被代理类方法的传入参数），在这个方法中，我们可以定制化的开发新的业务。\n1. 获取代理类，强转成被代理的接口\n1. 最后，我们可以像没被代理一样，调用接口的认可方法，方法被调用后，方法名和参数列表将被传入代理类的invoke方法中，进行新业务的逻辑流程。\n\n\n```java\n原业务接口IBoss=================================\n/**\n * 这是一个业务的接口，这个接口中的业务就是返回衣服的价格\n * @author wilson\n *\n */\npublic interface IBoss {//接口\n\tint yifu(String size);\n}\n\n原业务实现类====================================\npublic class Boss implements IBoss{\n\tpublic int yifu(String size){\n\t\tSystem.err.println(\"天猫小强旗舰店，老板给客户发快递----衣服型号：\"+size);\n\t\t//这件衣服的价钱，从数据库读取\n\t\treturn 50;\n\t}\n\tpublic void kuzi(){\n\t\tSystem.err.println(\"天猫小强旗舰店，老板给客户发快递----裤子\");\n\t}\n}\n原业务调用====================================\npublic class SaleAction {\n\t\t@Test\n\tpublic void saleByBossSelf() throws Exception {\n\t\tIBoss boss = new Boss();\n\t\tSystem.out.println(\"老板自营！\");\n\t\tint money = boss.yifu(\"xxl\");\n\t\tSystem.out.println(\"衣服成交价：\" + money);\n\t}\n}\n代理类========================================\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\npublic class ProxyBoss {\n\t/**\n\t * 对接口方法进行代理\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T getProxy(final int discountCoupon,\n\t\t\tfinal Class<?> interfaceClass, final Class<?> implementsClass)\n\t\t\tthrows Exception {\n\t\treturn (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(),\n\t\t\t\tnew Class[] { interfaceClass }, new InvocationHandler() {\n\t\t\t\t\tpublic Object invoke(Object proxy, Method method,\n\t\t\t\t\t\t\tObject[] args) throws Throwable {\n\t\t\t\t\t\tInteger returnValue = (Integer) method.invoke(\n\t\t\t\t\t\t\t\timplementsClass.newInstance(), args);// 调用原始对象以后返回的值\n\t\t\t\t\t\treturn returnValue - discountCoupon;\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n}\n\n新业务调用=======================================\nimport org.junit.Test;\nimport cn.itcast_05_proxy.proxyclass.ProxyBoss;\nimport cn.itcast_05_proxy.service.IBoss;\nimport cn.itcast_05_proxy.service.impl.Boss;\n/**\n * 什么是动态代理？ 简单的写一个模板接口，剩下的个性化工作，好给动态代理来完成！\n */\npublic class ProxySaleAction {\n\t/**\n\t *使用代理，在这个代理中，只代理了Boss的yifu方法\n\t *定制化业务，可以改变原接口的参数、返回值等\n\t */\n\t@Test\n\tpublic void saleByProxy() throws Exception {\n\t\tIBoss boss = ProxyBoss.getProxy(10,IBoss.class,Boss.class);// 将代理的方法实例化成接口\n\t\t//IBoss boss = new Boss();// 将代理的方法实例化成接口\n\t\tSystem.out.println(\"代理经营！\");\n\t\tint money = boss.yifu(\"xxl\");// 调用接口的方法，实际上调用方式没有变\n\t\tSystem.out.println(\"衣服成交价：\" + money);\n\t}\n}\n\n```\n","source":"_posts/大数据/大数据0404-java动态代理.md","raw":"---\ntitle: 大数据0404-java动态代理\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - java\n  - 动态代理\ntoc: true\ndate: 2017-12-03 18:18:16\nscaffolds:\n---\n\n# 1. 动态代理\n在之前的代码调用阶段，我们用action调用service的方法实现业务即可。  \n由于之前在service中实现的业务可能不能够满足当先客户的要求，需要我们重新修改service中的方法，但是service的方法不只在我们这个模块使用，在其他模块也在调用，其他模块调用的时候，现有的service方法已经能够满足业务需求，所以我们不能只为了我们的业务而修改service，导致其他模块授影响。  \n那怎么办呢？  \n可以通过动态代理的方式，扩展我们的service中的方法实现，使得在原有的方法中增加更多的业务，而不是实际修改service中的方法，这种实现技术就叫做动态代理。  \n动态代理：在不修改原业务的基础上，基于原业务方法，进行重新的扩展，实现新的业务。  \n## 1.1. 例如下面的例子：  \n- 旧业务  \n买家调用action，购买衣服，衣服在数据库的标价为50元，购买流程就是简单的调用。\n- 新业务  \n在原先的价格上可以使用优惠券，但是这个功能在以前没有实现过，我们通过代理类，代理了原先的接口方法，在这个方法的基础上，修改了返回值。\n\t \n代理实现流程：\n1. 书写代理类和代理方法，在代理方法中实现代理Proxy.newProxyInstance\n1. 代理中需要的参数分别为：被代理的类的类加载器soneObjectclass.getClassLoader()，被代理类的所有实现接口new Class[] { Interface.class }，句柄方法new InvocationHandler()\n1. 在句柄方法中复写invoke方法，invoke方法的输入有3个参数Object proxy（代理类对象）, Method method（被代理类的方法）,Object[] args（被代理类方法的传入参数），在这个方法中，我们可以定制化的开发新的业务。\n1. 获取代理类，强转成被代理的接口\n1. 最后，我们可以像没被代理一样，调用接口的认可方法，方法被调用后，方法名和参数列表将被传入代理类的invoke方法中，进行新业务的逻辑流程。\n\n\n```java\n原业务接口IBoss=================================\n/**\n * 这是一个业务的接口，这个接口中的业务就是返回衣服的价格\n * @author wilson\n *\n */\npublic interface IBoss {//接口\n\tint yifu(String size);\n}\n\n原业务实现类====================================\npublic class Boss implements IBoss{\n\tpublic int yifu(String size){\n\t\tSystem.err.println(\"天猫小强旗舰店，老板给客户发快递----衣服型号：\"+size);\n\t\t//这件衣服的价钱，从数据库读取\n\t\treturn 50;\n\t}\n\tpublic void kuzi(){\n\t\tSystem.err.println(\"天猫小强旗舰店，老板给客户发快递----裤子\");\n\t}\n}\n原业务调用====================================\npublic class SaleAction {\n\t\t@Test\n\tpublic void saleByBossSelf() throws Exception {\n\t\tIBoss boss = new Boss();\n\t\tSystem.out.println(\"老板自营！\");\n\t\tint money = boss.yifu(\"xxl\");\n\t\tSystem.out.println(\"衣服成交价：\" + money);\n\t}\n}\n代理类========================================\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\npublic class ProxyBoss {\n\t/**\n\t * 对接口方法进行代理\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T getProxy(final int discountCoupon,\n\t\t\tfinal Class<?> interfaceClass, final Class<?> implementsClass)\n\t\t\tthrows Exception {\n\t\treturn (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(),\n\t\t\t\tnew Class[] { interfaceClass }, new InvocationHandler() {\n\t\t\t\t\tpublic Object invoke(Object proxy, Method method,\n\t\t\t\t\t\t\tObject[] args) throws Throwable {\n\t\t\t\t\t\tInteger returnValue = (Integer) method.invoke(\n\t\t\t\t\t\t\t\timplementsClass.newInstance(), args);// 调用原始对象以后返回的值\n\t\t\t\t\t\treturn returnValue - discountCoupon;\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n}\n\n新业务调用=======================================\nimport org.junit.Test;\nimport cn.itcast_05_proxy.proxyclass.ProxyBoss;\nimport cn.itcast_05_proxy.service.IBoss;\nimport cn.itcast_05_proxy.service.impl.Boss;\n/**\n * 什么是动态代理？ 简单的写一个模板接口，剩下的个性化工作，好给动态代理来完成！\n */\npublic class ProxySaleAction {\n\t/**\n\t *使用代理，在这个代理中，只代理了Boss的yifu方法\n\t *定制化业务，可以改变原接口的参数、返回值等\n\t */\n\t@Test\n\tpublic void saleByProxy() throws Exception {\n\t\tIBoss boss = ProxyBoss.getProxy(10,IBoss.class,Boss.class);// 将代理的方法实例化成接口\n\t\t//IBoss boss = new Boss();// 将代理的方法实例化成接口\n\t\tSystem.out.println(\"代理经营！\");\n\t\tint money = boss.yifu(\"xxl\");// 调用接口的方法，实际上调用方式没有变\n\t\tSystem.out.println(\"衣服成交价：\" + money);\n\t}\n}\n\n```\n","slug":"大数据/大数据0404-java动态代理","published":1,"updated":"2018-02-06T07:50:02.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89z8001fv4vfkpad7ka5","content":"<h1 id=\"1-动态代理\"><a href=\"#1-动态代理\" class=\"headerlink\" title=\"1. 动态代理\"></a>1. 动态代理</h1><p>在之前的代码调用阶段，我们用action调用service的方法实现业务即可。<br>由于之前在service中实现的业务可能不能够满足当先客户的要求，需要我们重新修改service中的方法，但是service的方法不只在我们这个模块使用，在其他模块也在调用，其他模块调用的时候，现有的service方法已经能够满足业务需求，所以我们不能只为了我们的业务而修改service，导致其他模块授影响。<br>那怎么办呢？<br>可以通过动态代理的方式，扩展我们的service中的方法实现，使得在原有的方法中增加更多的业务，而不是实际修改service中的方法，这种实现技术就叫做动态代理。<br>动态代理：在不修改原业务的基础上，基于原业务方法，进行重新的扩展，实现新的业务。  </p>\n<h2 id=\"1-1-例如下面的例子：\"><a href=\"#1-1-例如下面的例子：\" class=\"headerlink\" title=\"1.1. 例如下面的例子：\"></a>1.1. 例如下面的例子：</h2><ul>\n<li>旧业务<br>买家调用action，购买衣服，衣服在数据库的标价为50元，购买流程就是简单的调用。</li>\n<li>新业务<br>在原先的价格上可以使用优惠券，但是这个功能在以前没有实现过，我们通过代理类，代理了原先的接口方法，在这个方法的基础上，修改了返回值。</li>\n</ul>\n<p>代理实现流程：</p>\n<ol>\n<li>书写代理类和代理方法，在代理方法中实现代理Proxy.newProxyInstance</li>\n<li>代理中需要的参数分别为：被代理的类的类加载器soneObjectclass.getClassLoader()，被代理类的所有实现接口new Class[] { Interface.class }，句柄方法new InvocationHandler()</li>\n<li>在句柄方法中复写invoke方法，invoke方法的输入有3个参数Object proxy（代理类对象）, Method method（被代理类的方法）,Object[] args（被代理类方法的传入参数），在这个方法中，我们可以定制化的开发新的业务。</li>\n<li>获取代理类，强转成被代理的接口</li>\n<li>最后，我们可以像没被代理一样，调用接口的认可方法，方法被调用后，方法名和参数列表将被传入代理类的invoke方法中，进行新业务的逻辑流程。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\">原业务接口IBoss=================================</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 这是一个业务的接口，这个接口中的业务就是返回衣服的价格</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wilson</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBoss</span> </span>&#123;<span class=\"comment\">//接口</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">yifu</span><span class=\"params\">(String size)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">原业务实现类====================================</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boss</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBoss</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">yifu</span><span class=\"params\">(String size)</span></span>&#123;</div><div class=\"line\">\t\tSystem.err.println(<span class=\"string\">\"天猫小强旗舰店，老板给客户发快递----衣服型号：\"</span>+size);</div><div class=\"line\">\t\t<span class=\"comment\">//这件衣服的价钱，从数据库读取</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">50</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">kuzi</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.err.println(<span class=\"string\">\"天猫小强旗舰店，老板给客户发快递----裤子\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">原业务调用====================================</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SaleAction</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saleByBossSelf</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tIBoss boss = <span class=\"keyword\">new</span> Boss();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"老板自营！\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> money = boss.yifu(<span class=\"string\">\"xxl\"</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"衣服成交价：\"</span> + money);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">代理类========================================</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyBoss</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 对接口方法进行代理</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getProxy</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> discountCoupon,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t<span class=\"keyword\">final</span> Class&lt;?&gt; interfaceClass, <span class=\"keyword\">final</span> Class&lt;?&gt; implementsClass)</span></span></div><div class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(),</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Class[] &#123; interfaceClass &#125;, <span class=\"keyword\">new</span> InvocationHandler() &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t\t\t\tObject[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tInteger returnValue = (Integer) method.invoke(</div><div class=\"line\">\t\t\t\t\t\t\t\timplementsClass.newInstance(), args);<span class=\"comment\">// 调用原始对象以后返回的值</span></div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> returnValue - discountCoupon;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">新业务调用=======================================</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.itcast_05_proxy.proxyclass.ProxyBoss;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.itcast_05_proxy.service.IBoss;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.itcast_05_proxy.service.impl.Boss;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 什么是动态代理？ 简单的写一个模板接口，剩下的个性化工作，好给动态代理来完成！</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxySaleAction</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *使用代理，在这个代理中，只代理了Boss的yifu方法</span></div><div class=\"line\"><span class=\"comment\">\t *定制化业务，可以改变原接口的参数、返回值等</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saleByProxy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tIBoss boss = ProxyBoss.getProxy(<span class=\"number\">10</span>,IBoss.class,Boss.class);<span class=\"comment\">// 将代理的方法实例化成接口</span></div><div class=\"line\">\t\t<span class=\"comment\">//IBoss boss = new Boss();// 将代理的方法实例化成接口</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"代理经营！\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> money = boss.yifu(<span class=\"string\">\"xxl\"</span>);<span class=\"comment\">// 调用接口的方法，实际上调用方式没有变</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"衣服成交价：\"</span> + money);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-动态代理\"><a href=\"#1-动态代理\" class=\"headerlink\" title=\"1. 动态代理\"></a>1. 动态代理</h1><p>在之前的代码调用阶段，我们用action调用service的方法实现业务即可。<br>由于之前在service中实现的业务可能不能够满足当先客户的要求，需要我们重新修改service中的方法，但是service的方法不只在我们这个模块使用，在其他模块也在调用，其他模块调用的时候，现有的service方法已经能够满足业务需求，所以我们不能只为了我们的业务而修改service，导致其他模块授影响。<br>那怎么办呢？<br>可以通过动态代理的方式，扩展我们的service中的方法实现，使得在原有的方法中增加更多的业务，而不是实际修改service中的方法，这种实现技术就叫做动态代理。<br>动态代理：在不修改原业务的基础上，基于原业务方法，进行重新的扩展，实现新的业务。  </p>\n<h2 id=\"1-1-例如下面的例子：\"><a href=\"#1-1-例如下面的例子：\" class=\"headerlink\" title=\"1.1. 例如下面的例子：\"></a>1.1. 例如下面的例子：</h2><ul>\n<li>旧业务<br>买家调用action，购买衣服，衣服在数据库的标价为50元，购买流程就是简单的调用。</li>\n<li>新业务<br>在原先的价格上可以使用优惠券，但是这个功能在以前没有实现过，我们通过代理类，代理了原先的接口方法，在这个方法的基础上，修改了返回值。</li>\n</ul>\n<p>代理实现流程：</p>\n<ol>\n<li>书写代理类和代理方法，在代理方法中实现代理Proxy.newProxyInstance</li>\n<li>代理中需要的参数分别为：被代理的类的类加载器soneObjectclass.getClassLoader()，被代理类的所有实现接口new Class[] { Interface.class }，句柄方法new InvocationHandler()</li>\n<li>在句柄方法中复写invoke方法，invoke方法的输入有3个参数Object proxy（代理类对象）, Method method（被代理类的方法）,Object[] args（被代理类方法的传入参数），在这个方法中，我们可以定制化的开发新的业务。</li>\n<li>获取代理类，强转成被代理的接口</li>\n<li>最后，我们可以像没被代理一样，调用接口的认可方法，方法被调用后，方法名和参数列表将被传入代理类的invoke方法中，进行新业务的逻辑流程。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\">原业务接口IBoss=================================</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 这是一个业务的接口，这个接口中的业务就是返回衣服的价格</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wilson</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBoss</span> </span>&#123;<span class=\"comment\">//接口</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">yifu</span><span class=\"params\">(String size)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">原业务实现类====================================</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boss</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBoss</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">yifu</span><span class=\"params\">(String size)</span></span>&#123;</div><div class=\"line\">\t\tSystem.err.println(<span class=\"string\">\"天猫小强旗舰店，老板给客户发快递----衣服型号：\"</span>+size);</div><div class=\"line\">\t\t<span class=\"comment\">//这件衣服的价钱，从数据库读取</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">50</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">kuzi</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tSystem.err.println(<span class=\"string\">\"天猫小强旗舰店，老板给客户发快递----裤子\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">原业务调用====================================</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SaleAction</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saleByBossSelf</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tIBoss boss = <span class=\"keyword\">new</span> Boss();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"老板自营！\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> money = boss.yifu(<span class=\"string\">\"xxl\"</span>);</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"衣服成交价：\"</span> + money);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">代理类========================================</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyBoss</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 对接口方法进行代理</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getProxy</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> discountCoupon,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t<span class=\"keyword\">final</span> Class&lt;?&gt; interfaceClass, <span class=\"keyword\">final</span> Class&lt;?&gt; implementsClass)</span></span></div><div class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(),</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Class[] &#123; interfaceClass &#125;, <span class=\"keyword\">new</span> InvocationHandler() &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t\t\t\tObject[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tInteger returnValue = (Integer) method.invoke(</div><div class=\"line\">\t\t\t\t\t\t\t\timplementsClass.newInstance(), args);<span class=\"comment\">// 调用原始对象以后返回的值</span></div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> returnValue - discountCoupon;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">新业务调用=======================================</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.itcast_05_proxy.proxyclass.ProxyBoss;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.itcast_05_proxy.service.IBoss;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.itcast_05_proxy.service.impl.Boss;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 什么是动态代理？ 简单的写一个模板接口，剩下的个性化工作，好给动态代理来完成！</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxySaleAction</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t *使用代理，在这个代理中，只代理了Boss的yifu方法</span></div><div class=\"line\"><span class=\"comment\">\t *定制化业务，可以改变原接口的参数、返回值等</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saleByProxy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tIBoss boss = ProxyBoss.getProxy(<span class=\"number\">10</span>,IBoss.class,Boss.class);<span class=\"comment\">// 将代理的方法实例化成接口</span></div><div class=\"line\">\t\t<span class=\"comment\">//IBoss boss = new Boss();// 将代理的方法实例化成接口</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"代理经营！\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> money = boss.yifu(<span class=\"string\">\"xxl\"</span>);<span class=\"comment\">// 调用接口的方法，实际上调用方式没有变</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"衣服成交价：\"</span> + money);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"大数据0402-JMS activeMQ","toc":true,"date":"2017-12-03T06:57:03.000Z","scaffolds":null,"_content":"\n# 1. java JMS技术\n## 1.1. 什么是JMS\nJMS即Java<font color=\"red\">消息服务（Java Message Service）</font>应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。  \nJMS是一种与厂商无关的 API，用来访问消息收发系统消息。它类似于JDBC(Java Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。许多厂商都支持 JMS，包括 IBM 的 MQSeries、BEA的 Weblogic JMS service和 Progress 的 SonicMQ，这只是几个例子。 JMS 使您能够通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JMS客户机发送消息。消息是 JMS 中的一种类型对象，由两部分组成：报头和消息主体。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。根据有效负载的类型来划分，可以将消息分为几种类型，它们分别携带：简单文本(TextMessage)、可序列化的对象 (ObjectMessage)、属性集合 (MapMessage)、字节流 (BytesMessage)、原始值流 (StreamMessage)，还有无有效负载的消息 (Message)。\n## 1.2. JMS规范\n### 1.2.1. 专业技术规范\nJMS（Java Messaging Service）是Java平台上有关面向消息中间件(MOM)的技术规范，它便于消息系统中的Java应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发，翻译为Java消息服务。\n### 1.2.2. 体系架构\nJMS由以下元素组成。\n- JMS提供者provider：连接面向消息中间件的，JMS接口的一个实现。提供者可以是Java平台的JMS实现，也可以是非Java平台的面向消息中间件的适配器。\n- JMS客户：生产或消费基于消息的Java的应用程序或对象。\n- JMS生产者：创建并发送消息的JMS客户。\n- JMS消费者：接收消息的JMS客户。\n- JMS消息：包括可以在JMS客户之间传递的数据的对象\n- JMS队列：一个容纳那些被发送的等待阅读的消息的区域。与队列名字所暗示的意思不同，消息的接受顺序并不一定要与消息的发送顺序相同。一旦一个消息被阅读，该消息将被从队列中移走。\n- JMS主题：一种支持发送消息给多个订阅者的机制。\n\n### 1.2.3. Java消息服务应用程序结构支持两种模型\n#### 1.2.3.1. 点对点或队列模型\n在点对点或队列模型下，一个生产者向一个特定的队列发布消息，一个消费者从该队列中读取消息。这里，生产者知道消费者的队列，并直接将消息发送到消费者的队列。    \n![201712315592](http://ovasdkxqr.bkt.clouddn.com/image/blog/201712315592.png)\n这种模式被概括为：  \n- 只有一个消费者将获得消息\n- 生产者不需要在接收者消费该消息期间处于运行状态，接收者也同样不需要在消息发送时处于运行状态。\n- 每一个成功处理的消息都由接收者签收\n\n#### 1.2.3.2. 发布者/订阅者模型\n发布者/订阅者模型支持向一个特定的消息主题发布消息。0或多个订阅者可能对接收来自特定消息主题的消息感兴趣。在这种模型下，发布者和订阅者彼此不知道对方。这种模式好比是匿名公告板。    \n![2017123155942](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017123155942.png)\n这种模式被概括为：\n- 多个消费者可以获得消息\n- 在发布者和订阅者之间存在时间依赖性。发布者需要建立一个订阅（subscription），以便客户能够订阅。订阅者必须保持持续的活动状态以接收消息，除非订阅者建立了持久的订阅。在那种情况下，在订阅者未连接时发布的消息将在订阅者重新连接时重新发布。\n\n# 2. 代码演示\n## 2.1. 下载ActiveMQ\n去官方网站下载：http://activemq.apache.org/\n\n## 2.2. 运行ActiveMQ\n解压缩apache-activemq-5.5.1-bin.zip，\n修改配置文件activeMQ.xml，将0.0.0.0修改为localhost\n```xml\n    <transportConnectors>\n       <transportConnector name=\"openwire\" uri=\"tcp://localhost:61616\"/>\n       <transportConnector name=\"ssl\"     uri=\"ssl://localhost:61617\"/>\n       <transportConnector name=\"stomp\"   uri=\"stomp://localhost:61613\"/>\n       <transportConnector uri=\"http://localhost:8081\"/>\n       <transportConnector uri=\"udp://localhost:61618\"/>\n```\n\n然后双击apache-activemq-5.5.1\\bin\\activemq.bat运行ActiveMQ程序。  \n启动ActiveMQ以后，登陆：http://localhost:8161/admin/，创建一个Queue，命名为FirstQueue。  \n\n# 3. 运行代码\n## 3.1. 常用的JMS实现\n要使用Java消息服务，你必须要有一个JMS提供者，管理会话和队列。既有开源的提供者也有专有的提供者。  \n开源的提供者包括：\n- Apache ActiveMQ\n- JBoss 社区所研发的 HornetQ\n- Joram\n- Coridan的MantaRay\n- The OpenJMS Group的OpenJMS\n- 专有的提供者包括：\n- BEA的BEA WebLogic Server JMS\n- TIBCO Software的EMS\n- GigaSpaces Technologies的GigaSpaces\n- Softwired 2006的iBus\n- IONA Technologies的IONA JMS\n- SeeBeyond的IQManager（2005年8月被Sun Microsystems并购）\n- webMethods的JMS+ -\n- my-channels的Nirvana\n- Sonic Software的SonicMQ\n- SwiftMQ的SwiftMQ\n- IBM的WebSphere MQ\n\n```java\npackage cn.itcast_03_mq.topic;\nimport javax.jms.Connection;      \nimport javax.jms.DeliveryMode;      \nimport javax.jms.Destination;      \nimport javax.jms.JMSException;      \nimport javax.jms.MessageProducer;      \nimport javax.jms.Session;      \nimport javax.jms.TextMessage;      \n     \nimport org.apache.activemq.ActiveMQConnection;      \nimport org.apache.activemq.ActiveMQConnectionFactory;      \n     \npublic class ProducerTool {        \n    private String user = ActiveMQConnection.DEFAULT_USER;         \n    private String password = ActiveMQConnection.DEFAULT_PASSWORD;       \n    private String url = ActiveMQConnection.DEFAULT_BROKER_URL;       \n    private String subject = \"mytopic\";      \n    private Destination destination = null;      \n    private Connection connection = null;      \n    private Session session = null;      \n    private MessageProducer producer = null;\n    // 初始化      \n    private void initialize() throws JMSException, Exception {      \n        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(      \n                user, password, url);      \n        connection = connectionFactory.createConnection();      \n        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);      \n        destination = session.createTopic(subject);      \n        producer = session.createProducer(destination);      \n        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);      \n    }\n    // 发送消息      \n    public void produceMessage(String message) throws JMSException, Exception {      \n        initialize();      \n        TextMessage msg = session.createTextMessage(message);      \n        connection.start();      \n        System.out.println(\"Producer:->Sending message: \" + message);      \n        producer.send(msg);      \n        System.out.println(\"Producer:->Message sent complete!\");      \n    }\n    // 关闭连接      \n    public void close() throws JMSException {      \n        System.out.println(\"Producer:->Closing connection\");      \n        if (producer != null)      \n            producer.close();      \n        if (session != null)      \n            session.close();      \n        if (connection != null)      \n            connection.close();      \n    }      \n}        \n\n----------------------------------------------------------\npackage cn.itcast_03_mq.topic;\nimport java.util.Random;\n\nimport javax.jms.JMSException;      \n\npublic class ProducerTest {      \n     \n    /**    \n     * @param args    \n     */     \n    public static void main(String[] args) throws JMSException, Exception {      \n        ProducerTool producer = new ProducerTool(); \n        Random random = new Random();\n        for(int i=0;i<20;i++){\n        \t\n        \tThread.sleep(random.nextInt(10)*1000);\n        \t\n        \tproducer.produceMessage(\"Hello, world!--\"+i);      \n        \tproducer.close();\n        }\n        \n    }      \n}      \n\n----------------------------------------------------------\npackage cn.itcast_03_mq.topic;\nimport javax.jms.Connection;      \nimport javax.jms.Destination;      \nimport javax.jms.ExceptionListener;\nimport javax.jms.JMSException;      \nimport javax.jms.MessageConsumer;      \nimport javax.jms.Session;      \nimport javax.jms.MessageListener;      \nimport javax.jms.Message;      \nimport javax.jms.TextMessage;      \n     \nimport org.apache.activemq.ActiveMQConnection;      \nimport org.apache.activemq.ActiveMQConnectionFactory;      \n     \npublic class ConsumerTool implements MessageListener,ExceptionListener {      \n    private String user = ActiveMQConnection.DEFAULT_USER;      \n    private String password = ActiveMQConnection.DEFAULT_PASSWORD;      \n    private String url =ActiveMQConnection.DEFAULT_BROKER_URL;      \n    private String subject = \"mytopic\";      \n    private Destination destination = null;      \n    private Connection connection = null;      \n    private Session session = null;      \n    private MessageConsumer consumer = null;  \n    public static Boolean isconnection=false;\n    // 初始化      \n    private void initialize() throws JMSException, Exception {      \n        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(      \n                user, password, url);      \n        connection = connectionFactory.createConnection();      \n        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);      \n        destination = session.createTopic(subject);      \n        consumer = session.createConsumer(destination);     \n    }      \n     \n    // 消费消息      \n    public void consumeMessage() throws JMSException, Exception {      \n        initialize();      \n        connection.start();\n        consumer.setMessageListener(this);    \n        connection.setExceptionListener(this);\n        isconnection=true;\n        System.out.println(\"Consumer:->Begin listening...\");      \n        // 开始监听  \n        // Message message = consumer.receive();      \n    }\n    // 关闭连接      \n    public void close() throws JMSException {      \n        System.out.println(\"Consumer:->Closing connection\");      \n        if (consumer != null)      \n            consumer.close();      \n        if (session != null)      \n            session.close();      \n        if (connection != null)      \n            connection.close();      \n    }\n    // 消息处理函数      \n    public void onMessage(Message message) {      \n        try {      \n            if (message instanceof TextMessage) {      \n                TextMessage txtMsg = (TextMessage) message;      \n                String msg = txtMsg.getText();      \n                System.out.println(\"Consumer:->Received: \" + msg);      \n            } else {      \n                System.out.println(\"Consumer:->Received: \" + message);      \n            }      \n        } catch (JMSException e) {      \n            // TODO Auto-generated catch block      \n            e.printStackTrace();      \n        }      \n    }\n\n\tpublic void onException(JMSException arg0) {\n\t\tisconnection=false;\n\t}      \n}      \n----------------------------------------------------------     \npackage cn.itcast_03_mq.topic;\n\nimport javax.jms.JMSException;\n\npublic class ConsumerTest implements Runnable {\n\tstatic Thread t1 = null;\n\n\t/**\n\t * @param args\n\t * @throws InterruptedException\n\t * @throws InterruptedException\n\t * @throws JMSException\n\t * @throws InterruptedException\n\t */\n\tpublic static void main(String[] args) throws InterruptedException {\n\n\t\tt1 = new Thread(new ConsumerTest());\n\t\tt1.setDaemon(false);\n\t\tt1.start();\n\t\t/**\n\t\t * 如果发生异常，则重启consumer\n\t\t */\n\t\t/*while (true) {\n\t\t\tSystem.out.println(t1.isAlive());\n\t\t\tif (!t1.isAlive()) {\n\t\t\t\tt1 = new Thread(new ConsumerTest());\n\t\t\t\tt1.start();\n\t\t\t\tSystem.out.println(\"重新启动\");\n\t\t\t}\n\t\t\tThread.sleep(5000);\n\t\t}*/\n\t\t// 延时500毫秒之后停止接受消息\n\t\t// Thread.sleep(500);\n\t\t// consumer.close();\n\t}\n\n\tpublic void run() {\n\t\ttry {\n\t\t\tConsumerTool consumer = new ConsumerTool();\n\t\t\tconsumer.consumeMessage();\n\t\t\twhile (ConsumerTool.isconnection) {\t\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t}\n\n\t}\n}\n\n```","source":"_posts/大数据/大数据0402-JMS activeMQ.md","raw":"---\ntitle: 大数据0402-JMS activeMQ\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - JMS\n  - activeMQ\n  - java\ntoc: true\ndate: 2017-12-03 14:57:03\nscaffolds:\n---\n\n# 1. java JMS技术\n## 1.1. 什么是JMS\nJMS即Java<font color=\"red\">消息服务（Java Message Service）</font>应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。  \nJMS是一种与厂商无关的 API，用来访问消息收发系统消息。它类似于JDBC(Java Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。许多厂商都支持 JMS，包括 IBM 的 MQSeries、BEA的 Weblogic JMS service和 Progress 的 SonicMQ，这只是几个例子。 JMS 使您能够通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JMS客户机发送消息。消息是 JMS 中的一种类型对象，由两部分组成：报头和消息主体。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。根据有效负载的类型来划分，可以将消息分为几种类型，它们分别携带：简单文本(TextMessage)、可序列化的对象 (ObjectMessage)、属性集合 (MapMessage)、字节流 (BytesMessage)、原始值流 (StreamMessage)，还有无有效负载的消息 (Message)。\n## 1.2. JMS规范\n### 1.2.1. 专业技术规范\nJMS（Java Messaging Service）是Java平台上有关面向消息中间件(MOM)的技术规范，它便于消息系统中的Java应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发，翻译为Java消息服务。\n### 1.2.2. 体系架构\nJMS由以下元素组成。\n- JMS提供者provider：连接面向消息中间件的，JMS接口的一个实现。提供者可以是Java平台的JMS实现，也可以是非Java平台的面向消息中间件的适配器。\n- JMS客户：生产或消费基于消息的Java的应用程序或对象。\n- JMS生产者：创建并发送消息的JMS客户。\n- JMS消费者：接收消息的JMS客户。\n- JMS消息：包括可以在JMS客户之间传递的数据的对象\n- JMS队列：一个容纳那些被发送的等待阅读的消息的区域。与队列名字所暗示的意思不同，消息的接受顺序并不一定要与消息的发送顺序相同。一旦一个消息被阅读，该消息将被从队列中移走。\n- JMS主题：一种支持发送消息给多个订阅者的机制。\n\n### 1.2.3. Java消息服务应用程序结构支持两种模型\n#### 1.2.3.1. 点对点或队列模型\n在点对点或队列模型下，一个生产者向一个特定的队列发布消息，一个消费者从该队列中读取消息。这里，生产者知道消费者的队列，并直接将消息发送到消费者的队列。    \n![201712315592](http://ovasdkxqr.bkt.clouddn.com/image/blog/201712315592.png)\n这种模式被概括为：  \n- 只有一个消费者将获得消息\n- 生产者不需要在接收者消费该消息期间处于运行状态，接收者也同样不需要在消息发送时处于运行状态。\n- 每一个成功处理的消息都由接收者签收\n\n#### 1.2.3.2. 发布者/订阅者模型\n发布者/订阅者模型支持向一个特定的消息主题发布消息。0或多个订阅者可能对接收来自特定消息主题的消息感兴趣。在这种模型下，发布者和订阅者彼此不知道对方。这种模式好比是匿名公告板。    \n![2017123155942](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017123155942.png)\n这种模式被概括为：\n- 多个消费者可以获得消息\n- 在发布者和订阅者之间存在时间依赖性。发布者需要建立一个订阅（subscription），以便客户能够订阅。订阅者必须保持持续的活动状态以接收消息，除非订阅者建立了持久的订阅。在那种情况下，在订阅者未连接时发布的消息将在订阅者重新连接时重新发布。\n\n# 2. 代码演示\n## 2.1. 下载ActiveMQ\n去官方网站下载：http://activemq.apache.org/\n\n## 2.2. 运行ActiveMQ\n解压缩apache-activemq-5.5.1-bin.zip，\n修改配置文件activeMQ.xml，将0.0.0.0修改为localhost\n```xml\n    <transportConnectors>\n       <transportConnector name=\"openwire\" uri=\"tcp://localhost:61616\"/>\n       <transportConnector name=\"ssl\"     uri=\"ssl://localhost:61617\"/>\n       <transportConnector name=\"stomp\"   uri=\"stomp://localhost:61613\"/>\n       <transportConnector uri=\"http://localhost:8081\"/>\n       <transportConnector uri=\"udp://localhost:61618\"/>\n```\n\n然后双击apache-activemq-5.5.1\\bin\\activemq.bat运行ActiveMQ程序。  \n启动ActiveMQ以后，登陆：http://localhost:8161/admin/，创建一个Queue，命名为FirstQueue。  \n\n# 3. 运行代码\n## 3.1. 常用的JMS实现\n要使用Java消息服务，你必须要有一个JMS提供者，管理会话和队列。既有开源的提供者也有专有的提供者。  \n开源的提供者包括：\n- Apache ActiveMQ\n- JBoss 社区所研发的 HornetQ\n- Joram\n- Coridan的MantaRay\n- The OpenJMS Group的OpenJMS\n- 专有的提供者包括：\n- BEA的BEA WebLogic Server JMS\n- TIBCO Software的EMS\n- GigaSpaces Technologies的GigaSpaces\n- Softwired 2006的iBus\n- IONA Technologies的IONA JMS\n- SeeBeyond的IQManager（2005年8月被Sun Microsystems并购）\n- webMethods的JMS+ -\n- my-channels的Nirvana\n- Sonic Software的SonicMQ\n- SwiftMQ的SwiftMQ\n- IBM的WebSphere MQ\n\n```java\npackage cn.itcast_03_mq.topic;\nimport javax.jms.Connection;      \nimport javax.jms.DeliveryMode;      \nimport javax.jms.Destination;      \nimport javax.jms.JMSException;      \nimport javax.jms.MessageProducer;      \nimport javax.jms.Session;      \nimport javax.jms.TextMessage;      \n     \nimport org.apache.activemq.ActiveMQConnection;      \nimport org.apache.activemq.ActiveMQConnectionFactory;      \n     \npublic class ProducerTool {        \n    private String user = ActiveMQConnection.DEFAULT_USER;         \n    private String password = ActiveMQConnection.DEFAULT_PASSWORD;       \n    private String url = ActiveMQConnection.DEFAULT_BROKER_URL;       \n    private String subject = \"mytopic\";      \n    private Destination destination = null;      \n    private Connection connection = null;      \n    private Session session = null;      \n    private MessageProducer producer = null;\n    // 初始化      \n    private void initialize() throws JMSException, Exception {      \n        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(      \n                user, password, url);      \n        connection = connectionFactory.createConnection();      \n        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);      \n        destination = session.createTopic(subject);      \n        producer = session.createProducer(destination);      \n        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);      \n    }\n    // 发送消息      \n    public void produceMessage(String message) throws JMSException, Exception {      \n        initialize();      \n        TextMessage msg = session.createTextMessage(message);      \n        connection.start();      \n        System.out.println(\"Producer:->Sending message: \" + message);      \n        producer.send(msg);      \n        System.out.println(\"Producer:->Message sent complete!\");      \n    }\n    // 关闭连接      \n    public void close() throws JMSException {      \n        System.out.println(\"Producer:->Closing connection\");      \n        if (producer != null)      \n            producer.close();      \n        if (session != null)      \n            session.close();      \n        if (connection != null)      \n            connection.close();      \n    }      \n}        \n\n----------------------------------------------------------\npackage cn.itcast_03_mq.topic;\nimport java.util.Random;\n\nimport javax.jms.JMSException;      \n\npublic class ProducerTest {      \n     \n    /**    \n     * @param args    \n     */     \n    public static void main(String[] args) throws JMSException, Exception {      \n        ProducerTool producer = new ProducerTool(); \n        Random random = new Random();\n        for(int i=0;i<20;i++){\n        \t\n        \tThread.sleep(random.nextInt(10)*1000);\n        \t\n        \tproducer.produceMessage(\"Hello, world!--\"+i);      \n        \tproducer.close();\n        }\n        \n    }      \n}      \n\n----------------------------------------------------------\npackage cn.itcast_03_mq.topic;\nimport javax.jms.Connection;      \nimport javax.jms.Destination;      \nimport javax.jms.ExceptionListener;\nimport javax.jms.JMSException;      \nimport javax.jms.MessageConsumer;      \nimport javax.jms.Session;      \nimport javax.jms.MessageListener;      \nimport javax.jms.Message;      \nimport javax.jms.TextMessage;      \n     \nimport org.apache.activemq.ActiveMQConnection;      \nimport org.apache.activemq.ActiveMQConnectionFactory;      \n     \npublic class ConsumerTool implements MessageListener,ExceptionListener {      \n    private String user = ActiveMQConnection.DEFAULT_USER;      \n    private String password = ActiveMQConnection.DEFAULT_PASSWORD;      \n    private String url =ActiveMQConnection.DEFAULT_BROKER_URL;      \n    private String subject = \"mytopic\";      \n    private Destination destination = null;      \n    private Connection connection = null;      \n    private Session session = null;      \n    private MessageConsumer consumer = null;  \n    public static Boolean isconnection=false;\n    // 初始化      \n    private void initialize() throws JMSException, Exception {      \n        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(      \n                user, password, url);      \n        connection = connectionFactory.createConnection();      \n        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);      \n        destination = session.createTopic(subject);      \n        consumer = session.createConsumer(destination);     \n    }      \n     \n    // 消费消息      \n    public void consumeMessage() throws JMSException, Exception {      \n        initialize();      \n        connection.start();\n        consumer.setMessageListener(this);    \n        connection.setExceptionListener(this);\n        isconnection=true;\n        System.out.println(\"Consumer:->Begin listening...\");      \n        // 开始监听  \n        // Message message = consumer.receive();      \n    }\n    // 关闭连接      \n    public void close() throws JMSException {      \n        System.out.println(\"Consumer:->Closing connection\");      \n        if (consumer != null)      \n            consumer.close();      \n        if (session != null)      \n            session.close();      \n        if (connection != null)      \n            connection.close();      \n    }\n    // 消息处理函数      \n    public void onMessage(Message message) {      \n        try {      \n            if (message instanceof TextMessage) {      \n                TextMessage txtMsg = (TextMessage) message;      \n                String msg = txtMsg.getText();      \n                System.out.println(\"Consumer:->Received: \" + msg);      \n            } else {      \n                System.out.println(\"Consumer:->Received: \" + message);      \n            }      \n        } catch (JMSException e) {      \n            // TODO Auto-generated catch block      \n            e.printStackTrace();      \n        }      \n    }\n\n\tpublic void onException(JMSException arg0) {\n\t\tisconnection=false;\n\t}      \n}      \n----------------------------------------------------------     \npackage cn.itcast_03_mq.topic;\n\nimport javax.jms.JMSException;\n\npublic class ConsumerTest implements Runnable {\n\tstatic Thread t1 = null;\n\n\t/**\n\t * @param args\n\t * @throws InterruptedException\n\t * @throws InterruptedException\n\t * @throws JMSException\n\t * @throws InterruptedException\n\t */\n\tpublic static void main(String[] args) throws InterruptedException {\n\n\t\tt1 = new Thread(new ConsumerTest());\n\t\tt1.setDaemon(false);\n\t\tt1.start();\n\t\t/**\n\t\t * 如果发生异常，则重启consumer\n\t\t */\n\t\t/*while (true) {\n\t\t\tSystem.out.println(t1.isAlive());\n\t\t\tif (!t1.isAlive()) {\n\t\t\t\tt1 = new Thread(new ConsumerTest());\n\t\t\t\tt1.start();\n\t\t\t\tSystem.out.println(\"重新启动\");\n\t\t\t}\n\t\t\tThread.sleep(5000);\n\t\t}*/\n\t\t// 延时500毫秒之后停止接受消息\n\t\t// Thread.sleep(500);\n\t\t// consumer.close();\n\t}\n\n\tpublic void run() {\n\t\ttry {\n\t\t\tConsumerTool consumer = new ConsumerTool();\n\t\t\tconsumer.consumeMessage();\n\t\t\twhile (ConsumerTool.isconnection) {\t\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t}\n\n\t}\n}\n\n```","slug":"大数据/大数据0402-JMS activeMQ","published":1,"updated":"2018-02-06T07:49:47.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89zb001iv4vf0zl4eelh","content":"<h1 id=\"1-java-JMS技术\"><a href=\"#1-java-JMS技术\" class=\"headerlink\" title=\"1. java JMS技术\"></a>1. java JMS技术</h1><h2 id=\"1-1-什么是JMS\"><a href=\"#1-1-什么是JMS\" class=\"headerlink\" title=\"1.1. 什么是JMS\"></a>1.1. 什么是JMS</h2><p>JMS即Java<font color=\"red\">消息服务（Java Message Service）</font>应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。<br>JMS是一种与厂商无关的 API，用来访问消息收发系统消息。它类似于JDBC(Java Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。许多厂商都支持 JMS，包括 IBM 的 MQSeries、BEA的 Weblogic JMS service和 Progress 的 SonicMQ，这只是几个例子。 JMS 使您能够通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JMS客户机发送消息。消息是 JMS 中的一种类型对象，由两部分组成：报头和消息主体。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。根据有效负载的类型来划分，可以将消息分为几种类型，它们分别携带：简单文本(TextMessage)、可序列化的对象 (ObjectMessage)、属性集合 (MapMessage)、字节流 (BytesMessage)、原始值流 (StreamMessage)，还有无有效负载的消息 (Message)。</p>\n<h2 id=\"1-2-JMS规范\"><a href=\"#1-2-JMS规范\" class=\"headerlink\" title=\"1.2. JMS规范\"></a>1.2. JMS规范</h2><h3 id=\"1-2-1-专业技术规范\"><a href=\"#1-2-1-专业技术规范\" class=\"headerlink\" title=\"1.2.1. 专业技术规范\"></a>1.2.1. 专业技术规范</h3><p>JMS（Java Messaging Service）是Java平台上有关面向消息中间件(MOM)的技术规范，它便于消息系统中的Java应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发，翻译为Java消息服务。</p>\n<h3 id=\"1-2-2-体系架构\"><a href=\"#1-2-2-体系架构\" class=\"headerlink\" title=\"1.2.2. 体系架构\"></a>1.2.2. 体系架构</h3><p>JMS由以下元素组成。</p>\n<ul>\n<li>JMS提供者provider：连接面向消息中间件的，JMS接口的一个实现。提供者可以是Java平台的JMS实现，也可以是非Java平台的面向消息中间件的适配器。</li>\n<li>JMS客户：生产或消费基于消息的Java的应用程序或对象。</li>\n<li>JMS生产者：创建并发送消息的JMS客户。</li>\n<li>JMS消费者：接收消息的JMS客户。</li>\n<li>JMS消息：包括可以在JMS客户之间传递的数据的对象</li>\n<li>JMS队列：一个容纳那些被发送的等待阅读的消息的区域。与队列名字所暗示的意思不同，消息的接受顺序并不一定要与消息的发送顺序相同。一旦一个消息被阅读，该消息将被从队列中移走。</li>\n<li>JMS主题：一种支持发送消息给多个订阅者的机制。</li>\n</ul>\n<h3 id=\"1-2-3-Java消息服务应用程序结构支持两种模型\"><a href=\"#1-2-3-Java消息服务应用程序结构支持两种模型\" class=\"headerlink\" title=\"1.2.3. Java消息服务应用程序结构支持两种模型\"></a>1.2.3. Java消息服务应用程序结构支持两种模型</h3><h4 id=\"1-2-3-1-点对点或队列模型\"><a href=\"#1-2-3-1-点对点或队列模型\" class=\"headerlink\" title=\"1.2.3.1. 点对点或队列模型\"></a>1.2.3.1. 点对点或队列模型</h4><p>在点对点或队列模型下，一个生产者向一个特定的队列发布消息，一个消费者从该队列中读取消息。这里，生产者知道消费者的队列，并直接将消息发送到消费者的队列。<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/201712315592.png\" alt=\"201712315592\"><br>这种模式被概括为：  </p>\n<ul>\n<li>只有一个消费者将获得消息</li>\n<li>生产者不需要在接收者消费该消息期间处于运行状态，接收者也同样不需要在消息发送时处于运行状态。</li>\n<li>每一个成功处理的消息都由接收者签收</li>\n</ul>\n<h4 id=\"1-2-3-2-发布者-订阅者模型\"><a href=\"#1-2-3-2-发布者-订阅者模型\" class=\"headerlink\" title=\"1.2.3.2. 发布者/订阅者模型\"></a>1.2.3.2. 发布者/订阅者模型</h4><p>发布者/订阅者模型支持向一个特定的消息主题发布消息。0或多个订阅者可能对接收来自特定消息主题的消息感兴趣。在这种模型下，发布者和订阅者彼此不知道对方。这种模式好比是匿名公告板。<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017123155942.png\" alt=\"2017123155942\"><br>这种模式被概括为：</p>\n<ul>\n<li>多个消费者可以获得消息</li>\n<li>在发布者和订阅者之间存在时间依赖性。发布者需要建立一个订阅（subscription），以便客户能够订阅。订阅者必须保持持续的活动状态以接收消息，除非订阅者建立了持久的订阅。在那种情况下，在订阅者未连接时发布的消息将在订阅者重新连接时重新发布。</li>\n</ul>\n<h1 id=\"2-代码演示\"><a href=\"#2-代码演示\" class=\"headerlink\" title=\"2. 代码演示\"></a>2. 代码演示</h1><h2 id=\"2-1-下载ActiveMQ\"><a href=\"#2-1-下载ActiveMQ\" class=\"headerlink\" title=\"2.1. 下载ActiveMQ\"></a>2.1. 下载ActiveMQ</h2><p>去官方网站下载：<a href=\"http://activemq.apache.org/\" target=\"_blank\" rel=\"external\">http://activemq.apache.org/</a></p>\n<h2 id=\"2-2-运行ActiveMQ\"><a href=\"#2-2-运行ActiveMQ\" class=\"headerlink\" title=\"2.2. 运行ActiveMQ\"></a>2.2. 运行ActiveMQ</h2><p>解压缩apache-activemq-5.5.1-bin.zip，<br>修改配置文件activeMQ.xml，将0.0.0.0修改为localhost<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transportConnectors</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">name</span>=<span class=\"string\">\"openwire\"</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"tcp://localhost:61616\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ssl\"</span>     <span class=\"attr\">uri</span>=<span class=\"string\">\"ssl://localhost:61617\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">name</span>=<span class=\"string\">\"stomp\"</span>   <span class=\"attr\">uri</span>=<span class=\"string\">\"stomp://localhost:61613\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://localhost:8081\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"udp://localhost:61618\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后双击apache-activemq-5.5.1\\bin\\activemq.bat运行ActiveMQ程序。<br>启动ActiveMQ以后，登陆：<a href=\"http://localhost:8161/admin/，创建一个Queue，命名为FirstQueue。\" target=\"_blank\" rel=\"external\">http://localhost:8161/admin/，创建一个Queue，命名为FirstQueue。</a>  </p>\n<h1 id=\"3-运行代码\"><a href=\"#3-运行代码\" class=\"headerlink\" title=\"3. 运行代码\"></a>3. 运行代码</h1><h2 id=\"3-1-常用的JMS实现\"><a href=\"#3-1-常用的JMS实现\" class=\"headerlink\" title=\"3.1. 常用的JMS实现\"></a>3.1. 常用的JMS实现</h2><p>要使用Java消息服务，你必须要有一个JMS提供者，管理会话和队列。既有开源的提供者也有专有的提供者。<br>开源的提供者包括：</p>\n<ul>\n<li>Apache ActiveMQ</li>\n<li>JBoss 社区所研发的 HornetQ</li>\n<li>Joram</li>\n<li>Coridan的MantaRay</li>\n<li>The OpenJMS Group的OpenJMS</li>\n<li>专有的提供者包括：</li>\n<li>BEA的BEA WebLogic Server JMS</li>\n<li>TIBCO Software的EMS</li>\n<li>GigaSpaces Technologies的GigaSpaces</li>\n<li>Softwired 2006的iBus</li>\n<li>IONA Technologies的IONA JMS</li>\n<li>SeeBeyond的IQManager（2005年8月被Sun Microsystems并购）</li>\n<li>webMethods的JMS+ -</li>\n<li>my-channels的Nirvana</li>\n<li>Sonic Software的SonicMQ</li>\n<li>SwiftMQ的SwiftMQ</li>\n<li>IBM的WebSphere MQ</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_03_mq.topic;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Connection;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.DeliveryMode;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Destination;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.JMSException;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.MessageProducer;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Session;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.TextMessage;      </div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.activemq.ActiveMQConnection;      </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.activemq.ActiveMQConnectionFactory;      </div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerTool</span> </span>&#123;        </div><div class=\"line\">    <span class=\"keyword\">private</span> String user = ActiveMQConnection.DEFAULT_USER;         </div><div class=\"line\">    <span class=\"keyword\">private</span> String password = ActiveMQConnection.DEFAULT_PASSWORD;       </div><div class=\"line\">    <span class=\"keyword\">private</span> String url = ActiveMQConnection.DEFAULT_BROKER_URL;       </div><div class=\"line\">    <span class=\"keyword\">private</span> String subject = <span class=\"string\">\"mytopic\"</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> Destination destination = <span class=\"keyword\">null</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> Connection connection = <span class=\"keyword\">null</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> Session session = <span class=\"keyword\">null</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> MessageProducer producer = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"comment\">// 初始化      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JMSException, Exception </span>&#123;      </div><div class=\"line\">        ActiveMQConnectionFactory connectionFactory = <span class=\"keyword\">new</span> ActiveMQConnectionFactory(      </div><div class=\"line\">                user, password, url);      </div><div class=\"line\">        connection = connectionFactory.createConnection();      </div><div class=\"line\">        session = connection.createSession(<span class=\"keyword\">false</span>, Session.AUTO_ACKNOWLEDGE);      </div><div class=\"line\">        destination = session.createTopic(subject);      </div><div class=\"line\">        producer = session.createProducer(destination);      </div><div class=\"line\">        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);      </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 发送消息      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">produceMessage</span><span class=\"params\">(String message)</span> <span class=\"keyword\">throws</span> JMSException, Exception </span>&#123;      </div><div class=\"line\">        initialize();      </div><div class=\"line\">        TextMessage msg = session.createTextMessage(message);      </div><div class=\"line\">        connection.start();      </div><div class=\"line\">        System.out.println(<span class=\"string\">\"Producer:-&gt;Sending message: \"</span> + message);      </div><div class=\"line\">        producer.send(msg);      </div><div class=\"line\">        System.out.println(<span class=\"string\">\"Producer:-&gt;Message sent complete!\"</span>);      </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 关闭连接      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JMSException </span>&#123;      </div><div class=\"line\">        System.out.println(<span class=\"string\">\"Producer:-&gt;Closing connection\"</span>);      </div><div class=\"line\">        <span class=\"keyword\">if</span> (producer != <span class=\"keyword\">null</span>)      </div><div class=\"line\">            producer.close();      </div><div class=\"line\">        <span class=\"keyword\">if</span> (session != <span class=\"keyword\">null</span>)      </div><div class=\"line\">            session.close();      </div><div class=\"line\">        <span class=\"keyword\">if</span> (connection != <span class=\"keyword\">null</span>)      </div><div class=\"line\">            connection.close();      </div><div class=\"line\">    &#125;      </div><div class=\"line\">&#125;        </div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_03_mq.topic;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.JMSException;      </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerTest</span> </span>&#123;      </div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**    </span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args    </span></div><div class=\"line\"><span class=\"comment\">     */</span>     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> JMSException, Exception </span>&#123;      </div><div class=\"line\">        ProducerTool producer = <span class=\"keyword\">new</span> ProducerTool(); </div><div class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;</div><div class=\"line\">        \t</div><div class=\"line\">        \tThread.sleep(random.nextInt(<span class=\"number\">10</span>)*<span class=\"number\">1000</span>);</div><div class=\"line\">        \t</div><div class=\"line\">        \tproducer.produceMessage(<span class=\"string\">\"Hello, world!--\"</span>+i);      </div><div class=\"line\">        \tproducer.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;      </div><div class=\"line\">&#125;      </div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_03_mq.topic;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Connection;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Destination;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.ExceptionListener;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.JMSException;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.MessageConsumer;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Session;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.MessageListener;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Message;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.TextMessage;      </div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.activemq.ActiveMQConnection;      </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.activemq.ActiveMQConnectionFactory;      </div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerTool</span> <span class=\"keyword\">implements</span> <span class=\"title\">MessageListener</span>,<span class=\"title\">ExceptionListener</span> </span>&#123;      </div><div class=\"line\">    <span class=\"keyword\">private</span> String user = ActiveMQConnection.DEFAULT_USER;      </div><div class=\"line\">    <span class=\"keyword\">private</span> String password = ActiveMQConnection.DEFAULT_PASSWORD;      </div><div class=\"line\">    <span class=\"keyword\">private</span> String url =ActiveMQConnection.DEFAULT_BROKER_URL;      </div><div class=\"line\">    <span class=\"keyword\">private</span> String subject = <span class=\"string\">\"mytopic\"</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> Destination destination = <span class=\"keyword\">null</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> Connection connection = <span class=\"keyword\">null</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> Session session = <span class=\"keyword\">null</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> MessageConsumer consumer = <span class=\"keyword\">null</span>;  </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean isconnection=<span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"comment\">// 初始化      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JMSException, Exception </span>&#123;      </div><div class=\"line\">        ActiveMQConnectionFactory connectionFactory = <span class=\"keyword\">new</span> ActiveMQConnectionFactory(      </div><div class=\"line\">                user, password, url);      </div><div class=\"line\">        connection = connectionFactory.createConnection();      </div><div class=\"line\">        session = connection.createSession(<span class=\"keyword\">false</span>, Session.AUTO_ACKNOWLEDGE);      </div><div class=\"line\">        destination = session.createTopic(subject);      </div><div class=\"line\">        consumer = session.createConsumer(destination);     </div><div class=\"line\">    &#125;      </div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">// 消费消息      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">consumeMessage</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JMSException, Exception </span>&#123;      </div><div class=\"line\">        initialize();      </div><div class=\"line\">        connection.start();</div><div class=\"line\">        consumer.setMessageListener(<span class=\"keyword\">this</span>);    </div><div class=\"line\">        connection.setExceptionListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        isconnection=<span class=\"keyword\">true</span>;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Consumer:-&gt;Begin listening...\"</span>);      </div><div class=\"line\">        <span class=\"comment\">// 开始监听  </span></div><div class=\"line\">        <span class=\"comment\">// Message message = consumer.receive();      </span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 关闭连接      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JMSException </span>&#123;      </div><div class=\"line\">        System.out.println(<span class=\"string\">\"Consumer:-&gt;Closing connection\"</span>);      </div><div class=\"line\">        <span class=\"keyword\">if</span> (consumer != <span class=\"keyword\">null</span>)      </div><div class=\"line\">            consumer.close();      </div><div class=\"line\">        <span class=\"keyword\">if</span> (session != <span class=\"keyword\">null</span>)      </div><div class=\"line\">            session.close();      </div><div class=\"line\">        <span class=\"keyword\">if</span> (connection != <span class=\"keyword\">null</span>)      </div><div class=\"line\">            connection.close();      </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 消息处理函数      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(Message message)</span> </span>&#123;      </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;      </div><div class=\"line\">            <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> TextMessage) &#123;      </div><div class=\"line\">                TextMessage txtMsg = (TextMessage) message;      </div><div class=\"line\">                String msg = txtMsg.getText();      </div><div class=\"line\">                System.out.println(<span class=\"string\">\"Consumer:-&gt;Received: \"</span> + msg);      </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;      </div><div class=\"line\">                System.out.println(<span class=\"string\">\"Consumer:-&gt;Received: \"</span> + message);      </div><div class=\"line\">            &#125;      </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JMSException e) &#123;      </div><div class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block      </span></div><div class=\"line\">            e.printStackTrace();      </div><div class=\"line\">        &#125;      </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onException</span><span class=\"params\">(JMSException arg0)</span> </span>&#123;</div><div class=\"line\">\t\tisconnection=<span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;      </div><div class=\"line\">&#125;      </div><div class=\"line\">----------------------------------------------------------     </div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_03_mq.topic;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.JMSException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> Thread t1 = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> args</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> JMSException</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tt1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ConsumerTest());</div><div class=\"line\">\t\tt1.setDaemon(<span class=\"keyword\">false</span>);</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t\t * 如果发生异常，则重启consumer</span></div><div class=\"line\"><span class=\"comment\">\t\t */</span></div><div class=\"line\">\t\t<span class=\"comment\">/*while (true) &#123;</span></div><div class=\"line\"><span class=\"comment\">\t\t\tSystem.out.println(t1.isAlive());</span></div><div class=\"line\"><span class=\"comment\">\t\t\tif (!t1.isAlive()) &#123;</span></div><div class=\"line\"><span class=\"comment\">\t\t\t\tt1 = new Thread(new ConsumerTest());</span></div><div class=\"line\"><span class=\"comment\">\t\t\t\tt1.start();</span></div><div class=\"line\"><span class=\"comment\">\t\t\t\tSystem.out.println(\"重新启动\");</span></div><div class=\"line\"><span class=\"comment\">\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">\t\t\tThread.sleep(5000);</span></div><div class=\"line\"><span class=\"comment\">\t\t&#125;*/</span></div><div class=\"line\">\t\t<span class=\"comment\">// 延时500毫秒之后停止接受消息</span></div><div class=\"line\">\t\t<span class=\"comment\">// Thread.sleep(500);</span></div><div class=\"line\">\t\t<span class=\"comment\">// consumer.close();</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tConsumerTool consumer = <span class=\"keyword\">new</span> ConsumerTool();</div><div class=\"line\">\t\t\tconsumer.consumeMessage();</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (ConsumerTool.isconnection) &#123;\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-java-JMS技术\"><a href=\"#1-java-JMS技术\" class=\"headerlink\" title=\"1. java JMS技术\"></a>1. java JMS技术</h1><h2 id=\"1-1-什么是JMS\"><a href=\"#1-1-什么是JMS\" class=\"headerlink\" title=\"1.1. 什么是JMS\"></a>1.1. 什么是JMS</h2><p>JMS即Java<font color=\"red\">消息服务（Java Message Service）</font>应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。<br>JMS是一种与厂商无关的 API，用来访问消息收发系统消息。它类似于JDBC(Java Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。许多厂商都支持 JMS，包括 IBM 的 MQSeries、BEA的 Weblogic JMS service和 Progress 的 SonicMQ，这只是几个例子。 JMS 使您能够通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JMS客户机发送消息。消息是 JMS 中的一种类型对象，由两部分组成：报头和消息主体。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。根据有效负载的类型来划分，可以将消息分为几种类型，它们分别携带：简单文本(TextMessage)、可序列化的对象 (ObjectMessage)、属性集合 (MapMessage)、字节流 (BytesMessage)、原始值流 (StreamMessage)，还有无有效负载的消息 (Message)。</p>\n<h2 id=\"1-2-JMS规范\"><a href=\"#1-2-JMS规范\" class=\"headerlink\" title=\"1.2. JMS规范\"></a>1.2. JMS规范</h2><h3 id=\"1-2-1-专业技术规范\"><a href=\"#1-2-1-专业技术规范\" class=\"headerlink\" title=\"1.2.1. 专业技术规范\"></a>1.2.1. 专业技术规范</h3><p>JMS（Java Messaging Service）是Java平台上有关面向消息中间件(MOM)的技术规范，它便于消息系统中的Java应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发，翻译为Java消息服务。</p>\n<h3 id=\"1-2-2-体系架构\"><a href=\"#1-2-2-体系架构\" class=\"headerlink\" title=\"1.2.2. 体系架构\"></a>1.2.2. 体系架构</h3><p>JMS由以下元素组成。</p>\n<ul>\n<li>JMS提供者provider：连接面向消息中间件的，JMS接口的一个实现。提供者可以是Java平台的JMS实现，也可以是非Java平台的面向消息中间件的适配器。</li>\n<li>JMS客户：生产或消费基于消息的Java的应用程序或对象。</li>\n<li>JMS生产者：创建并发送消息的JMS客户。</li>\n<li>JMS消费者：接收消息的JMS客户。</li>\n<li>JMS消息：包括可以在JMS客户之间传递的数据的对象</li>\n<li>JMS队列：一个容纳那些被发送的等待阅读的消息的区域。与队列名字所暗示的意思不同，消息的接受顺序并不一定要与消息的发送顺序相同。一旦一个消息被阅读，该消息将被从队列中移走。</li>\n<li>JMS主题：一种支持发送消息给多个订阅者的机制。</li>\n</ul>\n<h3 id=\"1-2-3-Java消息服务应用程序结构支持两种模型\"><a href=\"#1-2-3-Java消息服务应用程序结构支持两种模型\" class=\"headerlink\" title=\"1.2.3. Java消息服务应用程序结构支持两种模型\"></a>1.2.3. Java消息服务应用程序结构支持两种模型</h3><h4 id=\"1-2-3-1-点对点或队列模型\"><a href=\"#1-2-3-1-点对点或队列模型\" class=\"headerlink\" title=\"1.2.3.1. 点对点或队列模型\"></a>1.2.3.1. 点对点或队列模型</h4><p>在点对点或队列模型下，一个生产者向一个特定的队列发布消息，一个消费者从该队列中读取消息。这里，生产者知道消费者的队列，并直接将消息发送到消费者的队列。<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/201712315592.png\" alt=\"201712315592\"><br>这种模式被概括为：  </p>\n<ul>\n<li>只有一个消费者将获得消息</li>\n<li>生产者不需要在接收者消费该消息期间处于运行状态，接收者也同样不需要在消息发送时处于运行状态。</li>\n<li>每一个成功处理的消息都由接收者签收</li>\n</ul>\n<h4 id=\"1-2-3-2-发布者-订阅者模型\"><a href=\"#1-2-3-2-发布者-订阅者模型\" class=\"headerlink\" title=\"1.2.3.2. 发布者/订阅者模型\"></a>1.2.3.2. 发布者/订阅者模型</h4><p>发布者/订阅者模型支持向一个特定的消息主题发布消息。0或多个订阅者可能对接收来自特定消息主题的消息感兴趣。在这种模型下，发布者和订阅者彼此不知道对方。这种模式好比是匿名公告板。<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017123155942.png\" alt=\"2017123155942\"><br>这种模式被概括为：</p>\n<ul>\n<li>多个消费者可以获得消息</li>\n<li>在发布者和订阅者之间存在时间依赖性。发布者需要建立一个订阅（subscription），以便客户能够订阅。订阅者必须保持持续的活动状态以接收消息，除非订阅者建立了持久的订阅。在那种情况下，在订阅者未连接时发布的消息将在订阅者重新连接时重新发布。</li>\n</ul>\n<h1 id=\"2-代码演示\"><a href=\"#2-代码演示\" class=\"headerlink\" title=\"2. 代码演示\"></a>2. 代码演示</h1><h2 id=\"2-1-下载ActiveMQ\"><a href=\"#2-1-下载ActiveMQ\" class=\"headerlink\" title=\"2.1. 下载ActiveMQ\"></a>2.1. 下载ActiveMQ</h2><p>去官方网站下载：<a href=\"http://activemq.apache.org/\" target=\"_blank\" rel=\"external\">http://activemq.apache.org/</a></p>\n<h2 id=\"2-2-运行ActiveMQ\"><a href=\"#2-2-运行ActiveMQ\" class=\"headerlink\" title=\"2.2. 运行ActiveMQ\"></a>2.2. 运行ActiveMQ</h2><p>解压缩apache-activemq-5.5.1-bin.zip，<br>修改配置文件activeMQ.xml，将0.0.0.0修改为localhost<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transportConnectors</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">name</span>=<span class=\"string\">\"openwire\"</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"tcp://localhost:61616\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ssl\"</span>     <span class=\"attr\">uri</span>=<span class=\"string\">\"ssl://localhost:61617\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">name</span>=<span class=\"string\">\"stomp\"</span>   <span class=\"attr\">uri</span>=<span class=\"string\">\"stomp://localhost:61613\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://localhost:8081\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">transportConnector</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"udp://localhost:61618\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后双击apache-activemq-5.5.1\\bin\\activemq.bat运行ActiveMQ程序。<br>启动ActiveMQ以后，登陆：<a href=\"http://localhost:8161/admin/，创建一个Queue，命名为FirstQueue。\" target=\"_blank\" rel=\"external\">http://localhost:8161/admin/，创建一个Queue，命名为FirstQueue。</a>  </p>\n<h1 id=\"3-运行代码\"><a href=\"#3-运行代码\" class=\"headerlink\" title=\"3. 运行代码\"></a>3. 运行代码</h1><h2 id=\"3-1-常用的JMS实现\"><a href=\"#3-1-常用的JMS实现\" class=\"headerlink\" title=\"3.1. 常用的JMS实现\"></a>3.1. 常用的JMS实现</h2><p>要使用Java消息服务，你必须要有一个JMS提供者，管理会话和队列。既有开源的提供者也有专有的提供者。<br>开源的提供者包括：</p>\n<ul>\n<li>Apache ActiveMQ</li>\n<li>JBoss 社区所研发的 HornetQ</li>\n<li>Joram</li>\n<li>Coridan的MantaRay</li>\n<li>The OpenJMS Group的OpenJMS</li>\n<li>专有的提供者包括：</li>\n<li>BEA的BEA WebLogic Server JMS</li>\n<li>TIBCO Software的EMS</li>\n<li>GigaSpaces Technologies的GigaSpaces</li>\n<li>Softwired 2006的iBus</li>\n<li>IONA Technologies的IONA JMS</li>\n<li>SeeBeyond的IQManager（2005年8月被Sun Microsystems并购）</li>\n<li>webMethods的JMS+ -</li>\n<li>my-channels的Nirvana</li>\n<li>Sonic Software的SonicMQ</li>\n<li>SwiftMQ的SwiftMQ</li>\n<li>IBM的WebSphere MQ</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_03_mq.topic;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Connection;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.DeliveryMode;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Destination;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.JMSException;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.MessageProducer;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Session;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.TextMessage;      </div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.activemq.ActiveMQConnection;      </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.activemq.ActiveMQConnectionFactory;      </div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerTool</span> </span>&#123;        </div><div class=\"line\">    <span class=\"keyword\">private</span> String user = ActiveMQConnection.DEFAULT_USER;         </div><div class=\"line\">    <span class=\"keyword\">private</span> String password = ActiveMQConnection.DEFAULT_PASSWORD;       </div><div class=\"line\">    <span class=\"keyword\">private</span> String url = ActiveMQConnection.DEFAULT_BROKER_URL;       </div><div class=\"line\">    <span class=\"keyword\">private</span> String subject = <span class=\"string\">\"mytopic\"</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> Destination destination = <span class=\"keyword\">null</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> Connection connection = <span class=\"keyword\">null</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> Session session = <span class=\"keyword\">null</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> MessageProducer producer = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"comment\">// 初始化      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JMSException, Exception </span>&#123;      </div><div class=\"line\">        ActiveMQConnectionFactory connectionFactory = <span class=\"keyword\">new</span> ActiveMQConnectionFactory(      </div><div class=\"line\">                user, password, url);      </div><div class=\"line\">        connection = connectionFactory.createConnection();      </div><div class=\"line\">        session = connection.createSession(<span class=\"keyword\">false</span>, Session.AUTO_ACKNOWLEDGE);      </div><div class=\"line\">        destination = session.createTopic(subject);      </div><div class=\"line\">        producer = session.createProducer(destination);      </div><div class=\"line\">        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);      </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 发送消息      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">produceMessage</span><span class=\"params\">(String message)</span> <span class=\"keyword\">throws</span> JMSException, Exception </span>&#123;      </div><div class=\"line\">        initialize();      </div><div class=\"line\">        TextMessage msg = session.createTextMessage(message);      </div><div class=\"line\">        connection.start();      </div><div class=\"line\">        System.out.println(<span class=\"string\">\"Producer:-&gt;Sending message: \"</span> + message);      </div><div class=\"line\">        producer.send(msg);      </div><div class=\"line\">        System.out.println(<span class=\"string\">\"Producer:-&gt;Message sent complete!\"</span>);      </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 关闭连接      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JMSException </span>&#123;      </div><div class=\"line\">        System.out.println(<span class=\"string\">\"Producer:-&gt;Closing connection\"</span>);      </div><div class=\"line\">        <span class=\"keyword\">if</span> (producer != <span class=\"keyword\">null</span>)      </div><div class=\"line\">            producer.close();      </div><div class=\"line\">        <span class=\"keyword\">if</span> (session != <span class=\"keyword\">null</span>)      </div><div class=\"line\">            session.close();      </div><div class=\"line\">        <span class=\"keyword\">if</span> (connection != <span class=\"keyword\">null</span>)      </div><div class=\"line\">            connection.close();      </div><div class=\"line\">    &#125;      </div><div class=\"line\">&#125;        </div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_03_mq.topic;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.JMSException;      </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerTest</span> </span>&#123;      </div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**    </span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args    </span></div><div class=\"line\"><span class=\"comment\">     */</span>     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> JMSException, Exception </span>&#123;      </div><div class=\"line\">        ProducerTool producer = <span class=\"keyword\">new</span> ProducerTool(); </div><div class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;</div><div class=\"line\">        \t</div><div class=\"line\">        \tThread.sleep(random.nextInt(<span class=\"number\">10</span>)*<span class=\"number\">1000</span>);</div><div class=\"line\">        \t</div><div class=\"line\">        \tproducer.produceMessage(<span class=\"string\">\"Hello, world!--\"</span>+i);      </div><div class=\"line\">        \tproducer.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;      </div><div class=\"line\">&#125;      </div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_03_mq.topic;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Connection;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Destination;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.ExceptionListener;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.JMSException;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.MessageConsumer;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Session;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.MessageListener;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.Message;      </div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.TextMessage;      </div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.activemq.ActiveMQConnection;      </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.activemq.ActiveMQConnectionFactory;      </div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerTool</span> <span class=\"keyword\">implements</span> <span class=\"title\">MessageListener</span>,<span class=\"title\">ExceptionListener</span> </span>&#123;      </div><div class=\"line\">    <span class=\"keyword\">private</span> String user = ActiveMQConnection.DEFAULT_USER;      </div><div class=\"line\">    <span class=\"keyword\">private</span> String password = ActiveMQConnection.DEFAULT_PASSWORD;      </div><div class=\"line\">    <span class=\"keyword\">private</span> String url =ActiveMQConnection.DEFAULT_BROKER_URL;      </div><div class=\"line\">    <span class=\"keyword\">private</span> String subject = <span class=\"string\">\"mytopic\"</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> Destination destination = <span class=\"keyword\">null</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> Connection connection = <span class=\"keyword\">null</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> Session session = <span class=\"keyword\">null</span>;      </div><div class=\"line\">    <span class=\"keyword\">private</span> MessageConsumer consumer = <span class=\"keyword\">null</span>;  </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean isconnection=<span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"comment\">// 初始化      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JMSException, Exception </span>&#123;      </div><div class=\"line\">        ActiveMQConnectionFactory connectionFactory = <span class=\"keyword\">new</span> ActiveMQConnectionFactory(      </div><div class=\"line\">                user, password, url);      </div><div class=\"line\">        connection = connectionFactory.createConnection();      </div><div class=\"line\">        session = connection.createSession(<span class=\"keyword\">false</span>, Session.AUTO_ACKNOWLEDGE);      </div><div class=\"line\">        destination = session.createTopic(subject);      </div><div class=\"line\">        consumer = session.createConsumer(destination);     </div><div class=\"line\">    &#125;      </div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">// 消费消息      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">consumeMessage</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JMSException, Exception </span>&#123;      </div><div class=\"line\">        initialize();      </div><div class=\"line\">        connection.start();</div><div class=\"line\">        consumer.setMessageListener(<span class=\"keyword\">this</span>);    </div><div class=\"line\">        connection.setExceptionListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        isconnection=<span class=\"keyword\">true</span>;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Consumer:-&gt;Begin listening...\"</span>);      </div><div class=\"line\">        <span class=\"comment\">// 开始监听  </span></div><div class=\"line\">        <span class=\"comment\">// Message message = consumer.receive();      </span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 关闭连接      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JMSException </span>&#123;      </div><div class=\"line\">        System.out.println(<span class=\"string\">\"Consumer:-&gt;Closing connection\"</span>);      </div><div class=\"line\">        <span class=\"keyword\">if</span> (consumer != <span class=\"keyword\">null</span>)      </div><div class=\"line\">            consumer.close();      </div><div class=\"line\">        <span class=\"keyword\">if</span> (session != <span class=\"keyword\">null</span>)      </div><div class=\"line\">            session.close();      </div><div class=\"line\">        <span class=\"keyword\">if</span> (connection != <span class=\"keyword\">null</span>)      </div><div class=\"line\">            connection.close();      </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 消息处理函数      </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(Message message)</span> </span>&#123;      </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;      </div><div class=\"line\">            <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> TextMessage) &#123;      </div><div class=\"line\">                TextMessage txtMsg = (TextMessage) message;      </div><div class=\"line\">                String msg = txtMsg.getText();      </div><div class=\"line\">                System.out.println(<span class=\"string\">\"Consumer:-&gt;Received: \"</span> + msg);      </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;      </div><div class=\"line\">                System.out.println(<span class=\"string\">\"Consumer:-&gt;Received: \"</span> + message);      </div><div class=\"line\">            &#125;      </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JMSException e) &#123;      </div><div class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block      </span></div><div class=\"line\">            e.printStackTrace();      </div><div class=\"line\">        &#125;      </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onException</span><span class=\"params\">(JMSException arg0)</span> </span>&#123;</div><div class=\"line\">\t\tisconnection=<span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;      </div><div class=\"line\">&#125;      </div><div class=\"line\">----------------------------------------------------------     </div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast_03_mq.topic;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.jms.JMSException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> Thread t1 = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> args</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> JMSException</span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> InterruptedException</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tt1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ConsumerTest());</div><div class=\"line\">\t\tt1.setDaemon(<span class=\"keyword\">false</span>);</div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t\t * 如果发生异常，则重启consumer</span></div><div class=\"line\"><span class=\"comment\">\t\t */</span></div><div class=\"line\">\t\t<span class=\"comment\">/*while (true) &#123;</span></div><div class=\"line\"><span class=\"comment\">\t\t\tSystem.out.println(t1.isAlive());</span></div><div class=\"line\"><span class=\"comment\">\t\t\tif (!t1.isAlive()) &#123;</span></div><div class=\"line\"><span class=\"comment\">\t\t\t\tt1 = new Thread(new ConsumerTest());</span></div><div class=\"line\"><span class=\"comment\">\t\t\t\tt1.start();</span></div><div class=\"line\"><span class=\"comment\">\t\t\t\tSystem.out.println(\"重新启动\");</span></div><div class=\"line\"><span class=\"comment\">\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">\t\t\tThread.sleep(5000);</span></div><div class=\"line\"><span class=\"comment\">\t\t&#125;*/</span></div><div class=\"line\">\t\t<span class=\"comment\">// 延时500毫秒之后停止接受消息</span></div><div class=\"line\">\t\t<span class=\"comment\">// Thread.sleep(500);</span></div><div class=\"line\">\t\t<span class=\"comment\">// consumer.close();</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tConsumerTool consumer = <span class=\"keyword\">new</span> ConsumerTool();</div><div class=\"line\">\t\t\tconsumer.consumeMessage();</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (ConsumerTool.isconnection) &#123;\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"大数据0406-javaJVM技术","toc":true,"date":"2017-12-05T14:44:14.000Z","scaffolds":null,"_content":"\n# 1. 监控工具的使用\n## 1.1. jconsole\n\n可以分析jvm的内存使用情况和线程等信息。\n## 1.2. 启动方式\n`JDK/bin` 目录下 `jconsole.exe`将自动搜索出本机运行的所有JVM进程，不需要用户使用jps来查询了，双击其中一个进程即可开始监控。也可以“远程连接服务器，进行远程虚拟机的监控。”\n\n![2017125231152](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231152.png)\n\n![2017125231222](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231222.png)\n\n## 1.3. jvisualvm\n提供了和jconsole的功能类似，提供了一大堆的插件。  \n插件中，Visual GC（可视化GC）还是比较好用的，可视化GC可以看到内存的具体使用情况。\n# 2. java内存模型\n## 2.1. 内存模型图解\nJava虚拟机在执行Java程序的过程中，会把它所管理的内存划分为若干个不同的数据区。这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有的区域则依赖用户线程的启动和结束而建立和销毁，我们可以将这些区域统称为Java运行时数据区域。  \n如下图是一个内存模型的关系图（详情见图：内存划分.png）：\n![2017125231537](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231537.png)\n\nJava虚拟机运行时数据区域被分为五个区域：`堆(Heap)、栈(Stack)、本地方法栈(Native Stack)、方法区(Method Area)、程序计数器(Program Count Register)`。\n![2017125232329](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125232329.png)\n## 2.2. 堆（Heap）\n对于大多数应用来说，`Java Heap`是Java虚拟机管理的内存的最大一块，这块区域`随着虚拟机的启动而创建`。在实际的运用中，我们创建的`对象`和`数组`就是存放在堆里面。如果你听说线程安全的问题，就会很明确的知道Java Heap是一块`共享的区域`，操作共享区域的成员就有了锁和同步。  \n与Java Heap相关的还有Java的垃圾回收机制（GC）,Java Heap是垃圾回收器管理的主要区域。程序猿所熟悉的`新生代`、`老生代`、`永久代`的概念就是在堆里面，现在大多数的GC基本都采用了`分代收集算法`。如果再细致一点，Java Heap还有`Eden空间`，`From Survivor空间`,`To Survivor空间`等。  \nJava Heap可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。  \n![2017125233020](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125233020.png)\n\n## 2.3. 栈（Stack）\n相对于Java Heap来讲，`Java Stack`是`线程私有`的，她的`生命周期与线程相同`。Java Stack描述的是Java方法执行时的内存模型，`每个方法执行时都会创建一个栈帧`（Stack Frame）用语存储局部变量表、操作数栈、动态链接、方法出口等信息。从下图从可以看到，每个线程在执行一个方法时，都意味着有一个栈帧在当前线程对应的栈帧中入栈和出栈。  \n![2017125233212](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125233212.png)\n\n图中可以看到每一个栈帧中都有局部变量表。局部变量表存放了编译期间的各种基本数据类型，对象引用等信息。\n\n## 2.4. 本地方法栈（Native Stack）\n本地方法栈（Native Stack）与Java虚拟机站（Java Stack）所发挥的作用非常相似，他们之间的区别在于虚拟机栈为虚拟机栈执行java方法（也就是字节码）服务，而本地方法栈则为使用到Native方法服务。\n## 2.5. 方法区（Method Area）\n方法区（Method Area）与堆（Java Heap）一样，是`各个线程共享的内存区域`，它用于存储虚拟机加载的`类信息`，`常量`，`静态变量`，`即时编译器编译后的代码`等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是她却有一个别名叫做非堆（Non-Heap）。分析下Java虚拟机规范，之所以把方法区描述为堆的一个逻辑部分，应该觉得她们都是存储数据的角度出发的。一个存储对象数据（堆），一个存储静态信息(方法区)。\n## 2.6. 总结\n### 2.6.1. 线程私有的数据区域有：\nJava虚拟机栈（Java Stack）  \n本地方法栈（Native Stack）  \n### 2.6.2. 线程共有的数据区域有：\n堆（Java Heap）  \n方法区  \n# 3. JVM参数列表\njava -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:NewRatio=4 -XX:SurvivorRatio=4 -XX:MaxPermSize=16m  -XX:MaxTenuringThreshold=0\n`-Xmx3550m`：最大堆内存为3550M。  \n`-Xms3550m`：初始堆内存为3550m。  \n此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。  \n`-Xmn2g`：设置年轻代大小为2G。  \n整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。  \n`-Xss128k`：设置每个线程的堆栈大小。  \nJDK5.0以后每个线程堆栈大小为1M，在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000左右。   \n`-XX:NewRatio=4`:设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5  \n`-XX:SurvivorRatio=4`：设置年轻代中Eden区与Survivor区的大小比值。  \n设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6  \n`-XX:MaxPermSize=16m`:设置持久代大小为16m。  \n`-XX:MaxTenuringThreshold=0`：设置垃圾最大年龄。  \n如果设置为0的话，则年轻代对象不经过Survivor区，直 接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象 再年轻代的存活时间，增加在年轻代即被回收的概论。  \n\n收集器设置  \n-XX:+UseSerialGC:设置串行收集器  \n-XX:+UseParallelGC:设置并行收集器  \n-XX:+UseParalledlOldGC:设置并行年老代收集器  \n-XX:+UseConcMarkSweepGC:设置并发收集器  \n垃圾回收统计信息  \n-XX:+PrintGC  \n-XX:+PrintGCDetails  \n-XX:+PrintGCTimeStamps  \n-Xloggc:filename  \n并行收集器设置  \n-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。  \n-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间  \n-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)  \n并发收集器设置  \n-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。  \n-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。  \n\n# 4. jvm案例演示\n## 4.1. 内存\nJconsole的内存标签相当于可视化的jstat命令，用于监视收集器管理的虚拟机内存（java堆和永久代）的变化趋势。  \n我们通过下面的一段代码体验一下它的监视功能。运行时设置的虚拟机参数为：-Xms100m -Xmx100m -XX:+UseSerialGC，这段代码的作用是以64kb/50毫秒的速度往java堆内存中填充数据。  \n```java\npublic class TestMemory {\n\tstatic class OOMObject {\n\t\tpublic byte[] placeholder = new byte[64 * 1024];\n\t}\n\n\tpublic static void fillHeap(int num) throws Exception {\n\t\tArrayList<OOMObject> list = new ArrayList<OOMObject>();\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tThread.sleep(50);\n\t\t\tlist.add(new OOMObject());\n\t\t}\n\t\tSystem.gc();\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tfillHeap(1000);\n\t\tThread.sleep(500000);\n\t}\n}\n```\n![2017125234140](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234140.png)\n\n从图中可以看出，运行轨迹成曲线增长，循环1000次后，虽然整个新生代Eden和Survivor区都基本上被清空了，但是老年代仍然保持峰值状态，这说明，填充的数据在GC后仍然存活，因为list的作用域没有结束。如果把System.gc();移到fillHeap(1000);后，就可以全部回收掉。\n\n## 4.2. 线程\njconsole线程标签相当于可视化了jstack命令，遇到线程停顿时，可以使用这个也签进行监控分析。线程长时间停顿的主要原因有：等待外部资源（数据库连接等），死循环、锁等待。下面的代码将演示这几种情况：\n```java\npackage cn.java.jvm;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class TestThread {\n\t/**\n\t * 死循环演示\n\t * \n\t * @param args\n\t */\n\tpublic static void createBusyThread() {\n\t\tThread thread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"createBusyThread\");\n\t\t\t\twhile (true)\n\t\t\t\t\t;\n\t\t\t}\n\t\t}, \"testBusyThread\");\n\t\tthread.start();\n\t}\n\n\t/**\n\t * 线程锁等待\n\t * \n\t * @param args\n\t */\n\tpublic static void createLockThread(final Object lock) {\n\t\tThread thread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"createLockThread\");\n\t\t\t\tsynchronized (lock) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlock.wait();\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}, \"testLockThread\");\n\t\tthread.start();\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tbr.readLine();\n\t\tcreateBusyThread();\n\t\tbr.readLine();\n\t\tObject object = new Object();\n\t\tcreateLockThread(object);\n\t}\n}\n```\nmain线程：追踪到需要键盘录入  \ntestBusyThread线程：线程阻塞在18行的while（true），直到线程切换，很耗性能  \ntestLockThread线程：出于waitting状态，等待notify  \n\n死锁：\n```java\npackage cn.java.jvm;\n\npublic class TestDeadThread implements Runnable {\n\tint a, b;\n\n\tpublic TestDeadThread(int a, int b) {\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"createDeadThread\");\n\t\tsynchronized (Integer.valueOf(a)) {\n\t\t\tsynchronized (Integer.valueOf(b)) {\n\t\t\t\tSystem.out.println(a + b);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tnew Thread(new TestDeadThread(1, 2)).start();\n\t\t\tnew Thread(new TestDeadThread(2, 1)).start();\n\t\t}\n\t}\n}\n\n\n```\n点击检查死锁，会出现死锁的详情。\n\n![2017125234810](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234810.png)\n\n![2017125234928](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234928.png)\n\nthread-5的锁被thread-10持有，相反亦是，造成死锁。\n","source":"_posts/大数据/大数据0406-javaJVM技术.md","raw":"---\ntitle: 大数据0406-javaJVM技术\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - java\n  - JVM\ntoc: true\ndate: 2017-12-05 22:44:14\nscaffolds:\n---\n\n# 1. 监控工具的使用\n## 1.1. jconsole\n\n可以分析jvm的内存使用情况和线程等信息。\n## 1.2. 启动方式\n`JDK/bin` 目录下 `jconsole.exe`将自动搜索出本机运行的所有JVM进程，不需要用户使用jps来查询了，双击其中一个进程即可开始监控。也可以“远程连接服务器，进行远程虚拟机的监控。”\n\n![2017125231152](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231152.png)\n\n![2017125231222](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231222.png)\n\n## 1.3. jvisualvm\n提供了和jconsole的功能类似，提供了一大堆的插件。  \n插件中，Visual GC（可视化GC）还是比较好用的，可视化GC可以看到内存的具体使用情况。\n# 2. java内存模型\n## 2.1. 内存模型图解\nJava虚拟机在执行Java程序的过程中，会把它所管理的内存划分为若干个不同的数据区。这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有的区域则依赖用户线程的启动和结束而建立和销毁，我们可以将这些区域统称为Java运行时数据区域。  \n如下图是一个内存模型的关系图（详情见图：内存划分.png）：\n![2017125231537](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231537.png)\n\nJava虚拟机运行时数据区域被分为五个区域：`堆(Heap)、栈(Stack)、本地方法栈(Native Stack)、方法区(Method Area)、程序计数器(Program Count Register)`。\n![2017125232329](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125232329.png)\n## 2.2. 堆（Heap）\n对于大多数应用来说，`Java Heap`是Java虚拟机管理的内存的最大一块，这块区域`随着虚拟机的启动而创建`。在实际的运用中，我们创建的`对象`和`数组`就是存放在堆里面。如果你听说线程安全的问题，就会很明确的知道Java Heap是一块`共享的区域`，操作共享区域的成员就有了锁和同步。  \n与Java Heap相关的还有Java的垃圾回收机制（GC）,Java Heap是垃圾回收器管理的主要区域。程序猿所熟悉的`新生代`、`老生代`、`永久代`的概念就是在堆里面，现在大多数的GC基本都采用了`分代收集算法`。如果再细致一点，Java Heap还有`Eden空间`，`From Survivor空间`,`To Survivor空间`等。  \nJava Heap可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。  \n![2017125233020](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125233020.png)\n\n## 2.3. 栈（Stack）\n相对于Java Heap来讲，`Java Stack`是`线程私有`的，她的`生命周期与线程相同`。Java Stack描述的是Java方法执行时的内存模型，`每个方法执行时都会创建一个栈帧`（Stack Frame）用语存储局部变量表、操作数栈、动态链接、方法出口等信息。从下图从可以看到，每个线程在执行一个方法时，都意味着有一个栈帧在当前线程对应的栈帧中入栈和出栈。  \n![2017125233212](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125233212.png)\n\n图中可以看到每一个栈帧中都有局部变量表。局部变量表存放了编译期间的各种基本数据类型，对象引用等信息。\n\n## 2.4. 本地方法栈（Native Stack）\n本地方法栈（Native Stack）与Java虚拟机站（Java Stack）所发挥的作用非常相似，他们之间的区别在于虚拟机栈为虚拟机栈执行java方法（也就是字节码）服务，而本地方法栈则为使用到Native方法服务。\n## 2.5. 方法区（Method Area）\n方法区（Method Area）与堆（Java Heap）一样，是`各个线程共享的内存区域`，它用于存储虚拟机加载的`类信息`，`常量`，`静态变量`，`即时编译器编译后的代码`等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是她却有一个别名叫做非堆（Non-Heap）。分析下Java虚拟机规范，之所以把方法区描述为堆的一个逻辑部分，应该觉得她们都是存储数据的角度出发的。一个存储对象数据（堆），一个存储静态信息(方法区)。\n## 2.6. 总结\n### 2.6.1. 线程私有的数据区域有：\nJava虚拟机栈（Java Stack）  \n本地方法栈（Native Stack）  \n### 2.6.2. 线程共有的数据区域有：\n堆（Java Heap）  \n方法区  \n# 3. JVM参数列表\njava -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:NewRatio=4 -XX:SurvivorRatio=4 -XX:MaxPermSize=16m  -XX:MaxTenuringThreshold=0\n`-Xmx3550m`：最大堆内存为3550M。  \n`-Xms3550m`：初始堆内存为3550m。  \n此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。  \n`-Xmn2g`：设置年轻代大小为2G。  \n整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。  \n`-Xss128k`：设置每个线程的堆栈大小。  \nJDK5.0以后每个线程堆栈大小为1M，在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000左右。   \n`-XX:NewRatio=4`:设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5  \n`-XX:SurvivorRatio=4`：设置年轻代中Eden区与Survivor区的大小比值。  \n设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6  \n`-XX:MaxPermSize=16m`:设置持久代大小为16m。  \n`-XX:MaxTenuringThreshold=0`：设置垃圾最大年龄。  \n如果设置为0的话，则年轻代对象不经过Survivor区，直 接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象 再年轻代的存活时间，增加在年轻代即被回收的概论。  \n\n收集器设置  \n-XX:+UseSerialGC:设置串行收集器  \n-XX:+UseParallelGC:设置并行收集器  \n-XX:+UseParalledlOldGC:设置并行年老代收集器  \n-XX:+UseConcMarkSweepGC:设置并发收集器  \n垃圾回收统计信息  \n-XX:+PrintGC  \n-XX:+PrintGCDetails  \n-XX:+PrintGCTimeStamps  \n-Xloggc:filename  \n并行收集器设置  \n-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。  \n-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间  \n-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)  \n并发收集器设置  \n-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。  \n-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。  \n\n# 4. jvm案例演示\n## 4.1. 内存\nJconsole的内存标签相当于可视化的jstat命令，用于监视收集器管理的虚拟机内存（java堆和永久代）的变化趋势。  \n我们通过下面的一段代码体验一下它的监视功能。运行时设置的虚拟机参数为：-Xms100m -Xmx100m -XX:+UseSerialGC，这段代码的作用是以64kb/50毫秒的速度往java堆内存中填充数据。  \n```java\npublic class TestMemory {\n\tstatic class OOMObject {\n\t\tpublic byte[] placeholder = new byte[64 * 1024];\n\t}\n\n\tpublic static void fillHeap(int num) throws Exception {\n\t\tArrayList<OOMObject> list = new ArrayList<OOMObject>();\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tThread.sleep(50);\n\t\t\tlist.add(new OOMObject());\n\t\t}\n\t\tSystem.gc();\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tfillHeap(1000);\n\t\tThread.sleep(500000);\n\t}\n}\n```\n![2017125234140](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234140.png)\n\n从图中可以看出，运行轨迹成曲线增长，循环1000次后，虽然整个新生代Eden和Survivor区都基本上被清空了，但是老年代仍然保持峰值状态，这说明，填充的数据在GC后仍然存活，因为list的作用域没有结束。如果把System.gc();移到fillHeap(1000);后，就可以全部回收掉。\n\n## 4.2. 线程\njconsole线程标签相当于可视化了jstack命令，遇到线程停顿时，可以使用这个也签进行监控分析。线程长时间停顿的主要原因有：等待外部资源（数据库连接等），死循环、锁等待。下面的代码将演示这几种情况：\n```java\npackage cn.java.jvm;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class TestThread {\n\t/**\n\t * 死循环演示\n\t * \n\t * @param args\n\t */\n\tpublic static void createBusyThread() {\n\t\tThread thread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"createBusyThread\");\n\t\t\t\twhile (true)\n\t\t\t\t\t;\n\t\t\t}\n\t\t}, \"testBusyThread\");\n\t\tthread.start();\n\t}\n\n\t/**\n\t * 线程锁等待\n\t * \n\t * @param args\n\t */\n\tpublic static void createLockThread(final Object lock) {\n\t\tThread thread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"createLockThread\");\n\t\t\t\tsynchronized (lock) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlock.wait();\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}, \"testLockThread\");\n\t\tthread.start();\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tbr.readLine();\n\t\tcreateBusyThread();\n\t\tbr.readLine();\n\t\tObject object = new Object();\n\t\tcreateLockThread(object);\n\t}\n}\n```\nmain线程：追踪到需要键盘录入  \ntestBusyThread线程：线程阻塞在18行的while（true），直到线程切换，很耗性能  \ntestLockThread线程：出于waitting状态，等待notify  \n\n死锁：\n```java\npackage cn.java.jvm;\n\npublic class TestDeadThread implements Runnable {\n\tint a, b;\n\n\tpublic TestDeadThread(int a, int b) {\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"createDeadThread\");\n\t\tsynchronized (Integer.valueOf(a)) {\n\t\t\tsynchronized (Integer.valueOf(b)) {\n\t\t\t\tSystem.out.println(a + b);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tnew Thread(new TestDeadThread(1, 2)).start();\n\t\t\tnew Thread(new TestDeadThread(2, 1)).start();\n\t\t}\n\t}\n}\n\n\n```\n点击检查死锁，会出现死锁的详情。\n\n![2017125234810](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234810.png)\n\n![2017125234928](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234928.png)\n\nthread-5的锁被thread-10持有，相反亦是，造成死锁。\n","slug":"大数据/大数据0406-javaJVM技术","published":1,"updated":"2018-02-06T07:50:09.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89ze001kv4vfh499cv1p","content":"<h1 id=\"1-监控工具的使用\"><a href=\"#1-监控工具的使用\" class=\"headerlink\" title=\"1. 监控工具的使用\"></a>1. 监控工具的使用</h1><h2 id=\"1-1-jconsole\"><a href=\"#1-1-jconsole\" class=\"headerlink\" title=\"1.1. jconsole\"></a>1.1. jconsole</h2><p>可以分析jvm的内存使用情况和线程等信息。</p>\n<h2 id=\"1-2-启动方式\"><a href=\"#1-2-启动方式\" class=\"headerlink\" title=\"1.2. 启动方式\"></a>1.2. 启动方式</h2><p><code>JDK/bin</code> 目录下 <code>jconsole.exe</code>将自动搜索出本机运行的所有JVM进程，不需要用户使用jps来查询了，双击其中一个进程即可开始监控。也可以“远程连接服务器，进行远程虚拟机的监控。”</p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231152.png\" alt=\"2017125231152\"></p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231222.png\" alt=\"2017125231222\"></p>\n<h2 id=\"1-3-jvisualvm\"><a href=\"#1-3-jvisualvm\" class=\"headerlink\" title=\"1.3. jvisualvm\"></a>1.3. jvisualvm</h2><p>提供了和jconsole的功能类似，提供了一大堆的插件。<br>插件中，Visual GC（可视化GC）还是比较好用的，可视化GC可以看到内存的具体使用情况。</p>\n<h1 id=\"2-java内存模型\"><a href=\"#2-java内存模型\" class=\"headerlink\" title=\"2. java内存模型\"></a>2. java内存模型</h1><h2 id=\"2-1-内存模型图解\"><a href=\"#2-1-内存模型图解\" class=\"headerlink\" title=\"2.1. 内存模型图解\"></a>2.1. 内存模型图解</h2><p>Java虚拟机在执行Java程序的过程中，会把它所管理的内存划分为若干个不同的数据区。这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有的区域则依赖用户线程的启动和结束而建立和销毁，我们可以将这些区域统称为Java运行时数据区域。<br>如下图是一个内存模型的关系图（详情见图：内存划分.png）：<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231537.png\" alt=\"2017125231537\"></p>\n<p>Java虚拟机运行时数据区域被分为五个区域：<code>堆(Heap)、栈(Stack)、本地方法栈(Native Stack)、方法区(Method Area)、程序计数器(Program Count Register)</code>。<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125232329.png\" alt=\"2017125232329\"></p>\n<h2 id=\"2-2-堆（Heap）\"><a href=\"#2-2-堆（Heap）\" class=\"headerlink\" title=\"2.2. 堆（Heap）\"></a>2.2. 堆（Heap）</h2><p>对于大多数应用来说，<code>Java Heap</code>是Java虚拟机管理的内存的最大一块，这块区域<code>随着虚拟机的启动而创建</code>。在实际的运用中，我们创建的<code>对象</code>和<code>数组</code>就是存放在堆里面。如果你听说线程安全的问题，就会很明确的知道Java Heap是一块<code>共享的区域</code>，操作共享区域的成员就有了锁和同步。<br>与Java Heap相关的还有Java的垃圾回收机制（GC）,Java Heap是垃圾回收器管理的主要区域。程序猿所熟悉的<code>新生代</code>、<code>老生代</code>、<code>永久代</code>的概念就是在堆里面，现在大多数的GC基本都采用了<code>分代收集算法</code>。如果再细致一点，Java Heap还有<code>Eden空间</code>，<code>From Survivor空间</code>,<code>To Survivor空间</code>等。<br>Java Heap可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125233020.png\" alt=\"2017125233020\"></p>\n<h2 id=\"2-3-栈（Stack）\"><a href=\"#2-3-栈（Stack）\" class=\"headerlink\" title=\"2.3. 栈（Stack）\"></a>2.3. 栈（Stack）</h2><p>相对于Java Heap来讲，<code>Java Stack</code>是<code>线程私有</code>的，她的<code>生命周期与线程相同</code>。Java Stack描述的是Java方法执行时的内存模型，<code>每个方法执行时都会创建一个栈帧</code>（Stack Frame）用语存储局部变量表、操作数栈、动态链接、方法出口等信息。从下图从可以看到，每个线程在执行一个方法时，都意味着有一个栈帧在当前线程对应的栈帧中入栈和出栈。<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125233212.png\" alt=\"2017125233212\"></p>\n<p>图中可以看到每一个栈帧中都有局部变量表。局部变量表存放了编译期间的各种基本数据类型，对象引用等信息。</p>\n<h2 id=\"2-4-本地方法栈（Native-Stack）\"><a href=\"#2-4-本地方法栈（Native-Stack）\" class=\"headerlink\" title=\"2.4. 本地方法栈（Native Stack）\"></a>2.4. 本地方法栈（Native Stack）</h2><p>本地方法栈（Native Stack）与Java虚拟机站（Java Stack）所发挥的作用非常相似，他们之间的区别在于虚拟机栈为虚拟机栈执行java方法（也就是字节码）服务，而本地方法栈则为使用到Native方法服务。</p>\n<h2 id=\"2-5-方法区（Method-Area）\"><a href=\"#2-5-方法区（Method-Area）\" class=\"headerlink\" title=\"2.5. 方法区（Method Area）\"></a>2.5. 方法区（Method Area）</h2><p>方法区（Method Area）与堆（Java Heap）一样，是<code>各个线程共享的内存区域</code>，它用于存储虚拟机加载的<code>类信息</code>，<code>常量</code>，<code>静态变量</code>，<code>即时编译器编译后的代码</code>等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是她却有一个别名叫做非堆（Non-Heap）。分析下Java虚拟机规范，之所以把方法区描述为堆的一个逻辑部分，应该觉得她们都是存储数据的角度出发的。一个存储对象数据（堆），一个存储静态信息(方法区)。</p>\n<h2 id=\"2-6-总结\"><a href=\"#2-6-总结\" class=\"headerlink\" title=\"2.6. 总结\"></a>2.6. 总结</h2><h3 id=\"2-6-1-线程私有的数据区域有：\"><a href=\"#2-6-1-线程私有的数据区域有：\" class=\"headerlink\" title=\"2.6.1. 线程私有的数据区域有：\"></a>2.6.1. 线程私有的数据区域有：</h3><p>Java虚拟机栈（Java Stack）<br>本地方法栈（Native Stack）  </p>\n<h3 id=\"2-6-2-线程共有的数据区域有：\"><a href=\"#2-6-2-线程共有的数据区域有：\" class=\"headerlink\" title=\"2.6.2. 线程共有的数据区域有：\"></a>2.6.2. 线程共有的数据区域有：</h3><p>堆（Java Heap）<br>方法区  </p>\n<h1 id=\"3-JVM参数列表\"><a href=\"#3-JVM参数列表\" class=\"headerlink\" title=\"3. JVM参数列表\"></a>3. JVM参数列表</h1><p>java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:NewRatio=4 -XX:SurvivorRatio=4 -XX:MaxPermSize=16m  -XX:MaxTenuringThreshold=0<br><code>-Xmx3550m</code>：最大堆内存为3550M。<br><code>-Xms3550m</code>：初始堆内存为3550m。<br>此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。<br><code>-Xmn2g</code>：设置年轻代大小为2G。<br>整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。<br><code>-Xss128k</code>：设置每个线程的堆栈大小。<br>JDK5.0以后每个线程堆栈大小为1M，在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000左右。<br><code>-XX:NewRatio=4</code>:设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5<br><code>-XX:SurvivorRatio=4</code>：设置年轻代中Eden区与Survivor区的大小比值。<br>设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6<br><code>-XX:MaxPermSize=16m</code>:设置持久代大小为16m。<br><code>-XX:MaxTenuringThreshold=0</code>：设置垃圾最大年龄。<br>如果设置为0的话，则年轻代对象不经过Survivor区，直 接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象 再年轻代的存活时间，增加在年轻代即被回收的概论。  </p>\n<p>收集器设置<br>-XX:+UseSerialGC:设置串行收集器<br>-XX:+UseParallelGC:设置并行收集器<br>-XX:+UseParalledlOldGC:设置并行年老代收集器<br>-XX:+UseConcMarkSweepGC:设置并发收集器<br>垃圾回收统计信息<br>-XX:+PrintGC<br>-XX:+PrintGCDetails<br>-XX:+PrintGCTimeStamps<br>-Xloggc:filename<br>并行收集器设置<br>-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。<br>-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间<br>-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)<br>并发收集器设置<br>-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。<br>-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。  </p>\n<h1 id=\"4-jvm案例演示\"><a href=\"#4-jvm案例演示\" class=\"headerlink\" title=\"4. jvm案例演示\"></a>4. jvm案例演示</h1><h2 id=\"4-1-内存\"><a href=\"#4-1-内存\" class=\"headerlink\" title=\"4.1. 内存\"></a>4.1. 内存</h2><p>Jconsole的内存标签相当于可视化的jstat命令，用于监视收集器管理的虚拟机内存（java堆和永久代）的变化趋势。<br>我们通过下面的一段代码体验一下它的监视功能。运行时设置的虚拟机参数为：-Xms100m -Xmx100m -XX:+UseSerialGC，这段代码的作用是以64kb/50毫秒的速度往java堆内存中填充数据。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMemory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMObject</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] placeholder = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">64</span> * <span class=\"number\">1024</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">fillHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tArrayList&lt;OOMObject&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;OOMObject&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">50</span>);</div><div class=\"line\">\t\t\tlist.add(<span class=\"keyword\">new</span> OOMObject());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.gc();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tfillHeap(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">500000</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234140.png\" alt=\"2017125234140\"></p>\n<p>从图中可以看出，运行轨迹成曲线增长，循环1000次后，虽然整个新生代Eden和Survivor区都基本上被清空了，但是老年代仍然保持峰值状态，这说明，填充的数据在GC后仍然存活，因为list的作用域没有结束。如果把System.gc();移到fillHeap(1000);后，就可以全部回收掉。</p>\n<h2 id=\"4-2-线程\"><a href=\"#4-2-线程\" class=\"headerlink\" title=\"4.2. 线程\"></a>4.2. 线程</h2><p>jconsole线程标签相当于可视化了jstack命令，遇到线程停顿时，可以使用这个也签进行监控分析。线程长时间停顿的主要原因有：等待外部资源（数据库连接等），死循环、锁等待。下面的代码将演示这几种情况：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.java.jvm;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 死循环演示</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> args</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createBusyThread</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tThread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"createBusyThread\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)</div><div class=\"line\">\t\t\t\t\t;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;, <span class=\"string\">\"testBusyThread\"</span>);</div><div class=\"line\">\t\tthread.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 线程锁等待</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> args</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createLockThread</span><span class=\"params\">(<span class=\"keyword\">final</span> Object lock)</span> </span>&#123;</div><div class=\"line\">\t\tThread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"createLockThread\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (lock) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tlock.wait();</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;, <span class=\"string\">\"testLockThread\"</span>);</div><div class=\"line\">\t\tthread.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tBufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</div><div class=\"line\">\t\tbr.readLine();</div><div class=\"line\">\t\tcreateBusyThread();</div><div class=\"line\">\t\tbr.readLine();</div><div class=\"line\">\t\tObject object = <span class=\"keyword\">new</span> Object();</div><div class=\"line\">\t\tcreateLockThread(object);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>main线程：追踪到需要键盘录入<br>testBusyThread线程：线程阻塞在18行的while（true），直到线程切换，很耗性能<br>testLockThread线程：出于waitting状态，等待notify  </p>\n<p>死锁：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.java.jvm;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDeadThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a, b;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestDeadThread</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"createDeadThread\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (Integer.valueOf(a)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (Integer.valueOf(b)) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(a + b);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestDeadThread(<span class=\"number\">1</span>, <span class=\"number\">2</span>)).start();</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestDeadThread(<span class=\"number\">2</span>, <span class=\"number\">1</span>)).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>点击检查死锁，会出现死锁的详情。</p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234810.png\" alt=\"2017125234810\"></p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234928.png\" alt=\"2017125234928\"></p>\n<p>thread-5的锁被thread-10持有，相反亦是，造成死锁。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-监控工具的使用\"><a href=\"#1-监控工具的使用\" class=\"headerlink\" title=\"1. 监控工具的使用\"></a>1. 监控工具的使用</h1><h2 id=\"1-1-jconsole\"><a href=\"#1-1-jconsole\" class=\"headerlink\" title=\"1.1. jconsole\"></a>1.1. jconsole</h2><p>可以分析jvm的内存使用情况和线程等信息。</p>\n<h2 id=\"1-2-启动方式\"><a href=\"#1-2-启动方式\" class=\"headerlink\" title=\"1.2. 启动方式\"></a>1.2. 启动方式</h2><p><code>JDK/bin</code> 目录下 <code>jconsole.exe</code>将自动搜索出本机运行的所有JVM进程，不需要用户使用jps来查询了，双击其中一个进程即可开始监控。也可以“远程连接服务器，进行远程虚拟机的监控。”</p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231152.png\" alt=\"2017125231152\"></p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231222.png\" alt=\"2017125231222\"></p>\n<h2 id=\"1-3-jvisualvm\"><a href=\"#1-3-jvisualvm\" class=\"headerlink\" title=\"1.3. jvisualvm\"></a>1.3. jvisualvm</h2><p>提供了和jconsole的功能类似，提供了一大堆的插件。<br>插件中，Visual GC（可视化GC）还是比较好用的，可视化GC可以看到内存的具体使用情况。</p>\n<h1 id=\"2-java内存模型\"><a href=\"#2-java内存模型\" class=\"headerlink\" title=\"2. java内存模型\"></a>2. java内存模型</h1><h2 id=\"2-1-内存模型图解\"><a href=\"#2-1-内存模型图解\" class=\"headerlink\" title=\"2.1. 内存模型图解\"></a>2.1. 内存模型图解</h2><p>Java虚拟机在执行Java程序的过程中，会把它所管理的内存划分为若干个不同的数据区。这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有的区域则依赖用户线程的启动和结束而建立和销毁，我们可以将这些区域统称为Java运行时数据区域。<br>如下图是一个内存模型的关系图（详情见图：内存划分.png）：<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125231537.png\" alt=\"2017125231537\"></p>\n<p>Java虚拟机运行时数据区域被分为五个区域：<code>堆(Heap)、栈(Stack)、本地方法栈(Native Stack)、方法区(Method Area)、程序计数器(Program Count Register)</code>。<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125232329.png\" alt=\"2017125232329\"></p>\n<h2 id=\"2-2-堆（Heap）\"><a href=\"#2-2-堆（Heap）\" class=\"headerlink\" title=\"2.2. 堆（Heap）\"></a>2.2. 堆（Heap）</h2><p>对于大多数应用来说，<code>Java Heap</code>是Java虚拟机管理的内存的最大一块，这块区域<code>随着虚拟机的启动而创建</code>。在实际的运用中，我们创建的<code>对象</code>和<code>数组</code>就是存放在堆里面。如果你听说线程安全的问题，就会很明确的知道Java Heap是一块<code>共享的区域</code>，操作共享区域的成员就有了锁和同步。<br>与Java Heap相关的还有Java的垃圾回收机制（GC）,Java Heap是垃圾回收器管理的主要区域。程序猿所熟悉的<code>新生代</code>、<code>老生代</code>、<code>永久代</code>的概念就是在堆里面，现在大多数的GC基本都采用了<code>分代收集算法</code>。如果再细致一点，Java Heap还有<code>Eden空间</code>，<code>From Survivor空间</code>,<code>To Survivor空间</code>等。<br>Java Heap可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125233020.png\" alt=\"2017125233020\"></p>\n<h2 id=\"2-3-栈（Stack）\"><a href=\"#2-3-栈（Stack）\" class=\"headerlink\" title=\"2.3. 栈（Stack）\"></a>2.3. 栈（Stack）</h2><p>相对于Java Heap来讲，<code>Java Stack</code>是<code>线程私有</code>的，她的<code>生命周期与线程相同</code>。Java Stack描述的是Java方法执行时的内存模型，<code>每个方法执行时都会创建一个栈帧</code>（Stack Frame）用语存储局部变量表、操作数栈、动态链接、方法出口等信息。从下图从可以看到，每个线程在执行一个方法时，都意味着有一个栈帧在当前线程对应的栈帧中入栈和出栈。<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125233212.png\" alt=\"2017125233212\"></p>\n<p>图中可以看到每一个栈帧中都有局部变量表。局部变量表存放了编译期间的各种基本数据类型，对象引用等信息。</p>\n<h2 id=\"2-4-本地方法栈（Native-Stack）\"><a href=\"#2-4-本地方法栈（Native-Stack）\" class=\"headerlink\" title=\"2.4. 本地方法栈（Native Stack）\"></a>2.4. 本地方法栈（Native Stack）</h2><p>本地方法栈（Native Stack）与Java虚拟机站（Java Stack）所发挥的作用非常相似，他们之间的区别在于虚拟机栈为虚拟机栈执行java方法（也就是字节码）服务，而本地方法栈则为使用到Native方法服务。</p>\n<h2 id=\"2-5-方法区（Method-Area）\"><a href=\"#2-5-方法区（Method-Area）\" class=\"headerlink\" title=\"2.5. 方法区（Method Area）\"></a>2.5. 方法区（Method Area）</h2><p>方法区（Method Area）与堆（Java Heap）一样，是<code>各个线程共享的内存区域</code>，它用于存储虚拟机加载的<code>类信息</code>，<code>常量</code>，<code>静态变量</code>，<code>即时编译器编译后的代码</code>等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是她却有一个别名叫做非堆（Non-Heap）。分析下Java虚拟机规范，之所以把方法区描述为堆的一个逻辑部分，应该觉得她们都是存储数据的角度出发的。一个存储对象数据（堆），一个存储静态信息(方法区)。</p>\n<h2 id=\"2-6-总结\"><a href=\"#2-6-总结\" class=\"headerlink\" title=\"2.6. 总结\"></a>2.6. 总结</h2><h3 id=\"2-6-1-线程私有的数据区域有：\"><a href=\"#2-6-1-线程私有的数据区域有：\" class=\"headerlink\" title=\"2.6.1. 线程私有的数据区域有：\"></a>2.6.1. 线程私有的数据区域有：</h3><p>Java虚拟机栈（Java Stack）<br>本地方法栈（Native Stack）  </p>\n<h3 id=\"2-6-2-线程共有的数据区域有：\"><a href=\"#2-6-2-线程共有的数据区域有：\" class=\"headerlink\" title=\"2.6.2. 线程共有的数据区域有：\"></a>2.6.2. 线程共有的数据区域有：</h3><p>堆（Java Heap）<br>方法区  </p>\n<h1 id=\"3-JVM参数列表\"><a href=\"#3-JVM参数列表\" class=\"headerlink\" title=\"3. JVM参数列表\"></a>3. JVM参数列表</h1><p>java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:NewRatio=4 -XX:SurvivorRatio=4 -XX:MaxPermSize=16m  -XX:MaxTenuringThreshold=0<br><code>-Xmx3550m</code>：最大堆内存为3550M。<br><code>-Xms3550m</code>：初始堆内存为3550m。<br>此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。<br><code>-Xmn2g</code>：设置年轻代大小为2G。<br>整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。<br><code>-Xss128k</code>：设置每个线程的堆栈大小。<br>JDK5.0以后每个线程堆栈大小为1M，在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000左右。<br><code>-XX:NewRatio=4</code>:设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5<br><code>-XX:SurvivorRatio=4</code>：设置年轻代中Eden区与Survivor区的大小比值。<br>设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6<br><code>-XX:MaxPermSize=16m</code>:设置持久代大小为16m。<br><code>-XX:MaxTenuringThreshold=0</code>：设置垃圾最大年龄。<br>如果设置为0的话，则年轻代对象不经过Survivor区，直 接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象 再年轻代的存活时间，增加在年轻代即被回收的概论。  </p>\n<p>收集器设置<br>-XX:+UseSerialGC:设置串行收集器<br>-XX:+UseParallelGC:设置并行收集器<br>-XX:+UseParalledlOldGC:设置并行年老代收集器<br>-XX:+UseConcMarkSweepGC:设置并发收集器<br>垃圾回收统计信息<br>-XX:+PrintGC<br>-XX:+PrintGCDetails<br>-XX:+PrintGCTimeStamps<br>-Xloggc:filename<br>并行收集器设置<br>-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。<br>-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间<br>-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)<br>并发收集器设置<br>-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。<br>-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。  </p>\n<h1 id=\"4-jvm案例演示\"><a href=\"#4-jvm案例演示\" class=\"headerlink\" title=\"4. jvm案例演示\"></a>4. jvm案例演示</h1><h2 id=\"4-1-内存\"><a href=\"#4-1-内存\" class=\"headerlink\" title=\"4.1. 内存\"></a>4.1. 内存</h2><p>Jconsole的内存标签相当于可视化的jstat命令，用于监视收集器管理的虚拟机内存（java堆和永久代）的变化趋势。<br>我们通过下面的一段代码体验一下它的监视功能。运行时设置的虚拟机参数为：-Xms100m -Xmx100m -XX:+UseSerialGC，这段代码的作用是以64kb/50毫秒的速度往java堆内存中填充数据。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMemory</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMObject</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] placeholder = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">64</span> * <span class=\"number\">1024</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">fillHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tArrayList&lt;OOMObject&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;OOMObject&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">50</span>);</div><div class=\"line\">\t\t\tlist.add(<span class=\"keyword\">new</span> OOMObject());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.gc();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tfillHeap(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">500000</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234140.png\" alt=\"2017125234140\"></p>\n<p>从图中可以看出，运行轨迹成曲线增长，循环1000次后，虽然整个新生代Eden和Survivor区都基本上被清空了，但是老年代仍然保持峰值状态，这说明，填充的数据在GC后仍然存活，因为list的作用域没有结束。如果把System.gc();移到fillHeap(1000);后，就可以全部回收掉。</p>\n<h2 id=\"4-2-线程\"><a href=\"#4-2-线程\" class=\"headerlink\" title=\"4.2. 线程\"></a>4.2. 线程</h2><p>jconsole线程标签相当于可视化了jstack命令，遇到线程停顿时，可以使用这个也签进行监控分析。线程长时间停顿的主要原因有：等待外部资源（数据库连接等），死循环、锁等待。下面的代码将演示这几种情况：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.java.jvm;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 死循环演示</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> args</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createBusyThread</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tThread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"createBusyThread\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)</div><div class=\"line\">\t\t\t\t\t;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;, <span class=\"string\">\"testBusyThread\"</span>);</div><div class=\"line\">\t\tthread.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 线程锁等待</span></div><div class=\"line\"><span class=\"comment\">\t * </span></div><div class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> args</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createLockThread</span><span class=\"params\">(<span class=\"keyword\">final</span> Object lock)</span> </span>&#123;</div><div class=\"line\">\t\tThread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"createLockThread\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (lock) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tlock.wait();</div><div class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;, <span class=\"string\">\"testLockThread\"</span>);</div><div class=\"line\">\t\tthread.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tBufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</div><div class=\"line\">\t\tbr.readLine();</div><div class=\"line\">\t\tcreateBusyThread();</div><div class=\"line\">\t\tbr.readLine();</div><div class=\"line\">\t\tObject object = <span class=\"keyword\">new</span> Object();</div><div class=\"line\">\t\tcreateLockThread(object);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>main线程：追踪到需要键盘录入<br>testBusyThread线程：线程阻塞在18行的while（true），直到线程切换，很耗性能<br>testLockThread线程：出于waitting状态，等待notify  </p>\n<p>死锁：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.java.jvm;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDeadThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a, b;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestDeadThread</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"createDeadThread\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (Integer.valueOf(a)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (Integer.valueOf(b)) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(a + b);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestDeadThread(<span class=\"number\">1</span>, <span class=\"number\">2</span>)).start();</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestDeadThread(<span class=\"number\">2</span>, <span class=\"number\">1</span>)).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>点击检查死锁，会出现死锁的详情。</p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234810.png\" alt=\"2017125234810\"></p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017125234928.png\" alt=\"2017125234928\"></p>\n<p>thread-5的锁被thread-10持有，相反亦是，造成死锁。</p>\n"},{"title":"大数据0405-java-socket","toc":true,"date":"2017-12-03T15:14:47.000Z","scaffolds":null,"_content":"直接上代码吧\n<!-- more -->\n\n```java\npackage cn.itcast.bigdata.socket;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\npublic class ServiceServer {\n\tpublic static void main(String[] args) throws Exception {\n\t\t// 创建一个serversocket，绑定到本机的8899端口上\n\t\tServerSocket server = new ServerSocket();\n\t\tserver.bind(new InetSocketAddress(\"localhost\", 8899));\n\t\t// 接受客户端的连接请求;accept是一个阻塞方法，会一直等待，到有客户端请求连接才返回\n\t\twhile (true) {\n\t\t\tSocket socket = server.accept();\n\t\t\tnew Thread(new ServiceServerTask(socket)).start();\n\t\t}\n\t}\n}\n======================\npackage cn.itcast.bigdata.socket;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.net.Socket;\npublic class ServiceClient {\n\tpublic static void main(String[] args) throws Exception {\n\t\t/*ServiceIterface service = ProxyUtils.getProxy(ServiceIterface.class,\"methodA\",hostname,port);\n\t\tResult = service.methodA(parameters);*/\n\t\t// 向服务器发出请求建立连接\n\t\tSocket socket = new Socket(\"localhost\", 8899);\n\t\t// 从socket中获取输入输出流\n\t\tInputStream inputStream = socket.getInputStream();\n\t\tOutputStream outputStream = socket.getOutputStream();\n\t\tPrintWriter pw = new PrintWriter(outputStream);\n\t\tpw.println(\"hello\");\n\t\tpw.flush();\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(inputStream));\n\t\tString result = br.readLine();\n\t\tSystem.out.println(result);\n\t\tinputStream.close();\n\t\toutputStream.close();\n\t\tsocket.close();\n\t}\n}\n======================\npackage cn.itcast.bigdata.socket;\npublic class GetDataServiceImpl {\n\tpublic String getData(String param){\n\t\treturn \"ok-\"+param;\n\t}\n}\n=======================\npackage cn.itcast.bigdata.socket;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.net.Socket;\npublic class ServiceServerTask implements Runnable{\n\tSocket socket ;\n\tInputStream in=null;\n\tOutputStream out = null;\n\tpublic ServiceServerTask(Socket socket) {\n\t\tthis.socket = socket;\n\t}\n\t//业务逻辑：跟客户端进行数据交互\n\t@Override\n\tpublic void run() {\n\t\t try {\n\t\t\t//从socket连接中获取到与client之间的网络通信输入输出流 \n\t\t\tin = socket.getInputStream();\n\t\t\tout = socket.getOutputStream();\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(in));\n\t\t\t//从网络通信输入流中读取客户端发送过来的数据\n\t\t\t//注意：socketinputstream的读数据的方法都是阻塞的 \n\t\t\tString param = br.readLine();\n\t\t\t/**\n\t\t\t * 作业：\n\t\t\t * 将以下业务调用逻辑写成更加通用的：可以根据客户端发过来的调用类名、调用方法名、调用该参数来灵活调用\n\t\t\t * \n\t\t\t * 《反射》\n\t\t\t * \n\t\t\t */\n\t\t\tGetDataServiceImpl getDataServiceImpl = new GetDataServiceImpl();\n\t\t\tString result = getDataServiceImpl.getData(param);\n\t\t\t//将调用结果写到sokect的输出流中，以发送给客户端\n\t\t\tPrintWriter pw = new PrintWriter(out);\n\t\t\tpw.println(result);\n\t\t\tpw.flush();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}finally{\n\t\t\ttry {\n\t\t\t\tin.close();\n\t\t\t\tout.close();\n\t\t\t\tsocket.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n```\n","source":"_posts/大数据/大数据0405-java-socket.md","raw":"---\ntitle: 大数据0405-java-socket\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - java\n  - socket\ntoc: true\ndate: 2017-12-03 23:14:47\nscaffolds:\n---\n直接上代码吧\n<!-- more -->\n\n```java\npackage cn.itcast.bigdata.socket;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\npublic class ServiceServer {\n\tpublic static void main(String[] args) throws Exception {\n\t\t// 创建一个serversocket，绑定到本机的8899端口上\n\t\tServerSocket server = new ServerSocket();\n\t\tserver.bind(new InetSocketAddress(\"localhost\", 8899));\n\t\t// 接受客户端的连接请求;accept是一个阻塞方法，会一直等待，到有客户端请求连接才返回\n\t\twhile (true) {\n\t\t\tSocket socket = server.accept();\n\t\t\tnew Thread(new ServiceServerTask(socket)).start();\n\t\t}\n\t}\n}\n======================\npackage cn.itcast.bigdata.socket;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.net.Socket;\npublic class ServiceClient {\n\tpublic static void main(String[] args) throws Exception {\n\t\t/*ServiceIterface service = ProxyUtils.getProxy(ServiceIterface.class,\"methodA\",hostname,port);\n\t\tResult = service.methodA(parameters);*/\n\t\t// 向服务器发出请求建立连接\n\t\tSocket socket = new Socket(\"localhost\", 8899);\n\t\t// 从socket中获取输入输出流\n\t\tInputStream inputStream = socket.getInputStream();\n\t\tOutputStream outputStream = socket.getOutputStream();\n\t\tPrintWriter pw = new PrintWriter(outputStream);\n\t\tpw.println(\"hello\");\n\t\tpw.flush();\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(inputStream));\n\t\tString result = br.readLine();\n\t\tSystem.out.println(result);\n\t\tinputStream.close();\n\t\toutputStream.close();\n\t\tsocket.close();\n\t}\n}\n======================\npackage cn.itcast.bigdata.socket;\npublic class GetDataServiceImpl {\n\tpublic String getData(String param){\n\t\treturn \"ok-\"+param;\n\t}\n}\n=======================\npackage cn.itcast.bigdata.socket;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.net.Socket;\npublic class ServiceServerTask implements Runnable{\n\tSocket socket ;\n\tInputStream in=null;\n\tOutputStream out = null;\n\tpublic ServiceServerTask(Socket socket) {\n\t\tthis.socket = socket;\n\t}\n\t//业务逻辑：跟客户端进行数据交互\n\t@Override\n\tpublic void run() {\n\t\t try {\n\t\t\t//从socket连接中获取到与client之间的网络通信输入输出流 \n\t\t\tin = socket.getInputStream();\n\t\t\tout = socket.getOutputStream();\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(in));\n\t\t\t//从网络通信输入流中读取客户端发送过来的数据\n\t\t\t//注意：socketinputstream的读数据的方法都是阻塞的 \n\t\t\tString param = br.readLine();\n\t\t\t/**\n\t\t\t * 作业：\n\t\t\t * 将以下业务调用逻辑写成更加通用的：可以根据客户端发过来的调用类名、调用方法名、调用该参数来灵活调用\n\t\t\t * \n\t\t\t * 《反射》\n\t\t\t * \n\t\t\t */\n\t\t\tGetDataServiceImpl getDataServiceImpl = new GetDataServiceImpl();\n\t\t\tString result = getDataServiceImpl.getData(param);\n\t\t\t//将调用结果写到sokect的输出流中，以发送给客户端\n\t\t\tPrintWriter pw = new PrintWriter(out);\n\t\t\tpw.println(result);\n\t\t\tpw.flush();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}finally{\n\t\t\ttry {\n\t\t\t\tin.close();\n\t\t\t\tout.close();\n\t\t\t\tsocket.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n```\n","slug":"大数据/大数据0405-java-socket","published":1,"updated":"2018-02-06T07:50:05.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89zo001nv4vfi91mpu4f","content":"<p>直接上代码吧<br><a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.socket;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceServer</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 创建一个serversocket，绑定到本机的8899端口上</span></div><div class=\"line\">\t\tServerSocket server = <span class=\"keyword\">new</span> ServerSocket();</div><div class=\"line\">\t\tserver.bind(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8899</span>));</div><div class=\"line\">\t\t<span class=\"comment\">// 接受客户端的连接请求;accept是一个阻塞方法，会一直等待，到有客户端请求连接才返回</span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\tSocket socket = server.accept();</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ServiceServerTask(socket)).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">======================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.socket;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/*ServiceIterface service = ProxyUtils.getProxy(ServiceIterface.class,\"methodA\",hostname,port);</span></div><div class=\"line\"><span class=\"comment\">\t\tResult = service.methodA(parameters);*/</span></div><div class=\"line\">\t\t<span class=\"comment\">// 向服务器发出请求建立连接</span></div><div class=\"line\">\t\tSocket socket = <span class=\"keyword\">new</span> Socket(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8899</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 从socket中获取输入输出流</span></div><div class=\"line\">\t\tInputStream inputStream = socket.getInputStream();</div><div class=\"line\">\t\tOutputStream outputStream = socket.getOutputStream();</div><div class=\"line\">\t\tPrintWriter pw = <span class=\"keyword\">new</span> PrintWriter(outputStream);</div><div class=\"line\">\t\tpw.println(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">\t\tpw.flush();</div><div class=\"line\">\t\tBufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(inputStream));</div><div class=\"line\">\t\tString result = br.readLine();</div><div class=\"line\">\t\tSystem.out.println(result);</div><div class=\"line\">\t\tinputStream.close();</div><div class=\"line\">\t\toutputStream.close();</div><div class=\"line\">\t\tsocket.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">======================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.socket;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetDataServiceImpl</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getData</span><span class=\"params\">(String param)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"ok-\"</span>+param;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">=======================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.socket;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceServerTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\">\tSocket socket ;</div><div class=\"line\">\tInputStream in=<span class=\"keyword\">null</span>;</div><div class=\"line\">\tOutputStream out = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServiceServerTask</span><span class=\"params\">(Socket socket)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.socket = socket;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//业务逻辑：跟客户端进行数据交互</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//从socket连接中获取到与client之间的网络通信输入输出流 </span></div><div class=\"line\">\t\t\tin = socket.getInputStream();</div><div class=\"line\">\t\t\tout = socket.getOutputStream();</div><div class=\"line\">\t\t\tBufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(in));</div><div class=\"line\">\t\t\t<span class=\"comment\">//从网络通信输入流中读取客户端发送过来的数据</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//注意：socketinputstream的读数据的方法都是阻塞的 </span></div><div class=\"line\">\t\t\tString param = br.readLine();</div><div class=\"line\">\t\t\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t\t\t * 作业：</span></div><div class=\"line\"><span class=\"comment\">\t\t\t * 将以下业务调用逻辑写成更加通用的：可以根据客户端发过来的调用类名、调用方法名、调用该参数来灵活调用</span></div><div class=\"line\"><span class=\"comment\">\t\t\t * </span></div><div class=\"line\"><span class=\"comment\">\t\t\t * 《反射》</span></div><div class=\"line\"><span class=\"comment\">\t\t\t * </span></div><div class=\"line\"><span class=\"comment\">\t\t\t */</span></div><div class=\"line\">\t\t\tGetDataServiceImpl getDataServiceImpl = <span class=\"keyword\">new</span> GetDataServiceImpl();</div><div class=\"line\">\t\t\tString result = getDataServiceImpl.getData(param);</div><div class=\"line\">\t\t\t<span class=\"comment\">//将调用结果写到sokect的输出流中，以发送给客户端</span></div><div class=\"line\">\t\t\tPrintWriter pw = <span class=\"keyword\">new</span> PrintWriter(out);</div><div class=\"line\">\t\t\tpw.println(result);</div><div class=\"line\">\t\t\tpw.flush();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tin.close();</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t\tsocket.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>直接上代码吧<br>","more":"</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.socket;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceServer</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 创建一个serversocket，绑定到本机的8899端口上</span></div><div class=\"line\">\t\tServerSocket server = <span class=\"keyword\">new</span> ServerSocket();</div><div class=\"line\">\t\tserver.bind(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8899</span>));</div><div class=\"line\">\t\t<span class=\"comment\">// 接受客户端的连接请求;accept是一个阻塞方法，会一直等待，到有客户端请求连接才返回</span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">\t\t\tSocket socket = server.accept();</div><div class=\"line\">\t\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ServiceServerTask(socket)).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">======================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.socket;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">/*ServiceIterface service = ProxyUtils.getProxy(ServiceIterface.class,\"methodA\",hostname,port);</span></div><div class=\"line\"><span class=\"comment\">\t\tResult = service.methodA(parameters);*/</span></div><div class=\"line\">\t\t<span class=\"comment\">// 向服务器发出请求建立连接</span></div><div class=\"line\">\t\tSocket socket = <span class=\"keyword\">new</span> Socket(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8899</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 从socket中获取输入输出流</span></div><div class=\"line\">\t\tInputStream inputStream = socket.getInputStream();</div><div class=\"line\">\t\tOutputStream outputStream = socket.getOutputStream();</div><div class=\"line\">\t\tPrintWriter pw = <span class=\"keyword\">new</span> PrintWriter(outputStream);</div><div class=\"line\">\t\tpw.println(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">\t\tpw.flush();</div><div class=\"line\">\t\tBufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(inputStream));</div><div class=\"line\">\t\tString result = br.readLine();</div><div class=\"line\">\t\tSystem.out.println(result);</div><div class=\"line\">\t\tinputStream.close();</div><div class=\"line\">\t\toutputStream.close();</div><div class=\"line\">\t\tsocket.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">======================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.socket;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetDataServiceImpl</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getData</span><span class=\"params\">(String param)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"ok-\"</span>+param;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">=======================</div><div class=\"line\"><span class=\"keyword\">package</span> cn.itcast.bigdata.socket;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceServerTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\">\tSocket socket ;</div><div class=\"line\">\tInputStream in=<span class=\"keyword\">null</span>;</div><div class=\"line\">\tOutputStream out = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServiceServerTask</span><span class=\"params\">(Socket socket)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.socket = socket;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//业务逻辑：跟客户端进行数据交互</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//从socket连接中获取到与client之间的网络通信输入输出流 </span></div><div class=\"line\">\t\t\tin = socket.getInputStream();</div><div class=\"line\">\t\t\tout = socket.getOutputStream();</div><div class=\"line\">\t\t\tBufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(in));</div><div class=\"line\">\t\t\t<span class=\"comment\">//从网络通信输入流中读取客户端发送过来的数据</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//注意：socketinputstream的读数据的方法都是阻塞的 </span></div><div class=\"line\">\t\t\tString param = br.readLine();</div><div class=\"line\">\t\t\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t\t\t * 作业：</span></div><div class=\"line\"><span class=\"comment\">\t\t\t * 将以下业务调用逻辑写成更加通用的：可以根据客户端发过来的调用类名、调用方法名、调用该参数来灵活调用</span></div><div class=\"line\"><span class=\"comment\">\t\t\t * </span></div><div class=\"line\"><span class=\"comment\">\t\t\t * 《反射》</span></div><div class=\"line\"><span class=\"comment\">\t\t\t * </span></div><div class=\"line\"><span class=\"comment\">\t\t\t */</span></div><div class=\"line\">\t\t\tGetDataServiceImpl getDataServiceImpl = <span class=\"keyword\">new</span> GetDataServiceImpl();</div><div class=\"line\">\t\t\tString result = getDataServiceImpl.getData(param);</div><div class=\"line\">\t\t\t<span class=\"comment\">//将调用结果写到sokect的输出流中，以发送给客户端</span></div><div class=\"line\">\t\t\tPrintWriter pw = <span class=\"keyword\">new</span> PrintWriter(out);</div><div class=\"line\">\t\t\tpw.println(result);</div><div class=\"line\">\t\t\tpw.flush();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tin.close();</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t\tsocket.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"微服务框架与实战-总体概览","toc":true,"date":"2018-01-21T15:49:54.000Z","scaffolds":null,"_content":"\n这本书整体的看了一遍，具体细节还没有实践。先做个骨架，用的时候再丰富下。书中按照下面的顺序进行整合。\n<!-- more -->\n\n<style>\ntable th:first-of-type {\n    width: 15px;\n}\n\ntable th:nth-of-type(2) {\n    width: 20%;\n}\n\ntable th:nth-of-type(3) {\n    width: 30%;\n}\n</style>\n\n 章 | 组件 | 功能 | 描述 | \n----------|----------|------------|-------------\n 3|spring-boot             | 基础业务开发 |\n  |spring-boot-actuator    | 提供很多监控端点 | \n 4|Eureka   | 服务的注册与发现 | 集成于spring-cloud-netflix <br/>是Netflix开源的服务发现组件<br/>基于REST的服务<br/>相似组件： Zookeeper，Consul\n 5|Ribbon   | 客户端测负载均衡 | Netflix发布的负载均衡器<br/>有助于控制HTTP和TCP客户端的行为。\n |Feign    | 实现声明式REST调用 | Netflix开发的声明式、模板化的HTTP客户端。\n |Hystrix  | 服务容错处理 |\n |Turbine  | 聚合Hystrix监控数据的工具 | 将所有相关 /hystrix.stream 端点的数据聚合到一个聚合的/turbine.stream中<br/>让集群的监控更加方便\n |RabbitMQ | 消息中间件 | 解决网络故障问题（例如微服务与Turbine网络不通）\n 8|Zuul | 构建微服务网关 | Netflix开源的微服务网关<br/>可以和Eureka、Ribbon、Hystrix等组件配合使用<br/>核心是一系列的过滤器\n  |Sidecar | 整合非JVM微服务 | \n 9|spring-cloud-Config | 统一管理微服务配置 | \n 10|spring-cloud-sleuth | 微服务跟踪 | 分布式跟踪的解决方案\n |ELK | 日志分析系统 | \n |Zipkin | Twitter开源的分布式跟踪系统 | 可与Sleuth配合使用<br/>收集系统的时序数据<br/>追踪微服务框架的系统延时等问题<br/>提供友好的界面，帮助分析追踪数据。\n 12|Docker | 开源容器引擎<br/>有助于更快地交付应用 | 可将应用程序和基础设施层隔离<br/>能将基础设置当做程序一样进行管理<br/>可更快地打包、测试以及部署应用程序<br/>缩短从编写到部署运行代码的周期\n 14|Docker Compose | 编排微服务 | 用于定义和运行多容器Docker应用程序的工具<br/>前身是Fig<br/>非常适合用在开发、测试、构建CI工作流等场景\n\n雪崩效应：\n- 我们常把 “基础服务故障” 导致 “级联故障” 的现象成为雪崩效应。\n- 描述的是提供者不可用导致消费者不可用，并将不可用逐渐放大的过程。\n\n\n\n\n\n","source":"_posts/微服务/微服务框架与实战-总体概览.md","raw":"---\ntitle: 微服务框架与实战-总体概览\ncategories: 微服务学习\ntags:\n  - 微服务\ntoc: true\ndate: 2018-01-21 23:49:54\nscaffolds:\n---\n\n这本书整体的看了一遍，具体细节还没有实践。先做个骨架，用的时候再丰富下。书中按照下面的顺序进行整合。\n<!-- more -->\n\n<style>\ntable th:first-of-type {\n    width: 15px;\n}\n\ntable th:nth-of-type(2) {\n    width: 20%;\n}\n\ntable th:nth-of-type(3) {\n    width: 30%;\n}\n</style>\n\n 章 | 组件 | 功能 | 描述 | \n----------|----------|------------|-------------\n 3|spring-boot             | 基础业务开发 |\n  |spring-boot-actuator    | 提供很多监控端点 | \n 4|Eureka   | 服务的注册与发现 | 集成于spring-cloud-netflix <br/>是Netflix开源的服务发现组件<br/>基于REST的服务<br/>相似组件： Zookeeper，Consul\n 5|Ribbon   | 客户端测负载均衡 | Netflix发布的负载均衡器<br/>有助于控制HTTP和TCP客户端的行为。\n |Feign    | 实现声明式REST调用 | Netflix开发的声明式、模板化的HTTP客户端。\n |Hystrix  | 服务容错处理 |\n |Turbine  | 聚合Hystrix监控数据的工具 | 将所有相关 /hystrix.stream 端点的数据聚合到一个聚合的/turbine.stream中<br/>让集群的监控更加方便\n |RabbitMQ | 消息中间件 | 解决网络故障问题（例如微服务与Turbine网络不通）\n 8|Zuul | 构建微服务网关 | Netflix开源的微服务网关<br/>可以和Eureka、Ribbon、Hystrix等组件配合使用<br/>核心是一系列的过滤器\n  |Sidecar | 整合非JVM微服务 | \n 9|spring-cloud-Config | 统一管理微服务配置 | \n 10|spring-cloud-sleuth | 微服务跟踪 | 分布式跟踪的解决方案\n |ELK | 日志分析系统 | \n |Zipkin | Twitter开源的分布式跟踪系统 | 可与Sleuth配合使用<br/>收集系统的时序数据<br/>追踪微服务框架的系统延时等问题<br/>提供友好的界面，帮助分析追踪数据。\n 12|Docker | 开源容器引擎<br/>有助于更快地交付应用 | 可将应用程序和基础设施层隔离<br/>能将基础设置当做程序一样进行管理<br/>可更快地打包、测试以及部署应用程序<br/>缩短从编写到部署运行代码的周期\n 14|Docker Compose | 编排微服务 | 用于定义和运行多容器Docker应用程序的工具<br/>前身是Fig<br/>非常适合用在开发、测试、构建CI工作流等场景\n\n雪崩效应：\n- 我们常把 “基础服务故障” 导致 “级联故障” 的现象成为雪崩效应。\n- 描述的是提供者不可用导致消费者不可用，并将不可用逐渐放大的过程。\n\n\n\n\n\n","slug":"微服务/微服务框架与实战-总体概览","published":1,"updated":"2018-02-06T07:52:42.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89zq001qv4vfdcqawo3v","content":"<p>这本书整体的看了一遍，具体细节还没有实践。先做个骨架，用的时候再丰富下。书中按照下面的顺序进行整合。<br><a id=\"more\"></a></p>\n<style>\ntable th:first-of-type {\n    width: 15px;\n}\n\ntable th:nth-of-type(2) {\n    width: 20%;\n}\n\ntable th:nth-of-type(3) {\n    width: 30%;\n}\n</style>\n\n<table>\n<thead>\n<tr>\n<th>章</th>\n<th>组件</th>\n<th>功能</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 3</td>\n<td>spring-boot</td>\n<td>基础业务开发</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>spring-boot-actuator</td>\n<td>提供很多监控端点</td>\n<td></td>\n</tr>\n<tr>\n<td> 4</td>\n<td>Eureka</td>\n<td>服务的注册与发现</td>\n<td>集成于spring-cloud-netflix <br>是Netflix开源的服务发现组件<br>基于REST的服务<br>相似组件： Zookeeper，Consul</td>\n</tr>\n<tr>\n<td> 5</td>\n<td>Ribbon</td>\n<td>客户端测负载均衡</td>\n<td>Netflix发布的负载均衡器<br>有助于控制HTTP和TCP客户端的行为。</td>\n</tr>\n<tr>\n<td></td>\n<td>Feign</td>\n<td>实现声明式REST调用</td>\n<td>Netflix开发的声明式、模板化的HTTP客户端。</td>\n</tr>\n<tr>\n<td></td>\n<td>Hystrix</td>\n<td>服务容错处理</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Turbine</td>\n<td>聚合Hystrix监控数据的工具</td>\n<td>将所有相关 /hystrix.stream 端点的数据聚合到一个聚合的/turbine.stream中<br>让集群的监控更加方便</td>\n</tr>\n<tr>\n<td></td>\n<td>RabbitMQ</td>\n<td>消息中间件</td>\n<td>解决网络故障问题（例如微服务与Turbine网络不通）</td>\n</tr>\n<tr>\n<td> 8</td>\n<td>Zuul</td>\n<td>构建微服务网关</td>\n<td>Netflix开源的微服务网关<br>可以和Eureka、Ribbon、Hystrix等组件配合使用<br>核心是一系列的过滤器</td>\n</tr>\n<tr>\n<td></td>\n<td>Sidecar</td>\n<td>整合非JVM微服务</td>\n<td></td>\n</tr>\n<tr>\n<td> 9</td>\n<td>spring-cloud-Config</td>\n<td>统一管理微服务配置</td>\n<td></td>\n</tr>\n<tr>\n<td> 10</td>\n<td>spring-cloud-sleuth</td>\n<td>微服务跟踪</td>\n<td>分布式跟踪的解决方案</td>\n</tr>\n<tr>\n<td></td>\n<td>ELK</td>\n<td>日志分析系统</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Zipkin</td>\n<td>Twitter开源的分布式跟踪系统</td>\n<td>可与Sleuth配合使用<br>收集系统的时序数据<br>追踪微服务框架的系统延时等问题<br>提供友好的界面，帮助分析追踪数据。</td>\n</tr>\n<tr>\n<td> 12</td>\n<td>Docker</td>\n<td>开源容器引擎<br>有助于更快地交付应用</td>\n<td>可将应用程序和基础设施层隔离<br>能将基础设置当做程序一样进行管理<br>可更快地打包、测试以及部署应用程序<br>缩短从编写到部署运行代码的周期</td>\n</tr>\n<tr>\n<td> 14</td>\n<td>Docker Compose</td>\n<td>编排微服务</td>\n<td>用于定义和运行多容器Docker应用程序的工具<br>前身是Fig<br>非常适合用在开发、测试、构建CI工作流等场景</td>\n</tr>\n</tbody>\n</table>\n<p>雪崩效应：</p>\n<ul>\n<li>我们常把 “基础服务故障” 导致 “级联故障” 的现象成为雪崩效应。</li>\n<li>描述的是提供者不可用导致消费者不可用，并将不可用逐渐放大的过程。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>这本书整体的看了一遍，具体细节还没有实践。先做个骨架，用的时候再丰富下。书中按照下面的顺序进行整合。<br>","more":"</p>\n<style>\ntable th:first-of-type {\n    width: 15px;\n}\n\ntable th:nth-of-type(2) {\n    width: 20%;\n}\n\ntable th:nth-of-type(3) {\n    width: 30%;\n}\n</style>\n\n<table>\n<thead>\n<tr>\n<th>章</th>\n<th>组件</th>\n<th>功能</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 3</td>\n<td>spring-boot</td>\n<td>基础业务开发</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>spring-boot-actuator</td>\n<td>提供很多监控端点</td>\n<td></td>\n</tr>\n<tr>\n<td> 4</td>\n<td>Eureka</td>\n<td>服务的注册与发现</td>\n<td>集成于spring-cloud-netflix <br>是Netflix开源的服务发现组件<br>基于REST的服务<br>相似组件： Zookeeper，Consul</td>\n</tr>\n<tr>\n<td> 5</td>\n<td>Ribbon</td>\n<td>客户端测负载均衡</td>\n<td>Netflix发布的负载均衡器<br>有助于控制HTTP和TCP客户端的行为。</td>\n</tr>\n<tr>\n<td></td>\n<td>Feign</td>\n<td>实现声明式REST调用</td>\n<td>Netflix开发的声明式、模板化的HTTP客户端。</td>\n</tr>\n<tr>\n<td></td>\n<td>Hystrix</td>\n<td>服务容错处理</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Turbine</td>\n<td>聚合Hystrix监控数据的工具</td>\n<td>将所有相关 /hystrix.stream 端点的数据聚合到一个聚合的/turbine.stream中<br>让集群的监控更加方便</td>\n</tr>\n<tr>\n<td></td>\n<td>RabbitMQ</td>\n<td>消息中间件</td>\n<td>解决网络故障问题（例如微服务与Turbine网络不通）</td>\n</tr>\n<tr>\n<td> 8</td>\n<td>Zuul</td>\n<td>构建微服务网关</td>\n<td>Netflix开源的微服务网关<br>可以和Eureka、Ribbon、Hystrix等组件配合使用<br>核心是一系列的过滤器</td>\n</tr>\n<tr>\n<td></td>\n<td>Sidecar</td>\n<td>整合非JVM微服务</td>\n<td></td>\n</tr>\n<tr>\n<td> 9</td>\n<td>spring-cloud-Config</td>\n<td>统一管理微服务配置</td>\n<td></td>\n</tr>\n<tr>\n<td> 10</td>\n<td>spring-cloud-sleuth</td>\n<td>微服务跟踪</td>\n<td>分布式跟踪的解决方案</td>\n</tr>\n<tr>\n<td></td>\n<td>ELK</td>\n<td>日志分析系统</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Zipkin</td>\n<td>Twitter开源的分布式跟踪系统</td>\n<td>可与Sleuth配合使用<br>收集系统的时序数据<br>追踪微服务框架的系统延时等问题<br>提供友好的界面，帮助分析追踪数据。</td>\n</tr>\n<tr>\n<td> 12</td>\n<td>Docker</td>\n<td>开源容器引擎<br>有助于更快地交付应用</td>\n<td>可将应用程序和基础设施层隔离<br>能将基础设置当做程序一样进行管理<br>可更快地打包、测试以及部署应用程序<br>缩短从编写到部署运行代码的周期</td>\n</tr>\n<tr>\n<td> 14</td>\n<td>Docker Compose</td>\n<td>编排微服务</td>\n<td>用于定义和运行多容器Docker应用程序的工具<br>前身是Fig<br>非常适合用在开发、测试、构建CI工作流等场景</td>\n</tr>\n</tbody>\n</table>\n<p>雪崩效应：</p>\n<ul>\n<li>我们常把 “基础服务故障” 导致 “级联故障” 的现象成为雪崩效应。</li>\n<li>描述的是提供者不可用导致消费者不可用，并将不可用逐渐放大的过程。</li>\n</ul>"},{"title":"大数据0501-轻量级RPC框架开发","toc":true,"date":"2017-12-31T18:08:22.000Z","scaffolds":null,"_content":"\n1、掌握RPC原理\n2、掌握nio操作\n3、掌握netty简单的api\n4、掌握自定义RPC框架\n<!-- more -->\n# 1. RPC原理\n## 1.1. 什么是RPC\nRPC（Remote Procedure Call Protocol）——`远程过程调用协议`，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。\nRPC采用`客户机/服务器模式`。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。\n\n## 1.2. RPC原理\n\n![2017126231022](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017126231022.png)\n\n运行时,一次客户机对服务器的RPC调用,其内部操作大致有如下十步：\n1. 调用客户端句柄；执行传送参数\n1. 调用本地系统内核发送网络消息\n1. 消息传送到远程主机\n1. 服务器句柄得到消息并取得参数\n1. 执行远程过程\n1. 执行的过程将结果返回服务器句柄\n1. 服务器句柄返回结果，调用远程系统内核\n1. 消息传回本地主机\n1. 客户句柄由内核接收消息\n1. 客户接收句柄返回的数据\n\n# 2. NIO\nnio 是New IO 的简称，在jdk1.4 里提供的新api 。   \nSun 官方标榜的特性如下：   \n1. 为所有的原始类型提供(Buffer)缓存支持。字符集编码解码解决方案。 \n2. Channel ：一个新的原始I/O 抽象。 \n3. 支持锁和内存映射文件的文件访问接口。 \n4. 提供多路(non-bloking) 非阻塞式的高伸缩性网络I/O 。\n\n## 2.1. socket nio原理\n### 2.1.1. 传统的I/O\n使用传统的I/O程序读取文件内容, 并写入到另一个文件(或Socket), 如下程序:\n```java\nFile.read(fileDesc, buf, len);\nSocket.send(socket, buf, len);\n```\n\n会有较大的性能开销, 主要表现在一下两方面:\n1. 上下文切换(context switch), 此处有4次用户态和内核态的切换\n2. Buffer内存开销, 一个是应用程序buffer, 另一个是系统读取buffer以及socket buffer\n\n其运行示意图如下    \n![2017127225741](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017127225741.png)\n\n1. 先将文件内容从磁盘中拷贝到操作系统buffer\n2. 再从操作系统buffer拷贝到程序应用buffer\n3. 从程序buffer拷贝到socket buffer\n4. 从socket buffer拷贝到协议引擎.\n\n## 2.2. NIO\nNIO技术省去了将操作系统的read buffer拷贝到程序的buffer, 以及从程序buffer拷贝到socket buffer的步骤, 直接将 read buffer 拷贝到 socket buffer. java 的 FileChannel.transferTo() 方法就是这样的实现, 这个实现是依赖于操作系统底层的sendFile()实现的.  \n```\npublicvoid transferTo(long position, long count, WritableByteChannel target);\n\n```\n他的底层调用的是系统调用sendFile()方法\n```\nsendfile(int out_fd, int in_fd, off_t *offset, size_t count);\n```\n如下图  \n![201712723052](http://ovasdkxqr.bkt.clouddn.com/image/blog/201712723052.png)\n\n参考帖子：http://blog.csdn.net/dd864140130/article/details/50299687\n# 3. 轻量级RPC开发\n## 3.1. 轻量级RPC框架需求分析及原理分析\n![2017126231155](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017126231155.png)\n## 3.2. 大概流程\n![20181115823](http://ovasdkxqr.bkt.clouddn.com/image/blog/20181115823.png)\n\n## 3.3. 工程目录\n![20181115919](http://ovasdkxqr.bkt.clouddn.com/image/blog/20181115919.png)\n- rpc-sample-server   用户服务端 业务实现类 \n- rpc-sample-common   用户公用包 包含了业务接口\n- rpc-sample-app      用户客户端 调用业务接口\n- rpc-server          框架 服务包\n- rpc-registry        框架 注册和发现 zk用的包\n- rpc-common          框架 公共包 request response 加密 解密 序列化等公用类\n- rpc-client          框架 客户包\n## 3.4. 框架\nrpc-server 主要利用`反射`将接收到的request进行解析、执行、返回结果。  \nrpc-client 主要使用`动态代理`将接口的调用 封装进request进行请求，然后返回结果。\n","source":"_posts/大数据/大数据0501-轻量级RPC框架开发.md","raw":"---\ntitle: 大数据0501-轻量级RPC框架开发\ncategories: 大数据学习笔记\ntags:\n  - 大数据\n  - rpc\ntoc: true\ndate: 2018-01-01 02:08:22\nscaffolds:\n---\n\n1、掌握RPC原理\n2、掌握nio操作\n3、掌握netty简单的api\n4、掌握自定义RPC框架\n<!-- more -->\n# 1. RPC原理\n## 1.1. 什么是RPC\nRPC（Remote Procedure Call Protocol）——`远程过程调用协议`，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。\nRPC采用`客户机/服务器模式`。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。\n\n## 1.2. RPC原理\n\n![2017126231022](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017126231022.png)\n\n运行时,一次客户机对服务器的RPC调用,其内部操作大致有如下十步：\n1. 调用客户端句柄；执行传送参数\n1. 调用本地系统内核发送网络消息\n1. 消息传送到远程主机\n1. 服务器句柄得到消息并取得参数\n1. 执行远程过程\n1. 执行的过程将结果返回服务器句柄\n1. 服务器句柄返回结果，调用远程系统内核\n1. 消息传回本地主机\n1. 客户句柄由内核接收消息\n1. 客户接收句柄返回的数据\n\n# 2. NIO\nnio 是New IO 的简称，在jdk1.4 里提供的新api 。   \nSun 官方标榜的特性如下：   \n1. 为所有的原始类型提供(Buffer)缓存支持。字符集编码解码解决方案。 \n2. Channel ：一个新的原始I/O 抽象。 \n3. 支持锁和内存映射文件的文件访问接口。 \n4. 提供多路(non-bloking) 非阻塞式的高伸缩性网络I/O 。\n\n## 2.1. socket nio原理\n### 2.1.1. 传统的I/O\n使用传统的I/O程序读取文件内容, 并写入到另一个文件(或Socket), 如下程序:\n```java\nFile.read(fileDesc, buf, len);\nSocket.send(socket, buf, len);\n```\n\n会有较大的性能开销, 主要表现在一下两方面:\n1. 上下文切换(context switch), 此处有4次用户态和内核态的切换\n2. Buffer内存开销, 一个是应用程序buffer, 另一个是系统读取buffer以及socket buffer\n\n其运行示意图如下    \n![2017127225741](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017127225741.png)\n\n1. 先将文件内容从磁盘中拷贝到操作系统buffer\n2. 再从操作系统buffer拷贝到程序应用buffer\n3. 从程序buffer拷贝到socket buffer\n4. 从socket buffer拷贝到协议引擎.\n\n## 2.2. NIO\nNIO技术省去了将操作系统的read buffer拷贝到程序的buffer, 以及从程序buffer拷贝到socket buffer的步骤, 直接将 read buffer 拷贝到 socket buffer. java 的 FileChannel.transferTo() 方法就是这样的实现, 这个实现是依赖于操作系统底层的sendFile()实现的.  \n```\npublicvoid transferTo(long position, long count, WritableByteChannel target);\n\n```\n他的底层调用的是系统调用sendFile()方法\n```\nsendfile(int out_fd, int in_fd, off_t *offset, size_t count);\n```\n如下图  \n![201712723052](http://ovasdkxqr.bkt.clouddn.com/image/blog/201712723052.png)\n\n参考帖子：http://blog.csdn.net/dd864140130/article/details/50299687\n# 3. 轻量级RPC开发\n## 3.1. 轻量级RPC框架需求分析及原理分析\n![2017126231155](http://ovasdkxqr.bkt.clouddn.com/image/blog/2017126231155.png)\n## 3.2. 大概流程\n![20181115823](http://ovasdkxqr.bkt.clouddn.com/image/blog/20181115823.png)\n\n## 3.3. 工程目录\n![20181115919](http://ovasdkxqr.bkt.clouddn.com/image/blog/20181115919.png)\n- rpc-sample-server   用户服务端 业务实现类 \n- rpc-sample-common   用户公用包 包含了业务接口\n- rpc-sample-app      用户客户端 调用业务接口\n- rpc-server          框架 服务包\n- rpc-registry        框架 注册和发现 zk用的包\n- rpc-common          框架 公共包 request response 加密 解密 序列化等公用类\n- rpc-client          框架 客户包\n## 3.4. 框架\nrpc-server 主要利用`反射`将接收到的request进行解析、执行、返回结果。  \nrpc-client 主要使用`动态代理`将接口的调用 封装进request进行请求，然后返回结果。\n","slug":"大数据/大数据0501-轻量级RPC框架开发","published":1,"updated":"2018-02-06T07:50:13.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89zs001uv4vf5jihl3qc","content":"<p>1、掌握RPC原理<br>2、掌握nio操作<br>3、掌握netty简单的api<br>4、掌握自定义RPC框架<br><a id=\"more\"></a></p>\n<h1 id=\"1-RPC原理\"><a href=\"#1-RPC原理\" class=\"headerlink\" title=\"1. RPC原理\"></a>1. RPC原理</h1><h2 id=\"1-1-什么是RPC\"><a href=\"#1-1-什么是RPC\" class=\"headerlink\" title=\"1.1. 什么是RPC\"></a>1.1. 什么是RPC</h2><p>RPC（Remote Procedure Call Protocol）——<code>远程过程调用协议</code>，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。<br>RPC采用<code>客户机/服务器模式</code>。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。</p>\n<h2 id=\"1-2-RPC原理\"><a href=\"#1-2-RPC原理\" class=\"headerlink\" title=\"1.2. RPC原理\"></a>1.2. RPC原理</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017126231022.png\" alt=\"2017126231022\"></p>\n<p>运行时,一次客户机对服务器的RPC调用,其内部操作大致有如下十步：</p>\n<ol>\n<li>调用客户端句柄；执行传送参数</li>\n<li>调用本地系统内核发送网络消息</li>\n<li>消息传送到远程主机</li>\n<li>服务器句柄得到消息并取得参数</li>\n<li>执行远程过程</li>\n<li>执行的过程将结果返回服务器句柄</li>\n<li>服务器句柄返回结果，调用远程系统内核</li>\n<li>消息传回本地主机</li>\n<li>客户句柄由内核接收消息</li>\n<li>客户接收句柄返回的数据</li>\n</ol>\n<h1 id=\"2-NIO\"><a href=\"#2-NIO\" class=\"headerlink\" title=\"2. NIO\"></a>2. NIO</h1><p>nio 是New IO 的简称，在jdk1.4 里提供的新api 。<br>Sun 官方标榜的特性如下：   </p>\n<ol>\n<li>为所有的原始类型提供(Buffer)缓存支持。字符集编码解码解决方案。 </li>\n<li>Channel ：一个新的原始I/O 抽象。 </li>\n<li>支持锁和内存映射文件的文件访问接口。 </li>\n<li>提供多路(non-bloking) 非阻塞式的高伸缩性网络I/O 。</li>\n</ol>\n<h2 id=\"2-1-socket-nio原理\"><a href=\"#2-1-socket-nio原理\" class=\"headerlink\" title=\"2.1. socket nio原理\"></a>2.1. socket nio原理</h2><h3 id=\"2-1-1-传统的I-O\"><a href=\"#2-1-1-传统的I-O\" class=\"headerlink\" title=\"2.1.1. 传统的I/O\"></a>2.1.1. 传统的I/O</h3><p>使用传统的I/O程序读取文件内容, 并写入到另一个文件(或Socket), 如下程序:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">File.read(fileDesc, buf, len);</div><div class=\"line\">Socket.send(socket, buf, len);</div></pre></td></tr></table></figure></p>\n<p>会有较大的性能开销, 主要表现在一下两方面:</p>\n<ol>\n<li>上下文切换(context switch), 此处有4次用户态和内核态的切换</li>\n<li>Buffer内存开销, 一个是应用程序buffer, 另一个是系统读取buffer以及socket buffer</li>\n</ol>\n<p>其运行示意图如下<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017127225741.png\" alt=\"2017127225741\"></p>\n<ol>\n<li>先将文件内容从磁盘中拷贝到操作系统buffer</li>\n<li>再从操作系统buffer拷贝到程序应用buffer</li>\n<li>从程序buffer拷贝到socket buffer</li>\n<li>从socket buffer拷贝到协议引擎.</li>\n</ol>\n<h2 id=\"2-2-NIO\"><a href=\"#2-2-NIO\" class=\"headerlink\" title=\"2.2. NIO\"></a>2.2. NIO</h2><p>NIO技术省去了将操作系统的read buffer拷贝到程序的buffer, 以及从程序buffer拷贝到socket buffer的步骤, 直接将 read buffer 拷贝到 socket buffer. java 的 FileChannel.transferTo() 方法就是这样的实现, 这个实现是依赖于操作系统底层的sendFile()实现的.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">publicvoid transferTo(long position, long count, WritableByteChannel target);</div></pre></td></tr></table></figure></p>\n<p>他的底层调用的是系统调用sendFile()方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sendfile(int out_fd, int in_fd, off_t *offset, size_t count);</div></pre></td></tr></table></figure></p>\n<p>如下图<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/201712723052.png\" alt=\"201712723052\"></p>\n<p>参考帖子：<a href=\"http://blog.csdn.net/dd864140130/article/details/50299687\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dd864140130/article/details/50299687</a></p>\n<h1 id=\"3-轻量级RPC开发\"><a href=\"#3-轻量级RPC开发\" class=\"headerlink\" title=\"3. 轻量级RPC开发\"></a>3. 轻量级RPC开发</h1><h2 id=\"3-1-轻量级RPC框架需求分析及原理分析\"><a href=\"#3-1-轻量级RPC框架需求分析及原理分析\" class=\"headerlink\" title=\"3.1. 轻量级RPC框架需求分析及原理分析\"></a>3.1. 轻量级RPC框架需求分析及原理分析</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017126231155.png\" alt=\"2017126231155\"></p>\n<h2 id=\"3-2-大概流程\"><a href=\"#3-2-大概流程\" class=\"headerlink\" title=\"3.2. 大概流程\"></a>3.2. 大概流程</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20181115823.png\" alt=\"20181115823\"></p>\n<h2 id=\"3-3-工程目录\"><a href=\"#3-3-工程目录\" class=\"headerlink\" title=\"3.3. 工程目录\"></a>3.3. 工程目录</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20181115919.png\" alt=\"20181115919\"></p>\n<ul>\n<li>rpc-sample-server   用户服务端 业务实现类 </li>\n<li>rpc-sample-common   用户公用包 包含了业务接口</li>\n<li>rpc-sample-app      用户客户端 调用业务接口</li>\n<li>rpc-server          框架 服务包</li>\n<li>rpc-registry        框架 注册和发现 zk用的包</li>\n<li>rpc-common          框架 公共包 request response 加密 解密 序列化等公用类</li>\n<li>rpc-client          框架 客户包<h2 id=\"3-4-框架\"><a href=\"#3-4-框架\" class=\"headerlink\" title=\"3.4. 框架\"></a>3.4. 框架</h2>rpc-server 主要利用<code>反射</code>将接收到的request进行解析、执行、返回结果。<br>rpc-client 主要使用<code>动态代理</code>将接口的调用 封装进request进行请求，然后返回结果。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>1、掌握RPC原理<br>2、掌握nio操作<br>3、掌握netty简单的api<br>4、掌握自定义RPC框架<br>","more":"</p>\n<h1 id=\"1-RPC原理\"><a href=\"#1-RPC原理\" class=\"headerlink\" title=\"1. RPC原理\"></a>1. RPC原理</h1><h2 id=\"1-1-什么是RPC\"><a href=\"#1-1-什么是RPC\" class=\"headerlink\" title=\"1.1. 什么是RPC\"></a>1.1. 什么是RPC</h2><p>RPC（Remote Procedure Call Protocol）——<code>远程过程调用协议</code>，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。<br>RPC采用<code>客户机/服务器模式</code>。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。</p>\n<h2 id=\"1-2-RPC原理\"><a href=\"#1-2-RPC原理\" class=\"headerlink\" title=\"1.2. RPC原理\"></a>1.2. RPC原理</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017126231022.png\" alt=\"2017126231022\"></p>\n<p>运行时,一次客户机对服务器的RPC调用,其内部操作大致有如下十步：</p>\n<ol>\n<li>调用客户端句柄；执行传送参数</li>\n<li>调用本地系统内核发送网络消息</li>\n<li>消息传送到远程主机</li>\n<li>服务器句柄得到消息并取得参数</li>\n<li>执行远程过程</li>\n<li>执行的过程将结果返回服务器句柄</li>\n<li>服务器句柄返回结果，调用远程系统内核</li>\n<li>消息传回本地主机</li>\n<li>客户句柄由内核接收消息</li>\n<li>客户接收句柄返回的数据</li>\n</ol>\n<h1 id=\"2-NIO\"><a href=\"#2-NIO\" class=\"headerlink\" title=\"2. NIO\"></a>2. NIO</h1><p>nio 是New IO 的简称，在jdk1.4 里提供的新api 。<br>Sun 官方标榜的特性如下：   </p>\n<ol>\n<li>为所有的原始类型提供(Buffer)缓存支持。字符集编码解码解决方案。 </li>\n<li>Channel ：一个新的原始I/O 抽象。 </li>\n<li>支持锁和内存映射文件的文件访问接口。 </li>\n<li>提供多路(non-bloking) 非阻塞式的高伸缩性网络I/O 。</li>\n</ol>\n<h2 id=\"2-1-socket-nio原理\"><a href=\"#2-1-socket-nio原理\" class=\"headerlink\" title=\"2.1. socket nio原理\"></a>2.1. socket nio原理</h2><h3 id=\"2-1-1-传统的I-O\"><a href=\"#2-1-1-传统的I-O\" class=\"headerlink\" title=\"2.1.1. 传统的I/O\"></a>2.1.1. 传统的I/O</h3><p>使用传统的I/O程序读取文件内容, 并写入到另一个文件(或Socket), 如下程序:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">File.read(fileDesc, buf, len);</div><div class=\"line\">Socket.send(socket, buf, len);</div></pre></td></tr></table></figure></p>\n<p>会有较大的性能开销, 主要表现在一下两方面:</p>\n<ol>\n<li>上下文切换(context switch), 此处有4次用户态和内核态的切换</li>\n<li>Buffer内存开销, 一个是应用程序buffer, 另一个是系统读取buffer以及socket buffer</li>\n</ol>\n<p>其运行示意图如下<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017127225741.png\" alt=\"2017127225741\"></p>\n<ol>\n<li>先将文件内容从磁盘中拷贝到操作系统buffer</li>\n<li>再从操作系统buffer拷贝到程序应用buffer</li>\n<li>从程序buffer拷贝到socket buffer</li>\n<li>从socket buffer拷贝到协议引擎.</li>\n</ol>\n<h2 id=\"2-2-NIO\"><a href=\"#2-2-NIO\" class=\"headerlink\" title=\"2.2. NIO\"></a>2.2. NIO</h2><p>NIO技术省去了将操作系统的read buffer拷贝到程序的buffer, 以及从程序buffer拷贝到socket buffer的步骤, 直接将 read buffer 拷贝到 socket buffer. java 的 FileChannel.transferTo() 方法就是这样的实现, 这个实现是依赖于操作系统底层的sendFile()实现的.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">publicvoid transferTo(long position, long count, WritableByteChannel target);</div></pre></td></tr></table></figure></p>\n<p>他的底层调用的是系统调用sendFile()方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sendfile(int out_fd, int in_fd, off_t *offset, size_t count);</div></pre></td></tr></table></figure></p>\n<p>如下图<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/201712723052.png\" alt=\"201712723052\"></p>\n<p>参考帖子：<a href=\"http://blog.csdn.net/dd864140130/article/details/50299687\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dd864140130/article/details/50299687</a></p>\n<h1 id=\"3-轻量级RPC开发\"><a href=\"#3-轻量级RPC开发\" class=\"headerlink\" title=\"3. 轻量级RPC开发\"></a>3. 轻量级RPC开发</h1><h2 id=\"3-1-轻量级RPC框架需求分析及原理分析\"><a href=\"#3-1-轻量级RPC框架需求分析及原理分析\" class=\"headerlink\" title=\"3.1. 轻量级RPC框架需求分析及原理分析\"></a>3.1. 轻量级RPC框架需求分析及原理分析</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/2017126231155.png\" alt=\"2017126231155\"></p>\n<h2 id=\"3-2-大概流程\"><a href=\"#3-2-大概流程\" class=\"headerlink\" title=\"3.2. 大概流程\"></a>3.2. 大概流程</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20181115823.png\" alt=\"20181115823\"></p>\n<h2 id=\"3-3-工程目录\"><a href=\"#3-3-工程目录\" class=\"headerlink\" title=\"3.3. 工程目录\"></a>3.3. 工程目录</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20181115919.png\" alt=\"20181115919\"></p>\n<ul>\n<li>rpc-sample-server   用户服务端 业务实现类 </li>\n<li>rpc-sample-common   用户公用包 包含了业务接口</li>\n<li>rpc-sample-app      用户客户端 调用业务接口</li>\n<li>rpc-server          框架 服务包</li>\n<li>rpc-registry        框架 注册和发现 zk用的包</li>\n<li>rpc-common          框架 公共包 request response 加密 解密 序列化等公用类</li>\n<li>rpc-client          框架 客户包<h2 id=\"3-4-框架\"><a href=\"#3-4-框架\" class=\"headerlink\" title=\"3.4. 框架\"></a>3.4. 框架</h2>rpc-server 主要利用<code>反射</code>将接收到的request进行解析、执行、返回结果。<br>rpc-client 主要使用<code>动态代理</code>将接口的调用 封装进request进行请求，然后返回结果。</li>\n</ul>"},{"title":"微服务框架与实战-笔记01-概述","toc":true,"date":"2018-01-05T14:42:27.000Z","scaffolds":null,"_content":"\n# 1. 单体应用架构存在的问题\n1. 复杂性高  \n    - 包含模块多\n    - 模块边界模糊\n    - 依赖关系不清\n    - 代码质量残次不齐等等\n1. 技术债务\n1. 部署频率低  \n    - 功能变更或缺陷修复都要重新部署整个应用。\n    - 全量部署 耗时长。影响范围大、风险高。\n1. 可靠性差  \n    - 一个bug可能会导致整个系统的崩溃\n1. 扩展能力受限  \n    - 只能整体扩展，无法根据业务模块进行伸缩。\n1. 阻碍技术创新  \n    - 一般使用统一的技术平台或方案解决所有问题。例如一个使用struts2的100万行代码的单体应用，如果想换成springMVC，成本是非常高的。\n\n# 2. 微服务简介\n并没有严格的定义，将一个单一应用程序开发为一组小型服务的方法。构建的是分布式系统。\n## 2.1. 特性\n\n1. 每个服务运行在自己的进程中\n2. 一系列服务共同构建起整个项目\n3. 服务针对独立业务，只关注某个特定功能\n4. 服务间通信采用轻量级通信机制（如http资源api）\n5. 可以使用不同的语言，不同的存储\n6. 全自动部署机制\n\n# 3. 有点\n1. 易于开发维护\n2. 单个服务启动快\n3. 局部修改易部署\n4. 技术栈不受限\n5. 按需伸缩\n\n# 4. 挑战\n- 运维要求高\n    - 需要保证几十个甚至上百个服务的正常运行与写作\n- 分布式固有的复杂性\n- 接口调整成本搞\n- 重复劳动 \n    - 重复功能不足以分解为一个微服务，可以封装为公共组件，但是多语言就不一定行得通\n\n# 5. 设计原则\n- 单一职责原则\n- 服务自治原则 \n    - 治具备独立的业务能力、依赖与运行环境。\n- 轻量级通信机制 \n    - 体量轻 \n    - 跨语言 \n    - 跨平台 \n    - 常用的有REST AMQP STOMP MQTT\n- 微服务力度\n\n`康威定律`：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。看看下面的图片（来源于互联网，侵删），再想想Apple的产品、微软的产品设计，就能形象生动的理解这句话。\n\n![20181522357](http://ovasdkxqr.bkt.clouddn.com/image/blog/20181522357.png)\n\n用通俗的说法就是：`组织形式等同系统设计`。\n\n# 6. 如何实现微服务架构\n## 6.1. 技术选型\n从开发和运行平台两个维度考虑：\n- 开发框架\n    - spring cloud\n    - dubbo\n    - dropwizard \n    - armada\n- 运行平台\n    - 并不绑定运行平台\n    - PCServer\n    - 阿里云\n    - aws\n    - Docker\n# 7. 架构图\n![201815224722](http://ovasdkxqr.bkt.clouddn.com//image/blog/201815224722.jpg)\n\n","source":"_posts/微服务/微服务框架与实战-笔记01-概述.md","raw":"---\ntitle: 微服务框架与实战-笔记01-概述\ncategories: 微服务学习\ntags:\n  - 微服务\ntoc: true\ndate: 2018-01-05 22:42:27\nscaffolds:\n---\n\n# 1. 单体应用架构存在的问题\n1. 复杂性高  \n    - 包含模块多\n    - 模块边界模糊\n    - 依赖关系不清\n    - 代码质量残次不齐等等\n1. 技术债务\n1. 部署频率低  \n    - 功能变更或缺陷修复都要重新部署整个应用。\n    - 全量部署 耗时长。影响范围大、风险高。\n1. 可靠性差  \n    - 一个bug可能会导致整个系统的崩溃\n1. 扩展能力受限  \n    - 只能整体扩展，无法根据业务模块进行伸缩。\n1. 阻碍技术创新  \n    - 一般使用统一的技术平台或方案解决所有问题。例如一个使用struts2的100万行代码的单体应用，如果想换成springMVC，成本是非常高的。\n\n# 2. 微服务简介\n并没有严格的定义，将一个单一应用程序开发为一组小型服务的方法。构建的是分布式系统。\n## 2.1. 特性\n\n1. 每个服务运行在自己的进程中\n2. 一系列服务共同构建起整个项目\n3. 服务针对独立业务，只关注某个特定功能\n4. 服务间通信采用轻量级通信机制（如http资源api）\n5. 可以使用不同的语言，不同的存储\n6. 全自动部署机制\n\n# 3. 有点\n1. 易于开发维护\n2. 单个服务启动快\n3. 局部修改易部署\n4. 技术栈不受限\n5. 按需伸缩\n\n# 4. 挑战\n- 运维要求高\n    - 需要保证几十个甚至上百个服务的正常运行与写作\n- 分布式固有的复杂性\n- 接口调整成本搞\n- 重复劳动 \n    - 重复功能不足以分解为一个微服务，可以封装为公共组件，但是多语言就不一定行得通\n\n# 5. 设计原则\n- 单一职责原则\n- 服务自治原则 \n    - 治具备独立的业务能力、依赖与运行环境。\n- 轻量级通信机制 \n    - 体量轻 \n    - 跨语言 \n    - 跨平台 \n    - 常用的有REST AMQP STOMP MQTT\n- 微服务力度\n\n`康威定律`：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。看看下面的图片（来源于互联网，侵删），再想想Apple的产品、微软的产品设计，就能形象生动的理解这句话。\n\n![20181522357](http://ovasdkxqr.bkt.clouddn.com/image/blog/20181522357.png)\n\n用通俗的说法就是：`组织形式等同系统设计`。\n\n# 6. 如何实现微服务架构\n## 6.1. 技术选型\n从开发和运行平台两个维度考虑：\n- 开发框架\n    - spring cloud\n    - dubbo\n    - dropwizard \n    - armada\n- 运行平台\n    - 并不绑定运行平台\n    - PCServer\n    - 阿里云\n    - aws\n    - Docker\n# 7. 架构图\n![201815224722](http://ovasdkxqr.bkt.clouddn.com//image/blog/201815224722.jpg)\n\n","slug":"微服务/微服务框架与实战-笔记01-概述","published":1,"updated":"2018-02-06T07:52:46.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89zv001yv4vfxjzq7wgv","content":"<h1 id=\"1-单体应用架构存在的问题\"><a href=\"#1-单体应用架构存在的问题\" class=\"headerlink\" title=\"1. 单体应用架构存在的问题\"></a>1. 单体应用架构存在的问题</h1><ol>\n<li>复杂性高  <ul>\n<li>包含模块多</li>\n<li>模块边界模糊</li>\n<li>依赖关系不清</li>\n<li>代码质量残次不齐等等</li>\n</ul>\n</li>\n<li>技术债务</li>\n<li>部署频率低  <ul>\n<li>功能变更或缺陷修复都要重新部署整个应用。</li>\n<li>全量部署 耗时长。影响范围大、风险高。</li>\n</ul>\n</li>\n<li>可靠性差  <ul>\n<li>一个bug可能会导致整个系统的崩溃</li>\n</ul>\n</li>\n<li>扩展能力受限  <ul>\n<li>只能整体扩展，无法根据业务模块进行伸缩。</li>\n</ul>\n</li>\n<li>阻碍技术创新  <ul>\n<li>一般使用统一的技术平台或方案解决所有问题。例如一个使用struts2的100万行代码的单体应用，如果想换成springMVC，成本是非常高的。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2-微服务简介\"><a href=\"#2-微服务简介\" class=\"headerlink\" title=\"2. 微服务简介\"></a>2. 微服务简介</h1><p>并没有严格的定义，将一个单一应用程序开发为一组小型服务的方法。构建的是分布式系统。</p>\n<h2 id=\"2-1-特性\"><a href=\"#2-1-特性\" class=\"headerlink\" title=\"2.1. 特性\"></a>2.1. 特性</h2><ol>\n<li>每个服务运行在自己的进程中</li>\n<li>一系列服务共同构建起整个项目</li>\n<li>服务针对独立业务，只关注某个特定功能</li>\n<li>服务间通信采用轻量级通信机制（如http资源api）</li>\n<li>可以使用不同的语言，不同的存储</li>\n<li>全自动部署机制</li>\n</ol>\n<h1 id=\"3-有点\"><a href=\"#3-有点\" class=\"headerlink\" title=\"3. 有点\"></a>3. 有点</h1><ol>\n<li>易于开发维护</li>\n<li>单个服务启动快</li>\n<li>局部修改易部署</li>\n<li>技术栈不受限</li>\n<li>按需伸缩</li>\n</ol>\n<h1 id=\"4-挑战\"><a href=\"#4-挑战\" class=\"headerlink\" title=\"4. 挑战\"></a>4. 挑战</h1><ul>\n<li>运维要求高<ul>\n<li>需要保证几十个甚至上百个服务的正常运行与写作</li>\n</ul>\n</li>\n<li>分布式固有的复杂性</li>\n<li>接口调整成本搞</li>\n<li>重复劳动 <ul>\n<li>重复功能不足以分解为一个微服务，可以封装为公共组件，但是多语言就不一定行得通</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"5-设计原则\"><a href=\"#5-设计原则\" class=\"headerlink\" title=\"5. 设计原则\"></a>5. 设计原则</h1><ul>\n<li>单一职责原则</li>\n<li>服务自治原则 <ul>\n<li>治具备独立的业务能力、依赖与运行环境。</li>\n</ul>\n</li>\n<li>轻量级通信机制 <ul>\n<li>体量轻 </li>\n<li>跨语言 </li>\n<li>跨平台 </li>\n<li>常用的有REST AMQP STOMP MQTT</li>\n</ul>\n</li>\n<li>微服务力度</li>\n</ul>\n<p><code>康威定律</code>：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。看看下面的图片（来源于互联网，侵删），再想想Apple的产品、微软的产品设计，就能形象生动的理解这句话。</p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20181522357.png\" alt=\"20181522357\"></p>\n<p>用通俗的说法就是：<code>组织形式等同系统设计</code>。</p>\n<h1 id=\"6-如何实现微服务架构\"><a href=\"#6-如何实现微服务架构\" class=\"headerlink\" title=\"6. 如何实现微服务架构\"></a>6. 如何实现微服务架构</h1><h2 id=\"6-1-技术选型\"><a href=\"#6-1-技术选型\" class=\"headerlink\" title=\"6.1. 技术选型\"></a>6.1. 技术选型</h2><p>从开发和运行平台两个维度考虑：</p>\n<ul>\n<li>开发框架<ul>\n<li>spring cloud</li>\n<li>dubbo</li>\n<li>dropwizard </li>\n<li>armada</li>\n</ul>\n</li>\n<li>运行平台<ul>\n<li>并不绑定运行平台</li>\n<li>PCServer</li>\n<li>阿里云</li>\n<li>aws</li>\n<li>Docker<h1 id=\"7-架构图\"><a href=\"#7-架构图\" class=\"headerlink\" title=\"7. 架构图\"></a>7. 架构图</h1><img src=\"http://ovasdkxqr.bkt.clouddn.com//image/blog/201815224722.jpg\" alt=\"201815224722\"></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-单体应用架构存在的问题\"><a href=\"#1-单体应用架构存在的问题\" class=\"headerlink\" title=\"1. 单体应用架构存在的问题\"></a>1. 单体应用架构存在的问题</h1><ol>\n<li>复杂性高  <ul>\n<li>包含模块多</li>\n<li>模块边界模糊</li>\n<li>依赖关系不清</li>\n<li>代码质量残次不齐等等</li>\n</ul>\n</li>\n<li>技术债务</li>\n<li>部署频率低  <ul>\n<li>功能变更或缺陷修复都要重新部署整个应用。</li>\n<li>全量部署 耗时长。影响范围大、风险高。</li>\n</ul>\n</li>\n<li>可靠性差  <ul>\n<li>一个bug可能会导致整个系统的崩溃</li>\n</ul>\n</li>\n<li>扩展能力受限  <ul>\n<li>只能整体扩展，无法根据业务模块进行伸缩。</li>\n</ul>\n</li>\n<li>阻碍技术创新  <ul>\n<li>一般使用统一的技术平台或方案解决所有问题。例如一个使用struts2的100万行代码的单体应用，如果想换成springMVC，成本是非常高的。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2-微服务简介\"><a href=\"#2-微服务简介\" class=\"headerlink\" title=\"2. 微服务简介\"></a>2. 微服务简介</h1><p>并没有严格的定义，将一个单一应用程序开发为一组小型服务的方法。构建的是分布式系统。</p>\n<h2 id=\"2-1-特性\"><a href=\"#2-1-特性\" class=\"headerlink\" title=\"2.1. 特性\"></a>2.1. 特性</h2><ol>\n<li>每个服务运行在自己的进程中</li>\n<li>一系列服务共同构建起整个项目</li>\n<li>服务针对独立业务，只关注某个特定功能</li>\n<li>服务间通信采用轻量级通信机制（如http资源api）</li>\n<li>可以使用不同的语言，不同的存储</li>\n<li>全自动部署机制</li>\n</ol>\n<h1 id=\"3-有点\"><a href=\"#3-有点\" class=\"headerlink\" title=\"3. 有点\"></a>3. 有点</h1><ol>\n<li>易于开发维护</li>\n<li>单个服务启动快</li>\n<li>局部修改易部署</li>\n<li>技术栈不受限</li>\n<li>按需伸缩</li>\n</ol>\n<h1 id=\"4-挑战\"><a href=\"#4-挑战\" class=\"headerlink\" title=\"4. 挑战\"></a>4. 挑战</h1><ul>\n<li>运维要求高<ul>\n<li>需要保证几十个甚至上百个服务的正常运行与写作</li>\n</ul>\n</li>\n<li>分布式固有的复杂性</li>\n<li>接口调整成本搞</li>\n<li>重复劳动 <ul>\n<li>重复功能不足以分解为一个微服务，可以封装为公共组件，但是多语言就不一定行得通</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"5-设计原则\"><a href=\"#5-设计原则\" class=\"headerlink\" title=\"5. 设计原则\"></a>5. 设计原则</h1><ul>\n<li>单一职责原则</li>\n<li>服务自治原则 <ul>\n<li>治具备独立的业务能力、依赖与运行环境。</li>\n</ul>\n</li>\n<li>轻量级通信机制 <ul>\n<li>体量轻 </li>\n<li>跨语言 </li>\n<li>跨平台 </li>\n<li>常用的有REST AMQP STOMP MQTT</li>\n</ul>\n</li>\n<li>微服务力度</li>\n</ul>\n<p><code>康威定律</code>：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。看看下面的图片（来源于互联网，侵删），再想想Apple的产品、微软的产品设计，就能形象生动的理解这句话。</p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20181522357.png\" alt=\"20181522357\"></p>\n<p>用通俗的说法就是：<code>组织形式等同系统设计</code>。</p>\n<h1 id=\"6-如何实现微服务架构\"><a href=\"#6-如何实现微服务架构\" class=\"headerlink\" title=\"6. 如何实现微服务架构\"></a>6. 如何实现微服务架构</h1><h2 id=\"6-1-技术选型\"><a href=\"#6-1-技术选型\" class=\"headerlink\" title=\"6.1. 技术选型\"></a>6.1. 技术选型</h2><p>从开发和运行平台两个维度考虑：</p>\n<ul>\n<li>开发框架<ul>\n<li>spring cloud</li>\n<li>dubbo</li>\n<li>dropwizard </li>\n<li>armada</li>\n</ul>\n</li>\n<li>运行平台<ul>\n<li>并不绑定运行平台</li>\n<li>PCServer</li>\n<li>阿里云</li>\n<li>aws</li>\n<li>Docker<h1 id=\"7-架构图\"><a href=\"#7-架构图\" class=\"headerlink\" title=\"7. 架构图\"></a>7. 架构图</h1><img src=\"http://ovasdkxqr.bkt.clouddn.com//image/blog/201815224722.jpg\" alt=\"201815224722\"></li>\n</ul>\n</li>\n</ul>\n"},{"title":"微服务框架与实战-笔记03-开始使用SpringCloud实战微服务","toc":true,"date":"2018-01-21T15:50:00.000Z","scaffolds":null,"_content":"\n配套代码\n- http://www.broadview.com.cn/book/4774  可以去勘误等\n- 1-11 章配套代码：\nhttps://github.com/itmuch/spring-cloud-docker-microservice-book-code\n- 12-14 章配套代码：\nhttps://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker\n\n# 1. 实战前提\n## 1.1. 技术储备\n- 语言基础：java或scala、Groovy\n- spring boot ：\n- 项目管理和构建工具：maven gradle （可以相互转换）\n## 1.2. 工具及软件版本\n- JKD：官方建议1.8，也可以用1.7\n- springboot： 书中使用1.4.5.RELEASE\n- springCloud：Camden SR4\n- IDE：Spring Tool suite 3.8.3 基于eclipse的IDE ，idea\n- maven：3.3.9 （3.3.x运行在JDK1.8以上）\n降低学习成本的重要方法之一:`少踩坑`\n# 2. 服务提供者、服务消费者\n描述微服务之间的调用关系  \n服务提供者：被调用方  \n服务消费者：调用方\n# 3. 编写服务提供者\nSpring Data JPA作为持久层框架，H2作为数据库\n## 3.1. 编写项目\n自己下载代码看吧，microservice-simple-provider-user\n### 3.1.1. pom.xml\n`spring-boot-starter-web`：springMVC支持  \n`spring-boot-starter-data-jpa`：Spring Data JPA支持\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.itmuch.cloud</groupId>\n  <artifactId>microservice-simple-provider-user</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <!-- 引入spring boot的依赖 -->\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.4.3.RELEASE</version>\n  </parent>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <java.version>1.8</java.version>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-data-jpa</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.h2database</groupId>\n      <artifactId>h2</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n  </dependencies>\n\n  <!-- 引入spring cloud的依赖 -->\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-dependencies</artifactId>\n        <version>Camden.SR4</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <!-- 添加spring-boot的maven插件 -->\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\n### 3.1.2. classpath下schema.sql 建表语句\n```sql\ndrop table user if exists;\ncreate table user (id bigint generated by default as identity, username varchar(40), name varchar(20), age int(3), balance decimal(10,2), primary key (id));\n```\n### 3.1.3. classpath下data.sql\n```sql\ninsert into user (id, username, name, age, balance) values (1, 'account1', '张三', 20, 100.00);\ninsert into user (id, username, name, age, balance) values (2, 'account2', '李四', 28, 180.00);\ninsert into user (id, username, name, age, balance) values (3, 'account3', '王五', 32, 280.00);\n```\n### 3.1.4. 用户实体类\n```java\npackage com.itmuch.cloud.study.entity;\n\nimport java.math.BigDecimal;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class User {\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO)\n  private Long id;\n  @Column\n  private String username;\n  @Column\n  private String name;\n  @Column\n  private Integer age;\n  @Column\n  private BigDecimal balance;\n\n  public Long getId() {\n    return this.id;\n  }\n\n  public void setId(Long id) {\n    this.id = id;\n  }\n\n  public String getUsername() {\n    return this.username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getName() {\n    return this.name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public Integer getAge() {\n    return this.age;\n  }\n\n  public void setAge(Integer age) {\n    this.age = age;\n  }\n\n  public BigDecimal getBalance() {\n    return this.balance;\n  }\n\n  public void setBalance(BigDecimal balance) {\n    this.balance = balance;\n  }\n\n}\n```\n## 3.2. DAO\n```java\npackage com.itmuch.cloud.study.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport com.itmuch.cloud.study.entity.User;\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n}\n\n```\n## 3.3. controller\n`@GetMapping` Spring4.3新注解。组合注解，等价 @RequestMapping(method=RequestMethod.GET)  \n还有`@PostMapping`、`@PutMapping`、`@DeleteMapping`、`@PatchMapping`\n```java\npackage com.itmuch.cloud.study.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.itmuch.cloud.study.entity.User;\nimport com.itmuch.cloud.study.repository.UserRepository;\n\n@RestController\npublic class UserController {\n  @Autowired\n  private UserRepository userRepository;\n\n  @GetMapping(\"/{id}\")\n  public User findById(@PathVariable Long id) {\n    User findOne = this.userRepository.findOne(id);\n    return findOne;\n  }\n}\n```\n## 3.4. 启动类\n`@SpringBootApplication` \n- 声明是一个Spring boot项目\n- 组合注解，整合了@Configuration、@EnableAutoConfiguration、@ComponentScan\n- 并开启了SpringBoot组件扫描和自动配置功能\n```java\npackage com.itmuch.cloud.study;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class ProviderUserApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(ProviderUserApplication.class, args);\n  }\n}\n```\n## 3.5. 配置文件 application.yml\n\nSpringCloud、SpringBoot支持`properties`或者`yml格式`文件作为`配置文件`    \n`yml文件格式`：YAML（Yet Another Markup Language）编写的文件格式。  \nYAML和properties格式文件可以互相转换。  \nyml文件有`严格的缩进`  \n```yml\nserver:\n  port: 8000\nspring:\n  jpa:\n    generate-ddl: false\n    show-sql: true\n    hibernate:\n      ddl-auto: none\n  datasource:                           # 指定数据源\n    platform: h2                        # 指定数据源类型\n    schema: classpath:schema.sql        # 指定h2数据库的建表脚本\n    data: classpath:data.sql            # 指定h2数据库的数据脚本\nlogging:                                # 配置日志级别，让hibernate打印出执行的SQL\n  level:\n    root: INFO\n    org.hibernate: INFO\n    org.hibernate.type.descriptor.sql.BasicBinder: TRACE\n    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE\n    \n## INFO\ninfo: \n  app: \n    name: @project.artifactId@\n    encoding: @project.build.sourceEncoding@\n    java:\n      source: @java.version@\n      target: @java.version@\n\n```\n测试：http://localhost:8000/1","source":"_posts/微服务/微服务框架与实战-笔记03-开始使用SpringCloud实战微服务.md","raw":"---\ntitle: 微服务框架与实战-笔记03-开始使用SpringCloud实战微服务\ncategories: 微服务学习\ntags:\n  - 微服务\ntoc: true\ndate: 2018-01-21 23:50:00\nscaffolds:\n---\n\n配套代码\n- http://www.broadview.com.cn/book/4774  可以去勘误等\n- 1-11 章配套代码：\nhttps://github.com/itmuch/spring-cloud-docker-microservice-book-code\n- 12-14 章配套代码：\nhttps://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker\n\n# 1. 实战前提\n## 1.1. 技术储备\n- 语言基础：java或scala、Groovy\n- spring boot ：\n- 项目管理和构建工具：maven gradle （可以相互转换）\n## 1.2. 工具及软件版本\n- JKD：官方建议1.8，也可以用1.7\n- springboot： 书中使用1.4.5.RELEASE\n- springCloud：Camden SR4\n- IDE：Spring Tool suite 3.8.3 基于eclipse的IDE ，idea\n- maven：3.3.9 （3.3.x运行在JDK1.8以上）\n降低学习成本的重要方法之一:`少踩坑`\n# 2. 服务提供者、服务消费者\n描述微服务之间的调用关系  \n服务提供者：被调用方  \n服务消费者：调用方\n# 3. 编写服务提供者\nSpring Data JPA作为持久层框架，H2作为数据库\n## 3.1. 编写项目\n自己下载代码看吧，microservice-simple-provider-user\n### 3.1.1. pom.xml\n`spring-boot-starter-web`：springMVC支持  \n`spring-boot-starter-data-jpa`：Spring Data JPA支持\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.itmuch.cloud</groupId>\n  <artifactId>microservice-simple-provider-user</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <!-- 引入spring boot的依赖 -->\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.4.3.RELEASE</version>\n  </parent>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <java.version>1.8</java.version>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-data-jpa</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.h2database</groupId>\n      <artifactId>h2</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n  </dependencies>\n\n  <!-- 引入spring cloud的依赖 -->\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-dependencies</artifactId>\n        <version>Camden.SR4</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <!-- 添加spring-boot的maven插件 -->\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\n### 3.1.2. classpath下schema.sql 建表语句\n```sql\ndrop table user if exists;\ncreate table user (id bigint generated by default as identity, username varchar(40), name varchar(20), age int(3), balance decimal(10,2), primary key (id));\n```\n### 3.1.3. classpath下data.sql\n```sql\ninsert into user (id, username, name, age, balance) values (1, 'account1', '张三', 20, 100.00);\ninsert into user (id, username, name, age, balance) values (2, 'account2', '李四', 28, 180.00);\ninsert into user (id, username, name, age, balance) values (3, 'account3', '王五', 32, 280.00);\n```\n### 3.1.4. 用户实体类\n```java\npackage com.itmuch.cloud.study.entity;\n\nimport java.math.BigDecimal;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class User {\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO)\n  private Long id;\n  @Column\n  private String username;\n  @Column\n  private String name;\n  @Column\n  private Integer age;\n  @Column\n  private BigDecimal balance;\n\n  public Long getId() {\n    return this.id;\n  }\n\n  public void setId(Long id) {\n    this.id = id;\n  }\n\n  public String getUsername() {\n    return this.username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getName() {\n    return this.name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public Integer getAge() {\n    return this.age;\n  }\n\n  public void setAge(Integer age) {\n    this.age = age;\n  }\n\n  public BigDecimal getBalance() {\n    return this.balance;\n  }\n\n  public void setBalance(BigDecimal balance) {\n    this.balance = balance;\n  }\n\n}\n```\n## 3.2. DAO\n```java\npackage com.itmuch.cloud.study.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport com.itmuch.cloud.study.entity.User;\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n}\n\n```\n## 3.3. controller\n`@GetMapping` Spring4.3新注解。组合注解，等价 @RequestMapping(method=RequestMethod.GET)  \n还有`@PostMapping`、`@PutMapping`、`@DeleteMapping`、`@PatchMapping`\n```java\npackage com.itmuch.cloud.study.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.itmuch.cloud.study.entity.User;\nimport com.itmuch.cloud.study.repository.UserRepository;\n\n@RestController\npublic class UserController {\n  @Autowired\n  private UserRepository userRepository;\n\n  @GetMapping(\"/{id}\")\n  public User findById(@PathVariable Long id) {\n    User findOne = this.userRepository.findOne(id);\n    return findOne;\n  }\n}\n```\n## 3.4. 启动类\n`@SpringBootApplication` \n- 声明是一个Spring boot项目\n- 组合注解，整合了@Configuration、@EnableAutoConfiguration、@ComponentScan\n- 并开启了SpringBoot组件扫描和自动配置功能\n```java\npackage com.itmuch.cloud.study;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class ProviderUserApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(ProviderUserApplication.class, args);\n  }\n}\n```\n## 3.5. 配置文件 application.yml\n\nSpringCloud、SpringBoot支持`properties`或者`yml格式`文件作为`配置文件`    \n`yml文件格式`：YAML（Yet Another Markup Language）编写的文件格式。  \nYAML和properties格式文件可以互相转换。  \nyml文件有`严格的缩进`  \n```yml\nserver:\n  port: 8000\nspring:\n  jpa:\n    generate-ddl: false\n    show-sql: true\n    hibernate:\n      ddl-auto: none\n  datasource:                           # 指定数据源\n    platform: h2                        # 指定数据源类型\n    schema: classpath:schema.sql        # 指定h2数据库的建表脚本\n    data: classpath:data.sql            # 指定h2数据库的数据脚本\nlogging:                                # 配置日志级别，让hibernate打印出执行的SQL\n  level:\n    root: INFO\n    org.hibernate: INFO\n    org.hibernate.type.descriptor.sql.BasicBinder: TRACE\n    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE\n    \n## INFO\ninfo: \n  app: \n    name: @project.artifactId@\n    encoding: @project.build.sourceEncoding@\n    java:\n      source: @java.version@\n      target: @java.version@\n\n```\n测试：http://localhost:8000/1","slug":"微服务/微服务框架与实战-笔记03-开始使用SpringCloud实战微服务","published":1,"updated":"2018-02-06T07:52:53.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89zy0021v4vft0egrsod","content":"<p>配套代码</p>\n<ul>\n<li><a href=\"http://www.broadview.com.cn/book/4774\" target=\"_blank\" rel=\"external\">http://www.broadview.com.cn/book/4774</a>  可以去勘误等</li>\n<li>1-11 章配套代码：<br><a href=\"https://github.com/itmuch/spring-cloud-docker-microservice-book-code\" target=\"_blank\" rel=\"external\">https://github.com/itmuch/spring-cloud-docker-microservice-book-code</a></li>\n<li>12-14 章配套代码：<br><a href=\"https://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker\" target=\"_blank\" rel=\"external\">https://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker</a></li>\n</ul>\n<h1 id=\"1-实战前提\"><a href=\"#1-实战前提\" class=\"headerlink\" title=\"1. 实战前提\"></a>1. 实战前提</h1><h2 id=\"1-1-技术储备\"><a href=\"#1-1-技术储备\" class=\"headerlink\" title=\"1.1. 技术储备\"></a>1.1. 技术储备</h2><ul>\n<li>语言基础：java或scala、Groovy</li>\n<li>spring boot ：</li>\n<li>项目管理和构建工具：maven gradle （可以相互转换）<h2 id=\"1-2-工具及软件版本\"><a href=\"#1-2-工具及软件版本\" class=\"headerlink\" title=\"1.2. 工具及软件版本\"></a>1.2. 工具及软件版本</h2></li>\n<li>JKD：官方建议1.8，也可以用1.7</li>\n<li>springboot： 书中使用1.4.5.RELEASE</li>\n<li>springCloud：Camden SR4</li>\n<li>IDE：Spring Tool suite 3.8.3 基于eclipse的IDE ，idea</li>\n<li>maven：3.3.9 （3.3.x运行在JDK1.8以上）<br>降低学习成本的重要方法之一:<code>少踩坑</code><h1 id=\"2-服务提供者、服务消费者\"><a href=\"#2-服务提供者、服务消费者\" class=\"headerlink\" title=\"2. 服务提供者、服务消费者\"></a>2. 服务提供者、服务消费者</h1>描述微服务之间的调用关系<br>服务提供者：被调用方<br>服务消费者：调用方<h1 id=\"3-编写服务提供者\"><a href=\"#3-编写服务提供者\" class=\"headerlink\" title=\"3. 编写服务提供者\"></a>3. 编写服务提供者</h1>Spring Data JPA作为持久层框架，H2作为数据库<h2 id=\"3-1-编写项目\"><a href=\"#3-1-编写项目\" class=\"headerlink\" title=\"3.1. 编写项目\"></a>3.1. 编写项目</h2>自己下载代码看吧，microservice-simple-provider-user<h3 id=\"3-1-1-pom-xml\"><a href=\"#3-1-1-pom-xml\" class=\"headerlink\" title=\"3.1.1. pom.xml\"></a>3.1.1. pom.xml</h3><code>spring-boot-starter-web</code>：springMVC支持<br><code>spring-boot-starter-data-jpa</code>：Spring Data JPA支持<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></div><div class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itmuch.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>microservice-simple-provider-user<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 引入spring boot的依赖 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 引入spring cloud的依赖 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>Camden.SR4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 添加spring-boot的maven插件 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-1-2-classpath下schema-sql-建表语句\"><a href=\"#3-1-2-classpath下schema-sql-建表语句\" class=\"headerlink\" title=\"3.1.2. classpath下schema.sql 建表语句\"></a>3.1.2. classpath下schema.sql 建表语句</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span>;</div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span> (<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span> <span class=\"keyword\">generated</span> <span class=\"keyword\">by</span> <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> <span class=\"keyword\">identity</span>, username <span class=\"built_in\">varchar</span>(<span class=\"number\">40</span>), <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>), age <span class=\"built_in\">int</span>(<span class=\"number\">3</span>), balance <span class=\"built_in\">decimal</span>(<span class=\"number\">10</span>,<span class=\"number\">2</span>), primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"3-1-3-classpath下data-sql\"><a href=\"#3-1-3-classpath下data-sql\" class=\"headerlink\" title=\"3.1.3. classpath下data.sql\"></a>3.1.3. classpath下data.sql</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"keyword\">user</span> (<span class=\"keyword\">id</span>, username, <span class=\"keyword\">name</span>, age, balance) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>, <span class=\"string\">'account1'</span>, <span class=\"string\">'张三'</span>, <span class=\"number\">20</span>, <span class=\"number\">100.00</span>);</div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"keyword\">user</span> (<span class=\"keyword\">id</span>, username, <span class=\"keyword\">name</span>, age, balance) <span class=\"keyword\">values</span> (<span class=\"number\">2</span>, <span class=\"string\">'account2'</span>, <span class=\"string\">'李四'</span>, <span class=\"number\">28</span>, <span class=\"number\">180.00</span>);</div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"keyword\">user</span> (<span class=\"keyword\">id</span>, username, <span class=\"keyword\">name</span>, age, balance) <span class=\"keyword\">values</span> (<span class=\"number\">3</span>, <span class=\"string\">'account3'</span>, <span class=\"string\">'王五'</span>, <span class=\"number\">32</span>, <span class=\"number\">280.00</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"3-1-4-用户实体类\"><a href=\"#3-1-4-用户实体类\" class=\"headerlink\" title=\"3.1.4. 用户实体类\"></a>3.1.4. 用户实体类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.itmuch.cloud.study.entity;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.Column;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.Entity;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.GeneratedValue;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.GenerationType;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.Id;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Entity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Id</span></div><div class=\"line\">  <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)</div><div class=\"line\">  <span class=\"keyword\">private</span> Long id;</div><div class=\"line\">  <span class=\"meta\">@Column</span></div><div class=\"line\">  <span class=\"keyword\">private</span> String username;</div><div class=\"line\">  <span class=\"meta\">@Column</span></div><div class=\"line\">  <span class=\"keyword\">private</span> String name;</div><div class=\"line\">  <span class=\"meta\">@Column</span></div><div class=\"line\">  <span class=\"keyword\">private</span> Integer age;</div><div class=\"line\">  <span class=\"meta\">@Column</span></div><div class=\"line\">  <span class=\"keyword\">private</span> BigDecimal balance;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Long id)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.username;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.username = username;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> BigDecimal <span class=\"title\">getBalance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.balance;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBalance</span><span class=\"params\">(BigDecimal balance)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.balance = balance;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-2-DAO\"><a href=\"#3-2-DAO\" class=\"headerlink\" title=\"3.2. DAO\"></a>3.2. DAO</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.itmuch.cloud.study.repository;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.jpa.repository.JpaRepository;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Repository;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itmuch.cloud.study.entity.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Repository</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-3-controller\"><a href=\"#3-3-controller\" class=\"headerlink\" title=\"3.3. controller\"></a>3.3. controller</h2><p><code>@GetMapping</code> Spring4.3新注解。组合注解，等价 @RequestMapping(method=RequestMethod.GET)<br>还有<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>、<code>@PatchMapping</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.itmuch.cloud.study.controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itmuch.cloud.study.entity.User;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itmuch.cloud.study.repository.UserRepository;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Autowired</span></div><div class=\"line\">  <span class=\"keyword\">private</span> UserRepository userRepository;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findById</span><span class=\"params\">(@PathVariable Long id)</span> </span>&#123;</div><div class=\"line\">    User findOne = <span class=\"keyword\">this</span>.userRepository.findOne(id);</div><div class=\"line\">    <span class=\"keyword\">return</span> findOne;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-4-启动类\"><a href=\"#3-4-启动类\" class=\"headerlink\" title=\"3.4. 启动类\"></a>3.4. 启动类</h2><p><code>@SpringBootApplication</code> </p>\n<ul>\n<li>声明是一个Spring boot项目</li>\n<li>组合注解，整合了@Configuration、@EnableAutoConfiguration、@ComponentScan</li>\n<li>并开启了SpringBoot组件扫描和自动配置功能<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.itmuch.cloud.study;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProviderUserApplication</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    SpringApplication.run(ProviderUserApplication.class, args);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-5-配置文件-application-yml\"><a href=\"#3-5-配置文件-application-yml\" class=\"headerlink\" title=\"3.5. 配置文件 application.yml\"></a>3.5. 配置文件 application.yml</h2><p>SpringCloud、SpringBoot支持<code>properties</code>或者<code>yml格式</code>文件作为<code>配置文件</code><br><code>yml文件格式</code>：YAML（Yet Another Markup Language）编写的文件格式。<br>YAML和properties格式文件可以互相转换。<br>yml文件有<code>严格的缩进</code><br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8000</span></div><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  jpa:</span></div><div class=\"line\"><span class=\"attr\">    generate-ddl:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    show-sql:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    hibernate:</span></div><div class=\"line\"><span class=\"attr\">      ddl-auto:</span> <span class=\"string\">none</span></div><div class=\"line\"><span class=\"attr\">  datasource:</span>                           <span class=\"comment\"># 指定数据源</span></div><div class=\"line\"><span class=\"attr\">    platform:</span> <span class=\"string\">h2</span>                        <span class=\"comment\"># 指定数据源类型</span></div><div class=\"line\"><span class=\"attr\">    schema:</span> <span class=\"attr\">classpath:schema.sql</span>        <span class=\"comment\"># 指定h2数据库的建表脚本</span></div><div class=\"line\"><span class=\"attr\">    data:</span> <span class=\"attr\">classpath:data.sql</span>            <span class=\"comment\"># 指定h2数据库的数据脚本</span></div><div class=\"line\"><span class=\"attr\">logging:</span>                                <span class=\"comment\"># 配置日志级别，让hibernate打印出执行的SQL</span></div><div class=\"line\"><span class=\"attr\">  level:</span></div><div class=\"line\"><span class=\"attr\">    root:</span> <span class=\"string\">INFO</span></div><div class=\"line\">    <span class=\"string\">org.hibernate:</span> <span class=\"string\">INFO</span></div><div class=\"line\">    <span class=\"string\">org.hibernate.type.descriptor.sql.BasicBinder:</span> <span class=\"string\">TRACE</span></div><div class=\"line\">    <span class=\"string\">org.hibernate.type.descriptor.sql.BasicExtractor:</span> <span class=\"string\">TRACE</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">## INFO</span></div><div class=\"line\"><span class=\"attr\">info:</span> </div><div class=\"line\"><span class=\"attr\">  app:</span> </div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">@project.artifactId@</span></div><div class=\"line\"><span class=\"attr\">    encoding:</span> <span class=\"string\">@project.build.sourceEncoding@</span></div><div class=\"line\"><span class=\"attr\">    java:</span></div><div class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">@java.version@</span></div><div class=\"line\"><span class=\"attr\">      target:</span> <span class=\"string\">@java.version@</span></div></pre></td></tr></table></figure></p>\n<p>测试：<a href=\"http://localhost:8000/1\" target=\"_blank\" rel=\"external\">http://localhost:8000/1</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>配套代码</p>\n<ul>\n<li><a href=\"http://www.broadview.com.cn/book/4774\" target=\"_blank\" rel=\"external\">http://www.broadview.com.cn/book/4774</a>  可以去勘误等</li>\n<li>1-11 章配套代码：<br><a href=\"https://github.com/itmuch/spring-cloud-docker-microservice-book-code\" target=\"_blank\" rel=\"external\">https://github.com/itmuch/spring-cloud-docker-microservice-book-code</a></li>\n<li>12-14 章配套代码：<br><a href=\"https://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker\" target=\"_blank\" rel=\"external\">https://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker</a></li>\n</ul>\n<h1 id=\"1-实战前提\"><a href=\"#1-实战前提\" class=\"headerlink\" title=\"1. 实战前提\"></a>1. 实战前提</h1><h2 id=\"1-1-技术储备\"><a href=\"#1-1-技术储备\" class=\"headerlink\" title=\"1.1. 技术储备\"></a>1.1. 技术储备</h2><ul>\n<li>语言基础：java或scala、Groovy</li>\n<li>spring boot ：</li>\n<li>项目管理和构建工具：maven gradle （可以相互转换）<h2 id=\"1-2-工具及软件版本\"><a href=\"#1-2-工具及软件版本\" class=\"headerlink\" title=\"1.2. 工具及软件版本\"></a>1.2. 工具及软件版本</h2></li>\n<li>JKD：官方建议1.8，也可以用1.7</li>\n<li>springboot： 书中使用1.4.5.RELEASE</li>\n<li>springCloud：Camden SR4</li>\n<li>IDE：Spring Tool suite 3.8.3 基于eclipse的IDE ，idea</li>\n<li>maven：3.3.9 （3.3.x运行在JDK1.8以上）<br>降低学习成本的重要方法之一:<code>少踩坑</code><h1 id=\"2-服务提供者、服务消费者\"><a href=\"#2-服务提供者、服务消费者\" class=\"headerlink\" title=\"2. 服务提供者、服务消费者\"></a>2. 服务提供者、服务消费者</h1>描述微服务之间的调用关系<br>服务提供者：被调用方<br>服务消费者：调用方<h1 id=\"3-编写服务提供者\"><a href=\"#3-编写服务提供者\" class=\"headerlink\" title=\"3. 编写服务提供者\"></a>3. 编写服务提供者</h1>Spring Data JPA作为持久层框架，H2作为数据库<h2 id=\"3-1-编写项目\"><a href=\"#3-1-编写项目\" class=\"headerlink\" title=\"3.1. 编写项目\"></a>3.1. 编写项目</h2>自己下载代码看吧，microservice-simple-provider-user<h3 id=\"3-1-1-pom-xml\"><a href=\"#3-1-1-pom-xml\" class=\"headerlink\" title=\"3.1.1. pom.xml\"></a>3.1.1. pom.xml</h3><code>spring-boot-starter-web</code>：springMVC支持<br><code>spring-boot-starter-data-jpa</code>：Spring Data JPA支持<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></div><div class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itmuch.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>microservice-simple-provider-user<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 引入spring boot的依赖 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 引入spring cloud的依赖 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>Camden.SR4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 添加spring-boot的maven插件 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-1-2-classpath下schema-sql-建表语句\"><a href=\"#3-1-2-classpath下schema-sql-建表语句\" class=\"headerlink\" title=\"3.1.2. classpath下schema.sql 建表语句\"></a>3.1.2. classpath下schema.sql 建表语句</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span>;</div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span> (<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span> <span class=\"keyword\">generated</span> <span class=\"keyword\">by</span> <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> <span class=\"keyword\">identity</span>, username <span class=\"built_in\">varchar</span>(<span class=\"number\">40</span>), <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>), age <span class=\"built_in\">int</span>(<span class=\"number\">3</span>), balance <span class=\"built_in\">decimal</span>(<span class=\"number\">10</span>,<span class=\"number\">2</span>), primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"3-1-3-classpath下data-sql\"><a href=\"#3-1-3-classpath下data-sql\" class=\"headerlink\" title=\"3.1.3. classpath下data.sql\"></a>3.1.3. classpath下data.sql</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"keyword\">user</span> (<span class=\"keyword\">id</span>, username, <span class=\"keyword\">name</span>, age, balance) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>, <span class=\"string\">'account1'</span>, <span class=\"string\">'张三'</span>, <span class=\"number\">20</span>, <span class=\"number\">100.00</span>);</div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"keyword\">user</span> (<span class=\"keyword\">id</span>, username, <span class=\"keyword\">name</span>, age, balance) <span class=\"keyword\">values</span> (<span class=\"number\">2</span>, <span class=\"string\">'account2'</span>, <span class=\"string\">'李四'</span>, <span class=\"number\">28</span>, <span class=\"number\">180.00</span>);</div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"keyword\">user</span> (<span class=\"keyword\">id</span>, username, <span class=\"keyword\">name</span>, age, balance) <span class=\"keyword\">values</span> (<span class=\"number\">3</span>, <span class=\"string\">'account3'</span>, <span class=\"string\">'王五'</span>, <span class=\"number\">32</span>, <span class=\"number\">280.00</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"3-1-4-用户实体类\"><a href=\"#3-1-4-用户实体类\" class=\"headerlink\" title=\"3.1.4. 用户实体类\"></a>3.1.4. 用户实体类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.itmuch.cloud.study.entity;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.Column;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.Entity;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.GeneratedValue;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.GenerationType;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.persistence.Id;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Entity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Id</span></div><div class=\"line\">  <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)</div><div class=\"line\">  <span class=\"keyword\">private</span> Long id;</div><div class=\"line\">  <span class=\"meta\">@Column</span></div><div class=\"line\">  <span class=\"keyword\">private</span> String username;</div><div class=\"line\">  <span class=\"meta\">@Column</span></div><div class=\"line\">  <span class=\"keyword\">private</span> String name;</div><div class=\"line\">  <span class=\"meta\">@Column</span></div><div class=\"line\">  <span class=\"keyword\">private</span> Integer age;</div><div class=\"line\">  <span class=\"meta\">@Column</span></div><div class=\"line\">  <span class=\"keyword\">private</span> BigDecimal balance;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Long id)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.username;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.username = username;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> BigDecimal <span class=\"title\">getBalance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.balance;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBalance</span><span class=\"params\">(BigDecimal balance)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.balance = balance;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-2-DAO\"><a href=\"#3-2-DAO\" class=\"headerlink\" title=\"3.2. DAO\"></a>3.2. DAO</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.itmuch.cloud.study.repository;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.jpa.repository.JpaRepository;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Repository;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itmuch.cloud.study.entity.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Repository</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-3-controller\"><a href=\"#3-3-controller\" class=\"headerlink\" title=\"3.3. controller\"></a>3.3. controller</h2><p><code>@GetMapping</code> Spring4.3新注解。组合注解，等价 @RequestMapping(method=RequestMethod.GET)<br>还有<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>、<code>@PatchMapping</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.itmuch.cloud.study.controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itmuch.cloud.study.entity.User;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itmuch.cloud.study.repository.UserRepository;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Autowired</span></div><div class=\"line\">  <span class=\"keyword\">private</span> UserRepository userRepository;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findById</span><span class=\"params\">(@PathVariable Long id)</span> </span>&#123;</div><div class=\"line\">    User findOne = <span class=\"keyword\">this</span>.userRepository.findOne(id);</div><div class=\"line\">    <span class=\"keyword\">return</span> findOne;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-4-启动类\"><a href=\"#3-4-启动类\" class=\"headerlink\" title=\"3.4. 启动类\"></a>3.4. 启动类</h2><p><code>@SpringBootApplication</code> </p>\n<ul>\n<li>声明是一个Spring boot项目</li>\n<li>组合注解，整合了@Configuration、@EnableAutoConfiguration、@ComponentScan</li>\n<li>并开启了SpringBoot组件扫描和自动配置功能<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.itmuch.cloud.study;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProviderUserApplication</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    SpringApplication.run(ProviderUserApplication.class, args);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-5-配置文件-application-yml\"><a href=\"#3-5-配置文件-application-yml\" class=\"headerlink\" title=\"3.5. 配置文件 application.yml\"></a>3.5. 配置文件 application.yml</h2><p>SpringCloud、SpringBoot支持<code>properties</code>或者<code>yml格式</code>文件作为<code>配置文件</code><br><code>yml文件格式</code>：YAML（Yet Another Markup Language）编写的文件格式。<br>YAML和properties格式文件可以互相转换。<br>yml文件有<code>严格的缩进</code><br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8000</span></div><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  jpa:</span></div><div class=\"line\"><span class=\"attr\">    generate-ddl:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    show-sql:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    hibernate:</span></div><div class=\"line\"><span class=\"attr\">      ddl-auto:</span> <span class=\"string\">none</span></div><div class=\"line\"><span class=\"attr\">  datasource:</span>                           <span class=\"comment\"># 指定数据源</span></div><div class=\"line\"><span class=\"attr\">    platform:</span> <span class=\"string\">h2</span>                        <span class=\"comment\"># 指定数据源类型</span></div><div class=\"line\"><span class=\"attr\">    schema:</span> <span class=\"attr\">classpath:schema.sql</span>        <span class=\"comment\"># 指定h2数据库的建表脚本</span></div><div class=\"line\"><span class=\"attr\">    data:</span> <span class=\"attr\">classpath:data.sql</span>            <span class=\"comment\"># 指定h2数据库的数据脚本</span></div><div class=\"line\"><span class=\"attr\">logging:</span>                                <span class=\"comment\"># 配置日志级别，让hibernate打印出执行的SQL</span></div><div class=\"line\"><span class=\"attr\">  level:</span></div><div class=\"line\"><span class=\"attr\">    root:</span> <span class=\"string\">INFO</span></div><div class=\"line\">    <span class=\"string\">org.hibernate:</span> <span class=\"string\">INFO</span></div><div class=\"line\">    <span class=\"string\">org.hibernate.type.descriptor.sql.BasicBinder:</span> <span class=\"string\">TRACE</span></div><div class=\"line\">    <span class=\"string\">org.hibernate.type.descriptor.sql.BasicExtractor:</span> <span class=\"string\">TRACE</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">## INFO</span></div><div class=\"line\"><span class=\"attr\">info:</span> </div><div class=\"line\"><span class=\"attr\">  app:</span> </div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">@project.artifactId@</span></div><div class=\"line\"><span class=\"attr\">    encoding:</span> <span class=\"string\">@project.build.sourceEncoding@</span></div><div class=\"line\"><span class=\"attr\">    java:</span></div><div class=\"line\"><span class=\"attr\">      source:</span> <span class=\"string\">@java.version@</span></div><div class=\"line\"><span class=\"attr\">      target:</span> <span class=\"string\">@java.version@</span></div></pre></td></tr></table></figure></p>\n<p>测试：<a href=\"http://localhost:8000/1\" target=\"_blank\" rel=\"external\">http://localhost:8000/1</a></p>\n"},{"title":"微服务框架与实战-笔记02-微服务开发框架-SpringCloud","toc":true,"date":"2018-01-09T15:12:17.000Z","scaffolds":null,"_content":"\n# 1. Spring Cloud 简介\n- 在SpringBoot基础上构建的，用于快速构建分布式系统的通用模式工具集。\n- 程序适合在Docker或者PaaS上部署。 所以又叫`云原生应用`（Cloud Native Application）。\n- `云原生`（CloudNative）可简单理解为面向云环境的软件架构。\n# 2. Spring Cloud 特点\n- 约定优于配置\n- 适用于各种环境\n- 隐藏了组件的复杂性，并提供声明式、无xml的配置方式\n- 开箱即用、快速启动\n- 轻量级组件\n- 组件丰富，功能齐全。如 配置管理，服务发现，断路器，微服务网关等\n- 选型中立、丰富。例如：支持使用Eureka、Zookeeper、Consul实现服务发现。\n- 灵活。组成部分解耦，可按需挑选技术选型。\n# 3. 版本\nSpring项目一般以下面这种方式命名，但`SpringCloud`并`没有`使用这种方式。可以略过。\n主版本号.次版本号.增量版本号.里程碑版本号  \n例如：4.3.5.RELEASE\n- 主版本号：项目重大重构\n- 次版本号：新特性的添加和变化\n- 增量版本号：一般表示BUG修复\n- 里程碑版本号：某个版本号的里程碑\n## 3.1. 版本简介\n![20181923037](http://ovasdkxqr.bkt.clouddn.com/image/blog/20181923037.png)\n命名方式：英文单词SRX（x为数字）\n英文单词：release train \nSR：service release bug修复\n\nDalston SR5 表示Dalston 第5次bug修复版本\n\nhttps://github.com/spring-cloud/spring-cloud-release/releases 版本发布\n\n## 3.2. 子项目一览\n\nComponent | Camden.SR7 | Dalston.SR4 | Edgware.RELEASE | Finchley.M4 | Finchley.BUILD-SNAPSHOT\n----------|------------|-------------|-----------------|-------------|------------------------\nspring-cloud-aws | 1.1.4.RELEASE | 1.2.1.RELEASE | 1.2.2.RELEASE | 2.0.0.M2 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-bus | 1.2.2.RELEASE | 1.3.1.RELEASE | 1.3.2.RELEASE | 2.0.0.M3 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-cli | 1.2.4.RELEASE | 1.3.4.RELEASE | 1.4.0.RELEASE | 2.0.0.M1 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-commons | 1.1.9.RELEASE | 1.2.4.RELEASE | 1.3.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-contract | 1.0.5.RELEASE | 1.1.4.RELEASE | 1.2.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-config | 1.2.3.RELEASE | 1.3.3.RELEASE | 1.4.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-netflix | 1.2.7.RELEASE | 1.3.5.RELEASE | 1.4.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-security | 1.1.4.RELEASE | 1.2.1.RELEASE | 1.2.1.RELEASE | 2.0.0.M1 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-cloudfoundry | 1.0.1.RELEASE | 1.1.0.RELEASE | 1.1.0.RELEASE | 2.0.0.M1 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-consul | 1.1.4.RELEASE | 1.2.1.RELEASE | 1.3.0.RELEASE | 2.0.0.M3 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-sleuth | 1.1.3.RELEASE | 1.2.5.RELEASE | 1.3.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-stream | Brooklyn.SR3 | Chelsea.SR2 | Ditmars.RELEASE | Elmhurst.M3 | Elmhurst.BUILD-SNAPSHOT\nspring-cloud-zookeeper | 1.0.4.RELEASE | 1.1.2.RELEASE | 1.2.0.RELEASE | 2.0.0.M3 | 2.0.0.BUILD-SNAPSHOT\nspring-boot | 1.4.5.RELEASE | 1.5.4.RELEASE | 1.5.8.RELEASE | 2.0.0.M6 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-task | 1.0.3.RELEASE | 1.1.2.RELEASE | 1.2.2.RELEASE | 2.0.0.M2 | 2.0.0.RELEASE\nspring-cloud-vault |   | 1.0.2.RELEASE | 1.1.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-gateway |   |   | 1.0.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\n\n\n## 3.3. spring cloud / spring boot 版本兼容性\n\n- Finchley使用Spring Boot 2.0.x构建和运行，并且不希望与Spring Boot 1.5.x一起使用。\n- Dalston和Edgware发行版建立在Spring Boot 1.5.x之上，并且不希望与Spring Boot 2.0.x一起使用。\n- Camden发行版基于Spring Boot 1.4.x，但也使用1.5.x进行测试。\n\nhttp://projects.spring.io/spring-cloud/ 更具体的额可以看这里","source":"_posts/微服务/微服务框架与实战-笔记02-微服务开发框架-SpringCloud.md","raw":"---\ntitle: 微服务框架与实战-笔记02-微服务开发框架-SpringCloud\ncategories: 微服务学习\ntags:\n  - 微服务\ntoc: true\ndate: 2018-01-09 23:12:17\nscaffolds:\n---\n\n# 1. Spring Cloud 简介\n- 在SpringBoot基础上构建的，用于快速构建分布式系统的通用模式工具集。\n- 程序适合在Docker或者PaaS上部署。 所以又叫`云原生应用`（Cloud Native Application）。\n- `云原生`（CloudNative）可简单理解为面向云环境的软件架构。\n# 2. Spring Cloud 特点\n- 约定优于配置\n- 适用于各种环境\n- 隐藏了组件的复杂性，并提供声明式、无xml的配置方式\n- 开箱即用、快速启动\n- 轻量级组件\n- 组件丰富，功能齐全。如 配置管理，服务发现，断路器，微服务网关等\n- 选型中立、丰富。例如：支持使用Eureka、Zookeeper、Consul实现服务发现。\n- 灵活。组成部分解耦，可按需挑选技术选型。\n# 3. 版本\nSpring项目一般以下面这种方式命名，但`SpringCloud`并`没有`使用这种方式。可以略过。\n主版本号.次版本号.增量版本号.里程碑版本号  \n例如：4.3.5.RELEASE\n- 主版本号：项目重大重构\n- 次版本号：新特性的添加和变化\n- 增量版本号：一般表示BUG修复\n- 里程碑版本号：某个版本号的里程碑\n## 3.1. 版本简介\n![20181923037](http://ovasdkxqr.bkt.clouddn.com/image/blog/20181923037.png)\n命名方式：英文单词SRX（x为数字）\n英文单词：release train \nSR：service release bug修复\n\nDalston SR5 表示Dalston 第5次bug修复版本\n\nhttps://github.com/spring-cloud/spring-cloud-release/releases 版本发布\n\n## 3.2. 子项目一览\n\nComponent | Camden.SR7 | Dalston.SR4 | Edgware.RELEASE | Finchley.M4 | Finchley.BUILD-SNAPSHOT\n----------|------------|-------------|-----------------|-------------|------------------------\nspring-cloud-aws | 1.1.4.RELEASE | 1.2.1.RELEASE | 1.2.2.RELEASE | 2.0.0.M2 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-bus | 1.2.2.RELEASE | 1.3.1.RELEASE | 1.3.2.RELEASE | 2.0.0.M3 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-cli | 1.2.4.RELEASE | 1.3.4.RELEASE | 1.4.0.RELEASE | 2.0.0.M1 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-commons | 1.1.9.RELEASE | 1.2.4.RELEASE | 1.3.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-contract | 1.0.5.RELEASE | 1.1.4.RELEASE | 1.2.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-config | 1.2.3.RELEASE | 1.3.3.RELEASE | 1.4.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-netflix | 1.2.7.RELEASE | 1.3.5.RELEASE | 1.4.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-security | 1.1.4.RELEASE | 1.2.1.RELEASE | 1.2.1.RELEASE | 2.0.0.M1 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-cloudfoundry | 1.0.1.RELEASE | 1.1.0.RELEASE | 1.1.0.RELEASE | 2.0.0.M1 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-consul | 1.1.4.RELEASE | 1.2.1.RELEASE | 1.3.0.RELEASE | 2.0.0.M3 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-sleuth | 1.1.3.RELEASE | 1.2.5.RELEASE | 1.3.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-stream | Brooklyn.SR3 | Chelsea.SR2 | Ditmars.RELEASE | Elmhurst.M3 | Elmhurst.BUILD-SNAPSHOT\nspring-cloud-zookeeper | 1.0.4.RELEASE | 1.1.2.RELEASE | 1.2.0.RELEASE | 2.0.0.M3 | 2.0.0.BUILD-SNAPSHOT\nspring-boot | 1.4.5.RELEASE | 1.5.4.RELEASE | 1.5.8.RELEASE | 2.0.0.M6 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-task | 1.0.3.RELEASE | 1.1.2.RELEASE | 1.2.2.RELEASE | 2.0.0.M2 | 2.0.0.RELEASE\nspring-cloud-vault |   | 1.0.2.RELEASE | 1.1.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\nspring-cloud-gateway |   |   | 1.0.0.RELEASE | 2.0.0.M4 | 2.0.0.BUILD-SNAPSHOT\n\n\n## 3.3. spring cloud / spring boot 版本兼容性\n\n- Finchley使用Spring Boot 2.0.x构建和运行，并且不希望与Spring Boot 1.5.x一起使用。\n- Dalston和Edgware发行版建立在Spring Boot 1.5.x之上，并且不希望与Spring Boot 2.0.x一起使用。\n- Camden发行版基于Spring Boot 1.4.x，但也使用1.5.x进行测试。\n\nhttp://projects.spring.io/spring-cloud/ 更具体的额可以看这里","slug":"微服务/微服务框架与实战-笔记02-微服务开发框架-SpringCloud","published":1,"updated":"2018-02-06T07:52:49.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr89zz0024v4vfxh8xqp2m","content":"<h1 id=\"1-Spring-Cloud-简介\"><a href=\"#1-Spring-Cloud-简介\" class=\"headerlink\" title=\"1. Spring Cloud 简介\"></a>1. Spring Cloud 简介</h1><ul>\n<li>在SpringBoot基础上构建的，用于快速构建分布式系统的通用模式工具集。</li>\n<li>程序适合在Docker或者PaaS上部署。 所以又叫<code>云原生应用</code>（Cloud Native Application）。</li>\n<li><code>云原生</code>（CloudNative）可简单理解为面向云环境的软件架构。<h1 id=\"2-Spring-Cloud-特点\"><a href=\"#2-Spring-Cloud-特点\" class=\"headerlink\" title=\"2. Spring Cloud 特点\"></a>2. Spring Cloud 特点</h1></li>\n<li>约定优于配置</li>\n<li>适用于各种环境</li>\n<li>隐藏了组件的复杂性，并提供声明式、无xml的配置方式</li>\n<li>开箱即用、快速启动</li>\n<li>轻量级组件</li>\n<li>组件丰富，功能齐全。如 配置管理，服务发现，断路器，微服务网关等</li>\n<li>选型中立、丰富。例如：支持使用Eureka、Zookeeper、Consul实现服务发现。</li>\n<li>灵活。组成部分解耦，可按需挑选技术选型。<h1 id=\"3-版本\"><a href=\"#3-版本\" class=\"headerlink\" title=\"3. 版本\"></a>3. 版本</h1>Spring项目一般以下面这种方式命名，但<code>SpringCloud</code>并<code>没有</code>使用这种方式。可以略过。<br>主版本号.次版本号.增量版本号.里程碑版本号<br>例如：4.3.5.RELEASE</li>\n<li>主版本号：项目重大重构</li>\n<li>次版本号：新特性的添加和变化</li>\n<li>增量版本号：一般表示BUG修复</li>\n<li>里程碑版本号：某个版本号的里程碑<h2 id=\"3-1-版本简介\"><a href=\"#3-1-版本简介\" class=\"headerlink\" title=\"3.1. 版本简介\"></a>3.1. 版本简介</h2><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20181923037.png\" alt=\"20181923037\"><br>命名方式：英文单词SRX（x为数字）<br>英文单词：release train<br>SR：service release bug修复</li>\n</ul>\n<p>Dalston SR5 表示Dalston 第5次bug修复版本</p>\n<p><a href=\"https://github.com/spring-cloud/spring-cloud-release/releases\" target=\"_blank\" rel=\"external\">https://github.com/spring-cloud/spring-cloud-release/releases</a> 版本发布</p>\n<h2 id=\"3-2-子项目一览\"><a href=\"#3-2-子项目一览\" class=\"headerlink\" title=\"3.2. 子项目一览\"></a>3.2. 子项目一览</h2><table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Camden.SR7</th>\n<th>Dalston.SR4</th>\n<th>Edgware.RELEASE</th>\n<th>Finchley.M4</th>\n<th>Finchley.BUILD-SNAPSHOT</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>spring-cloud-aws</td>\n<td>1.1.4.RELEASE</td>\n<td>1.2.1.RELEASE</td>\n<td>1.2.2.RELEASE</td>\n<td>2.0.0.M2</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-bus</td>\n<td>1.2.2.RELEASE</td>\n<td>1.3.1.RELEASE</td>\n<td>1.3.2.RELEASE</td>\n<td>2.0.0.M3</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-cli</td>\n<td>1.2.4.RELEASE</td>\n<td>1.3.4.RELEASE</td>\n<td>1.4.0.RELEASE</td>\n<td>2.0.0.M1</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-commons</td>\n<td>1.1.9.RELEASE</td>\n<td>1.2.4.RELEASE</td>\n<td>1.3.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-contract</td>\n<td>1.0.5.RELEASE</td>\n<td>1.1.4.RELEASE</td>\n<td>1.2.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-config</td>\n<td>1.2.3.RELEASE</td>\n<td>1.3.3.RELEASE</td>\n<td>1.4.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-netflix</td>\n<td>1.2.7.RELEASE</td>\n<td>1.3.5.RELEASE</td>\n<td>1.4.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-security</td>\n<td>1.1.4.RELEASE</td>\n<td>1.2.1.RELEASE</td>\n<td>1.2.1.RELEASE</td>\n<td>2.0.0.M1</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-cloudfoundry</td>\n<td>1.0.1.RELEASE</td>\n<td>1.1.0.RELEASE</td>\n<td>1.1.0.RELEASE</td>\n<td>2.0.0.M1</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-consul</td>\n<td>1.1.4.RELEASE</td>\n<td>1.2.1.RELEASE</td>\n<td>1.3.0.RELEASE</td>\n<td>2.0.0.M3</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-sleuth</td>\n<td>1.1.3.RELEASE</td>\n<td>1.2.5.RELEASE</td>\n<td>1.3.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-stream</td>\n<td>Brooklyn.SR3</td>\n<td>Chelsea.SR2</td>\n<td>Ditmars.RELEASE</td>\n<td>Elmhurst.M3</td>\n<td>Elmhurst.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-zookeeper</td>\n<td>1.0.4.RELEASE</td>\n<td>1.1.2.RELEASE</td>\n<td>1.2.0.RELEASE</td>\n<td>2.0.0.M3</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-boot</td>\n<td>1.4.5.RELEASE</td>\n<td>1.5.4.RELEASE</td>\n<td>1.5.8.RELEASE</td>\n<td>2.0.0.M6</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-task</td>\n<td>1.0.3.RELEASE</td>\n<td>1.1.2.RELEASE</td>\n<td>1.2.2.RELEASE</td>\n<td>2.0.0.M2</td>\n<td>2.0.0.RELEASE</td>\n</tr>\n<tr>\n<td>spring-cloud-vault</td>\n<td></td>\n<td>1.0.2.RELEASE</td>\n<td>1.1.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-gateway</td>\n<td></td>\n<td></td>\n<td>1.0.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-3-spring-cloud-spring-boot-版本兼容性\"><a href=\"#3-3-spring-cloud-spring-boot-版本兼容性\" class=\"headerlink\" title=\"3.3. spring cloud / spring boot 版本兼容性\"></a>3.3. spring cloud / spring boot 版本兼容性</h2><ul>\n<li>Finchley使用Spring Boot 2.0.x构建和运行，并且不希望与Spring Boot 1.5.x一起使用。</li>\n<li>Dalston和Edgware发行版建立在Spring Boot 1.5.x之上，并且不希望与Spring Boot 2.0.x一起使用。</li>\n<li>Camden发行版基于Spring Boot 1.4.x，但也使用1.5.x进行测试。</li>\n</ul>\n<p><a href=\"http://projects.spring.io/spring-cloud/\" target=\"_blank\" rel=\"external\">http://projects.spring.io/spring-cloud/</a> 更具体的额可以看这里</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-Spring-Cloud-简介\"><a href=\"#1-Spring-Cloud-简介\" class=\"headerlink\" title=\"1. Spring Cloud 简介\"></a>1. Spring Cloud 简介</h1><ul>\n<li>在SpringBoot基础上构建的，用于快速构建分布式系统的通用模式工具集。</li>\n<li>程序适合在Docker或者PaaS上部署。 所以又叫<code>云原生应用</code>（Cloud Native Application）。</li>\n<li><code>云原生</code>（CloudNative）可简单理解为面向云环境的软件架构。<h1 id=\"2-Spring-Cloud-特点\"><a href=\"#2-Spring-Cloud-特点\" class=\"headerlink\" title=\"2. Spring Cloud 特点\"></a>2. Spring Cloud 特点</h1></li>\n<li>约定优于配置</li>\n<li>适用于各种环境</li>\n<li>隐藏了组件的复杂性，并提供声明式、无xml的配置方式</li>\n<li>开箱即用、快速启动</li>\n<li>轻量级组件</li>\n<li>组件丰富，功能齐全。如 配置管理，服务发现，断路器，微服务网关等</li>\n<li>选型中立、丰富。例如：支持使用Eureka、Zookeeper、Consul实现服务发现。</li>\n<li>灵活。组成部分解耦，可按需挑选技术选型。<h1 id=\"3-版本\"><a href=\"#3-版本\" class=\"headerlink\" title=\"3. 版本\"></a>3. 版本</h1>Spring项目一般以下面这种方式命名，但<code>SpringCloud</code>并<code>没有</code>使用这种方式。可以略过。<br>主版本号.次版本号.增量版本号.里程碑版本号<br>例如：4.3.5.RELEASE</li>\n<li>主版本号：项目重大重构</li>\n<li>次版本号：新特性的添加和变化</li>\n<li>增量版本号：一般表示BUG修复</li>\n<li>里程碑版本号：某个版本号的里程碑<h2 id=\"3-1-版本简介\"><a href=\"#3-1-版本简介\" class=\"headerlink\" title=\"3.1. 版本简介\"></a>3.1. 版本简介</h2><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/blog/20181923037.png\" alt=\"20181923037\"><br>命名方式：英文单词SRX（x为数字）<br>英文单词：release train<br>SR：service release bug修复</li>\n</ul>\n<p>Dalston SR5 表示Dalston 第5次bug修复版本</p>\n<p><a href=\"https://github.com/spring-cloud/spring-cloud-release/releases\" target=\"_blank\" rel=\"external\">https://github.com/spring-cloud/spring-cloud-release/releases</a> 版本发布</p>\n<h2 id=\"3-2-子项目一览\"><a href=\"#3-2-子项目一览\" class=\"headerlink\" title=\"3.2. 子项目一览\"></a>3.2. 子项目一览</h2><table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Camden.SR7</th>\n<th>Dalston.SR4</th>\n<th>Edgware.RELEASE</th>\n<th>Finchley.M4</th>\n<th>Finchley.BUILD-SNAPSHOT</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>spring-cloud-aws</td>\n<td>1.1.4.RELEASE</td>\n<td>1.2.1.RELEASE</td>\n<td>1.2.2.RELEASE</td>\n<td>2.0.0.M2</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-bus</td>\n<td>1.2.2.RELEASE</td>\n<td>1.3.1.RELEASE</td>\n<td>1.3.2.RELEASE</td>\n<td>2.0.0.M3</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-cli</td>\n<td>1.2.4.RELEASE</td>\n<td>1.3.4.RELEASE</td>\n<td>1.4.0.RELEASE</td>\n<td>2.0.0.M1</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-commons</td>\n<td>1.1.9.RELEASE</td>\n<td>1.2.4.RELEASE</td>\n<td>1.3.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-contract</td>\n<td>1.0.5.RELEASE</td>\n<td>1.1.4.RELEASE</td>\n<td>1.2.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-config</td>\n<td>1.2.3.RELEASE</td>\n<td>1.3.3.RELEASE</td>\n<td>1.4.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-netflix</td>\n<td>1.2.7.RELEASE</td>\n<td>1.3.5.RELEASE</td>\n<td>1.4.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-security</td>\n<td>1.1.4.RELEASE</td>\n<td>1.2.1.RELEASE</td>\n<td>1.2.1.RELEASE</td>\n<td>2.0.0.M1</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-cloudfoundry</td>\n<td>1.0.1.RELEASE</td>\n<td>1.1.0.RELEASE</td>\n<td>1.1.0.RELEASE</td>\n<td>2.0.0.M1</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-consul</td>\n<td>1.1.4.RELEASE</td>\n<td>1.2.1.RELEASE</td>\n<td>1.3.0.RELEASE</td>\n<td>2.0.0.M3</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-sleuth</td>\n<td>1.1.3.RELEASE</td>\n<td>1.2.5.RELEASE</td>\n<td>1.3.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-stream</td>\n<td>Brooklyn.SR3</td>\n<td>Chelsea.SR2</td>\n<td>Ditmars.RELEASE</td>\n<td>Elmhurst.M3</td>\n<td>Elmhurst.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-zookeeper</td>\n<td>1.0.4.RELEASE</td>\n<td>1.1.2.RELEASE</td>\n<td>1.2.0.RELEASE</td>\n<td>2.0.0.M3</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-boot</td>\n<td>1.4.5.RELEASE</td>\n<td>1.5.4.RELEASE</td>\n<td>1.5.8.RELEASE</td>\n<td>2.0.0.M6</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-task</td>\n<td>1.0.3.RELEASE</td>\n<td>1.1.2.RELEASE</td>\n<td>1.2.2.RELEASE</td>\n<td>2.0.0.M2</td>\n<td>2.0.0.RELEASE</td>\n</tr>\n<tr>\n<td>spring-cloud-vault</td>\n<td></td>\n<td>1.0.2.RELEASE</td>\n<td>1.1.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n<tr>\n<td>spring-cloud-gateway</td>\n<td></td>\n<td></td>\n<td>1.0.0.RELEASE</td>\n<td>2.0.0.M4</td>\n<td>2.0.0.BUILD-SNAPSHOT</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-3-spring-cloud-spring-boot-版本兼容性\"><a href=\"#3-3-spring-cloud-spring-boot-版本兼容性\" class=\"headerlink\" title=\"3.3. spring cloud / spring boot 版本兼容性\"></a>3.3. spring cloud / spring boot 版本兼容性</h2><ul>\n<li>Finchley使用Spring Boot 2.0.x构建和运行，并且不希望与Spring Boot 1.5.x一起使用。</li>\n<li>Dalston和Edgware发行版建立在Spring Boot 1.5.x之上，并且不希望与Spring Boot 2.0.x一起使用。</li>\n<li>Camden发行版基于Spring Boot 1.4.x，但也使用1.5.x进行测试。</li>\n</ul>\n<p><a href=\"http://projects.spring.io/spring-cloud/\" target=\"_blank\" rel=\"external\">http://projects.spring.io/spring-cloud/</a> 更具体的额可以看这里</p>\n"},{"title":"aws-vpn","toc":true,"date":"2018-01-02T16:20:16.000Z","scaffolds":null,"_content":"\n# 1. aws服务器的创建及vpn的安装\nhttps://www.jianshu.com/p/b0d460efca4e\n\n# 2. 配置 IPsec/L2TP VPN 客户端\nhttps://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows\n## 2.1. 注册表修改\nhttps://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows-错误-809 \n\nwindows10注册表修改,然后需要重启才能连上vpn \n```\nREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Services\\PolicyAgent /v AssumeUDPEncapsulationContextOnSendRule /t REG_DWORD /d 0x2 /f\n```\n","source":"_posts/杂记/aws-vpn.md","raw":"---\ntitle: aws-vpn\ncategories: 工具\ntags:\n  - vpn\n  - aws\ntoc: true\ndate: 2018-01-03 00:20:16\nscaffolds:\n---\n\n# 1. aws服务器的创建及vpn的安装\nhttps://www.jianshu.com/p/b0d460efca4e\n\n# 2. 配置 IPsec/L2TP VPN 客户端\nhttps://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows\n## 2.1. 注册表修改\nhttps://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows-错误-809 \n\nwindows10注册表修改,然后需要重启才能连上vpn \n```\nREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Services\\PolicyAgent /v AssumeUDPEncapsulationContextOnSendRule /t REG_DWORD /d 0x2 /f\n```\n","slug":"杂记/aws-vpn","published":1,"updated":"2018-02-06T07:47:30.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a020029v4vf3e01k88z","content":"<h1 id=\"1-aws服务器的创建及vpn的安装\"><a href=\"#1-aws服务器的创建及vpn的安装\" class=\"headerlink\" title=\"1. aws服务器的创建及vpn的安装\"></a>1. aws服务器的创建及vpn的安装</h1><p><a href=\"https://www.jianshu.com/p/b0d460efca4e\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/b0d460efca4e</a></p>\n<h1 id=\"2-配置-IPsec-L2TP-VPN-客户端\"><a href=\"#2-配置-IPsec-L2TP-VPN-客户端\" class=\"headerlink\" title=\"2. 配置 IPsec/L2TP VPN 客户端\"></a>2. 配置 IPsec/L2TP VPN 客户端</h1><p><a href=\"https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows\" target=\"_blank\" rel=\"external\">https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows</a></p>\n<h2 id=\"2-1-注册表修改\"><a href=\"#2-1-注册表修改\" class=\"headerlink\" title=\"2.1. 注册表修改\"></a>2.1. 注册表修改</h2><p><a href=\"https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows-错误-809\" target=\"_blank\" rel=\"external\">https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows-错误-809</a> </p>\n<p>windows10注册表修改,然后需要重启才能连上vpn<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Services\\PolicyAgent /v AssumeUDPEncapsulationContextOnSendRule /t REG_DWORD /d 0x2 /f</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-aws服务器的创建及vpn的安装\"><a href=\"#1-aws服务器的创建及vpn的安装\" class=\"headerlink\" title=\"1. aws服务器的创建及vpn的安装\"></a>1. aws服务器的创建及vpn的安装</h1><p><a href=\"https://www.jianshu.com/p/b0d460efca4e\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/b0d460efca4e</a></p>\n<h1 id=\"2-配置-IPsec-L2TP-VPN-客户端\"><a href=\"#2-配置-IPsec-L2TP-VPN-客户端\" class=\"headerlink\" title=\"2. 配置 IPsec/L2TP VPN 客户端\"></a>2. 配置 IPsec/L2TP VPN 客户端</h1><p><a href=\"https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows\" target=\"_blank\" rel=\"external\">https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows</a></p>\n<h2 id=\"2-1-注册表修改\"><a href=\"#2-1-注册表修改\" class=\"headerlink\" title=\"2.1. 注册表修改\"></a>2.1. 注册表修改</h2><p><a href=\"https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows-错误-809\" target=\"_blank\" rel=\"external\">https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows-错误-809</a> </p>\n<p>windows10注册表修改,然后需要重启才能连上vpn<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Services\\PolicyAgent /v AssumeUDPEncapsulationContextOnSendRule /t REG_DWORD /d 0x2 /f</div></pre></td></tr></table></figure></p>\n"},{"title":"centos7 安装mysql-转","toc":true,"date":"2017-11-04T14:30:14.000Z","scaffolds":null,"_content":"[linux下安装Mysql](http://www.cnblogs.com/xxoome/p/5864912.html)\n\n\n# 1. 其他\n## 1.1. 错误\n### 1.1.1. 本地登陆不进去\n```\n#mysql -u root -p \n提示”Access denied for user ‘root’@’localhost’ (using password: YES)”\n```\n我的mysql版本 \n> mysql  Ver 14.14 Distrib 5.6.38\n\n先修改一下mysql安装目录下面my.cnf,最后一行添加 `skip-grant-tables`\n然后登陆 进去修改\n> update mysql.user set password=password(‘mypassword’) where user=’root’; \n\n退出,修改文件删除刚加的属性,重启mysql服务\n\n### 1.1.2. 远程连接 ip无权限\n> update mysql.user set host='%' where user=’root’;","source":"_posts/杂记/centos7-安装mysql-转.md","raw":"---\ntitle: centos7 安装mysql-转\ncategories: 学习\ntags:\n  - 大数据\n  - linux\n  - mysql\ntoc: true\ndate: 2017-11-04 22:30:14\nscaffolds:\n---\n[linux下安装Mysql](http://www.cnblogs.com/xxoome/p/5864912.html)\n\n\n# 1. 其他\n## 1.1. 错误\n### 1.1.1. 本地登陆不进去\n```\n#mysql -u root -p \n提示”Access denied for user ‘root’@’localhost’ (using password: YES)”\n```\n我的mysql版本 \n> mysql  Ver 14.14 Distrib 5.6.38\n\n先修改一下mysql安装目录下面my.cnf,最后一行添加 `skip-grant-tables`\n然后登陆 进去修改\n> update mysql.user set password=password(‘mypassword’) where user=’root’; \n\n退出,修改文件删除刚加的属性,重启mysql服务\n\n### 1.1.2. 远程连接 ip无权限\n> update mysql.user set host='%' where user=’root’;","slug":"杂记/centos7-安装mysql-转","published":1,"updated":"2018-02-06T07:47:34.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a04002cv4vfobwya7u4","content":"<p><a href=\"http://www.cnblogs.com/xxoome/p/5864912.html\" target=\"_blank\" rel=\"external\">linux下安装Mysql</a></p>\n<h1 id=\"1-其他\"><a href=\"#1-其他\" class=\"headerlink\" title=\"1. 其他\"></a>1. 其他</h1><h2 id=\"1-1-错误\"><a href=\"#1-1-错误\" class=\"headerlink\" title=\"1.1. 错误\"></a>1.1. 错误</h2><h3 id=\"1-1-1-本地登陆不进去\"><a href=\"#1-1-1-本地登陆不进去\" class=\"headerlink\" title=\"1.1.1. 本地登陆不进去\"></a>1.1.1. 本地登陆不进去</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#mysql -u root -p </div><div class=\"line\">提示”Access denied for user ‘root’@’localhost’ (using password: YES)”</div></pre></td></tr></table></figure>\n<p>我的mysql版本 </p>\n<blockquote>\n<p>mysql  Ver 14.14 Distrib 5.6.38</p>\n</blockquote>\n<p>先修改一下mysql安装目录下面my.cnf,最后一行添加 <code>skip-grant-tables</code><br>然后登陆 进去修改</p>\n<blockquote>\n<p>update mysql.user set password=password(‘mypassword’) where user=’root’; </p>\n</blockquote>\n<p>退出,修改文件删除刚加的属性,重启mysql服务</p>\n<h3 id=\"1-1-2-远程连接-ip无权限\"><a href=\"#1-1-2-远程连接-ip无权限\" class=\"headerlink\" title=\"1.1.2. 远程连接 ip无权限\"></a>1.1.2. 远程连接 ip无权限</h3><blockquote>\n<p>update mysql.user set host=’%’ where user=’root’;</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.cnblogs.com/xxoome/p/5864912.html\" target=\"_blank\" rel=\"external\">linux下安装Mysql</a></p>\n<h1 id=\"1-其他\"><a href=\"#1-其他\" class=\"headerlink\" title=\"1. 其他\"></a>1. 其他</h1><h2 id=\"1-1-错误\"><a href=\"#1-1-错误\" class=\"headerlink\" title=\"1.1. 错误\"></a>1.1. 错误</h2><h3 id=\"1-1-1-本地登陆不进去\"><a href=\"#1-1-1-本地登陆不进去\" class=\"headerlink\" title=\"1.1.1. 本地登陆不进去\"></a>1.1.1. 本地登陆不进去</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#mysql -u root -p </div><div class=\"line\">提示”Access denied for user ‘root’@’localhost’ (using password: YES)”</div></pre></td></tr></table></figure>\n<p>我的mysql版本 </p>\n<blockquote>\n<p>mysql  Ver 14.14 Distrib 5.6.38</p>\n</blockquote>\n<p>先修改一下mysql安装目录下面my.cnf,最后一行添加 <code>skip-grant-tables</code><br>然后登陆 进去修改</p>\n<blockquote>\n<p>update mysql.user set password=password(‘mypassword’) where user=’root’; </p>\n</blockquote>\n<p>退出,修改文件删除刚加的属性,重启mysql服务</p>\n<h3 id=\"1-1-2-远程连接-ip无权限\"><a href=\"#1-1-2-远程连接-ip无权限\" class=\"headerlink\" title=\"1.1.2. 远程连接 ip无权限\"></a>1.1.2. 远程连接 ip无权限</h3><blockquote>\n<p>update mysql.user set host=’%’ where user=’root’;</p>\n</blockquote>\n"},{"title":"centos7 开放端口","toc":true,"date":"2017-11-04T14:15:10.000Z","scaffolds":null,"_content":"CentOS升级到7之后，发现无法使用iptables控制Linuxs的端口，google之后发现Centos 7使用firewalld代替了原来的iptables。下面记录如何使用firewalld开放Linux端口：\n\n开启端口\n\n```\nfirewall-cmd --zone=public --add-port=80/tcp --permanent\n\n```\n命令含义：\n\n```\n--zone #作用域\n\n--add-port=80/tcp  #添加端口，格式为：端口/通讯协议\n\n--permanent  #永久生效，没有此参数重启后失效\n\n```\n重启防火墙\n\n```\nfirewall-cmd --reload\n```\n\n查看开启了那些端口\n> /sbin/iptables -L -n","source":"_posts/杂记/centos7-开放端口.md","raw":"---\ntitle: centos7 开放端口\ncategories: 学习\ntags: [大数据,linux,centos7]\ntoc: true\ndate: 2017-11-04 22:15:10\nscaffolds:\n---\nCentOS升级到7之后，发现无法使用iptables控制Linuxs的端口，google之后发现Centos 7使用firewalld代替了原来的iptables。下面记录如何使用firewalld开放Linux端口：\n\n开启端口\n\n```\nfirewall-cmd --zone=public --add-port=80/tcp --permanent\n\n```\n命令含义：\n\n```\n--zone #作用域\n\n--add-port=80/tcp  #添加端口，格式为：端口/通讯协议\n\n--permanent  #永久生效，没有此参数重启后失效\n\n```\n重启防火墙\n\n```\nfirewall-cmd --reload\n```\n\n查看开启了那些端口\n> /sbin/iptables -L -n","slug":"杂记/centos7-开放端口","published":1,"updated":"2018-02-06T07:47:36.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a07002gv4vf9r67nlo8","content":"<p>CentOS升级到7之后，发现无法使用iptables控制Linuxs的端口，google之后发现Centos 7使用firewalld代替了原来的iptables。下面记录如何使用firewalld开放Linux端口：</p>\n<p>开启端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent</div></pre></td></tr></table></figure>\n<p>命令含义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">--zone #作用域</div><div class=\"line\"></div><div class=\"line\">--add-port=80/tcp  #添加端口，格式为：端口/通讯协议</div><div class=\"line\"></div><div class=\"line\">--permanent  #永久生效，没有此参数重启后失效</div></pre></td></tr></table></figure>\n<p>重启防火墙</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">firewall-cmd --reload</div></pre></td></tr></table></figure>\n<p>查看开启了那些端口</p>\n<blockquote>\n<p>/sbin/iptables -L -n</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>CentOS升级到7之后，发现无法使用iptables控制Linuxs的端口，google之后发现Centos 7使用firewalld代替了原来的iptables。下面记录如何使用firewalld开放Linux端口：</p>\n<p>开启端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent</div></pre></td></tr></table></figure>\n<p>命令含义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">--zone #作用域</div><div class=\"line\"></div><div class=\"line\">--add-port=80/tcp  #添加端口，格式为：端口/通讯协议</div><div class=\"line\"></div><div class=\"line\">--permanent  #永久生效，没有此参数重启后失效</div></pre></td></tr></table></figure>\n<p>重启防火墙</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">firewall-cmd --reload</div></pre></td></tr></table></figure>\n<p>查看开启了那些端口</p>\n<blockquote>\n<p>/sbin/iptables -L -n</p>\n</blockquote>\n"},{"title":"FTP服务器简单创建","toc":true,"date":"2017-11-04T14:15:10.000Z","scaffolds":null,"_content":"# 1. FTP服务器简单创建\n## 1.1. １.环境\nCentOS release 6.5 (Final)-amd64 \n  \n- 查看linux版本:  \n>[root@localhost vsftpd]# **cat /etc/issue**  \nCentOS release 6.5 (Final)  \nKernel \\r on an \\m  \n[root@localhost vsftpd]# **lsb_release -a**  \nLSB Version:\t:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch  \nDistributor ID:\tCentOS  \nDescription:\tCentOS release 6.5 (Final)  \nRelease:\t6.5  \nCodename:\tFinal  \n\n\n## 1.2. 安装vsftpd\n- 安装vsftpd\n\t\n>yum install vsftpd\n\n- 安装成功后查看\n \n>[root@localhost vsftpd]# **rpm -qa |grep vsftpd**  \n>vsftpd-2.2.2-21.el6.x86_64\n\n- 开启ftp服务\n\n>[root@localhost vsftpd]# **service vsftpd start**  \n>为 vsftpd 启动 vsftpd：                                    [确定]\n\n- 停止ftp服务\n\n>[root@localhost vsftpd]# **service vsftpd stop**  \n>关闭 vsftpd：                                              [确定]\n\n## 1.3. 创建用户\n\n　　专门创建一个ftp链接的用户，限制其只能通过ftp方式登录，只能访问指定给他的目录。\n\n### 1.3.1. 创建用户\n\t\n- 创建分组,用于存放ftp用户(可以省略)    \n\n>groupadd ftpgroups     \n\n- 创建ftp用户，并加入ftpgroups组，/home/ftp是自己建的目录，不存在就自己创建一个(目录自己定义)  \n\n>useradd -d /home/ftp/ftptest -g ftpgroups ftptest\t\n  \n　　-d 后面是指定用户目录的 -g 分配所属组 (如果没创建上面的组 可以省略-g 及后面的组名 ftpgroups)\n\n- 给用户授权文件夹的写权限(我做的需要上传文件)\n\n>chmod -R 755 /home/ftp\n\n\n### 1.3.2. 设置密码\n\n>passwd ftptest  \n\n　　输入两次密码\n\n### 1.3.3. 设置不允许用于登录\n\n>usermod -s /sbin/nologin ftptest\n\n　　没设置这个的时候,虽然没有ssh的登录权限,但是用xshell链接的时候会进入~bash对其他文件进行操作. \n\n## 1.4. 配置vsftpd\n\n　　安装vsftpd之后,在/etc/vsftpd 下有三个配置文件:\n>-rw------- 1 root root  125 2月   8 14:46 **ftpusers**   \n-rw------- 1 root root  384 2月   8 15:35 **user_list**    \n-rw------- 1 root root 4765 2月   8 16:35 **vsftpd.conf**  \n-rwxr--r-- 1 root root  338 5月  11 2016 vsftpd_conf_migrate.sh  \n\n### 1.4.1. 配置文件\n\n- ftpusers 可以简单理解为黑名单,其中的用户不能访问ftp,总是生效的\n- user_list 与 vsftpd.conf中的配置userlist_enable=YES 和 userlist_deny=NO功能使用,可以设置成黑名单,白名单(只有此文件里的用户才能使用ftp),具体设置看下面\n- vsftpd.conf 主配置文件\n\n修改一下配置文件让其只能访问自身目录\n\n>vi /etc/vsftpd/vsftpd.conf\n\n\n如下设置\n\n>chroot_local_user=YES  \n>chroot_list_enable=YES  \n>chroot_list_file=/etc/vsftpd/chroot_list\n\nchroot_list 文件自己创建，如果需要让某些用户可以访问其他目录，就把用户加到这个文件中\n\n解释一下userlist_enable=YES,userlist_deny=NO   \nuserlist_enable 为YES时user_list文件有效,NO 则不生效  \nuserlist_deny 为YES时user_list文件为黑名单,NO为白名单  \n\n通过配置指定user_list\n\n>userlist_file=/etc/vsftpd/user_list\n\n# 2. 我的配置\n\nftpusers 不变  \nchroot_list 创建了内容为空  \nuser\\_list 修改为\n\n\n\t\t# vsftpd userlist\n\t\t# If userlist_deny=NO, only allow users in this file\n\t\t# If userlist_deny=YES (default), never allow users in this file, and\n\t\t# do not even prompt for a password.\n\t\t# Note that the default vsftpd pam config also checks /etc/vsftpd/ftpusers\n\t\t# for users that are denied.\n\t\t#root\n\t\t#bin\n\t\t#daemon\n\t\t#adm\n\t\t#lp\n\t\t#sync\n\t\t#shutdown\n\t\t#halt\n\t\t#mail\n\t\t#news\n\t\t#uucp\n\t\t#operator\n\t\t#games\n\t\t#nobody\n\t\tftptest\n\n\nvsftpd.conf修改为\n\n\t# Example config file /etc/vsftpd/vsftpd.conf\n\t#\n\t# The default compiled in settings are fairly paranoid. This sample file\n\t# loosens things up a bit, to make the ftp daemon more usable.\n\t# Please see vsftpd.conf.5 for all compiled in defaults.\n\t#\n\t# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n\t# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's\n\t# capabilities.\n\t#\n\t# Allow anonymous FTP? (Beware - allowed by default if you comment this out).\n\tanonymous_enable=NO\n\t#\n\t# Uncomment this to allow local users to log in.\n\tlocal_enable=YES\n\t#\n\t# Uncomment this to enable any form of FTP write command.\n\twrite_enable=YES\n\t#\n\t# Default umask for local users is 077. You may wish to change this to 022,\n\t# if your users expect that (022 is used by most other ftpd's)\n\tlocal_umask=022\n\t#\n\t# Uncomment this to allow the anonymous FTP user to upload files. This only\n\t# has an effect if the above global write enable is activated. Also, you will\n\t# obviously need to create a directory writable by the FTP user.\n\t#anon_upload_enable=YES\n\t#\n\t# Uncomment this if you want the anonymous FTP user to be able to create\n\t# new directories.\n\t#anon_mkdir_write_enable=YES\n\t#\n\t# Activate directory messages - messages given to remote users when they\n\t# go into a certain directory.\n\tdirmessage_enable=YES\n\t#\n\t# The target log file can be vsftpd_log_file or xferlog_file.\n\t# This depends on setting xferlog_std_format parameter\n\txferlog_enable=YES\n\t#\n\t# Make sure PORT transfer connections originate from port 20 (ftp-data).\n\tconnect_from_port_20=YES\n\t#\n\t# If you want, you can arrange for uploaded anonymous files to be owned by\n\t# a different user. Note! Using \"root\" for uploaded files is not\n\t# recommended!\n\t#chown_uploads=YES\n\t#chown_username=whoever\n\t#\n\t# The name of log file when xferlog_enable=YES and xferlog_std_format=YES\n\t# WARNING - changing this filename affects /etc/logrotate.d/vsftpd.log\n\t#xferlog_file=/var/log/xferlog\n\t#\n\t# Switches between logging into vsftpd_log_file and xferlog_file files.\n\t# NO writes to vsftpd_log_file, YES to xferlog_file\n\txferlog_std_format=YES\n\t#\n\t# You may change the default value for timing out an idle session.\n\t#idle_session_timeout=600\n\t#\n\t# You may change the default value for timing out a data connection.\n\t#data_connection_timeout=120\n\t#\n\t# It is recommended that you define on your system a unique user which the\n\t# ftp server can use as a totally isolated and unprivileged user.\n\t#nopriv_user=ftpsecure\n\t#\n\t# Enable this and the server will recognise asynchronous ABOR requests. Not\n\t# recommended for security (the code is non-trivial). Not enabling it,\n\t# however, may confuse older FTP clients.\n\t#async_abor_enable=YES\n\t#\n\t# By default the server will pretend to allow ASCII mode but in fact ignore\n\t# the request. Turn on the below options to have the server actually do ASCII\n\t# mangling on files when in ASCII mode.\n\t# Beware that on some FTP servers, ASCII support allows a denial of service\n\t# attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd\n\t# predicted this attack and has always been safe, reporting the size of the\n\t# raw file.\n\t# ASCII mangling is a horrible feature of the protocol.\n\t#ascii_upload_enable=YES\n\t#ascii_download_enable=YES\n\t#\n\t# You may fully customise the login banner string:\n\t#ftpd_banner=Welcome to blah FTP service.\n\t#\n\t# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n\t# useful for combatting certain DoS attacks.\n\t#deny_email_enable=YES\n\t# (default follows)\n\t#banned_email_file=/etc/vsftpd/banned_emails\n\t#\n\t# You may specify an explicit list of local users to chroot() to their home\n\t# directory. If chroot_local_user is YES, then this list becomes a list of\n\t# users to NOT chroot().\n\t#chroot_local_user=YES\n\t#chroot_list_enable=YES\n\t# (default follows)\n\t#chroot_list_file=/etc/vsftpd/chroot_list\n\t#\n\t# You may activate the \"-R\" option to the builtin ls. This is disabled by\n\t# default to avoid remote users being able to cause excessive I/O on large\n\t# sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume\n\t# the presence of the \"-R\" option, so there is a strong case for enabling it.\n\t#ls_recurse_enable=YES\n\t#\n\t# When \"listen\" directive is enabled, vsftpd runs in standalone mode and\n\t# listens on IPv4 sockets. This directive cannot be used in conjunction\n\t# with the listen_ipv6 directive.\n\tlisten=YES\n\t#\n\t# This directive enables listening on IPv6 sockets. To listen on IPv4 and IPv6\n\t# sockets, you must run two copies of vsftpd with two configuration files.\n\t# Make sure, that one of the listen options is commented !!\n\t#listen_ipv6=YES\n\t\n\tpam_service_name=vsftpd\n\tuserlist_enable=YES\n\ttcp_wrappers=YES\n\tuserlist_deny=NO\n\tuserlist_file=/etc/vsftpd/user_list\n\tchroot_local_user=YES\n\tchroot_list_enable=YES\n\tchroot_list_file=/etc/vsftpd/chroot_list\n\t\n# 3. JAVA上传下载\n\n## 3.1. java需要的jar\n\ncommons-io-2.1.jar  \ncommons-net-1.4.1.jar\n\n## 3.2. java代码demo\n\n\tpackage ftp;\n\timport java.io.File;\n\timport java.io.FileInputStream;\n\timport java.io.FileOutputStream;\n\timport java.io.IOException;\n\t\n\timport org.apache.commons.io.IOUtils;\n\timport org.apache.commons.net.ftp.FTPClient;\n\n\n\tpublic class FtpTest1 {\n\t\tpublic static void main(String[] args) { \n\t        testUpload(); \n\t        testDownload(); \n\t    } \n\t\n\t    /** \n\t     * FTP上传单个文件测试 \n\t     */ \n\t    public static void testUpload() { \n\t        FTPClient ftpClient = new FTPClient(); \n\t        FileInputStream fis = null; \n\t\n\t        try { \n\t        \tftpClient.connect(\"192.168.0.1\"); \n\t        \tSystem.out.print(ftpClient.getReplyString());\n\t            ftpClient.login(\"username\", \"password\"); \n\t            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n\t            File srcFile = new File(\"C:\\\\Users\\\\jk\\\\Desktop\\\\img.jpg\"); \n\t            System.out.println(srcFile.exists());\n\t            fis = new FileInputStream(srcFile); \n\t            //设置上传目录 \n\t            ftpClient.changeWorkingDirectory(\"/admin\"); \n\t            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n\t            ftpClient.setBufferSize(1024); \n\t            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n\t            ftpClient.setControlEncoding(\"GBK\"); \n\t            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n\t            //设置文件类型（二进制） \n\t            ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE); \n\t            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n\t            ftpClient.storeFile(\"5.gif\", fis); \n\t            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n\t        } catch (IOException e) { \n\t            e.printStackTrace(); \n\t            throw new RuntimeException(\"FTP客户端出错！\", e); \n\t        } finally { \n\t            IOUtils.closeQuietly(fis); \n\t            try { \n\t                ftpClient.disconnect(); \n\t            } catch (IOException e) { \n\t                e.printStackTrace(); \n\t                throw new RuntimeException(\"关闭FTP连接发生异常！\", e); \n\t            } \n\t        } \n\t    } \n\t\n\t    /** \n\t     * FTP下载单个文件测试 \n\t     */ \n\t    public static void testDownload() { \n\t        FTPClient ftpClient = new FTPClient(); \n\t        FileOutputStream fos = null; \n\t\n\t        try { \n\t        \tftpClient.connect(\"192.168.0.1\"); \n\t        \tSystem.out.print(ftpClient.getReplyString());\n\t            ftpClient.login(\"username\", \"password\"); \n\t            System.out.print(ftpClient.getReplyString());\n\t            \n\t            String remoteFileName = \"/3.gif\"; \n\t            fos = new FileOutputStream(\"C:/Users/jk/Desktop/3.jpg\"); \n\t\n\t            ftpClient.setBufferSize(1024); \n\t            System.out.print(ftpClient.getReplyString());\n\t            //设置文件类型（二进制） \n\t            ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE); \n\t            System.out.print(ftpClient.getReplyString());\n\t            ftpClient.retrieveFile(remoteFileName, fos); \n\t            System.out.print(ftpClient.getReplyString());\n\t        } catch (IOException e) { \n\t            e.printStackTrace(); \n\t            throw new RuntimeException(\"FTP客户端出错！\", e); \n\t        } finally { \n\t            IOUtils.closeQuietly(fos); \n\t            try { \n\t                ftpClient.disconnect(); \n\t                System.out.print(ftpClient.getReplyString());\n\t            } catch (IOException e) { \n\t                e.printStackTrace(); \n\t                throw new RuntimeException(\"关闭FTP连接发生异常！\", e); \n\t            } \n\t        } \n\t    } \n\t}\n\n\n\n## 3.3. 其他（我没有用到,服务器之前就用着）\n\n如果还是登陆不了ftp，那很有可能是selinux的问题，这个东西把他关掉就行\n\nvi /etc/selinux/config\n\nSELINUX=enforcing 设置成SELINUX=disabled\n\n \n\n重启一下服务器\n\nreboot\n\n重启完了别忘了把vsftpd服务打开，默认是自启的。\n\n \n\n如果连接不上，很可能是防火墙阻止了，尝试关闭防火墙\n\nsystemctl stop firewalld.service #停止firewall  \nsystemctl disable firewalld.service #禁止firewall开机启动  \nfirewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）  \n \n\n如果出现远程文件夹无法显示的情况，请使用主动模式连接，在你的ftp工具上设置。\n\n## 3.4. linux下ftp配置文件详解\n\n\t# 匿名用户配置   \n\tanonymous_enable=YES         # 是否允许匿名ftp,如否则选择NO   \n\tanon_upload_enable=YES       # 匿名用户是否能上传   \n\tanon_mkdir_write_enable=YES  # 匿名用户是否能创建目录   \n\tanon_other_write_enable=YES  # 修改文件名和删除文件   \n\t  \n\t# 本地用户配置   \n\tlocal_enable=YES # 是否允许本地用户登录   \n\tlocal_umask=022  # umask 默认755   \n\twrite_enable=YES   \n\t\n\tchroot_local_user=YES  # 本地用户禁锢在宿主目录中   \n\tchroot_list_enable=YES # 是否将系统用户限止在自己的home目录下   \n\tchroot_list_file=/etc/vsftpd.chroot_list # 列出的是不chroot的用户的列表   \n\t  \n\tchown_upload=YES  # 是否改变上传文件的属主   \n\tchown_username=username # 如果是需要输入一个系统用户名   \n\t  \n\tuserlist_enable=YES   \n\tuserlist_deny=NO   \n\t  \n\tdeny_email_enable=YES # 是否允许禁止匿名用户使用某些邮件地址   \n\tbanned_email_file=/etc/vsftpd.banned_emails # 禁止邮件地址的文件路径   \n\t  \n\tftpd_banner=Welcome to chenlf FTP service. # 定制欢迎信息   \n\tdirmessage_enable=YES # 是否显示目录说明文件, 需要收工创建.message文件   \n\tmessage_file= # 设置访问一个目录时获得的目录信息文件的文件名,默认是.message   \n\t  \n\txferlog_enable=YES # 是否记录ftp传输过程   \n\txferlog_file=/var/log/vsftpd.log # ftp传输日志的路径和名字   \n\txferlog_std_format=YES # 是否使用标准的ftp xferlog模式   \n\t  \n\tascii_upload_enable=YES   # 是否使用ascii码方式上传文件   \n\tascii_download_enable=YES # 是否使用ascii码方式下载文件   \n\t  \n\tconnect_from_port_20=YES # 是否确信端口传输来自20(ftp-data)   \n\t  \n\tnopriv_user=ftpsecure # 运行vsftpd需要的非特权系统用户默认是nobody   \n\t  \n\tasync_abor_enable=YES # 是否允许运行特殊的ftp命令async ABOR.   \n\t  \n\t# FTP服务器的资源限制   \n\t  \n\tidle_session_timeout=600 # 设置session超时时间   \n\tdata_connection_timeout=120 # 设置数据传输超时时间   \n\t  \n\tmax_clients=50 # 用户最大连接数 默认是0不限止   \n\tmax_per_ip=5   # 每个IP地址最大连接数   \n\t  \n\tanon_max_rate=102400  # 匿名的下载速度 KB   \n\tlocal_max_rate=102400 # 普通用户的下载速度 KB   \n\t  \n\t其他配置文件   \n\t\n\t/etc/xinetd.d/vsftpd   \n\t  \n\tservice ftp   \n\t{   \n\tsocket_type = stream   \n\twait = no   \n\tuser = root   \n\tserver = /usr/local/sbin/vsftpd   \n\t# server_args =   \n\t# log_on_success += DURATION USERID   \n\t# log_on_failure += USERID   \n\tnice = 10   \n\tdisable = no   \n\t}   \n\t  \n\t/etc/pam.d/vsftpd   \n\tPAM 认证   \n\t  \n\t/etc/vsftpd.chroot_list   \n\t此文件包含对服务器上所有FTP内容有权限的用户名。对其他用户来说，他们在服务器上的主目录对他们显示为根目录。   \n\t  \n\t/etc/shells   \n\t在允许本地用户登录之前，系统默认检查是否有有效的用户 shell。以防 PAM 认证不可用的情况。   \n\t/etc/ftpusers   \n\t此文件包含*禁止*FTP登录的用户名，通常有 \"root\"， \"uucp\"， \"news\" 之类，因为这些用户权限太高，登录 FTP 误操作危险性大。   \n\t  \n\t防火墙设置   \n\t  \n\t如果是用默认的SuSEFirewall2，在 YaST-系统-/etc/sysconfig 编辑器，network-SuSEfirewall2   \n\t  \n\t把 ftp 添加到 FW_SERVICES_EXT_TCP，比如你还要打开 ssh 那么   \n\t  \n\tFW_SERVICES_EXT_TCP \"ftp ssh\"   \n\t  \n\t如果你需要被动模式 FTP 和 nat，在 YaST-系统-/etc/sysconfig 编辑器，network-SuSEfirewall2   \n\t  \n\tFW_LOAD_MODULES \"ip_conntrack_ftp ip_nat_ftp\"   \n\t  \n\t  \n\t另一种方式直接修改防火墙配置文件：   \n\t# cd /etc/sysconfig/   \n\t# vi SuSEfirewall2   \n\tFW_SERVICES_EXT_TCP \"ftp 21 telnet 23\"   \n\t","source":"_posts/杂记/ftp服务器创建.md","raw":"---\ntitle: FTP服务器简单创建\ncategories: 学习\ntags: [ftp,linux]\ntoc: true\ndate: 2017-11-04 22:15:10\nscaffolds:\n---\n# 1. FTP服务器简单创建\n## 1.1. １.环境\nCentOS release 6.5 (Final)-amd64 \n  \n- 查看linux版本:  \n>[root@localhost vsftpd]# **cat /etc/issue**  \nCentOS release 6.5 (Final)  \nKernel \\r on an \\m  \n[root@localhost vsftpd]# **lsb_release -a**  \nLSB Version:\t:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch  \nDistributor ID:\tCentOS  \nDescription:\tCentOS release 6.5 (Final)  \nRelease:\t6.5  \nCodename:\tFinal  \n\n\n## 1.2. 安装vsftpd\n- 安装vsftpd\n\t\n>yum install vsftpd\n\n- 安装成功后查看\n \n>[root@localhost vsftpd]# **rpm -qa |grep vsftpd**  \n>vsftpd-2.2.2-21.el6.x86_64\n\n- 开启ftp服务\n\n>[root@localhost vsftpd]# **service vsftpd start**  \n>为 vsftpd 启动 vsftpd：                                    [确定]\n\n- 停止ftp服务\n\n>[root@localhost vsftpd]# **service vsftpd stop**  \n>关闭 vsftpd：                                              [确定]\n\n## 1.3. 创建用户\n\n　　专门创建一个ftp链接的用户，限制其只能通过ftp方式登录，只能访问指定给他的目录。\n\n### 1.3.1. 创建用户\n\t\n- 创建分组,用于存放ftp用户(可以省略)    \n\n>groupadd ftpgroups     \n\n- 创建ftp用户，并加入ftpgroups组，/home/ftp是自己建的目录，不存在就自己创建一个(目录自己定义)  \n\n>useradd -d /home/ftp/ftptest -g ftpgroups ftptest\t\n  \n　　-d 后面是指定用户目录的 -g 分配所属组 (如果没创建上面的组 可以省略-g 及后面的组名 ftpgroups)\n\n- 给用户授权文件夹的写权限(我做的需要上传文件)\n\n>chmod -R 755 /home/ftp\n\n\n### 1.3.2. 设置密码\n\n>passwd ftptest  \n\n　　输入两次密码\n\n### 1.3.3. 设置不允许用于登录\n\n>usermod -s /sbin/nologin ftptest\n\n　　没设置这个的时候,虽然没有ssh的登录权限,但是用xshell链接的时候会进入~bash对其他文件进行操作. \n\n## 1.4. 配置vsftpd\n\n　　安装vsftpd之后,在/etc/vsftpd 下有三个配置文件:\n>-rw------- 1 root root  125 2月   8 14:46 **ftpusers**   \n-rw------- 1 root root  384 2月   8 15:35 **user_list**    \n-rw------- 1 root root 4765 2月   8 16:35 **vsftpd.conf**  \n-rwxr--r-- 1 root root  338 5月  11 2016 vsftpd_conf_migrate.sh  \n\n### 1.4.1. 配置文件\n\n- ftpusers 可以简单理解为黑名单,其中的用户不能访问ftp,总是生效的\n- user_list 与 vsftpd.conf中的配置userlist_enable=YES 和 userlist_deny=NO功能使用,可以设置成黑名单,白名单(只有此文件里的用户才能使用ftp),具体设置看下面\n- vsftpd.conf 主配置文件\n\n修改一下配置文件让其只能访问自身目录\n\n>vi /etc/vsftpd/vsftpd.conf\n\n\n如下设置\n\n>chroot_local_user=YES  \n>chroot_list_enable=YES  \n>chroot_list_file=/etc/vsftpd/chroot_list\n\nchroot_list 文件自己创建，如果需要让某些用户可以访问其他目录，就把用户加到这个文件中\n\n解释一下userlist_enable=YES,userlist_deny=NO   \nuserlist_enable 为YES时user_list文件有效,NO 则不生效  \nuserlist_deny 为YES时user_list文件为黑名单,NO为白名单  \n\n通过配置指定user_list\n\n>userlist_file=/etc/vsftpd/user_list\n\n# 2. 我的配置\n\nftpusers 不变  \nchroot_list 创建了内容为空  \nuser\\_list 修改为\n\n\n\t\t# vsftpd userlist\n\t\t# If userlist_deny=NO, only allow users in this file\n\t\t# If userlist_deny=YES (default), never allow users in this file, and\n\t\t# do not even prompt for a password.\n\t\t# Note that the default vsftpd pam config also checks /etc/vsftpd/ftpusers\n\t\t# for users that are denied.\n\t\t#root\n\t\t#bin\n\t\t#daemon\n\t\t#adm\n\t\t#lp\n\t\t#sync\n\t\t#shutdown\n\t\t#halt\n\t\t#mail\n\t\t#news\n\t\t#uucp\n\t\t#operator\n\t\t#games\n\t\t#nobody\n\t\tftptest\n\n\nvsftpd.conf修改为\n\n\t# Example config file /etc/vsftpd/vsftpd.conf\n\t#\n\t# The default compiled in settings are fairly paranoid. This sample file\n\t# loosens things up a bit, to make the ftp daemon more usable.\n\t# Please see vsftpd.conf.5 for all compiled in defaults.\n\t#\n\t# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n\t# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's\n\t# capabilities.\n\t#\n\t# Allow anonymous FTP? (Beware - allowed by default if you comment this out).\n\tanonymous_enable=NO\n\t#\n\t# Uncomment this to allow local users to log in.\n\tlocal_enable=YES\n\t#\n\t# Uncomment this to enable any form of FTP write command.\n\twrite_enable=YES\n\t#\n\t# Default umask for local users is 077. You may wish to change this to 022,\n\t# if your users expect that (022 is used by most other ftpd's)\n\tlocal_umask=022\n\t#\n\t# Uncomment this to allow the anonymous FTP user to upload files. This only\n\t# has an effect if the above global write enable is activated. Also, you will\n\t# obviously need to create a directory writable by the FTP user.\n\t#anon_upload_enable=YES\n\t#\n\t# Uncomment this if you want the anonymous FTP user to be able to create\n\t# new directories.\n\t#anon_mkdir_write_enable=YES\n\t#\n\t# Activate directory messages - messages given to remote users when they\n\t# go into a certain directory.\n\tdirmessage_enable=YES\n\t#\n\t# The target log file can be vsftpd_log_file or xferlog_file.\n\t# This depends on setting xferlog_std_format parameter\n\txferlog_enable=YES\n\t#\n\t# Make sure PORT transfer connections originate from port 20 (ftp-data).\n\tconnect_from_port_20=YES\n\t#\n\t# If you want, you can arrange for uploaded anonymous files to be owned by\n\t# a different user. Note! Using \"root\" for uploaded files is not\n\t# recommended!\n\t#chown_uploads=YES\n\t#chown_username=whoever\n\t#\n\t# The name of log file when xferlog_enable=YES and xferlog_std_format=YES\n\t# WARNING - changing this filename affects /etc/logrotate.d/vsftpd.log\n\t#xferlog_file=/var/log/xferlog\n\t#\n\t# Switches between logging into vsftpd_log_file and xferlog_file files.\n\t# NO writes to vsftpd_log_file, YES to xferlog_file\n\txferlog_std_format=YES\n\t#\n\t# You may change the default value for timing out an idle session.\n\t#idle_session_timeout=600\n\t#\n\t# You may change the default value for timing out a data connection.\n\t#data_connection_timeout=120\n\t#\n\t# It is recommended that you define on your system a unique user which the\n\t# ftp server can use as a totally isolated and unprivileged user.\n\t#nopriv_user=ftpsecure\n\t#\n\t# Enable this and the server will recognise asynchronous ABOR requests. Not\n\t# recommended for security (the code is non-trivial). Not enabling it,\n\t# however, may confuse older FTP clients.\n\t#async_abor_enable=YES\n\t#\n\t# By default the server will pretend to allow ASCII mode but in fact ignore\n\t# the request. Turn on the below options to have the server actually do ASCII\n\t# mangling on files when in ASCII mode.\n\t# Beware that on some FTP servers, ASCII support allows a denial of service\n\t# attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd\n\t# predicted this attack and has always been safe, reporting the size of the\n\t# raw file.\n\t# ASCII mangling is a horrible feature of the protocol.\n\t#ascii_upload_enable=YES\n\t#ascii_download_enable=YES\n\t#\n\t# You may fully customise the login banner string:\n\t#ftpd_banner=Welcome to blah FTP service.\n\t#\n\t# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n\t# useful for combatting certain DoS attacks.\n\t#deny_email_enable=YES\n\t# (default follows)\n\t#banned_email_file=/etc/vsftpd/banned_emails\n\t#\n\t# You may specify an explicit list of local users to chroot() to their home\n\t# directory. If chroot_local_user is YES, then this list becomes a list of\n\t# users to NOT chroot().\n\t#chroot_local_user=YES\n\t#chroot_list_enable=YES\n\t# (default follows)\n\t#chroot_list_file=/etc/vsftpd/chroot_list\n\t#\n\t# You may activate the \"-R\" option to the builtin ls. This is disabled by\n\t# default to avoid remote users being able to cause excessive I/O on large\n\t# sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume\n\t# the presence of the \"-R\" option, so there is a strong case for enabling it.\n\t#ls_recurse_enable=YES\n\t#\n\t# When \"listen\" directive is enabled, vsftpd runs in standalone mode and\n\t# listens on IPv4 sockets. This directive cannot be used in conjunction\n\t# with the listen_ipv6 directive.\n\tlisten=YES\n\t#\n\t# This directive enables listening on IPv6 sockets. To listen on IPv4 and IPv6\n\t# sockets, you must run two copies of vsftpd with two configuration files.\n\t# Make sure, that one of the listen options is commented !!\n\t#listen_ipv6=YES\n\t\n\tpam_service_name=vsftpd\n\tuserlist_enable=YES\n\ttcp_wrappers=YES\n\tuserlist_deny=NO\n\tuserlist_file=/etc/vsftpd/user_list\n\tchroot_local_user=YES\n\tchroot_list_enable=YES\n\tchroot_list_file=/etc/vsftpd/chroot_list\n\t\n# 3. JAVA上传下载\n\n## 3.1. java需要的jar\n\ncommons-io-2.1.jar  \ncommons-net-1.4.1.jar\n\n## 3.2. java代码demo\n\n\tpackage ftp;\n\timport java.io.File;\n\timport java.io.FileInputStream;\n\timport java.io.FileOutputStream;\n\timport java.io.IOException;\n\t\n\timport org.apache.commons.io.IOUtils;\n\timport org.apache.commons.net.ftp.FTPClient;\n\n\n\tpublic class FtpTest1 {\n\t\tpublic static void main(String[] args) { \n\t        testUpload(); \n\t        testDownload(); \n\t    } \n\t\n\t    /** \n\t     * FTP上传单个文件测试 \n\t     */ \n\t    public static void testUpload() { \n\t        FTPClient ftpClient = new FTPClient(); \n\t        FileInputStream fis = null; \n\t\n\t        try { \n\t        \tftpClient.connect(\"192.168.0.1\"); \n\t        \tSystem.out.print(ftpClient.getReplyString());\n\t            ftpClient.login(\"username\", \"password\"); \n\t            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n\t            File srcFile = new File(\"C:\\\\Users\\\\jk\\\\Desktop\\\\img.jpg\"); \n\t            System.out.println(srcFile.exists());\n\t            fis = new FileInputStream(srcFile); \n\t            //设置上传目录 \n\t            ftpClient.changeWorkingDirectory(\"/admin\"); \n\t            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n\t            ftpClient.setBufferSize(1024); \n\t            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n\t            ftpClient.setControlEncoding(\"GBK\"); \n\t            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n\t            //设置文件类型（二进制） \n\t            ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE); \n\t            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n\t            ftpClient.storeFile(\"5.gif\", fis); \n\t            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n\t        } catch (IOException e) { \n\t            e.printStackTrace(); \n\t            throw new RuntimeException(\"FTP客户端出错！\", e); \n\t        } finally { \n\t            IOUtils.closeQuietly(fis); \n\t            try { \n\t                ftpClient.disconnect(); \n\t            } catch (IOException e) { \n\t                e.printStackTrace(); \n\t                throw new RuntimeException(\"关闭FTP连接发生异常！\", e); \n\t            } \n\t        } \n\t    } \n\t\n\t    /** \n\t     * FTP下载单个文件测试 \n\t     */ \n\t    public static void testDownload() { \n\t        FTPClient ftpClient = new FTPClient(); \n\t        FileOutputStream fos = null; \n\t\n\t        try { \n\t        \tftpClient.connect(\"192.168.0.1\"); \n\t        \tSystem.out.print(ftpClient.getReplyString());\n\t            ftpClient.login(\"username\", \"password\"); \n\t            System.out.print(ftpClient.getReplyString());\n\t            \n\t            String remoteFileName = \"/3.gif\"; \n\t            fos = new FileOutputStream(\"C:/Users/jk/Desktop/3.jpg\"); \n\t\n\t            ftpClient.setBufferSize(1024); \n\t            System.out.print(ftpClient.getReplyString());\n\t            //设置文件类型（二进制） \n\t            ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE); \n\t            System.out.print(ftpClient.getReplyString());\n\t            ftpClient.retrieveFile(remoteFileName, fos); \n\t            System.out.print(ftpClient.getReplyString());\n\t        } catch (IOException e) { \n\t            e.printStackTrace(); \n\t            throw new RuntimeException(\"FTP客户端出错！\", e); \n\t        } finally { \n\t            IOUtils.closeQuietly(fos); \n\t            try { \n\t                ftpClient.disconnect(); \n\t                System.out.print(ftpClient.getReplyString());\n\t            } catch (IOException e) { \n\t                e.printStackTrace(); \n\t                throw new RuntimeException(\"关闭FTP连接发生异常！\", e); \n\t            } \n\t        } \n\t    } \n\t}\n\n\n\n## 3.3. 其他（我没有用到,服务器之前就用着）\n\n如果还是登陆不了ftp，那很有可能是selinux的问题，这个东西把他关掉就行\n\nvi /etc/selinux/config\n\nSELINUX=enforcing 设置成SELINUX=disabled\n\n \n\n重启一下服务器\n\nreboot\n\n重启完了别忘了把vsftpd服务打开，默认是自启的。\n\n \n\n如果连接不上，很可能是防火墙阻止了，尝试关闭防火墙\n\nsystemctl stop firewalld.service #停止firewall  \nsystemctl disable firewalld.service #禁止firewall开机启动  \nfirewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）  \n \n\n如果出现远程文件夹无法显示的情况，请使用主动模式连接，在你的ftp工具上设置。\n\n## 3.4. linux下ftp配置文件详解\n\n\t# 匿名用户配置   \n\tanonymous_enable=YES         # 是否允许匿名ftp,如否则选择NO   \n\tanon_upload_enable=YES       # 匿名用户是否能上传   \n\tanon_mkdir_write_enable=YES  # 匿名用户是否能创建目录   \n\tanon_other_write_enable=YES  # 修改文件名和删除文件   \n\t  \n\t# 本地用户配置   \n\tlocal_enable=YES # 是否允许本地用户登录   \n\tlocal_umask=022  # umask 默认755   \n\twrite_enable=YES   \n\t\n\tchroot_local_user=YES  # 本地用户禁锢在宿主目录中   \n\tchroot_list_enable=YES # 是否将系统用户限止在自己的home目录下   \n\tchroot_list_file=/etc/vsftpd.chroot_list # 列出的是不chroot的用户的列表   \n\t  \n\tchown_upload=YES  # 是否改变上传文件的属主   \n\tchown_username=username # 如果是需要输入一个系统用户名   \n\t  \n\tuserlist_enable=YES   \n\tuserlist_deny=NO   \n\t  \n\tdeny_email_enable=YES # 是否允许禁止匿名用户使用某些邮件地址   \n\tbanned_email_file=/etc/vsftpd.banned_emails # 禁止邮件地址的文件路径   \n\t  \n\tftpd_banner=Welcome to chenlf FTP service. # 定制欢迎信息   \n\tdirmessage_enable=YES # 是否显示目录说明文件, 需要收工创建.message文件   \n\tmessage_file= # 设置访问一个目录时获得的目录信息文件的文件名,默认是.message   \n\t  \n\txferlog_enable=YES # 是否记录ftp传输过程   \n\txferlog_file=/var/log/vsftpd.log # ftp传输日志的路径和名字   \n\txferlog_std_format=YES # 是否使用标准的ftp xferlog模式   \n\t  \n\tascii_upload_enable=YES   # 是否使用ascii码方式上传文件   \n\tascii_download_enable=YES # 是否使用ascii码方式下载文件   \n\t  \n\tconnect_from_port_20=YES # 是否确信端口传输来自20(ftp-data)   \n\t  \n\tnopriv_user=ftpsecure # 运行vsftpd需要的非特权系统用户默认是nobody   \n\t  \n\tasync_abor_enable=YES # 是否允许运行特殊的ftp命令async ABOR.   \n\t  \n\t# FTP服务器的资源限制   \n\t  \n\tidle_session_timeout=600 # 设置session超时时间   \n\tdata_connection_timeout=120 # 设置数据传输超时时间   \n\t  \n\tmax_clients=50 # 用户最大连接数 默认是0不限止   \n\tmax_per_ip=5   # 每个IP地址最大连接数   \n\t  \n\tanon_max_rate=102400  # 匿名的下载速度 KB   \n\tlocal_max_rate=102400 # 普通用户的下载速度 KB   \n\t  \n\t其他配置文件   \n\t\n\t/etc/xinetd.d/vsftpd   \n\t  \n\tservice ftp   \n\t{   \n\tsocket_type = stream   \n\twait = no   \n\tuser = root   \n\tserver = /usr/local/sbin/vsftpd   \n\t# server_args =   \n\t# log_on_success += DURATION USERID   \n\t# log_on_failure += USERID   \n\tnice = 10   \n\tdisable = no   \n\t}   \n\t  \n\t/etc/pam.d/vsftpd   \n\tPAM 认证   \n\t  \n\t/etc/vsftpd.chroot_list   \n\t此文件包含对服务器上所有FTP内容有权限的用户名。对其他用户来说，他们在服务器上的主目录对他们显示为根目录。   \n\t  \n\t/etc/shells   \n\t在允许本地用户登录之前，系统默认检查是否有有效的用户 shell。以防 PAM 认证不可用的情况。   \n\t/etc/ftpusers   \n\t此文件包含*禁止*FTP登录的用户名，通常有 \"root\"， \"uucp\"， \"news\" 之类，因为这些用户权限太高，登录 FTP 误操作危险性大。   \n\t  \n\t防火墙设置   \n\t  \n\t如果是用默认的SuSEFirewall2，在 YaST-系统-/etc/sysconfig 编辑器，network-SuSEfirewall2   \n\t  \n\t把 ftp 添加到 FW_SERVICES_EXT_TCP，比如你还要打开 ssh 那么   \n\t  \n\tFW_SERVICES_EXT_TCP \"ftp ssh\"   \n\t  \n\t如果你需要被动模式 FTP 和 nat，在 YaST-系统-/etc/sysconfig 编辑器，network-SuSEfirewall2   \n\t  \n\tFW_LOAD_MODULES \"ip_conntrack_ftp ip_nat_ftp\"   \n\t  \n\t  \n\t另一种方式直接修改防火墙配置文件：   \n\t# cd /etc/sysconfig/   \n\t# vi SuSEfirewall2   \n\tFW_SERVICES_EXT_TCP \"ftp 21 telnet 23\"   \n\t","slug":"杂记/ftp服务器创建","published":1,"updated":"2018-02-06T07:47:45.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a09002jv4vfxson65y3","content":"<h1 id=\"1-FTP服务器简单创建\"><a href=\"#1-FTP服务器简单创建\" class=\"headerlink\" title=\"1. FTP服务器简单创建\"></a>1. FTP服务器简单创建</h1><h2 id=\"1-1-１-环境\"><a href=\"#1-1-１-环境\" class=\"headerlink\" title=\"1.1. １.环境\"></a>1.1. １.环境</h2><p>CentOS release 6.5 (Final)-amd64 </p>\n<ul>\n<li>查看linux版本:  <blockquote>\n<p>[root@localhost vsftpd]# <strong>cat /etc/issue</strong><br>CentOS release 6.5 (Final)<br>Kernel \\r on an \\m<br>[root@localhost vsftpd]# <strong>lsb_release -a</strong><br>LSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch<br>Distributor ID:    CentOS<br>Description:    CentOS release 6.5 (Final)<br>Release:    6.5<br>Codename:    Final  </p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"1-2-安装vsftpd\"><a href=\"#1-2-安装vsftpd\" class=\"headerlink\" title=\"1.2. 安装vsftpd\"></a>1.2. 安装vsftpd</h2><ul>\n<li>安装vsftpd</li>\n</ul>\n<blockquote>\n<p>yum install vsftpd</p>\n</blockquote>\n<ul>\n<li>安装成功后查看</li>\n</ul>\n<blockquote>\n<p>[root@localhost vsftpd]# <strong>rpm -qa |grep vsftpd</strong><br>vsftpd-2.2.2-21.el6.x86_64</p>\n</blockquote>\n<ul>\n<li>开启ftp服务</li>\n</ul>\n<blockquote>\n<p>[root@localhost vsftpd]# <strong>service vsftpd start</strong><br>为 vsftpd 启动 vsftpd：                                    [确定]</p>\n</blockquote>\n<ul>\n<li>停止ftp服务</li>\n</ul>\n<blockquote>\n<p>[root@localhost vsftpd]# <strong>service vsftpd stop</strong><br>关闭 vsftpd：                                              [确定]</p>\n</blockquote>\n<h2 id=\"1-3-创建用户\"><a href=\"#1-3-创建用户\" class=\"headerlink\" title=\"1.3. 创建用户\"></a>1.3. 创建用户</h2><p>　　专门创建一个ftp链接的用户，限制其只能通过ftp方式登录，只能访问指定给他的目录。</p>\n<h3 id=\"1-3-1-创建用户\"><a href=\"#1-3-1-创建用户\" class=\"headerlink\" title=\"1.3.1. 创建用户\"></a>1.3.1. 创建用户</h3><ul>\n<li>创建分组,用于存放ftp用户(可以省略)    </li>\n</ul>\n<blockquote>\n<p>groupadd ftpgroups     </p>\n</blockquote>\n<ul>\n<li>创建ftp用户，并加入ftpgroups组，/home/ftp是自己建的目录，不存在就自己创建一个(目录自己定义)  </li>\n</ul>\n<blockquote>\n<p>useradd -d /home/ftp/ftptest -g ftpgroups ftptest    </p>\n</blockquote>\n<p>　　-d 后面是指定用户目录的 -g 分配所属组 (如果没创建上面的组 可以省略-g 及后面的组名 ftpgroups)</p>\n<ul>\n<li>给用户授权文件夹的写权限(我做的需要上传文件)</li>\n</ul>\n<blockquote>\n<p>chmod -R 755 /home/ftp</p>\n</blockquote>\n<h3 id=\"1-3-2-设置密码\"><a href=\"#1-3-2-设置密码\" class=\"headerlink\" title=\"1.3.2. 设置密码\"></a>1.3.2. 设置密码</h3><blockquote>\n<p>passwd ftptest  </p>\n</blockquote>\n<p>　　输入两次密码</p>\n<h3 id=\"1-3-3-设置不允许用于登录\"><a href=\"#1-3-3-设置不允许用于登录\" class=\"headerlink\" title=\"1.3.3. 设置不允许用于登录\"></a>1.3.3. 设置不允许用于登录</h3><blockquote>\n<p>usermod -s /sbin/nologin ftptest</p>\n</blockquote>\n<p>　　没设置这个的时候,虽然没有ssh的登录权限,但是用xshell链接的时候会进入~bash对其他文件进行操作. </p>\n<h2 id=\"1-4-配置vsftpd\"><a href=\"#1-4-配置vsftpd\" class=\"headerlink\" title=\"1.4. 配置vsftpd\"></a>1.4. 配置vsftpd</h2><p>　　安装vsftpd之后,在/etc/vsftpd 下有三个配置文件:</p>\n<blockquote>\n<p>-rw——- 1 root root  125 2月   8 14:46 <strong>ftpusers</strong><br>-rw——- 1 root root  384 2月   8 15:35 <strong>user_list</strong><br>-rw——- 1 root root 4765 2月   8 16:35 <strong>vsftpd.conf</strong><br>-rwxr–r– 1 root root  338 5月  11 2016 vsftpd_conf_migrate.sh  </p>\n</blockquote>\n<h3 id=\"1-4-1-配置文件\"><a href=\"#1-4-1-配置文件\" class=\"headerlink\" title=\"1.4.1. 配置文件\"></a>1.4.1. 配置文件</h3><ul>\n<li>ftpusers 可以简单理解为黑名单,其中的用户不能访问ftp,总是生效的</li>\n<li>user_list 与 vsftpd.conf中的配置userlist_enable=YES 和 userlist_deny=NO功能使用,可以设置成黑名单,白名单(只有此文件里的用户才能使用ftp),具体设置看下面</li>\n<li>vsftpd.conf 主配置文件</li>\n</ul>\n<p>修改一下配置文件让其只能访问自身目录</p>\n<blockquote>\n<p>vi /etc/vsftpd/vsftpd.conf</p>\n</blockquote>\n<p>如下设置</p>\n<blockquote>\n<p>chroot_local_user=YES<br>chroot_list_enable=YES<br>chroot_list_file=/etc/vsftpd/chroot_list</p>\n</blockquote>\n<p>chroot_list 文件自己创建，如果需要让某些用户可以访问其他目录，就把用户加到这个文件中</p>\n<p>解释一下userlist_enable=YES,userlist_deny=NO<br>userlist_enable 为YES时user_list文件有效,NO 则不生效<br>userlist_deny 为YES时user_list文件为黑名单,NO为白名单  </p>\n<p>通过配置指定user_list</p>\n<blockquote>\n<p>userlist_file=/etc/vsftpd/user_list</p>\n</blockquote>\n<h1 id=\"2-我的配置\"><a href=\"#2-我的配置\" class=\"headerlink\" title=\"2. 我的配置\"></a>2. 我的配置</h1><p>ftpusers 不变<br>chroot_list 创建了内容为空<br>user_list 修改为</p>\n<pre><code># vsftpd userlist\n# If userlist_deny=NO, only allow users in this file\n# If userlist_deny=YES (default), never allow users in this file, and\n# do not even prompt for a password.\n# Note that the default vsftpd pam config also checks /etc/vsftpd/ftpusers\n# for users that are denied.\n#root\n#bin\n#daemon\n#adm\n#lp\n#sync\n#shutdown\n#halt\n#mail\n#news\n#uucp\n#operator\n#games\n#nobody\nftptest\n</code></pre><p>vsftpd.conf修改为</p>\n<pre><code># Example config file /etc/vsftpd/vsftpd.conf\n#\n# The default compiled in settings are fairly paranoid. This sample file\n# loosens things up a bit, to make the ftp daemon more usable.\n# Please see vsftpd.conf.5 for all compiled in defaults.\n#\n# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&apos;s\n# capabilities.\n#\n# Allow anonymous FTP? (Beware - allowed by default if you comment this out).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n#\n# Uncomment this to enable any form of FTP write command.\nwrite_enable=YES\n#\n# Default umask for local users is 077. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd&apos;s)\nlocal_umask=022\n#\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n#\n# Activate directory messages - messages given to remote users when they\n# go into a certain directory.\ndirmessage_enable=YES\n#\n# The target log file can be vsftpd_log_file or xferlog_file.\n# This depends on setting xferlog_std_format parameter\nxferlog_enable=YES\n#\n# Make sure PORT transfer connections originate from port 20 (ftp-data).\nconnect_from_port_20=YES\n#\n# If you want, you can arrange for uploaded anonymous files to be owned by\n# a different user. Note! Using &quot;root&quot; for uploaded files is not\n# recommended!\n#chown_uploads=YES\n#chown_username=whoever\n#\n# The name of log file when xferlog_enable=YES and xferlog_std_format=YES\n# WARNING - changing this filename affects /etc/logrotate.d/vsftpd.log\n#xferlog_file=/var/log/xferlog\n#\n# Switches between logging into vsftpd_log_file and xferlog_file files.\n# NO writes to vsftpd_log_file, YES to xferlog_file\nxferlog_std_format=YES\n#\n# You may change the default value for timing out an idle session.\n#idle_session_timeout=600\n#\n# You may change the default value for timing out a data connection.\n#data_connection_timeout=120\n#\n# It is recommended that you define on your system a unique user which the\n# ftp server can use as a totally isolated and unprivileged user.\n#nopriv_user=ftpsecure\n#\n# Enable this and the server will recognise asynchronous ABOR requests. Not\n# recommended for security (the code is non-trivial). Not enabling it,\n# however, may confuse older FTP clients.\n#async_abor_enable=YES\n#\n# By default the server will pretend to allow ASCII mode but in fact ignore\n# the request. Turn on the below options to have the server actually do ASCII\n# mangling on files when in ASCII mode.\n# Beware that on some FTP servers, ASCII support allows a denial of service\n# attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd\n# predicted this attack and has always been safe, reporting the size of the\n# raw file.\n# ASCII mangling is a horrible feature of the protocol.\n#ascii_upload_enable=YES\n#ascii_download_enable=YES\n#\n# You may fully customise the login banner string:\n#ftpd_banner=Welcome to blah FTP service.\n#\n# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n# useful for combatting certain DoS attacks.\n#deny_email_enable=YES\n# (default follows)\n#banned_email_file=/etc/vsftpd/banned_emails\n#\n# You may specify an explicit list of local users to chroot() to their home\n# directory. If chroot_local_user is YES, then this list becomes a list of\n# users to NOT chroot().\n#chroot_local_user=YES\n#chroot_list_enable=YES\n# (default follows)\n#chroot_list_file=/etc/vsftpd/chroot_list\n#\n# You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by\n# default to avoid remote users being able to cause excessive I/O on large\n# sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume\n# the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.\n#ls_recurse_enable=YES\n#\n# When &quot;listen&quot; directive is enabled, vsftpd runs in standalone mode and\n# listens on IPv4 sockets. This directive cannot be used in conjunction\n# with the listen_ipv6 directive.\nlisten=YES\n#\n# This directive enables listening on IPv6 sockets. To listen on IPv4 and IPv6\n# sockets, you must run two copies of vsftpd with two configuration files.\n# Make sure, that one of the listen options is commented !!\n#listen_ipv6=YES\n\npam_service_name=vsftpd\nuserlist_enable=YES\ntcp_wrappers=YES\nuserlist_deny=NO\nuserlist_file=/etc/vsftpd/user_list\nchroot_local_user=YES\nchroot_list_enable=YES\nchroot_list_file=/etc/vsftpd/chroot_list\n</code></pre><h1 id=\"3-JAVA上传下载\"><a href=\"#3-JAVA上传下载\" class=\"headerlink\" title=\"3. JAVA上传下载\"></a>3. JAVA上传下载</h1><h2 id=\"3-1-java需要的jar\"><a href=\"#3-1-java需要的jar\" class=\"headerlink\" title=\"3.1. java需要的jar\"></a>3.1. java需要的jar</h2><p>commons-io-2.1.jar<br>commons-net-1.4.1.jar</p>\n<h2 id=\"3-2-java代码demo\"><a href=\"#3-2-java代码demo\" class=\"headerlink\" title=\"3.2. java代码demo\"></a>3.2. java代码demo</h2><pre><code>package ftp;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.net.ftp.FTPClient;\n\n\npublic class FtpTest1 {\n    public static void main(String[] args) { \n        testUpload(); \n        testDownload(); \n    } \n\n    /** \n     * FTP上传单个文件测试 \n     */ \n    public static void testUpload() { \n        FTPClient ftpClient = new FTPClient(); \n        FileInputStream fis = null; \n\n        try { \n            ftpClient.connect(&quot;192.168.0.1&quot;); \n            System.out.print(ftpClient.getReplyString());\n            ftpClient.login(&quot;username&quot;, &quot;password&quot;); \n            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n            File srcFile = new File(&quot;C:\\\\Users\\\\jk\\\\Desktop\\\\img.jpg&quot;); \n            System.out.println(srcFile.exists());\n            fis = new FileInputStream(srcFile); \n            //设置上传目录 \n            ftpClient.changeWorkingDirectory(&quot;/admin&quot;); \n            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n            ftpClient.setBufferSize(1024); \n            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n            ftpClient.setControlEncoding(&quot;GBK&quot;); \n            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n            //设置文件类型（二进制） \n            ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE); \n            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n            ftpClient.storeFile(&quot;5.gif&quot;, fis); \n            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n        } catch (IOException e) { \n            e.printStackTrace(); \n            throw new RuntimeException(&quot;FTP客户端出错！&quot;, e); \n        } finally { \n            IOUtils.closeQuietly(fis); \n            try { \n                ftpClient.disconnect(); \n            } catch (IOException e) { \n                e.printStackTrace(); \n                throw new RuntimeException(&quot;关闭FTP连接发生异常！&quot;, e); \n            } \n        } \n    } \n\n    /** \n     * FTP下载单个文件测试 \n     */ \n    public static void testDownload() { \n        FTPClient ftpClient = new FTPClient(); \n        FileOutputStream fos = null; \n\n        try { \n            ftpClient.connect(&quot;192.168.0.1&quot;); \n            System.out.print(ftpClient.getReplyString());\n            ftpClient.login(&quot;username&quot;, &quot;password&quot;); \n            System.out.print(ftpClient.getReplyString());\n\n            String remoteFileName = &quot;/3.gif&quot;; \n            fos = new FileOutputStream(&quot;C:/Users/jk/Desktop/3.jpg&quot;); \n\n            ftpClient.setBufferSize(1024); \n            System.out.print(ftpClient.getReplyString());\n            //设置文件类型（二进制） \n            ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE); \n            System.out.print(ftpClient.getReplyString());\n            ftpClient.retrieveFile(remoteFileName, fos); \n            System.out.print(ftpClient.getReplyString());\n        } catch (IOException e) { \n            e.printStackTrace(); \n            throw new RuntimeException(&quot;FTP客户端出错！&quot;, e); \n        } finally { \n            IOUtils.closeQuietly(fos); \n            try { \n                ftpClient.disconnect(); \n                System.out.print(ftpClient.getReplyString());\n            } catch (IOException e) { \n                e.printStackTrace(); \n                throw new RuntimeException(&quot;关闭FTP连接发生异常！&quot;, e); \n            } \n        } \n    } \n}\n</code></pre><h2 id=\"3-3-其他（我没有用到-服务器之前就用着）\"><a href=\"#3-3-其他（我没有用到-服务器之前就用着）\" class=\"headerlink\" title=\"3.3. 其他（我没有用到,服务器之前就用着）\"></a>3.3. 其他（我没有用到,服务器之前就用着）</h2><p>如果还是登陆不了ftp，那很有可能是selinux的问题，这个东西把他关掉就行</p>\n<p>vi /etc/selinux/config</p>\n<p>SELINUX=enforcing 设置成SELINUX=disabled</p>\n<p>重启一下服务器</p>\n<p>reboot</p>\n<p>重启完了别忘了把vsftpd服务打开，默认是自启的。</p>\n<p>如果连接不上，很可能是防火墙阻止了，尝试关闭防火墙</p>\n<p>systemctl stop firewalld.service #停止firewall<br>systemctl disable firewalld.service #禁止firewall开机启动<br>firewall-cmd –state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）  </p>\n<p>如果出现远程文件夹无法显示的情况，请使用主动模式连接，在你的ftp工具上设置。</p>\n<h2 id=\"3-4-linux下ftp配置文件详解\"><a href=\"#3-4-linux下ftp配置文件详解\" class=\"headerlink\" title=\"3.4. linux下ftp配置文件详解\"></a>3.4. linux下ftp配置文件详解</h2><pre><code># 匿名用户配置   \nanonymous_enable=YES         # 是否允许匿名ftp,如否则选择NO   \nanon_upload_enable=YES       # 匿名用户是否能上传   \nanon_mkdir_write_enable=YES  # 匿名用户是否能创建目录   \nanon_other_write_enable=YES  # 修改文件名和删除文件   \n\n# 本地用户配置   \nlocal_enable=YES # 是否允许本地用户登录   \nlocal_umask=022  # umask 默认755   \nwrite_enable=YES   \n\nchroot_local_user=YES  # 本地用户禁锢在宿主目录中   \nchroot_list_enable=YES # 是否将系统用户限止在自己的home目录下   \nchroot_list_file=/etc/vsftpd.chroot_list # 列出的是不chroot的用户的列表   \n\nchown_upload=YES  # 是否改变上传文件的属主   \nchown_username=username # 如果是需要输入一个系统用户名   \n\nuserlist_enable=YES   \nuserlist_deny=NO   \n\ndeny_email_enable=YES # 是否允许禁止匿名用户使用某些邮件地址   \nbanned_email_file=/etc/vsftpd.banned_emails # 禁止邮件地址的文件路径   \n\nftpd_banner=Welcome to chenlf FTP service. # 定制欢迎信息   \ndirmessage_enable=YES # 是否显示目录说明文件, 需要收工创建.message文件   \nmessage_file= # 设置访问一个目录时获得的目录信息文件的文件名,默认是.message   \n\nxferlog_enable=YES # 是否记录ftp传输过程   \nxferlog_file=/var/log/vsftpd.log # ftp传输日志的路径和名字   \nxferlog_std_format=YES # 是否使用标准的ftp xferlog模式   \n\nascii_upload_enable=YES   # 是否使用ascii码方式上传文件   \nascii_download_enable=YES # 是否使用ascii码方式下载文件   \n\nconnect_from_port_20=YES # 是否确信端口传输来自20(ftp-data)   \n\nnopriv_user=ftpsecure # 运行vsftpd需要的非特权系统用户默认是nobody   \n\nasync_abor_enable=YES # 是否允许运行特殊的ftp命令async ABOR.   \n\n# FTP服务器的资源限制   \n\nidle_session_timeout=600 # 设置session超时时间   \ndata_connection_timeout=120 # 设置数据传输超时时间   \n\nmax_clients=50 # 用户最大连接数 默认是0不限止   \nmax_per_ip=5   # 每个IP地址最大连接数   \n\nanon_max_rate=102400  # 匿名的下载速度 KB   \nlocal_max_rate=102400 # 普通用户的下载速度 KB   \n\n其他配置文件   \n\n/etc/xinetd.d/vsftpd   \n\nservice ftp   \n{   \nsocket_type = stream   \nwait = no   \nuser = root   \nserver = /usr/local/sbin/vsftpd   \n# server_args =   \n# log_on_success += DURATION USERID   \n# log_on_failure += USERID   \nnice = 10   \ndisable = no   \n}   \n\n/etc/pam.d/vsftpd   \nPAM 认证   \n\n/etc/vsftpd.chroot_list   \n此文件包含对服务器上所有FTP内容有权限的用户名。对其他用户来说，他们在服务器上的主目录对他们显示为根目录。   \n\n/etc/shells   \n在允许本地用户登录之前，系统默认检查是否有有效的用户 shell。以防 PAM 认证不可用的情况。   \n/etc/ftpusers   \n此文件包含*禁止*FTP登录的用户名，通常有 &quot;root&quot;， &quot;uucp&quot;， &quot;news&quot; 之类，因为这些用户权限太高，登录 FTP 误操作危险性大。   \n\n防火墙设置   \n\n如果是用默认的SuSEFirewall2，在 YaST-系统-/etc/sysconfig 编辑器，network-SuSEfirewall2   \n\n把 ftp 添加到 FW_SERVICES_EXT_TCP，比如你还要打开 ssh 那么   \n\nFW_SERVICES_EXT_TCP &quot;ftp ssh&quot;   \n\n如果你需要被动模式 FTP 和 nat，在 YaST-系统-/etc/sysconfig 编辑器，network-SuSEfirewall2   \n\nFW_LOAD_MODULES &quot;ip_conntrack_ftp ip_nat_ftp&quot;   \n\n\n另一种方式直接修改防火墙配置文件：   \n# cd /etc/sysconfig/   \n# vi SuSEfirewall2   \nFW_SERVICES_EXT_TCP &quot;ftp 21 telnet 23&quot;   \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-FTP服务器简单创建\"><a href=\"#1-FTP服务器简单创建\" class=\"headerlink\" title=\"1. FTP服务器简单创建\"></a>1. FTP服务器简单创建</h1><h2 id=\"1-1-１-环境\"><a href=\"#1-1-１-环境\" class=\"headerlink\" title=\"1.1. １.环境\"></a>1.1. １.环境</h2><p>CentOS release 6.5 (Final)-amd64 </p>\n<ul>\n<li>查看linux版本:  <blockquote>\n<p>[root@localhost vsftpd]# <strong>cat /etc/issue</strong><br>CentOS release 6.5 (Final)<br>Kernel \\r on an \\m<br>[root@localhost vsftpd]# <strong>lsb_release -a</strong><br>LSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch<br>Distributor ID:    CentOS<br>Description:    CentOS release 6.5 (Final)<br>Release:    6.5<br>Codename:    Final  </p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"1-2-安装vsftpd\"><a href=\"#1-2-安装vsftpd\" class=\"headerlink\" title=\"1.2. 安装vsftpd\"></a>1.2. 安装vsftpd</h2><ul>\n<li>安装vsftpd</li>\n</ul>\n<blockquote>\n<p>yum install vsftpd</p>\n</blockquote>\n<ul>\n<li>安装成功后查看</li>\n</ul>\n<blockquote>\n<p>[root@localhost vsftpd]# <strong>rpm -qa |grep vsftpd</strong><br>vsftpd-2.2.2-21.el6.x86_64</p>\n</blockquote>\n<ul>\n<li>开启ftp服务</li>\n</ul>\n<blockquote>\n<p>[root@localhost vsftpd]# <strong>service vsftpd start</strong><br>为 vsftpd 启动 vsftpd：                                    [确定]</p>\n</blockquote>\n<ul>\n<li>停止ftp服务</li>\n</ul>\n<blockquote>\n<p>[root@localhost vsftpd]# <strong>service vsftpd stop</strong><br>关闭 vsftpd：                                              [确定]</p>\n</blockquote>\n<h2 id=\"1-3-创建用户\"><a href=\"#1-3-创建用户\" class=\"headerlink\" title=\"1.3. 创建用户\"></a>1.3. 创建用户</h2><p>　　专门创建一个ftp链接的用户，限制其只能通过ftp方式登录，只能访问指定给他的目录。</p>\n<h3 id=\"1-3-1-创建用户\"><a href=\"#1-3-1-创建用户\" class=\"headerlink\" title=\"1.3.1. 创建用户\"></a>1.3.1. 创建用户</h3><ul>\n<li>创建分组,用于存放ftp用户(可以省略)    </li>\n</ul>\n<blockquote>\n<p>groupadd ftpgroups     </p>\n</blockquote>\n<ul>\n<li>创建ftp用户，并加入ftpgroups组，/home/ftp是自己建的目录，不存在就自己创建一个(目录自己定义)  </li>\n</ul>\n<blockquote>\n<p>useradd -d /home/ftp/ftptest -g ftpgroups ftptest    </p>\n</blockquote>\n<p>　　-d 后面是指定用户目录的 -g 分配所属组 (如果没创建上面的组 可以省略-g 及后面的组名 ftpgroups)</p>\n<ul>\n<li>给用户授权文件夹的写权限(我做的需要上传文件)</li>\n</ul>\n<blockquote>\n<p>chmod -R 755 /home/ftp</p>\n</blockquote>\n<h3 id=\"1-3-2-设置密码\"><a href=\"#1-3-2-设置密码\" class=\"headerlink\" title=\"1.3.2. 设置密码\"></a>1.3.2. 设置密码</h3><blockquote>\n<p>passwd ftptest  </p>\n</blockquote>\n<p>　　输入两次密码</p>\n<h3 id=\"1-3-3-设置不允许用于登录\"><a href=\"#1-3-3-设置不允许用于登录\" class=\"headerlink\" title=\"1.3.3. 设置不允许用于登录\"></a>1.3.3. 设置不允许用于登录</h3><blockquote>\n<p>usermod -s /sbin/nologin ftptest</p>\n</blockquote>\n<p>　　没设置这个的时候,虽然没有ssh的登录权限,但是用xshell链接的时候会进入~bash对其他文件进行操作. </p>\n<h2 id=\"1-4-配置vsftpd\"><a href=\"#1-4-配置vsftpd\" class=\"headerlink\" title=\"1.4. 配置vsftpd\"></a>1.4. 配置vsftpd</h2><p>　　安装vsftpd之后,在/etc/vsftpd 下有三个配置文件:</p>\n<blockquote>\n<p>-rw——- 1 root root  125 2月   8 14:46 <strong>ftpusers</strong><br>-rw——- 1 root root  384 2月   8 15:35 <strong>user_list</strong><br>-rw——- 1 root root 4765 2月   8 16:35 <strong>vsftpd.conf</strong><br>-rwxr–r– 1 root root  338 5月  11 2016 vsftpd_conf_migrate.sh  </p>\n</blockquote>\n<h3 id=\"1-4-1-配置文件\"><a href=\"#1-4-1-配置文件\" class=\"headerlink\" title=\"1.4.1. 配置文件\"></a>1.4.1. 配置文件</h3><ul>\n<li>ftpusers 可以简单理解为黑名单,其中的用户不能访问ftp,总是生效的</li>\n<li>user_list 与 vsftpd.conf中的配置userlist_enable=YES 和 userlist_deny=NO功能使用,可以设置成黑名单,白名单(只有此文件里的用户才能使用ftp),具体设置看下面</li>\n<li>vsftpd.conf 主配置文件</li>\n</ul>\n<p>修改一下配置文件让其只能访问自身目录</p>\n<blockquote>\n<p>vi /etc/vsftpd/vsftpd.conf</p>\n</blockquote>\n<p>如下设置</p>\n<blockquote>\n<p>chroot_local_user=YES<br>chroot_list_enable=YES<br>chroot_list_file=/etc/vsftpd/chroot_list</p>\n</blockquote>\n<p>chroot_list 文件自己创建，如果需要让某些用户可以访问其他目录，就把用户加到这个文件中</p>\n<p>解释一下userlist_enable=YES,userlist_deny=NO<br>userlist_enable 为YES时user_list文件有效,NO 则不生效<br>userlist_deny 为YES时user_list文件为黑名单,NO为白名单  </p>\n<p>通过配置指定user_list</p>\n<blockquote>\n<p>userlist_file=/etc/vsftpd/user_list</p>\n</blockquote>\n<h1 id=\"2-我的配置\"><a href=\"#2-我的配置\" class=\"headerlink\" title=\"2. 我的配置\"></a>2. 我的配置</h1><p>ftpusers 不变<br>chroot_list 创建了内容为空<br>user_list 修改为</p>\n<pre><code># vsftpd userlist\n# If userlist_deny=NO, only allow users in this file\n# If userlist_deny=YES (default), never allow users in this file, and\n# do not even prompt for a password.\n# Note that the default vsftpd pam config also checks /etc/vsftpd/ftpusers\n# for users that are denied.\n#root\n#bin\n#daemon\n#adm\n#lp\n#sync\n#shutdown\n#halt\n#mail\n#news\n#uucp\n#operator\n#games\n#nobody\nftptest\n</code></pre><p>vsftpd.conf修改为</p>\n<pre><code># Example config file /etc/vsftpd/vsftpd.conf\n#\n# The default compiled in settings are fairly paranoid. This sample file\n# loosens things up a bit, to make the ftp daemon more usable.\n# Please see vsftpd.conf.5 for all compiled in defaults.\n#\n# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&apos;s\n# capabilities.\n#\n# Allow anonymous FTP? (Beware - allowed by default if you comment this out).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n#\n# Uncomment this to enable any form of FTP write command.\nwrite_enable=YES\n#\n# Default umask for local users is 077. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd&apos;s)\nlocal_umask=022\n#\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n#\n# Activate directory messages - messages given to remote users when they\n# go into a certain directory.\ndirmessage_enable=YES\n#\n# The target log file can be vsftpd_log_file or xferlog_file.\n# This depends on setting xferlog_std_format parameter\nxferlog_enable=YES\n#\n# Make sure PORT transfer connections originate from port 20 (ftp-data).\nconnect_from_port_20=YES\n#\n# If you want, you can arrange for uploaded anonymous files to be owned by\n# a different user. Note! Using &quot;root&quot; for uploaded files is not\n# recommended!\n#chown_uploads=YES\n#chown_username=whoever\n#\n# The name of log file when xferlog_enable=YES and xferlog_std_format=YES\n# WARNING - changing this filename affects /etc/logrotate.d/vsftpd.log\n#xferlog_file=/var/log/xferlog\n#\n# Switches between logging into vsftpd_log_file and xferlog_file files.\n# NO writes to vsftpd_log_file, YES to xferlog_file\nxferlog_std_format=YES\n#\n# You may change the default value for timing out an idle session.\n#idle_session_timeout=600\n#\n# You may change the default value for timing out a data connection.\n#data_connection_timeout=120\n#\n# It is recommended that you define on your system a unique user which the\n# ftp server can use as a totally isolated and unprivileged user.\n#nopriv_user=ftpsecure\n#\n# Enable this and the server will recognise asynchronous ABOR requests. Not\n# recommended for security (the code is non-trivial). Not enabling it,\n# however, may confuse older FTP clients.\n#async_abor_enable=YES\n#\n# By default the server will pretend to allow ASCII mode but in fact ignore\n# the request. Turn on the below options to have the server actually do ASCII\n# mangling on files when in ASCII mode.\n# Beware that on some FTP servers, ASCII support allows a denial of service\n# attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd\n# predicted this attack and has always been safe, reporting the size of the\n# raw file.\n# ASCII mangling is a horrible feature of the protocol.\n#ascii_upload_enable=YES\n#ascii_download_enable=YES\n#\n# You may fully customise the login banner string:\n#ftpd_banner=Welcome to blah FTP service.\n#\n# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n# useful for combatting certain DoS attacks.\n#deny_email_enable=YES\n# (default follows)\n#banned_email_file=/etc/vsftpd/banned_emails\n#\n# You may specify an explicit list of local users to chroot() to their home\n# directory. If chroot_local_user is YES, then this list becomes a list of\n# users to NOT chroot().\n#chroot_local_user=YES\n#chroot_list_enable=YES\n# (default follows)\n#chroot_list_file=/etc/vsftpd/chroot_list\n#\n# You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by\n# default to avoid remote users being able to cause excessive I/O on large\n# sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume\n# the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.\n#ls_recurse_enable=YES\n#\n# When &quot;listen&quot; directive is enabled, vsftpd runs in standalone mode and\n# listens on IPv4 sockets. This directive cannot be used in conjunction\n# with the listen_ipv6 directive.\nlisten=YES\n#\n# This directive enables listening on IPv6 sockets. To listen on IPv4 and IPv6\n# sockets, you must run two copies of vsftpd with two configuration files.\n# Make sure, that one of the listen options is commented !!\n#listen_ipv6=YES\n\npam_service_name=vsftpd\nuserlist_enable=YES\ntcp_wrappers=YES\nuserlist_deny=NO\nuserlist_file=/etc/vsftpd/user_list\nchroot_local_user=YES\nchroot_list_enable=YES\nchroot_list_file=/etc/vsftpd/chroot_list\n</code></pre><h1 id=\"3-JAVA上传下载\"><a href=\"#3-JAVA上传下载\" class=\"headerlink\" title=\"3. JAVA上传下载\"></a>3. JAVA上传下载</h1><h2 id=\"3-1-java需要的jar\"><a href=\"#3-1-java需要的jar\" class=\"headerlink\" title=\"3.1. java需要的jar\"></a>3.1. java需要的jar</h2><p>commons-io-2.1.jar<br>commons-net-1.4.1.jar</p>\n<h2 id=\"3-2-java代码demo\"><a href=\"#3-2-java代码demo\" class=\"headerlink\" title=\"3.2. java代码demo\"></a>3.2. java代码demo</h2><pre><code>package ftp;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.net.ftp.FTPClient;\n\n\npublic class FtpTest1 {\n    public static void main(String[] args) { \n        testUpload(); \n        testDownload(); \n    } \n\n    /** \n     * FTP上传单个文件测试 \n     */ \n    public static void testUpload() { \n        FTPClient ftpClient = new FTPClient(); \n        FileInputStream fis = null; \n\n        try { \n            ftpClient.connect(&quot;192.168.0.1&quot;); \n            System.out.print(ftpClient.getReplyString());\n            ftpClient.login(&quot;username&quot;, &quot;password&quot;); \n            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n            File srcFile = new File(&quot;C:\\\\Users\\\\jk\\\\Desktop\\\\img.jpg&quot;); \n            System.out.println(srcFile.exists());\n            fis = new FileInputStream(srcFile); \n            //设置上传目录 \n            ftpClient.changeWorkingDirectory(&quot;/admin&quot;); \n            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n            ftpClient.setBufferSize(1024); \n            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n            ftpClient.setControlEncoding(&quot;GBK&quot;); \n            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n            //设置文件类型（二进制） \n            ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE); \n            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n            ftpClient.storeFile(&quot;5.gif&quot;, fis); \n            System.out.println(ftpClient.getReplyCode() + ftpClient.getReplyString());\n        } catch (IOException e) { \n            e.printStackTrace(); \n            throw new RuntimeException(&quot;FTP客户端出错！&quot;, e); \n        } finally { \n            IOUtils.closeQuietly(fis); \n            try { \n                ftpClient.disconnect(); \n            } catch (IOException e) { \n                e.printStackTrace(); \n                throw new RuntimeException(&quot;关闭FTP连接发生异常！&quot;, e); \n            } \n        } \n    } \n\n    /** \n     * FTP下载单个文件测试 \n     */ \n    public static void testDownload() { \n        FTPClient ftpClient = new FTPClient(); \n        FileOutputStream fos = null; \n\n        try { \n            ftpClient.connect(&quot;192.168.0.1&quot;); \n            System.out.print(ftpClient.getReplyString());\n            ftpClient.login(&quot;username&quot;, &quot;password&quot;); \n            System.out.print(ftpClient.getReplyString());\n\n            String remoteFileName = &quot;/3.gif&quot;; \n            fos = new FileOutputStream(&quot;C:/Users/jk/Desktop/3.jpg&quot;); \n\n            ftpClient.setBufferSize(1024); \n            System.out.print(ftpClient.getReplyString());\n            //设置文件类型（二进制） \n            ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE); \n            System.out.print(ftpClient.getReplyString());\n            ftpClient.retrieveFile(remoteFileName, fos); \n            System.out.print(ftpClient.getReplyString());\n        } catch (IOException e) { \n            e.printStackTrace(); \n            throw new RuntimeException(&quot;FTP客户端出错！&quot;, e); \n        } finally { \n            IOUtils.closeQuietly(fos); \n            try { \n                ftpClient.disconnect(); \n                System.out.print(ftpClient.getReplyString());\n            } catch (IOException e) { \n                e.printStackTrace(); \n                throw new RuntimeException(&quot;关闭FTP连接发生异常！&quot;, e); \n            } \n        } \n    } \n}\n</code></pre><h2 id=\"3-3-其他（我没有用到-服务器之前就用着）\"><a href=\"#3-3-其他（我没有用到-服务器之前就用着）\" class=\"headerlink\" title=\"3.3. 其他（我没有用到,服务器之前就用着）\"></a>3.3. 其他（我没有用到,服务器之前就用着）</h2><p>如果还是登陆不了ftp，那很有可能是selinux的问题，这个东西把他关掉就行</p>\n<p>vi /etc/selinux/config</p>\n<p>SELINUX=enforcing 设置成SELINUX=disabled</p>\n<p>重启一下服务器</p>\n<p>reboot</p>\n<p>重启完了别忘了把vsftpd服务打开，默认是自启的。</p>\n<p>如果连接不上，很可能是防火墙阻止了，尝试关闭防火墙</p>\n<p>systemctl stop firewalld.service #停止firewall<br>systemctl disable firewalld.service #禁止firewall开机启动<br>firewall-cmd –state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）  </p>\n<p>如果出现远程文件夹无法显示的情况，请使用主动模式连接，在你的ftp工具上设置。</p>\n<h2 id=\"3-4-linux下ftp配置文件详解\"><a href=\"#3-4-linux下ftp配置文件详解\" class=\"headerlink\" title=\"3.4. linux下ftp配置文件详解\"></a>3.4. linux下ftp配置文件详解</h2><pre><code># 匿名用户配置   \nanonymous_enable=YES         # 是否允许匿名ftp,如否则选择NO   \nanon_upload_enable=YES       # 匿名用户是否能上传   \nanon_mkdir_write_enable=YES  # 匿名用户是否能创建目录   \nanon_other_write_enable=YES  # 修改文件名和删除文件   \n\n# 本地用户配置   \nlocal_enable=YES # 是否允许本地用户登录   \nlocal_umask=022  # umask 默认755   \nwrite_enable=YES   \n\nchroot_local_user=YES  # 本地用户禁锢在宿主目录中   \nchroot_list_enable=YES # 是否将系统用户限止在自己的home目录下   \nchroot_list_file=/etc/vsftpd.chroot_list # 列出的是不chroot的用户的列表   \n\nchown_upload=YES  # 是否改变上传文件的属主   \nchown_username=username # 如果是需要输入一个系统用户名   \n\nuserlist_enable=YES   \nuserlist_deny=NO   \n\ndeny_email_enable=YES # 是否允许禁止匿名用户使用某些邮件地址   \nbanned_email_file=/etc/vsftpd.banned_emails # 禁止邮件地址的文件路径   \n\nftpd_banner=Welcome to chenlf FTP service. # 定制欢迎信息   \ndirmessage_enable=YES # 是否显示目录说明文件, 需要收工创建.message文件   \nmessage_file= # 设置访问一个目录时获得的目录信息文件的文件名,默认是.message   \n\nxferlog_enable=YES # 是否记录ftp传输过程   \nxferlog_file=/var/log/vsftpd.log # ftp传输日志的路径和名字   \nxferlog_std_format=YES # 是否使用标准的ftp xferlog模式   \n\nascii_upload_enable=YES   # 是否使用ascii码方式上传文件   \nascii_download_enable=YES # 是否使用ascii码方式下载文件   \n\nconnect_from_port_20=YES # 是否确信端口传输来自20(ftp-data)   \n\nnopriv_user=ftpsecure # 运行vsftpd需要的非特权系统用户默认是nobody   \n\nasync_abor_enable=YES # 是否允许运行特殊的ftp命令async ABOR.   \n\n# FTP服务器的资源限制   \n\nidle_session_timeout=600 # 设置session超时时间   \ndata_connection_timeout=120 # 设置数据传输超时时间   \n\nmax_clients=50 # 用户最大连接数 默认是0不限止   \nmax_per_ip=5   # 每个IP地址最大连接数   \n\nanon_max_rate=102400  # 匿名的下载速度 KB   \nlocal_max_rate=102400 # 普通用户的下载速度 KB   \n\n其他配置文件   \n\n/etc/xinetd.d/vsftpd   \n\nservice ftp   \n{   \nsocket_type = stream   \nwait = no   \nuser = root   \nserver = /usr/local/sbin/vsftpd   \n# server_args =   \n# log_on_success += DURATION USERID   \n# log_on_failure += USERID   \nnice = 10   \ndisable = no   \n}   \n\n/etc/pam.d/vsftpd   \nPAM 认证   \n\n/etc/vsftpd.chroot_list   \n此文件包含对服务器上所有FTP内容有权限的用户名。对其他用户来说，他们在服务器上的主目录对他们显示为根目录。   \n\n/etc/shells   \n在允许本地用户登录之前，系统默认检查是否有有效的用户 shell。以防 PAM 认证不可用的情况。   \n/etc/ftpusers   \n此文件包含*禁止*FTP登录的用户名，通常有 &quot;root&quot;， &quot;uucp&quot;， &quot;news&quot; 之类，因为这些用户权限太高，登录 FTP 误操作危险性大。   \n\n防火墙设置   \n\n如果是用默认的SuSEFirewall2，在 YaST-系统-/etc/sysconfig 编辑器，network-SuSEfirewall2   \n\n把 ftp 添加到 FW_SERVICES_EXT_TCP，比如你还要打开 ssh 那么   \n\nFW_SERVICES_EXT_TCP &quot;ftp ssh&quot;   \n\n如果你需要被动模式 FTP 和 nat，在 YaST-系统-/etc/sysconfig 编辑器，network-SuSEfirewall2   \n\nFW_LOAD_MODULES &quot;ip_conntrack_ftp ip_nat_ftp&quot;   \n\n\n另一种方式直接修改防火墙配置文件：   \n# cd /etc/sysconfig/   \n# vi SuSEfirewall2   \nFW_SERVICES_EXT_TCP &quot;ftp 21 telnet 23&quot;   \n</code></pre>"},{"title":"idea快捷键记录","toc":true,"date":"2017-09-03T15:37:13.000Z","scaffolds":null,"_content":"查找方法,这个用于看源码的时候感觉很好用记录一下\n> ctrl+shift+alt+n\n\n//-----------------------------------\n\nNavigate | Call Hierarchy命令查看一个Java方法调用树（caller和callee两个方向）\n> ctrl+alt+H\n\nAnalyze | Dataflow from/to Here两个命令查看表达式、变量和方法参数的传递关系树。\n>Analyze | Data Flow  to Here  \n>Analyze | Data Flow  from Here\n\n<!-- more -->\n\n\"Find Usage\"可以查看一个Java类、方法或变量的直接使用情况。 \n>alt+F7\n\nNavigate | File Structure 查看文件的结构\n> ctrl+F12\n\nhttp://www.cnblogs.com/huaxingtianxia/p/5728847.html\n\n//-----------------------------------\n","source":"_posts/杂记/idea快捷键记录.md","raw":"---\ntitle: idea快捷键记录\ncategories: 工具\ntoc: true\ndate: 2017-09-03 23:37:13\nscaffolds:\ntags: [idea,快捷键]\n---\n查找方法,这个用于看源码的时候感觉很好用记录一下\n> ctrl+shift+alt+n\n\n//-----------------------------------\n\nNavigate | Call Hierarchy命令查看一个Java方法调用树（caller和callee两个方向）\n> ctrl+alt+H\n\nAnalyze | Dataflow from/to Here两个命令查看表达式、变量和方法参数的传递关系树。\n>Analyze | Data Flow  to Here  \n>Analyze | Data Flow  from Here\n\n<!-- more -->\n\n\"Find Usage\"可以查看一个Java类、方法或变量的直接使用情况。 \n>alt+F7\n\nNavigate | File Structure 查看文件的结构\n> ctrl+F12\n\nhttp://www.cnblogs.com/huaxingtianxia/p/5728847.html\n\n//-----------------------------------\n","slug":"杂记/idea快捷键记录","published":1,"updated":"2018-02-06T07:47:55.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a0b002nv4vfcogztct7","content":"<p>查找方法,这个用于看源码的时候感觉很好用记录一下</p>\n<blockquote>\n<p>ctrl+shift+alt+n</p>\n</blockquote>\n<p>//———————————–</p>\n<p>Navigate | Call Hierarchy命令查看一个Java方法调用树（caller和callee两个方向）</p>\n<blockquote>\n<p>ctrl+alt+H</p>\n</blockquote>\n<p>Analyze | Dataflow from/to Here两个命令查看表达式、变量和方法参数的传递关系树。</p>\n<blockquote>\n<p>Analyze | Data Flow  to Here<br>Analyze | Data Flow  from Here</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>“Find Usage”可以查看一个Java类、方法或变量的直接使用情况。 </p>\n<blockquote>\n<p>alt+F7</p>\n</blockquote>\n<p>Navigate | File Structure 查看文件的结构</p>\n<blockquote>\n<p>ctrl+F12</p>\n</blockquote>\n<p><a href=\"http://www.cnblogs.com/huaxingtianxia/p/5728847.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/huaxingtianxia/p/5728847.html</a></p>\n<p>//———————————–</p>\n","site":{"data":{}},"excerpt":"<p>查找方法,这个用于看源码的时候感觉很好用记录一下</p>\n<blockquote>\n<p>ctrl+shift+alt+n</p>\n</blockquote>\n<p>//———————————–</p>\n<p>Navigate | Call Hierarchy命令查看一个Java方法调用树（caller和callee两个方向）</p>\n<blockquote>\n<p>ctrl+alt+H</p>\n</blockquote>\n<p>Analyze | Dataflow from/to Here两个命令查看表达式、变量和方法参数的传递关系树。</p>\n<blockquote>\n<p>Analyze | Data Flow  to Here<br>Analyze | Data Flow  from Here</p>\n</blockquote>","more":"<p>“Find Usage”可以查看一个Java类、方法或变量的直接使用情况。 </p>\n<blockquote>\n<p>alt+F7</p>\n</blockquote>\n<p>Navigate | File Structure 查看文件的结构</p>\n<blockquote>\n<p>ctrl+F12</p>\n</blockquote>\n<p><a href=\"http://www.cnblogs.com/huaxingtianxia/p/5728847.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/huaxingtianxia/p/5728847.html</a></p>\n<p>//———————————–</p>"},{"title":"hexo-next 本地搜索","toc":true,"date":"2017-11-14T15:46:14.000Z","scaffolds":null,"_content":"之前用的algolia用不了了，应该是收费。查找了帖子做了本地搜索，感觉也很不错，主要是不用担心不好使了。\n# 1. local search\n## 1.1. 安装hexo-generator-searchdb\n在站点根目录通过gitbash安装\n```\nnpm install hexo-generator-searchdb --save\n```\n<!--more-->\n## 1.2. 添加search字段\n在站点下_config.yml中添加search字段\n```\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n## 1.3. 在themes\\next\\_config.yml主题配置中找到\n```\nlocal_search:\n  enable: true\n```\n将enable的值改成true\n\n# 2. 参考链接\n[Hexo的Next主题配置](https://www.cnblogs.com/syd192/p/6074323.html)","source":"_posts/杂记/hexo-next-本地搜索.md","raw":"---\ntitle: hexo-next 本地搜索\ncategories: 学习\ntags:\n  - hexo\ntoc: true\ndate: 2017-11-14 23:46:14\nscaffolds:\n---\n之前用的algolia用不了了，应该是收费。查找了帖子做了本地搜索，感觉也很不错，主要是不用担心不好使了。\n# 1. local search\n## 1.1. 安装hexo-generator-searchdb\n在站点根目录通过gitbash安装\n```\nnpm install hexo-generator-searchdb --save\n```\n<!--more-->\n## 1.2. 添加search字段\n在站点下_config.yml中添加search字段\n```\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n## 1.3. 在themes\\next\\_config.yml主题配置中找到\n```\nlocal_search:\n  enable: true\n```\n将enable的值改成true\n\n# 2. 参考链接\n[Hexo的Next主题配置](https://www.cnblogs.com/syd192/p/6074323.html)","slug":"杂记/hexo-next-本地搜索","published":1,"updated":"2018-02-06T07:47:52.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a0d002rv4vf2jmnyp7l","content":"<p>之前用的algolia用不了了，应该是收费。查找了帖子做了本地搜索，感觉也很不错，主要是不用担心不好使了。</p>\n<h1 id=\"1-local-search\"><a href=\"#1-local-search\" class=\"headerlink\" title=\"1. local search\"></a>1. local search</h1><h2 id=\"1-1-安装hexo-generator-searchdb\"><a href=\"#1-1-安装hexo-generator-searchdb\" class=\"headerlink\" title=\"1.1. 安装hexo-generator-searchdb\"></a>1.1. 安装hexo-generator-searchdb</h2><p>在站点根目录通过gitbash安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"1-2-添加search字段\"><a href=\"#1-2-添加search字段\" class=\"headerlink\" title=\"1.2. 添加search字段\"></a>1.2. 添加search字段</h2><p>在站点下_config.yml中添加search字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">search:</div><div class=\"line\">  path: search.xml</div><div class=\"line\">  field: post</div><div class=\"line\">  format: html</div><div class=\"line\">  limit: 10000</div></pre></td></tr></table></figure></p>\n<h2 id=\"1-3-在themes-next-config-yml主题配置中找到\"><a href=\"#1-3-在themes-next-config-yml主题配置中找到\" class=\"headerlink\" title=\"1.3. 在themes\\next_config.yml主题配置中找到\"></a>1.3. 在themes\\next_config.yml主题配置中找到</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">local_search:</div><div class=\"line\">  enable: true</div></pre></td></tr></table></figure>\n<p>将enable的值改成true</p>\n<h1 id=\"2-参考链接\"><a href=\"#2-参考链接\" class=\"headerlink\" title=\"2. 参考链接\"></a>2. 参考链接</h1><p><a href=\"https://www.cnblogs.com/syd192/p/6074323.html\" target=\"_blank\" rel=\"external\">Hexo的Next主题配置</a></p>\n","site":{"data":{}},"excerpt":"<p>之前用的algolia用不了了，应该是收费。查找了帖子做了本地搜索，感觉也很不错，主要是不用担心不好使了。</p>\n<h1 id=\"1-local-search\"><a href=\"#1-local-search\" class=\"headerlink\" title=\"1. local search\"></a>1. local search</h1><h2 id=\"1-1-安装hexo-generator-searchdb\"><a href=\"#1-1-安装hexo-generator-searchdb\" class=\"headerlink\" title=\"1.1. 安装hexo-generator-searchdb\"></a>1.1. 安装hexo-generator-searchdb</h2><p>在站点根目录通过gitbash安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure></p>","more":"<h2 id=\"1-2-添加search字段\"><a href=\"#1-2-添加search字段\" class=\"headerlink\" title=\"1.2. 添加search字段\"></a>1.2. 添加search字段</h2><p>在站点下_config.yml中添加search字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">search:</div><div class=\"line\">  path: search.xml</div><div class=\"line\">  field: post</div><div class=\"line\">  format: html</div><div class=\"line\">  limit: 10000</div></pre></td></tr></table></figure></p>\n<h2 id=\"1-3-在themes-next-config-yml主题配置中找到\"><a href=\"#1-3-在themes-next-config-yml主题配置中找到\" class=\"headerlink\" title=\"1.3. 在themes\\next_config.yml主题配置中找到\"></a>1.3. 在themes\\next_config.yml主题配置中找到</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">local_search:</div><div class=\"line\">  enable: true</div></pre></td></tr></table></figure>\n<p>将enable的值改成true</p>\n<h1 id=\"2-参考链接\"><a href=\"#2-参考链接\" class=\"headerlink\" title=\"2. 参考链接\"></a>2. 参考链接</h1><p><a href=\"https://www.cnblogs.com/syd192/p/6074323.html\" target=\"_blank\" rel=\"external\">Hexo的Next主题配置</a></p>"},{"title":"hexo next 搜索 algolia","toc":true,"date":"2017-10-30T14:48:47.000Z","scaffolds":null,"_content":"# 1. 目的:添加搜索功能\nalgolia似乎是试用一段时间就不能用了,建议使用本地搜索  \n[hexo-next 本地搜索](/2017/11/14/hexo-next-%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/#more)  \n\n# 2. next版本\n我的版本号是\n```java\n    # Theme version\n    version: 5.1.2\n```\nnext5.0+版本集成了algolia 这样使配置algolia更简单\n\n# 3. algolia账号申请\n[Algolia官网](https://www.algolia.com/)\n<!-- more -->\n* 直接用github账号注册就好啦\n* 创建index空间 输入一个名称,填写你自己站点的网址\n\n![1](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220402.jpg)\n* 创建两个key   \n    1. 空间创建好后默认会有一个只有搜索权限的key  \n    2. 需要另建一个有修改记录等权限的key(这个供我们提交索引到空间使用)  \n    3. 创建key的时候要选择授权的空间\n\n![3](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220635.jpg)\n![2](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220735.jpg)\n![4](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220846.jpg)\n![5](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220920.jpg)\n* 记录  \n    1. Application ID  \n    2. 两个key建\n\n# 4. 安装hexo-algolia\n\n用git-bash在hexo工程根目录下执行\n\n    npm install hexo-algolia --save\n# 5. 配置algolia\n- 在Hexo工程根目录的_config.yml中加入如下配置，注意改成前面API Keys页面相应配置\n\n```java\n    algolia:\n        applicationID: '你的Application ID'\n        apiKey: '只有搜索权限的key'\n        adminApiKey: ''\n        indexName: '你的index空间名称'\n        chunkSize: 5000\n```\n\n- 修改themes>next>_config.yml \n\n    搜索 algolia_search 修改enable 为true  \n    其他字体提示可以自己随意修改\n![2](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030223530.jpg)\n# 6. 添加环境变量\n我的电脑>右键属性>高级设置>环境变量>新建>填写变量名称和变量值\n\n    变量名称 : HEXO_ALGOLIA_INDEXING_KEY\n    变量值: 在algolia新建的有修改权限的key\n![1](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030222934.jpg)\n![2](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030222951.jpg)\n# 7. 生成index上传到algolia\n在hexo根目录执行,**注意确保命令行面板已经重新载入新加的环境变量**\n```java\n    hexo algolia\n```\n\n不报错就可以啦\n\n# 8. 参考\n[NexT主题集成Algolia搜索插件](http://blog.csdn.net/luzheqi/article/details/52798557)  \n[Hexo集成Algolia搜索插件](https://jobbym.github.io/2017/01/16/Hexo%E9%9B%86%E6%88%90Algolia%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/)\n","source":"_posts/杂记/hexo-next-搜索-algolia.md","raw":"---\ntitle: hexo next 搜索 algolia\ncategories: 工具\ntags: [hexo]\ntoc: true\ndate: 2017-10-30 22:48:47\nscaffolds:\n---\n# 1. 目的:添加搜索功能\nalgolia似乎是试用一段时间就不能用了,建议使用本地搜索  \n[hexo-next 本地搜索](/2017/11/14/hexo-next-%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/#more)  \n\n# 2. next版本\n我的版本号是\n```java\n    # Theme version\n    version: 5.1.2\n```\nnext5.0+版本集成了algolia 这样使配置algolia更简单\n\n# 3. algolia账号申请\n[Algolia官网](https://www.algolia.com/)\n<!-- more -->\n* 直接用github账号注册就好啦\n* 创建index空间 输入一个名称,填写你自己站点的网址\n\n![1](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220402.jpg)\n* 创建两个key   \n    1. 空间创建好后默认会有一个只有搜索权限的key  \n    2. 需要另建一个有修改记录等权限的key(这个供我们提交索引到空间使用)  \n    3. 创建key的时候要选择授权的空间\n\n![3](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220635.jpg)\n![2](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220735.jpg)\n![4](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220846.jpg)\n![5](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220920.jpg)\n* 记录  \n    1. Application ID  \n    2. 两个key建\n\n# 4. 安装hexo-algolia\n\n用git-bash在hexo工程根目录下执行\n\n    npm install hexo-algolia --save\n# 5. 配置algolia\n- 在Hexo工程根目录的_config.yml中加入如下配置，注意改成前面API Keys页面相应配置\n\n```java\n    algolia:\n        applicationID: '你的Application ID'\n        apiKey: '只有搜索权限的key'\n        adminApiKey: ''\n        indexName: '你的index空间名称'\n        chunkSize: 5000\n```\n\n- 修改themes>next>_config.yml \n\n    搜索 algolia_search 修改enable 为true  \n    其他字体提示可以自己随意修改\n![2](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030223530.jpg)\n# 6. 添加环境变量\n我的电脑>右键属性>高级设置>环境变量>新建>填写变量名称和变量值\n\n    变量名称 : HEXO_ALGOLIA_INDEXING_KEY\n    变量值: 在algolia新建的有修改权限的key\n![1](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030222934.jpg)\n![2](http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030222951.jpg)\n# 7. 生成index上传到algolia\n在hexo根目录执行,**注意确保命令行面板已经重新载入新加的环境变量**\n```java\n    hexo algolia\n```\n\n不报错就可以啦\n\n# 8. 参考\n[NexT主题集成Algolia搜索插件](http://blog.csdn.net/luzheqi/article/details/52798557)  \n[Hexo集成Algolia搜索插件](https://jobbym.github.io/2017/01/16/Hexo%E9%9B%86%E6%88%90Algolia%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/)\n","slug":"杂记/hexo-next-搜索-algolia","published":1,"updated":"2018-02-06T07:47:49.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a0g002vv4vf2oyrhwhf","content":"<h1 id=\"1-目的-添加搜索功能\"><a href=\"#1-目的-添加搜索功能\" class=\"headerlink\" title=\"1. 目的:添加搜索功能\"></a>1. 目的:添加搜索功能</h1><p>algolia似乎是试用一段时间就不能用了,建议使用本地搜索<br><a href=\"/2017/11/14/hexo-next-%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/#more\">hexo-next 本地搜索</a>  </p>\n<h1 id=\"2-next版本\"><a href=\"#2-next版本\" class=\"headerlink\" title=\"2. next版本\"></a>2. next版本</h1><p>我的版本号是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Theme version</div><div class=\"line\">version: <span class=\"number\">5.1</span>.2</div></pre></td></tr></table></figure></p>\n<p>next5.0+版本集成了algolia 这样使配置algolia更简单</p>\n<h1 id=\"3-algolia账号申请\"><a href=\"#3-algolia账号申请\" class=\"headerlink\" title=\"3. algolia账号申请\"></a>3. algolia账号申请</h1><p><a href=\"https://www.algolia.com/\" target=\"_blank\" rel=\"external\">Algolia官网</a><br><a id=\"more\"></a></p>\n<ul>\n<li>直接用github账号注册就好啦</li>\n<li>创建index空间 输入一个名称,填写你自己站点的网址</li>\n</ul>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220402.jpg\" alt=\"1\"></p>\n<ul>\n<li>创建两个key   <ol>\n<li>空间创建好后默认会有一个只有搜索权限的key  </li>\n<li>需要另建一个有修改记录等权限的key(这个供我们提交索引到空间使用)  </li>\n<li>创建key的时候要选择授权的空间</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220635.jpg\" alt=\"3\"><br><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220735.jpg\" alt=\"2\"><br><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220846.jpg\" alt=\"4\"><br><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220920.jpg\" alt=\"5\"></p>\n<ul>\n<li>记录  <ol>\n<li>Application ID  </li>\n<li>两个key建</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"4-安装hexo-algolia\"><a href=\"#4-安装hexo-algolia\" class=\"headerlink\" title=\"4. 安装hexo-algolia\"></a>4. 安装hexo-algolia</h1><p>用git-bash在hexo工程根目录下执行</p>\n<pre><code>npm install hexo-algolia --save\n</code></pre><h1 id=\"5-配置algolia\"><a href=\"#5-配置algolia\" class=\"headerlink\" title=\"5. 配置algolia\"></a>5. 配置algolia</h1><ul>\n<li>在Hexo工程根目录的_config.yml中加入如下配置，注意改成前面API Keys页面相应配置</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">algolia:</div><div class=\"line\">    applicationID: <span class=\"string\">'你的Application ID'</span></div><div class=\"line\">    apiKey: <span class=\"string\">'只有搜索权限的key'</span></div><div class=\"line\">    adminApiKey: <span class=\"string\">''</span></div><div class=\"line\">    indexName: <span class=\"string\">'你的index空间名称'</span></div><div class=\"line\">    chunkSize: <span class=\"number\">5000</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>修改themes&gt;next&gt;_config.yml </p>\n<p>  搜索 algolia_search 修改enable 为true<br>  其他字体提示可以自己随意修改<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030223530.jpg\" alt=\"2\"></p>\n<h1 id=\"6-添加环境变量\"><a href=\"#6-添加环境变量\" class=\"headerlink\" title=\"6. 添加环境变量\"></a>6. 添加环境变量</h1><p>我的电脑&gt;右键属性&gt;高级设置&gt;环境变量&gt;新建&gt;填写变量名称和变量值</p>\n<p>  变量名称 : HEXO_ALGOLIA_INDEXING_KEY<br>  变量值: 在algolia新建的有修改权限的key<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030222934.jpg\" alt=\"1\"><br><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030222951.jpg\" alt=\"2\"></p>\n<h1 id=\"7-生成index上传到algolia\"><a href=\"#7-生成index上传到algolia\" class=\"headerlink\" title=\"7. 生成index上传到algolia\"></a>7. 生成index上传到algolia</h1><p>在hexo根目录执行,<strong>注意确保命令行面板已经重新载入新加的环境变量</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo algolia</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>不报错就可以啦</p>\n<h1 id=\"8-参考\"><a href=\"#8-参考\" class=\"headerlink\" title=\"8. 参考\"></a>8. 参考</h1><p><a href=\"http://blog.csdn.net/luzheqi/article/details/52798557\" target=\"_blank\" rel=\"external\">NexT主题集成Algolia搜索插件</a><br><a href=\"https://jobbym.github.io/2017/01/16/Hexo%E9%9B%86%E6%88%90Algolia%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/\" target=\"_blank\" rel=\"external\">Hexo集成Algolia搜索插件</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-目的-添加搜索功能\"><a href=\"#1-目的-添加搜索功能\" class=\"headerlink\" title=\"1. 目的:添加搜索功能\"></a>1. 目的:添加搜索功能</h1><p>algolia似乎是试用一段时间就不能用了,建议使用本地搜索<br><a href=\"/2017/11/14/hexo-next-%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/#more\">hexo-next 本地搜索</a>  </p>\n<h1 id=\"2-next版本\"><a href=\"#2-next版本\" class=\"headerlink\" title=\"2. next版本\"></a>2. next版本</h1><p>我的版本号是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Theme version</div><div class=\"line\">version: <span class=\"number\">5.1</span>.2</div></pre></td></tr></table></figure></p>\n<p>next5.0+版本集成了algolia 这样使配置algolia更简单</p>\n<h1 id=\"3-algolia账号申请\"><a href=\"#3-algolia账号申请\" class=\"headerlink\" title=\"3. algolia账号申请\"></a>3. algolia账号申请</h1><p><a href=\"https://www.algolia.com/\" target=\"_blank\" rel=\"external\">Algolia官网</a><br>","more":"</p>\n<ul>\n<li>直接用github账号注册就好啦</li>\n<li>创建index空间 输入一个名称,填写你自己站点的网址</li>\n</ul>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220402.jpg\" alt=\"1\"></p>\n<ul>\n<li>创建两个key   <ol>\n<li>空间创建好后默认会有一个只有搜索权限的key  </li>\n<li>需要另建一个有修改记录等权限的key(这个供我们提交索引到空间使用)  </li>\n<li>创建key的时候要选择授权的空间</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220635.jpg\" alt=\"3\"><br><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220735.jpg\" alt=\"2\"><br><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220846.jpg\" alt=\"4\"><br><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030220920.jpg\" alt=\"5\"></p>\n<ul>\n<li>记录  <ol>\n<li>Application ID  </li>\n<li>两个key建</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"4-安装hexo-algolia\"><a href=\"#4-安装hexo-algolia\" class=\"headerlink\" title=\"4. 安装hexo-algolia\"></a>4. 安装hexo-algolia</h1><p>用git-bash在hexo工程根目录下执行</p>\n<pre><code>npm install hexo-algolia --save\n</code></pre><h1 id=\"5-配置algolia\"><a href=\"#5-配置algolia\" class=\"headerlink\" title=\"5. 配置algolia\"></a>5. 配置algolia</h1><ul>\n<li>在Hexo工程根目录的_config.yml中加入如下配置，注意改成前面API Keys页面相应配置</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">algolia:</div><div class=\"line\">    applicationID: <span class=\"string\">'你的Application ID'</span></div><div class=\"line\">    apiKey: <span class=\"string\">'只有搜索权限的key'</span></div><div class=\"line\">    adminApiKey: <span class=\"string\">''</span></div><div class=\"line\">    indexName: <span class=\"string\">'你的index空间名称'</span></div><div class=\"line\">    chunkSize: <span class=\"number\">5000</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>修改themes&gt;next&gt;_config.yml </p>\n<p>  搜索 algolia_search 修改enable 为true<br>  其他字体提示可以自己随意修改<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030223530.jpg\" alt=\"2\"></p>\n<h1 id=\"6-添加环境变量\"><a href=\"#6-添加环境变量\" class=\"headerlink\" title=\"6. 添加环境变量\"></a>6. 添加环境变量</h1><p>我的电脑&gt;右键属性&gt;高级设置&gt;环境变量&gt;新建&gt;填写变量名称和变量值</p>\n<p>  变量名称 : HEXO_ALGOLIA_INDEXING_KEY<br>  变量值: 在algolia新建的有修改权限的key<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030222934.jpg\" alt=\"1\"><br><img src=\"http://ovasdkxqr.bkt.clouddn.com/hexo/QQ%E6%88%AA%E5%9B%BE20171030222951.jpg\" alt=\"2\"></p>\n<h1 id=\"7-生成index上传到algolia\"><a href=\"#7-生成index上传到algolia\" class=\"headerlink\" title=\"7. 生成index上传到algolia\"></a>7. 生成index上传到algolia</h1><p>在hexo根目录执行,<strong>注意确保命令行面板已经重新载入新加的环境变量</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo algolia</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>不报错就可以啦</p>\n<h1 id=\"8-参考\"><a href=\"#8-参考\" class=\"headerlink\" title=\"8. 参考\"></a>8. 参考</h1><p><a href=\"http://blog.csdn.net/luzheqi/article/details/52798557\" target=\"_blank\" rel=\"external\">NexT主题集成Algolia搜索插件</a><br><a href=\"https://jobbym.github.io/2017/01/16/Hexo%E9%9B%86%E6%88%90Algolia%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/\" target=\"_blank\" rel=\"external\">Hexo集成Algolia搜索插件</a></p>"},{"title":"js心跳请求","toc":true,"date":"2018-01-24T07:03:02.000Z","scaffolds":null,"_content":"\n示例代码,mark一下  \nvar timer = setInterval (function(){},time)  \nclearInterval(timer)  \n<!-- more -->\n\n```javascript\nvar timer;\ntimer = setInterval(function(){\n    Common.ajax.execute({\n        'url': Common.url.getBaseURL() + '/flow/get-trusteeship.do',\n        'data': {\n            \"programId\": $(\"#programId\").val(),\n        },\n        'success': function (data) {\n            if (data.result == 'success' && data.trusteeship) {\n                if(data.trusteeship.status == 3){\n                    clearInterval(timer);\n                    EmayPagination.action.skipToCurrentPage($('#trusteeshipListQueryPaginationContainer'),\n                        $('#trusteeshipListQueryPaginationContainer .pagination-node.active').attr('data-current-page-number'));\n                    Trusteeship.dom.setStep(3);\n                }\n            }\n        },\n        'error': function () {\n            Messager.action.error('操作异常。');\n        }\n    });\n\n},5000);\n```","source":"_posts/杂记/js心跳请求.md","raw":"---\ntitle: js心跳请求\ncategories: 学习\ntags:\n  - javascript\ntoc: true\ndate: 2018-01-24 15:03:02\nscaffolds:\n---\n\n示例代码,mark一下  \nvar timer = setInterval (function(){},time)  \nclearInterval(timer)  \n<!-- more -->\n\n```javascript\nvar timer;\ntimer = setInterval(function(){\n    Common.ajax.execute({\n        'url': Common.url.getBaseURL() + '/flow/get-trusteeship.do',\n        'data': {\n            \"programId\": $(\"#programId\").val(),\n        },\n        'success': function (data) {\n            if (data.result == 'success' && data.trusteeship) {\n                if(data.trusteeship.status == 3){\n                    clearInterval(timer);\n                    EmayPagination.action.skipToCurrentPage($('#trusteeshipListQueryPaginationContainer'),\n                        $('#trusteeshipListQueryPaginationContainer .pagination-node.active').attr('data-current-page-number'));\n                    Trusteeship.dom.setStep(3);\n                }\n            }\n        },\n        'error': function () {\n            Messager.action.error('操作异常。');\n        }\n    });\n\n},5000);\n```","slug":"杂记/js心跳请求","published":1,"updated":"2018-02-06T07:47:57.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a0i002zv4vft0rbc5rr","content":"<p>示例代码,mark一下<br>var timer = setInterval (function(){},time)<br>clearInterval(timer)<br><a id=\"more\"></a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> timer;</div><div class=\"line\">timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    Common.ajax.execute(&#123;</div><div class=\"line\">        <span class=\"string\">'url'</span>: Common.url.getBaseURL() + <span class=\"string\">'/flow/get-trusteeship.do'</span>,</div><div class=\"line\">        <span class=\"string\">'data'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"programId\"</span>: $(<span class=\"string\">\"#programId\"</span>).val(),</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'success'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (data.result == <span class=\"string\">'success'</span> &amp;&amp; data.trusteeship) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(data.trusteeship.status == <span class=\"number\">3</span>)&#123;</div><div class=\"line\">                    clearInterval(timer);</div><div class=\"line\">                    EmayPagination.action.skipToCurrentPage($(<span class=\"string\">'#trusteeshipListQueryPaginationContainer'</span>),</div><div class=\"line\">                        $(<span class=\"string\">'#trusteeshipListQueryPaginationContainer .pagination-node.active'</span>).attr(<span class=\"string\">'data-current-page-number'</span>));</div><div class=\"line\">                    Trusteeship.dom.setStep(<span class=\"number\">3</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'error'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            Messager.action.error(<span class=\"string\">'操作异常。'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;,<span class=\"number\">5000</span>);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>示例代码,mark一下<br>var timer = setInterval (function(){},time)<br>clearInterval(timer)<br>","more":"</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> timer;</div><div class=\"line\">timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    Common.ajax.execute(&#123;</div><div class=\"line\">        <span class=\"string\">'url'</span>: Common.url.getBaseURL() + <span class=\"string\">'/flow/get-trusteeship.do'</span>,</div><div class=\"line\">        <span class=\"string\">'data'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"programId\"</span>: $(<span class=\"string\">\"#programId\"</span>).val(),</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'success'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (data.result == <span class=\"string\">'success'</span> &amp;&amp; data.trusteeship) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(data.trusteeship.status == <span class=\"number\">3</span>)&#123;</div><div class=\"line\">                    clearInterval(timer);</div><div class=\"line\">                    EmayPagination.action.skipToCurrentPage($(<span class=\"string\">'#trusteeshipListQueryPaginationContainer'</span>),</div><div class=\"line\">                        $(<span class=\"string\">'#trusteeshipListQueryPaginationContainer .pagination-node.active'</span>).attr(<span class=\"string\">'data-current-page-number'</span>));</div><div class=\"line\">                    Trusteeship.dom.setStep(<span class=\"number\">3</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'error'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            Messager.action.error(<span class=\"string\">'操作异常。'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;,<span class=\"number\">5000</span>);</div></pre></td></tr></table></figure>"},{"title":"linux 程序down 问题排查","toc":true,"date":"2018-01-24T07:03:02.000Z","scaffolds":null,"_content":"# 1. linux系统有自我保护机制\n如果分配的内存用完了,会杀掉进程.  \n可以查看日志  \n```\n/var/log/messages\n```\n然后通过进程ID 进行查询  ,或者 `oom-killer` 来查询\n![linux 程序down 问题排查-20171226102834](http://ovasdkxqr.bkt.clouddn.com/image/work/linux%20程序down%20问题排查-20171226102834.png)\n\n## 1.1. 内存不够\n可以配置虚拟内存,解决内存高峰时内存不够的问题.\n\n# 2. 线程挂掉用jstack分析线程栈\n可以使用 jstack 查看进程信息\n\n# 3. 其他命令\n## 3.1. lsof -n (学习)\n","source":"_posts/杂记/linux 程序down 问题排查.md","raw":"---\ntitle: linux 程序down 问题排查\ncategories: 学习\ntags:\n  - linux\ntoc: true\ndate: 2018-01-24 15:03:02\nscaffolds:\n---\n# 1. linux系统有自我保护机制\n如果分配的内存用完了,会杀掉进程.  \n可以查看日志  \n```\n/var/log/messages\n```\n然后通过进程ID 进行查询  ,或者 `oom-killer` 来查询\n![linux 程序down 问题排查-20171226102834](http://ovasdkxqr.bkt.clouddn.com/image/work/linux%20程序down%20问题排查-20171226102834.png)\n\n## 1.1. 内存不够\n可以配置虚拟内存,解决内存高峰时内存不够的问题.\n\n# 2. 线程挂掉用jstack分析线程栈\n可以使用 jstack 查看进程信息\n\n# 3. 其他命令\n## 3.1. lsof -n (学习)\n","slug":"杂记/linux 程序down 问题排查","published":1,"updated":"2018-02-06T07:47:59.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a0l0033v4vfoplzyj45","content":"<h1 id=\"1-linux系统有自我保护机制\"><a href=\"#1-linux系统有自我保护机制\" class=\"headerlink\" title=\"1. linux系统有自我保护机制\"></a>1. linux系统有自我保护机制</h1><p>如果分配的内存用完了,会杀掉进程.<br>可以查看日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/var/log/messages</div></pre></td></tr></table></figure></p>\n<p>然后通过进程ID 进行查询  ,或者 <code>oom-killer</code> 来查询<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/work/linux%20程序down%20问题排查-20171226102834.png\" alt=\"linux 程序down 问题排查-20171226102834\"></p>\n<h2 id=\"1-1-内存不够\"><a href=\"#1-1-内存不够\" class=\"headerlink\" title=\"1.1. 内存不够\"></a>1.1. 内存不够</h2><p>可以配置虚拟内存,解决内存高峰时内存不够的问题.</p>\n<h1 id=\"2-线程挂掉用jstack分析线程栈\"><a href=\"#2-线程挂掉用jstack分析线程栈\" class=\"headerlink\" title=\"2. 线程挂掉用jstack分析线程栈\"></a>2. 线程挂掉用jstack分析线程栈</h1><p>可以使用 jstack 查看进程信息</p>\n<h1 id=\"3-其他命令\"><a href=\"#3-其他命令\" class=\"headerlink\" title=\"3. 其他命令\"></a>3. 其他命令</h1><h2 id=\"3-1-lsof-n-学习\"><a href=\"#3-1-lsof-n-学习\" class=\"headerlink\" title=\"3.1. lsof -n (学习)\"></a>3.1. lsof -n (学习)</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-linux系统有自我保护机制\"><a href=\"#1-linux系统有自我保护机制\" class=\"headerlink\" title=\"1. linux系统有自我保护机制\"></a>1. linux系统有自我保护机制</h1><p>如果分配的内存用完了,会杀掉进程.<br>可以查看日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/var/log/messages</div></pre></td></tr></table></figure></p>\n<p>然后通过进程ID 进行查询  ,或者 <code>oom-killer</code> 来查询<br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/work/linux%20程序down%20问题排查-20171226102834.png\" alt=\"linux 程序down 问题排查-20171226102834\"></p>\n<h2 id=\"1-1-内存不够\"><a href=\"#1-1-内存不够\" class=\"headerlink\" title=\"1.1. 内存不够\"></a>1.1. 内存不够</h2><p>可以配置虚拟内存,解决内存高峰时内存不够的问题.</p>\n<h1 id=\"2-线程挂掉用jstack分析线程栈\"><a href=\"#2-线程挂掉用jstack分析线程栈\" class=\"headerlink\" title=\"2. 线程挂掉用jstack分析线程栈\"></a>2. 线程挂掉用jstack分析线程栈</h1><p>可以使用 jstack 查看进程信息</p>\n<h1 id=\"3-其他命令\"><a href=\"#3-其他命令\" class=\"headerlink\" title=\"3. 其他命令\"></a>3. 其他命令</h1><h2 id=\"3-1-lsof-n-学习\"><a href=\"#3-1-lsof-n-学习\" class=\"headerlink\" title=\"3.1. lsof -n (学习)\"></a>3.1. lsof -n (学习)</h2>"},{"title":"linux修改时间","toc":true,"date":"2018-01-24T07:03:02.000Z","scaffolds":null,"_content":"linux修改时间\n- 修改时区\n> cp /usr/share/zoneinfo/UTC /etc/localtime \n```\n[root@localhost ~]# cp /usr/share/zoneinfo/UTC /etc/localtime \ncp：是否覆盖“/etc/localtime”? y \n[root@localhost ~]# date \n2012年 11月 02日 星期五 00:07:30 UTC\n修改为中国的东八区\n```\n\n- 配置新的时间\n```\n# vi /etc/sysconfig/clock\nZONE=\"Asia/Shanghai\"\nUTC=false\nARC=false\n```\n* 安装ntp\n```\nyum install -y ntp\n```\n* 设置时间同步\n```\nntpdate 210.72.145.44\n```\n# 1. 其他命令\n## 1.1. 设置时间\n```\ndate -s 18:40:00\n```\n\n\n参考链接 [Linux服务器同步网络时间](http://www.linuxidc.com/Linux/2017-03/141745.htm)","source":"_posts/杂记/linux修改时间.md","raw":"---\ntitle: linux修改时间 \ncategories: 学习\ntags:\n  - linux\ntoc: true\ndate: 2018-01-24 15:03:02\nscaffolds:\n---\nlinux修改时间\n- 修改时区\n> cp /usr/share/zoneinfo/UTC /etc/localtime \n```\n[root@localhost ~]# cp /usr/share/zoneinfo/UTC /etc/localtime \ncp：是否覆盖“/etc/localtime”? y \n[root@localhost ~]# date \n2012年 11月 02日 星期五 00:07:30 UTC\n修改为中国的东八区\n```\n\n- 配置新的时间\n```\n# vi /etc/sysconfig/clock\nZONE=\"Asia/Shanghai\"\nUTC=false\nARC=false\n```\n* 安装ntp\n```\nyum install -y ntp\n```\n* 设置时间同步\n```\nntpdate 210.72.145.44\n```\n# 1. 其他命令\n## 1.1. 设置时间\n```\ndate -s 18:40:00\n```\n\n\n参考链接 [Linux服务器同步网络时间](http://www.linuxidc.com/Linux/2017-03/141745.htm)","slug":"杂记/linux修改时间","published":1,"updated":"2018-02-06T07:48:03.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a0p0037v4vfb31qk7iv","content":"<p>linux修改时间</p>\n<ul>\n<li><p>修改时区</p>\n<blockquote>\n<p>cp /usr/share/zoneinfo/UTC /etc/localtime </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]# cp /usr/share/zoneinfo/UTC /etc/localtime </div><div class=\"line\">cp：是否覆盖“/etc/localtime”? y </div><div class=\"line\">[root@localhost ~]# date </div><div class=\"line\">2012年 11月 02日 星期五 00:07:30 UTC</div><div class=\"line\">修改为中国的东八区</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>配置新的时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># vi /etc/sysconfig/clock</div><div class=\"line\">ZONE=&quot;Asia/Shanghai&quot;</div><div class=\"line\">UTC=false</div><div class=\"line\">ARC=false</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>安装ntp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y ntp</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置时间同步</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ntpdate 210.72.145.44</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"1-其他命令\"><a href=\"#1-其他命令\" class=\"headerlink\" title=\"1. 其他命令\"></a>1. 其他命令</h1><h2 id=\"1-1-设置时间\"><a href=\"#1-1-设置时间\" class=\"headerlink\" title=\"1.1. 设置时间\"></a>1.1. 设置时间</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">date -s 18:40:00</div></pre></td></tr></table></figure>\n<p>参考链接 <a href=\"http://www.linuxidc.com/Linux/2017-03/141745.htm\" target=\"_blank\" rel=\"external\">Linux服务器同步网络时间</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>linux修改时间</p>\n<ul>\n<li><p>修改时区</p>\n<blockquote>\n<p>cp /usr/share/zoneinfo/UTC /etc/localtime </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]# cp /usr/share/zoneinfo/UTC /etc/localtime </div><div class=\"line\">cp：是否覆盖“/etc/localtime”? y </div><div class=\"line\">[root@localhost ~]# date </div><div class=\"line\">2012年 11月 02日 星期五 00:07:30 UTC</div><div class=\"line\">修改为中国的东八区</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>配置新的时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># vi /etc/sysconfig/clock</div><div class=\"line\">ZONE=&quot;Asia/Shanghai&quot;</div><div class=\"line\">UTC=false</div><div class=\"line\">ARC=false</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>安装ntp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y ntp</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置时间同步</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ntpdate 210.72.145.44</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"1-其他命令\"><a href=\"#1-其他命令\" class=\"headerlink\" title=\"1. 其他命令\"></a>1. 其他命令</h1><h2 id=\"1-1-设置时间\"><a href=\"#1-1-设置时间\" class=\"headerlink\" title=\"1.1. 设置时间\"></a>1.1. 设置时间</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">date -s 18:40:00</div></pre></td></tr></table></figure>\n<p>参考链接 <a href=\"http://www.linuxidc.com/Linux/2017-03/141745.htm\" target=\"_blank\" rel=\"external\">Linux服务器同步网络时间</a></p>\n"},{"title":"linux下安装opencv-java","toc":true,"date":"2018-01-24T07:03:02.000Z","scaffolds":null,"_content":"linux下安装opencv java \n\n# 1. 说明\n在正式环境安装的时候安装opencv时候一直编译失败，缺少文件，后来下载了310版本的opencv，可以用了  \n线上环境linux centos6.5\n\n# 2. linux版本\ncentos7\n\n# 3. 安装jdk\n# 4. 安装ant\n## 4.1. 下载\n[ant官网下载](http://ant.apache.org/bindownload.cgi)http://ant.apache.org/bindownload.cgi\n```\napache-ant-1.9.9-bin.tar.gz\n```\n## 4.2. 解压 重命名\n```\nunzip apache-ant-1.9.9-bin.tar.gz\nmv apache-ant-1.9.9 ant\n```\n\n## 4.3. 配置环境变量\n```\nvim /etc/profile \n在文件后加入 \nexport ANT_HOME=/usr/local/ant \nexport PATH=$ANT_HOME/bin:$PATH\n```\n## 4.4. 刷新环境变量\n```\nsource /etc/profile\n```\n\n# 5. 安装OpenCV\n## 5.1. 安装OpenCV依赖库\n```\nyum install -y build-essential gcc gcc-c++ cmake git pkgconfig gtk+-devel gtk2-devel python python-pip python-devel\n```\n## 5.2. 下载\n可以到[官网](https://opencv.org/releases.html)下载 选择对应版本，我这里是3.3.1\nhttps://opencv.org/releases.html\n## 5.3. 解压\n先解压,解压后进入目录,创建build目录,进入build目录,准备预编译\n```\nunzip opencv-3.3.1.zip\ncd opencv-3.3.1 \nmkdir build && cd build/\n```\n## 5.4. 预编译\n通过cmake命令预先编译一次,编译完成后查看输出结果, 在```To be built```里包含java这一项就表示预编译成功\n```\ncmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local ..\n```\n可能会卡在\n```\n-- IPPICV: Download: ippicv_2017u3_lnx_intel64_general_20170822.tgz\n```\n这个文件比较大,下载时间长一点,不要着急\n## 5.5. 编译\ncmake完成后，在build目录直接输入make进行编译，如果服务器CPU核数比较多，可以在make后加入-j8 使用8个线程同时进行编译，加快编译速度。\n```\nmake -j2\n```\n关于下面这个异常，我编译的时候并没有出现，记录一下，备用。\n\n编译过程可能出现异常，提示：\n\n/usr/include/jasper/jas_math.h:117:22: error: ‘SIZE_MAX’ was not declared in this scope\n\n出现这个异常，不要慌，可以通过修改/usr/include/jasper/jas_math.h 文件源码解决。 \n在/usr/include/jasper/jas_math.h 的头部#include 的下面添加:\n```\n#if ! defined SIZE_MAX \n#define SIZE_MAX (4294967295U) \n#endif\n```\n然后重新编译就可以了。如果不行，请删除build目录下的内容，重新预编译、编译就应该没问题了\n## 5.6. 安装\n编译完成，就可以进行安装，安装过程是生成opencv对应的库文件，我这里是java项目需要用到，所以也会顺便生成java相关的库文件\n```\nmake install\n```\n命令执行完成，会在结果中看到/usr/local/share/OpenCV/java/目录生成了两个java相关的依赖库文件 opencv-331.jar 和 libopencv_java331.so ， 当然，每个人的环境不同，可能目录也不同，具体看日志输出就行了。\n```\n[root@opencv java]# ll /usr/local/share/OpenCV/java\n总用量 72012\n-rwxr-xr-x 1 root root 73320721 11月  8 14:05 libopencv_java331.so\n-rw-r--r-- 1 root root   414381 11月  8 10:03 opencv-331.jar\n```\n# 6. 参考链接\n*  [opencv官方文档 Installation in Linux](https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html)\n*  [CentOS6 - Linux下安装OpenCV](http://blog.csdn.net/chwshuang/article/details/78208273?locationNum=9&fps=1)\n\n","source":"_posts/杂记/linux下安装opencv-java.md","raw":"---\ntitle: linux下安装opencv-java \ncategories: 学习\ntags:\n  - opencv\ntoc: true\ndate: 2018-01-24 15:03:02\nscaffolds:\n---\nlinux下安装opencv java \n\n# 1. 说明\n在正式环境安装的时候安装opencv时候一直编译失败，缺少文件，后来下载了310版本的opencv，可以用了  \n线上环境linux centos6.5\n\n# 2. linux版本\ncentos7\n\n# 3. 安装jdk\n# 4. 安装ant\n## 4.1. 下载\n[ant官网下载](http://ant.apache.org/bindownload.cgi)http://ant.apache.org/bindownload.cgi\n```\napache-ant-1.9.9-bin.tar.gz\n```\n## 4.2. 解压 重命名\n```\nunzip apache-ant-1.9.9-bin.tar.gz\nmv apache-ant-1.9.9 ant\n```\n\n## 4.3. 配置环境变量\n```\nvim /etc/profile \n在文件后加入 \nexport ANT_HOME=/usr/local/ant \nexport PATH=$ANT_HOME/bin:$PATH\n```\n## 4.4. 刷新环境变量\n```\nsource /etc/profile\n```\n\n# 5. 安装OpenCV\n## 5.1. 安装OpenCV依赖库\n```\nyum install -y build-essential gcc gcc-c++ cmake git pkgconfig gtk+-devel gtk2-devel python python-pip python-devel\n```\n## 5.2. 下载\n可以到[官网](https://opencv.org/releases.html)下载 选择对应版本，我这里是3.3.1\nhttps://opencv.org/releases.html\n## 5.3. 解压\n先解压,解压后进入目录,创建build目录,进入build目录,准备预编译\n```\nunzip opencv-3.3.1.zip\ncd opencv-3.3.1 \nmkdir build && cd build/\n```\n## 5.4. 预编译\n通过cmake命令预先编译一次,编译完成后查看输出结果, 在```To be built```里包含java这一项就表示预编译成功\n```\ncmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local ..\n```\n可能会卡在\n```\n-- IPPICV: Download: ippicv_2017u3_lnx_intel64_general_20170822.tgz\n```\n这个文件比较大,下载时间长一点,不要着急\n## 5.5. 编译\ncmake完成后，在build目录直接输入make进行编译，如果服务器CPU核数比较多，可以在make后加入-j8 使用8个线程同时进行编译，加快编译速度。\n```\nmake -j2\n```\n关于下面这个异常，我编译的时候并没有出现，记录一下，备用。\n\n编译过程可能出现异常，提示：\n\n/usr/include/jasper/jas_math.h:117:22: error: ‘SIZE_MAX’ was not declared in this scope\n\n出现这个异常，不要慌，可以通过修改/usr/include/jasper/jas_math.h 文件源码解决。 \n在/usr/include/jasper/jas_math.h 的头部#include 的下面添加:\n```\n#if ! defined SIZE_MAX \n#define SIZE_MAX (4294967295U) \n#endif\n```\n然后重新编译就可以了。如果不行，请删除build目录下的内容，重新预编译、编译就应该没问题了\n## 5.6. 安装\n编译完成，就可以进行安装，安装过程是生成opencv对应的库文件，我这里是java项目需要用到，所以也会顺便生成java相关的库文件\n```\nmake install\n```\n命令执行完成，会在结果中看到/usr/local/share/OpenCV/java/目录生成了两个java相关的依赖库文件 opencv-331.jar 和 libopencv_java331.so ， 当然，每个人的环境不同，可能目录也不同，具体看日志输出就行了。\n```\n[root@opencv java]# ll /usr/local/share/OpenCV/java\n总用量 72012\n-rwxr-xr-x 1 root root 73320721 11月  8 14:05 libopencv_java331.so\n-rw-r--r-- 1 root root   414381 11月  8 10:03 opencv-331.jar\n```\n# 6. 参考链接\n*  [opencv官方文档 Installation in Linux](https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html)\n*  [CentOS6 - Linux下安装OpenCV](http://blog.csdn.net/chwshuang/article/details/78208273?locationNum=9&fps=1)\n\n","slug":"杂记/linux下安装opencv-java","published":1,"updated":"2018-02-06T07:48:01.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a0s003bv4vf8rqfd63n","content":"<p>linux下安装opencv java </p>\n<h1 id=\"1-说明\"><a href=\"#1-说明\" class=\"headerlink\" title=\"1. 说明\"></a>1. 说明</h1><p>在正式环境安装的时候安装opencv时候一直编译失败，缺少文件，后来下载了310版本的opencv，可以用了<br>线上环境linux centos6.5</p>\n<h1 id=\"2-linux版本\"><a href=\"#2-linux版本\" class=\"headerlink\" title=\"2. linux版本\"></a>2. linux版本</h1><p>centos7</p>\n<h1 id=\"3-安装jdk\"><a href=\"#3-安装jdk\" class=\"headerlink\" title=\"3. 安装jdk\"></a>3. 安装jdk</h1><h1 id=\"4-安装ant\"><a href=\"#4-安装ant\" class=\"headerlink\" title=\"4. 安装ant\"></a>4. 安装ant</h1><h2 id=\"4-1-下载\"><a href=\"#4-1-下载\" class=\"headerlink\" title=\"4.1. 下载\"></a>4.1. 下载</h2><p><a href=\"http://ant.apache.org/bindownload.cgi\" target=\"_blank\" rel=\"external\">ant官网下载</a><a href=\"http://ant.apache.org/bindownload.cgi\" target=\"_blank\" rel=\"external\">http://ant.apache.org/bindownload.cgi</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apache-ant-1.9.9-bin.tar.gz</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-2-解压-重命名\"><a href=\"#4-2-解压-重命名\" class=\"headerlink\" title=\"4.2. 解压 重命名\"></a>4.2. 解压 重命名</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">unzip apache-ant-1.9.9-bin.tar.gz</div><div class=\"line\">mv apache-ant-1.9.9 ant</div></pre></td></tr></table></figure>\n<h2 id=\"4-3-配置环境变量\"><a href=\"#4-3-配置环境变量\" class=\"headerlink\" title=\"4.3. 配置环境变量\"></a>4.3. 配置环境变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/profile </div><div class=\"line\">在文件后加入 </div><div class=\"line\">export ANT_HOME=/usr/local/ant </div><div class=\"line\">export PATH=$ANT_HOME/bin:$PATH</div></pre></td></tr></table></figure>\n<h2 id=\"4-4-刷新环境变量\"><a href=\"#4-4-刷新环境变量\" class=\"headerlink\" title=\"4.4. 刷新环境变量\"></a>4.4. 刷新环境变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /etc/profile</div></pre></td></tr></table></figure>\n<h1 id=\"5-安装OpenCV\"><a href=\"#5-安装OpenCV\" class=\"headerlink\" title=\"5. 安装OpenCV\"></a>5. 安装OpenCV</h1><h2 id=\"5-1-安装OpenCV依赖库\"><a href=\"#5-1-安装OpenCV依赖库\" class=\"headerlink\" title=\"5.1. 安装OpenCV依赖库\"></a>5.1. 安装OpenCV依赖库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y build-essential gcc gcc-c++ cmake git pkgconfig gtk+-devel gtk2-devel python python-pip python-devel</div></pre></td></tr></table></figure>\n<h2 id=\"5-2-下载\"><a href=\"#5-2-下载\" class=\"headerlink\" title=\"5.2. 下载\"></a>5.2. 下载</h2><p>可以到<a href=\"https://opencv.org/releases.html\" target=\"_blank\" rel=\"external\">官网</a>下载 选择对应版本，我这里是3.3.1<br><a href=\"https://opencv.org/releases.html\" target=\"_blank\" rel=\"external\">https://opencv.org/releases.html</a></p>\n<h2 id=\"5-3-解压\"><a href=\"#5-3-解压\" class=\"headerlink\" title=\"5.3. 解压\"></a>5.3. 解压</h2><p>先解压,解压后进入目录,创建build目录,进入build目录,准备预编译<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">unzip opencv-3.3.1.zip</div><div class=\"line\">cd opencv-3.3.1 </div><div class=\"line\">mkdir build &amp;&amp; cd build/</div></pre></td></tr></table></figure></p>\n<h2 id=\"5-4-预编译\"><a href=\"#5-4-预编译\" class=\"headerlink\" title=\"5.4. 预编译\"></a>5.4. 预编译</h2><p>通过cmake命令预先编译一次,编译完成后查看输出结果, 在<figure class=\"highlight plain\"><figcaption><span>be built```里包含java这一项就表示预编译成功</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local ..</div></pre></td></tr></table></figure></p>\n<p>可能会卡在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-- IPPICV: Download: ippicv_2017u3_lnx_intel64_general_20170822.tgz</div></pre></td></tr></table></figure></p>\n<p>这个文件比较大,下载时间长一点,不要着急</p>\n<h2 id=\"5-5-编译\"><a href=\"#5-5-编译\" class=\"headerlink\" title=\"5.5. 编译\"></a>5.5. 编译</h2><p>cmake完成后，在build目录直接输入make进行编译，如果服务器CPU核数比较多，可以在make后加入-j8 使用8个线程同时进行编译，加快编译速度。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make -j2</div></pre></td></tr></table></figure></p>\n<p>关于下面这个异常，我编译的时候并没有出现，记录一下，备用。</p>\n<p>编译过程可能出现异常，提示：</p>\n<p>/usr/include/jasper/jas_math.h:117:22: error: ‘SIZE_MAX’ was not declared in this scope</p>\n<p>出现这个异常，不要慌，可以通过修改/usr/include/jasper/jas_math.h 文件源码解决。<br>在/usr/include/jasper/jas_math.h 的头部#include 的下面添加:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#if ! defined SIZE_MAX </div><div class=\"line\">#define SIZE_MAX (4294967295U) </div><div class=\"line\">#endif</div></pre></td></tr></table></figure></p>\n<p>然后重新编译就可以了。如果不行，请删除build目录下的内容，重新预编译、编译就应该没问题了</p>\n<h2 id=\"5-6-安装\"><a href=\"#5-6-安装\" class=\"headerlink\" title=\"5.6. 安装\"></a>5.6. 安装</h2><p>编译完成，就可以进行安装，安装过程是生成opencv对应的库文件，我这里是java项目需要用到，所以也会顺便生成java相关的库文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<p>命令执行完成，会在结果中看到/usr/local/share/OpenCV/java/目录生成了两个java相关的依赖库文件 opencv-331.jar 和 libopencv_java331.so ， 当然，每个人的环境不同，可能目录也不同，具体看日志输出就行了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@opencv java]# ll /usr/local/share/OpenCV/java</div><div class=\"line\">总用量 72012</div><div class=\"line\">-rwxr-xr-x 1 root root 73320721 11月  8 14:05 libopencv_java331.so</div><div class=\"line\">-rw-r--r-- 1 root root   414381 11月  8 10:03 opencv-331.jar</div></pre></td></tr></table></figure></p>\n<h1 id=\"6-参考链接\"><a href=\"#6-参考链接\" class=\"headerlink\" title=\"6. 参考链接\"></a>6. 参考链接</h1><ul>\n<li><a href=\"https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html\" target=\"_blank\" rel=\"external\">opencv官方文档 Installation in Linux</a></li>\n<li><a href=\"http://blog.csdn.net/chwshuang/article/details/78208273?locationNum=9&amp;fps=1\" target=\"_blank\" rel=\"external\">CentOS6 - Linux下安装OpenCV</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>linux下安装opencv java </p>\n<h1 id=\"1-说明\"><a href=\"#1-说明\" class=\"headerlink\" title=\"1. 说明\"></a>1. 说明</h1><p>在正式环境安装的时候安装opencv时候一直编译失败，缺少文件，后来下载了310版本的opencv，可以用了<br>线上环境linux centos6.5</p>\n<h1 id=\"2-linux版本\"><a href=\"#2-linux版本\" class=\"headerlink\" title=\"2. linux版本\"></a>2. linux版本</h1><p>centos7</p>\n<h1 id=\"3-安装jdk\"><a href=\"#3-安装jdk\" class=\"headerlink\" title=\"3. 安装jdk\"></a>3. 安装jdk</h1><h1 id=\"4-安装ant\"><a href=\"#4-安装ant\" class=\"headerlink\" title=\"4. 安装ant\"></a>4. 安装ant</h1><h2 id=\"4-1-下载\"><a href=\"#4-1-下载\" class=\"headerlink\" title=\"4.1. 下载\"></a>4.1. 下载</h2><p><a href=\"http://ant.apache.org/bindownload.cgi\" target=\"_blank\" rel=\"external\">ant官网下载</a><a href=\"http://ant.apache.org/bindownload.cgi\" target=\"_blank\" rel=\"external\">http://ant.apache.org/bindownload.cgi</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apache-ant-1.9.9-bin.tar.gz</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-2-解压-重命名\"><a href=\"#4-2-解压-重命名\" class=\"headerlink\" title=\"4.2. 解压 重命名\"></a>4.2. 解压 重命名</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">unzip apache-ant-1.9.9-bin.tar.gz</div><div class=\"line\">mv apache-ant-1.9.9 ant</div></pre></td></tr></table></figure>\n<h2 id=\"4-3-配置环境变量\"><a href=\"#4-3-配置环境变量\" class=\"headerlink\" title=\"4.3. 配置环境变量\"></a>4.3. 配置环境变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/profile </div><div class=\"line\">在文件后加入 </div><div class=\"line\">export ANT_HOME=/usr/local/ant </div><div class=\"line\">export PATH=$ANT_HOME/bin:$PATH</div></pre></td></tr></table></figure>\n<h2 id=\"4-4-刷新环境变量\"><a href=\"#4-4-刷新环境变量\" class=\"headerlink\" title=\"4.4. 刷新环境变量\"></a>4.4. 刷新环境变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /etc/profile</div></pre></td></tr></table></figure>\n<h1 id=\"5-安装OpenCV\"><a href=\"#5-安装OpenCV\" class=\"headerlink\" title=\"5. 安装OpenCV\"></a>5. 安装OpenCV</h1><h2 id=\"5-1-安装OpenCV依赖库\"><a href=\"#5-1-安装OpenCV依赖库\" class=\"headerlink\" title=\"5.1. 安装OpenCV依赖库\"></a>5.1. 安装OpenCV依赖库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y build-essential gcc gcc-c++ cmake git pkgconfig gtk+-devel gtk2-devel python python-pip python-devel</div></pre></td></tr></table></figure>\n<h2 id=\"5-2-下载\"><a href=\"#5-2-下载\" class=\"headerlink\" title=\"5.2. 下载\"></a>5.2. 下载</h2><p>可以到<a href=\"https://opencv.org/releases.html\" target=\"_blank\" rel=\"external\">官网</a>下载 选择对应版本，我这里是3.3.1<br><a href=\"https://opencv.org/releases.html\" target=\"_blank\" rel=\"external\">https://opencv.org/releases.html</a></p>\n<h2 id=\"5-3-解压\"><a href=\"#5-3-解压\" class=\"headerlink\" title=\"5.3. 解压\"></a>5.3. 解压</h2><p>先解压,解压后进入目录,创建build目录,进入build目录,准备预编译<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">unzip opencv-3.3.1.zip</div><div class=\"line\">cd opencv-3.3.1 </div><div class=\"line\">mkdir build &amp;&amp; cd build/</div></pre></td></tr></table></figure></p>\n<h2 id=\"5-4-预编译\"><a href=\"#5-4-预编译\" class=\"headerlink\" title=\"5.4. 预编译\"></a>5.4. 预编译</h2><p>通过cmake命令预先编译一次,编译完成后查看输出结果, 在<figure class=\"highlight plain\"><figcaption><span>be built```里包含java这一项就表示预编译成功</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local ..</div></pre></td></tr></table></figure></p>\n<p>可能会卡在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-- IPPICV: Download: ippicv_2017u3_lnx_intel64_general_20170822.tgz</div></pre></td></tr></table></figure></p>\n<p>这个文件比较大,下载时间长一点,不要着急</p>\n<h2 id=\"5-5-编译\"><a href=\"#5-5-编译\" class=\"headerlink\" title=\"5.5. 编译\"></a>5.5. 编译</h2><p>cmake完成后，在build目录直接输入make进行编译，如果服务器CPU核数比较多，可以在make后加入-j8 使用8个线程同时进行编译，加快编译速度。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make -j2</div></pre></td></tr></table></figure></p>\n<p>关于下面这个异常，我编译的时候并没有出现，记录一下，备用。</p>\n<p>编译过程可能出现异常，提示：</p>\n<p>/usr/include/jasper/jas_math.h:117:22: error: ‘SIZE_MAX’ was not declared in this scope</p>\n<p>出现这个异常，不要慌，可以通过修改/usr/include/jasper/jas_math.h 文件源码解决。<br>在/usr/include/jasper/jas_math.h 的头部#include 的下面添加:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#if ! defined SIZE_MAX </div><div class=\"line\">#define SIZE_MAX (4294967295U) </div><div class=\"line\">#endif</div></pre></td></tr></table></figure></p>\n<p>然后重新编译就可以了。如果不行，请删除build目录下的内容，重新预编译、编译就应该没问题了</p>\n<h2 id=\"5-6-安装\"><a href=\"#5-6-安装\" class=\"headerlink\" title=\"5.6. 安装\"></a>5.6. 安装</h2><p>编译完成，就可以进行安装，安装过程是生成opencv对应的库文件，我这里是java项目需要用到，所以也会顺便生成java相关的库文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<p>命令执行完成，会在结果中看到/usr/local/share/OpenCV/java/目录生成了两个java相关的依赖库文件 opencv-331.jar 和 libopencv_java331.so ， 当然，每个人的环境不同，可能目录也不同，具体看日志输出就行了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@opencv java]# ll /usr/local/share/OpenCV/java</div><div class=\"line\">总用量 72012</div><div class=\"line\">-rwxr-xr-x 1 root root 73320721 11月  8 14:05 libopencv_java331.so</div><div class=\"line\">-rw-r--r-- 1 root root   414381 11月  8 10:03 opencv-331.jar</div></pre></td></tr></table></figure></p>\n<h1 id=\"6-参考链接\"><a href=\"#6-参考链接\" class=\"headerlink\" title=\"6. 参考链接\"></a>6. 参考链接</h1><ul>\n<li><a href=\"https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html\" target=\"_blank\" rel=\"external\">opencv官方文档 Installation in Linux</a></li>\n<li><a href=\"http://blog.csdn.net/chwshuang/article/details/78208273?locationNum=9&amp;fps=1\" target=\"_blank\" rel=\"external\">CentOS6 - Linux下安装OpenCV</a></li>\n</ul>\n"},{"title":"linux笔记-修改语言","toc":true,"date":"2017-11-05T15:39:47.000Z","scaffolds":null,"_content":"# 1. 版本\ncentos7\n# 2. 查看系统是否有安装中文语言包 （列出所有可用的公共语言环境的名称，包含有zh_CN）\n```\n[vagrant@mysql1 ~]$ locale -a |grep \"zh_CN\"\nzh_CN\nzh_CN.gb18030\nzh_CN.gb2312\nzh_CN.gbk\nzh_CN.utf8\n```\n若发现以上几项，说明系统已安装中文语言包，无需再安装\n<!-- more -->\n# 3. 安装中文包\n```\nroot@iZj6cbstl2n6r280a27eppZ tmp]# yum groupinstall \"fonts\"\n```\n# 4. 修改i18n国际化和locale.conf本土化配置文件\n## 4.1. 先查看系统语言环境\n```\n[vagrant@mysql1 ~]$ locale\nLANG=en_US.UTF-8\nLC_CTYPE=\"en_US.UTF-8\"\nLC_NUMERIC=\"en_US.UTF-8\"\nLC_TIME=\"en_US.UTF-8\"\nLC_COLLATE=\"en_US.UTF-8\"\nLC_MONETARY=\"en_US.UTF-8\"\nLC_MESSAGES=\"en_US.UTF-8\"\nLC_PAPER=\"en_US.UTF-8\"\nLC_NAME=\"en_US.UTF-8\"\nLC_ADDRESS=\"en_US.UTF-8\"\nLC_TELEPHONE=\"en_US.UTF-8\"\nLC_MEASUREMENT=\"en_US.UTF-8\"\nLC_IDENTIFICATION=\"en_US.UTF-8\"\nLC_ALL=\n```\n## 4.2. 修改配置文件\n```\n vi /etc/locale.conf \n 或\n vi /etc/sysconfig/i18n (有些帖子上说修改这个,但是我的linux没有这个文件)\n```\n\n虽然安装了中文语言包但本机的语言环境并不是中文，先修改i18n配置文件\n\n```\n[root@iZj6cbstl2n6r280a27eppZ sysconfig]# vim /etc/sysconfig/i18n\n\nLANG=\"zh_CN.UTF-8\"\nLC_ALL=\"zh_CN.UTF-8\"\n\n[root@iZj6cbstl2n6r280a27eppZ sysconfig]# source /etc/sysconfig/i18n\n\n[root@iZj6cbstl2n6r280a27eppZ sysconfig]# vim /etc/locale.conf\n\nLANG=\"zh_CN.UTF-8\"\n\n [root@iZj6cbstl2n6r280a27eppZ sysconfig]# source   /etc/locale.conf\n```","source":"_posts/杂记/linux笔记-修改语言.md","raw":"---\ntitle: linux笔记-修改语言\ncategories: 学习\ntags:\n  - linux\n  - centos7\ntoc: true\ndate: 2017-11-05 23:39:47\nscaffolds:\n---\n# 1. 版本\ncentos7\n# 2. 查看系统是否有安装中文语言包 （列出所有可用的公共语言环境的名称，包含有zh_CN）\n```\n[vagrant@mysql1 ~]$ locale -a |grep \"zh_CN\"\nzh_CN\nzh_CN.gb18030\nzh_CN.gb2312\nzh_CN.gbk\nzh_CN.utf8\n```\n若发现以上几项，说明系统已安装中文语言包，无需再安装\n<!-- more -->\n# 3. 安装中文包\n```\nroot@iZj6cbstl2n6r280a27eppZ tmp]# yum groupinstall \"fonts\"\n```\n# 4. 修改i18n国际化和locale.conf本土化配置文件\n## 4.1. 先查看系统语言环境\n```\n[vagrant@mysql1 ~]$ locale\nLANG=en_US.UTF-8\nLC_CTYPE=\"en_US.UTF-8\"\nLC_NUMERIC=\"en_US.UTF-8\"\nLC_TIME=\"en_US.UTF-8\"\nLC_COLLATE=\"en_US.UTF-8\"\nLC_MONETARY=\"en_US.UTF-8\"\nLC_MESSAGES=\"en_US.UTF-8\"\nLC_PAPER=\"en_US.UTF-8\"\nLC_NAME=\"en_US.UTF-8\"\nLC_ADDRESS=\"en_US.UTF-8\"\nLC_TELEPHONE=\"en_US.UTF-8\"\nLC_MEASUREMENT=\"en_US.UTF-8\"\nLC_IDENTIFICATION=\"en_US.UTF-8\"\nLC_ALL=\n```\n## 4.2. 修改配置文件\n```\n vi /etc/locale.conf \n 或\n vi /etc/sysconfig/i18n (有些帖子上说修改这个,但是我的linux没有这个文件)\n```\n\n虽然安装了中文语言包但本机的语言环境并不是中文，先修改i18n配置文件\n\n```\n[root@iZj6cbstl2n6r280a27eppZ sysconfig]# vim /etc/sysconfig/i18n\n\nLANG=\"zh_CN.UTF-8\"\nLC_ALL=\"zh_CN.UTF-8\"\n\n[root@iZj6cbstl2n6r280a27eppZ sysconfig]# source /etc/sysconfig/i18n\n\n[root@iZj6cbstl2n6r280a27eppZ sysconfig]# vim /etc/locale.conf\n\nLANG=\"zh_CN.UTF-8\"\n\n [root@iZj6cbstl2n6r280a27eppZ sysconfig]# source   /etc/locale.conf\n```","slug":"杂记/linux笔记-修改语言","published":1,"updated":"2018-02-06T07:48:05.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a0u003ev4vf2th8zt9m","content":"<h1 id=\"1-版本\"><a href=\"#1-版本\" class=\"headerlink\" title=\"1. 版本\"></a>1. 版本</h1><p>centos7</p>\n<h1 id=\"2-查看系统是否有安装中文语言包-（列出所有可用的公共语言环境的名称，包含有zh-CN）\"><a href=\"#2-查看系统是否有安装中文语言包-（列出所有可用的公共语言环境的名称，包含有zh-CN）\" class=\"headerlink\" title=\"2. 查看系统是否有安装中文语言包 （列出所有可用的公共语言环境的名称，包含有zh_CN）\"></a>2. 查看系统是否有安装中文语言包 （列出所有可用的公共语言环境的名称，包含有zh_CN）</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[vagrant@mysql1 ~]$ locale -a |grep &quot;zh_CN&quot;</div><div class=\"line\">zh_CN</div><div class=\"line\">zh_CN.gb18030</div><div class=\"line\">zh_CN.gb2312</div><div class=\"line\">zh_CN.gbk</div><div class=\"line\">zh_CN.utf8</div></pre></td></tr></table></figure>\n<p>若发现以上几项，说明系统已安装中文语言包，无需再安装<br><a id=\"more\"></a></p>\n<h1 id=\"3-安装中文包\"><a href=\"#3-安装中文包\" class=\"headerlink\" title=\"3. 安装中文包\"></a>3. 安装中文包</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@iZj6cbstl2n6r280a27eppZ tmp]# yum groupinstall &quot;fonts&quot;</div></pre></td></tr></table></figure>\n<h1 id=\"4-修改i18n国际化和locale-conf本土化配置文件\"><a href=\"#4-修改i18n国际化和locale-conf本土化配置文件\" class=\"headerlink\" title=\"4. 修改i18n国际化和locale.conf本土化配置文件\"></a>4. 修改i18n国际化和locale.conf本土化配置文件</h1><h2 id=\"4-1-先查看系统语言环境\"><a href=\"#4-1-先查看系统语言环境\" class=\"headerlink\" title=\"4.1. 先查看系统语言环境\"></a>4.1. 先查看系统语言环境</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[vagrant@mysql1 ~]$ locale</div><div class=\"line\">LANG=en_US.UTF-8</div><div class=\"line\">LC_CTYPE=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_NUMERIC=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_TIME=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_COLLATE=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_MONETARY=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_MESSAGES=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_PAPER=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_NAME=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_ADDRESS=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_TELEPHONE=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_MEASUREMENT=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_IDENTIFICATION=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_ALL=</div></pre></td></tr></table></figure>\n<h2 id=\"4-2-修改配置文件\"><a href=\"#4-2-修改配置文件\" class=\"headerlink\" title=\"4.2. 修改配置文件\"></a>4.2. 修改配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/locale.conf </div><div class=\"line\">或</div><div class=\"line\">vi /etc/sysconfig/i18n (有些帖子上说修改这个,但是我的linux没有这个文件)</div></pre></td></tr></table></figure>\n<p>虽然安装了中文语言包但本机的语言环境并不是中文，先修改i18n配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZj6cbstl2n6r280a27eppZ sysconfig]# vim /etc/sysconfig/i18n</div><div class=\"line\"></div><div class=\"line\">LANG=&quot;zh_CN.UTF-8&quot;</div><div class=\"line\">LC_ALL=&quot;zh_CN.UTF-8&quot;</div><div class=\"line\"></div><div class=\"line\">[root@iZj6cbstl2n6r280a27eppZ sysconfig]# source /etc/sysconfig/i18n</div><div class=\"line\"></div><div class=\"line\">[root@iZj6cbstl2n6r280a27eppZ sysconfig]# vim /etc/locale.conf</div><div class=\"line\"></div><div class=\"line\">LANG=&quot;zh_CN.UTF-8&quot;</div><div class=\"line\"></div><div class=\"line\"> [root@iZj6cbstl2n6r280a27eppZ sysconfig]# source   /etc/locale.conf</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"1-版本\"><a href=\"#1-版本\" class=\"headerlink\" title=\"1. 版本\"></a>1. 版本</h1><p>centos7</p>\n<h1 id=\"2-查看系统是否有安装中文语言包-（列出所有可用的公共语言环境的名称，包含有zh-CN）\"><a href=\"#2-查看系统是否有安装中文语言包-（列出所有可用的公共语言环境的名称，包含有zh-CN）\" class=\"headerlink\" title=\"2. 查看系统是否有安装中文语言包 （列出所有可用的公共语言环境的名称，包含有zh_CN）\"></a>2. 查看系统是否有安装中文语言包 （列出所有可用的公共语言环境的名称，包含有zh_CN）</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[vagrant@mysql1 ~]$ locale -a |grep &quot;zh_CN&quot;</div><div class=\"line\">zh_CN</div><div class=\"line\">zh_CN.gb18030</div><div class=\"line\">zh_CN.gb2312</div><div class=\"line\">zh_CN.gbk</div><div class=\"line\">zh_CN.utf8</div></pre></td></tr></table></figure>\n<p>若发现以上几项，说明系统已安装中文语言包，无需再安装<br>","more":"</p>\n<h1 id=\"3-安装中文包\"><a href=\"#3-安装中文包\" class=\"headerlink\" title=\"3. 安装中文包\"></a>3. 安装中文包</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@iZj6cbstl2n6r280a27eppZ tmp]# yum groupinstall &quot;fonts&quot;</div></pre></td></tr></table></figure>\n<h1 id=\"4-修改i18n国际化和locale-conf本土化配置文件\"><a href=\"#4-修改i18n国际化和locale-conf本土化配置文件\" class=\"headerlink\" title=\"4. 修改i18n国际化和locale.conf本土化配置文件\"></a>4. 修改i18n国际化和locale.conf本土化配置文件</h1><h2 id=\"4-1-先查看系统语言环境\"><a href=\"#4-1-先查看系统语言环境\" class=\"headerlink\" title=\"4.1. 先查看系统语言环境\"></a>4.1. 先查看系统语言环境</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[vagrant@mysql1 ~]$ locale</div><div class=\"line\">LANG=en_US.UTF-8</div><div class=\"line\">LC_CTYPE=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_NUMERIC=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_TIME=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_COLLATE=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_MONETARY=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_MESSAGES=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_PAPER=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_NAME=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_ADDRESS=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_TELEPHONE=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_MEASUREMENT=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_IDENTIFICATION=&quot;en_US.UTF-8&quot;</div><div class=\"line\">LC_ALL=</div></pre></td></tr></table></figure>\n<h2 id=\"4-2-修改配置文件\"><a href=\"#4-2-修改配置文件\" class=\"headerlink\" title=\"4.2. 修改配置文件\"></a>4.2. 修改配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/locale.conf </div><div class=\"line\">或</div><div class=\"line\">vi /etc/sysconfig/i18n (有些帖子上说修改这个,但是我的linux没有这个文件)</div></pre></td></tr></table></figure>\n<p>虽然安装了中文语言包但本机的语言环境并不是中文，先修改i18n配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZj6cbstl2n6r280a27eppZ sysconfig]# vim /etc/sysconfig/i18n</div><div class=\"line\"></div><div class=\"line\">LANG=&quot;zh_CN.UTF-8&quot;</div><div class=\"line\">LC_ALL=&quot;zh_CN.UTF-8&quot;</div><div class=\"line\"></div><div class=\"line\">[root@iZj6cbstl2n6r280a27eppZ sysconfig]# source /etc/sysconfig/i18n</div><div class=\"line\"></div><div class=\"line\">[root@iZj6cbstl2n6r280a27eppZ sysconfig]# vim /etc/locale.conf</div><div class=\"line\"></div><div class=\"line\">LANG=&quot;zh_CN.UTF-8&quot;</div><div class=\"line\"></div><div class=\"line\"> [root@iZj6cbstl2n6r280a27eppZ sysconfig]# source   /etc/locale.conf</div></pre></td></tr></table></figure>"},{"title":"vagrant 创建virtualBox虚拟机","toc":true,"date":"2017-11-04T15:37:13.000Z","scaffolds":null,"_content":"# 1. 安装vagrant\n## 1.1. 本机环境\n\n系统环境 ： win10 64 系统\n\n## 1.2. 软件及镜像\n\n\nvagrant 官网 https://www.vagrantup.com/  \nvagrant 需要依赖虚拟机 我用的 virtualBox  \nvirtualBox 官网 https://www.virtualbox.org/   \nvirtualBox 镜像 在vagrant官网中可以下载  \n镜像下载 http://www.vagrantbox.es/\n\n由于国内下载比较慢，已分享到百度云\n<!-- more -->\n\n|名称|类型| 分享链接|\n|:----|:----:|:---------:|\n|vagrant_1.9.5.msi | 软件 | http://pan.baidu.com/s/1kVzFP1H|\n|VirtualBox-5.1.22-115126-Win.exe | 软件 | http://pan.baidu.com/s/1jIQgl6m|\n|centos-7.0-x86_64.box | 镜像文件 | http://pan.baidu.com/s/1o7Zlspk|\n|gparted-live-0.28.1-1-i686.iso | 32位分区live-cd | http://pan.baidu.com/s/1jISiee6|\n|gparted-live-0.28.1-1-amd64.iso | 64位分区live-cd | http://pan.baidu.com/s/1dFenvvb|\n\n上面的gparted iso 文件是分区用的不过没有用到，下载不容易就一块传上来了。\n\n## 1.3. 更改vagrant 存放box的位置\n默认vagrant 添加的box 默认存放位置为\n> C:\\Users\\当前用户名\\ .vagrant.d\\boxes\\ \n\n可以通过添加环境变量 VAGRANT_HOME 修改存放位置\n\n例如：VAGRANT_HOME = D:\\Program Files\\VagrantHome\n\n## 1.4. 更改virtualBox 存放镜像目录\n默认目录 \n\n> C:\\Users\\当前用户名\\VirtualBox VMs\n  \n可以在virtualBox 软件 > 管理 > 全局设置 > 常规 > 默认虚拟电脑位置进行修改\n\n我修改为\n> D:\\VirtualBoxVMs\n# 2. 启动vagrant\n## 2.1. 添加box\n> vagrant box add centos7 E:\\软件安装包\\centos-7.0-x86_64.box\n\n查看已添加的box\n\n> vagrant box list\n\n    D:\\vagrantSpace>vagrant box list\n    centos7 (virtualbox, 0)\n\n## 2.2. 初始化\n\n在准备存放vagrant配置文件的文件夹中执行\n\n> vagrant init \n\n会生成 Vagrantfile 文件  \n文件中包含vagrant 配置信息  \n其中有一些配置项的说明  \n\n    config.vm.box = \"base\" 修改base 为centos7 即 boxlist 中的名字  \n    config.vm.synced_folder \"E:\\\", \"/vagrant_data\" 共享文件夹\n    \n其他配置请自行百度\n\n### 2.2.1. vagrant 配置文件\n\n下面的是我的配置\n\n    # -*- mode: ruby -*-\n    # vi: set ft=ruby :\n    Vagrant.configure(\"2\") do |config|\n      config.vm.box = \"centos7\"\n      config.vm.define :java do |java|\n        java.vm.provider \"virtualbox\" do |v|\n            v.customize [\"modifyvm\", :id, \"--name\", \"java\", \"--memory\", \"512\"]\n        end\n        java.vm.box = \"centos7\"\n        java.vm.hostname = \"java\"\n        java.vm.network :private_network, ip: \"192.168.33.10\"\n      end\n      config.vm.define :linux do |linux|\n        linux.vm.provider \"virtualbox\" do |v|\n            v.customize [\"modifyvm\", :id, \"--name\", \"linux\", \"--memory\", \"512\"]\n        end\n        linux.vm.box = \"centos7\"\n        linux.vm.hostname = \"linux\"\n        linux.vm.network :private_network, ip: \"192.168.33.11\"\n      end\n    end\n\n## 2.3. 启动虚拟机\n\n> vagrant up linux \n\n第一次会初始化虚拟机,并启动,成功后查看虚拟机运行状态\n\n> vagrant global-status\n\n    D:\\vagrantSpace>vagrant global-status\n    id       name   provider   state   directory\n    -----------------------------------------------------------------------\n    1d24610  linux  virtualbox running D:/vagrantSpace\n\n这个时候就可以通过ssh登录虚拟机了。默认用户和密码都是 vagrant\n\n------------------------------------\n下面是修改磁盘大小,如果觉得没有必要,可以不修改,直接玩就可以啦\n\n# 3. 修改虚拟机磁盘大小\n\nvagrant 默认创建的磁盘 根目录下只有10G.觉得太小,修改为1T.\n\n- 关闭 linux\n\n> vagrant halt linux\n\n- 进入到 D:\\VirtualBoxVMs文件夹下 即 之前设置的virtualBox的路径,里面会有个刚才创建的linux系统的文件夹 D:\\VirtualBoxVMs\\linux\n- 加入virtualBox 安装目录加入环境变量path\n\n    安装virtualBox后会自动加入 VBOX_MSI_INSTALL_PATH 环境变量,直接把这个路径加到path后面即可. \n    \n> %VBOX_MSI_INSTALL_PATH%\n    \n- 通过下面命令 复制一份磁盘文件, .vmdk 文件直接修改大小会报错\n\n\n> vboxmanage clonehd box-disk1.vmdk box.vdi --format vdi\n\n    D:\\VirtualBoxVMs\\linux>vboxmanage clonehd box-disk1.vmdk box.vdi --format vdi\n    0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%\n    Clone medium created in format 'vdi'. UUID: 1431c156-a3b1-4374-b196-36450edecd9e\n\n- 修改vdi 文件大小,命令如下\n\n> vboxmanage modifyhd box.vdi --resize 1048576\n\n    D:\\VirtualBoxVMs\\linux>vboxmanage modifyhd box.vdi --resize 1048576\n    0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%\n\n- 打开虚拟机,修改 linux 磁盘文件为 box.vdi\n\n![](https://static.oschina.net/uploads/img/201707/02192036_F9Jv.jpg)\n\n修改后\n\n![](https://static.oschina.net/uploads/img/201707/02192410_T07t.jpg)\n\n- 查看D:\\VirtualBoxVMs\\linux 文件夹下linux.vbox 文件 \n删除 原来的harddisk \n```\n     <HardDisk uuid=\"{3417d3e1-fcfd-410c-8df6-adba5f8b01bb}\" location=\"box-disk1.vmdk\" format=\"VMDK\" type=\"Normal\"/>\n```\n\n保留新的harddisk\n```\n    <HardDisk uuid=\"{417759f6-4e5d-4a45-9ce1-1351b15c5a7d}\" location=\"box-linux.vdi\" format=\"VDI\" type=\"Normal\"/>\n```\n\n\n- 删除原来的磁盘文件, box-disk1.vmdk。这个可以以后再删除也可以，防止操作中出现什么错误。\n- 启动虚拟机\n> vagrant up linux\n\n切换到root，密码为vagrant\n\n> su\n\n查看磁盘\n\n> fdisk -l\n\n    Gerät  boot.     Anfang        Ende     Blöcke   Id  System\n    /dev/sda1   *        2048     1026047      512000   83  Linux\n    /dev/sda2         1026048    20766719     9870336   8e  Linux LVM\n\n可以看到一共还是10G,并不是1T,我们需要加一个磁盘sda3\n\n    fdisk /dev/sda\n    n\n    p\n    3\n    回车\n    回车\n更改磁盘类型为 lvm\n\n    t\n    3\n    8e\n\n\n查看磁盘\n\n    p\n全部操作如下\n    \n    Befehl (m für Hilfe): n\n    Partition type:\n       p   primary (2 primary, 0 extended, 2 free)\n       e   Erweiterte\n    Select (default p): p\n    Partitionsnummer (3,4, default 3): 3\n    Erster Sektor (20766720-2147483647, Vorgabe: 20766720): \n    Benutze den Standardwert 20766720\n    Last Sektor, +Sektoren or +size{K,M,G} (20766720-2147483647, Vorgabe: 2147483647): \n    Benutze den Standardwert 2147483647\n    Partition 3 of type Linux and of size 1014,1 GiB is set\n    \n    Befehl (m für Hilfe): t\n    Partitionsnummer (1-3, default 3): 3\n    Hex code (type L to list all codes): 8e\n    Changed type of partition 'Linux' to 'Linux LVM'\n    \n    Befehl (m für Hilfe): p\n    \n    Disk /dev/sda: 1099.5 GB, 1099511627776 bytes, 2147483648 sectors\n    Units = Sektoren of 1 * 512 = 512 bytes\n    Sector size (logical/physical): 512 bytes / 512 bytes\n    I/O size (minimum/optimal): 512 bytes / 512 bytes\n    Disk label type: dos\n    Disk identifier: 0x00095a8e\n    \n       Gerät  boot.     Anfang        Ende     Blöcke   Id  System\n    /dev/sda1   *        2048     1026047      512000   83  Linux\n    /dev/sda2         1026048    20766719     9870336   8e  Linux LVM\n    /dev/sda3        20766720  2147483647  1063358464   8e  Linux LVM\n\n保存退出\n\n    w\n重启虚拟机\n    \n    reboot\n查看当前 Volume Group\n\n    vgdisplay\n信息如下\n\n    [root@linux vagrant]# vgdisplay\n      --- Volume group ---\n      VG Name               centos\n      System ID             \n      Format                lvm2\n      Metadata Areas        1\n      Metadata Sequence No  3\n      VG Access             read/write\n      VG Status             resizable\n      MAX LV                0\n      Cur LV                2\n      Open LV               2\n      Max PV                0\n      Cur PV                1\n      Act PV                1\n      VG Size               9,41 GiB\n      PE Size               4,00 MiB\n      Total PE              2409\n      Alloc PE / Size       2399 / 9,37 GiB\n      Free  PE / Size       10 / 40,00 MiB\n      VG UUID               NJWfOH-An0K-Hm9Q-8Tjs-yq2x-ZWXi-L2vP7i\n      \n名称为 centos，可调整大小（resizable），当前大小为 9,41GB。活动的 LVM 卷有\n\n    lvscan\n    \n    [root@linux vagrant]# lvscan\n    ACTIVE            '/dev/centos/swap' [1016,00 MiB] inherit\n    ACTIVE            '/dev/centos/root' [8,38 GiB] inherit\n    \n先将分配过来的新磁盘空间创建为一个新的物理卷\n\n    pvcreate /dev/sda3\n    \n    [root@linux vagrant]# pvcreate /dev/sda3\n    Physical volume \"/dev/sda3\" successfully created\n    \n然后使用新的物理卷来扩展 LVM 的 centos\n\n    vgextend centos /dev/sda3\n    \n    [root@linux vagrant]# vgextend centos /dev/sda3\n    Volume group \"centos\" successfully extended\n\n然后扩展 LVM 的逻辑卷 centos-lv_root\n\n    lvextend /dev/centos/root /dev/sda3\n    \n    [root@linux vagrant]# lvextend /dev/centos/root /dev/sda3\n    Size of logical volume centos/root changed from 8,38 GiB (2145 extents) to 1022,47 GiB (261753 extents).\n    Logical volume root successfully resized\n    \n最后，调整逻辑卷文件系统的大小\n\n    vagrant]# resize2fs /dev/centos/root\n    \n    [root@linux vagrant]# resize2fs /dev/centos/root\n    resize2fs 1.42.9 (28-Dec-2013)\n    resize2fs: Ungültige magische Zahl im Superblock beim Versuch, /dev/centos/root zu öffnen\n    Kann keinen gültigen Dateisystem-Superblock finden.\n    \n完成。看看效果,可以看到root下变成了1T\n\n    lvscan\n    \n    [root@linux vagrant]# lvscan\n      ACTIVE            '/dev/centos/swap' [1016,00 MiB] inherit\n      ACTIVE            '/dev/centos/root' [1022,47 GiB] inherit\n      \n但是,查看根目录下面分配大小, 跟目录还是为8.4G\n\n    [root@linux vagrant]# df -h\n    Dateisystem             Größe Benutzt Verf. Verw% Eingehängt auf\n    /dev/mapper/centos-root  8,4G    1,1G  7,4G   13% /\n    devtmpfs                 236M       0  236M    0% /dev\n    tmpfs                    245M       0  245M    0% /dev/shm\n    tmpfs                    245M    4,3M  241M    2% /run\n    tmpfs                    245M       0  245M    0% /sys/fs/cgroup\n    /dev/sda1                497M    118M  379M   24% /boot  \n \n用 xfs_growfs 对扩容后的 LV 进行 xfs 格式大小调整\n\n    xfs_growfs /dev/centos/root\n    \n    [root@linux vagrant]# xfs_growfs /dev/centos/root\n    meta-data=/dev/mapper/centos-root isize=256    agcount=4, agsize=549120 blks\n             =                       sectsz=512   attr=2, projid32bit=1\n             =                       crc=0        finobt=0\n    data     =                       bsize=4096   blocks=2196480, imaxpct=25\n             =                       sunit=0      swidth=0 blks\n    naming   =version 2              bsize=4096   ascii-ci=0 ftype=0\n    log      =Intern                 bsize=4096   blocks=2560, version=2\n             =                       sectsz=512   sunit=0 blks, lazy-count=1\n    realtime =keine                  extsz=4096   blocks=0, rtextents=0\n    Datenblöcke von 2196480 auf 268035072 geändert.\n\n再查看\n\n    [root@linux vagrant]# df -h\n    Dateisystem             Größe Benutzt Verf. Verw% Eingehängt auf\n    /dev/mapper/centos-root 1023G    1,1G 1022G    1% /\n    devtmpfs                 236M       0  236M    0% /dev\n    tmpfs                    245M       0  245M    0% /dev/shm\n    tmpfs                    245M    4,3M  241M    2% /run\n    tmpfs                    245M       0  245M    0% /sys/fs/cgroup\n    /dev/sda1                497M    118M  379M   24% /boot\n    \n可以看到根目录大小已经变成1T了\n\nhttp://pan.baidu.com/s/1dEC3ePr\n\n由于不了解linux,修改磁盘大小费了很多事.完成后打了包,做成了新的box，方便以后直接使用。\n\n# 4. 其他\n## 4.1. 修改linux 语言\n> /etc/locale.conf\n```\nLANG='en_US.UTF-8'\n```\n\n\n# 5. 参考博客:  \n\n## 5.1. 调整 VirtualBox 虚拟机的磁盘大小  \nhttps://cnzhx.net/blog/resizing-lvm-centos-virtualbox-guest/  \n\n## 5.2. 手把手教你给 CentOS 7 添加硬盘及扩容(LVM)  \nhttps://aurthurxlc.github.io/Aurthur-2017/Centos-7-extend-lvm-volume.html\n","source":"_posts/杂记/vagrant 创建virtualBox虚拟机.md","raw":"---\ntitle: vagrant 创建virtualBox虚拟机\ncategories: 工具\ntoc: true\ndate: 2017-11-04 23:37:13\nscaffolds:\ntags: [vagrant]\n---\n# 1. 安装vagrant\n## 1.1. 本机环境\n\n系统环境 ： win10 64 系统\n\n## 1.2. 软件及镜像\n\n\nvagrant 官网 https://www.vagrantup.com/  \nvagrant 需要依赖虚拟机 我用的 virtualBox  \nvirtualBox 官网 https://www.virtualbox.org/   \nvirtualBox 镜像 在vagrant官网中可以下载  \n镜像下载 http://www.vagrantbox.es/\n\n由于国内下载比较慢，已分享到百度云\n<!-- more -->\n\n|名称|类型| 分享链接|\n|:----|:----:|:---------:|\n|vagrant_1.9.5.msi | 软件 | http://pan.baidu.com/s/1kVzFP1H|\n|VirtualBox-5.1.22-115126-Win.exe | 软件 | http://pan.baidu.com/s/1jIQgl6m|\n|centos-7.0-x86_64.box | 镜像文件 | http://pan.baidu.com/s/1o7Zlspk|\n|gparted-live-0.28.1-1-i686.iso | 32位分区live-cd | http://pan.baidu.com/s/1jISiee6|\n|gparted-live-0.28.1-1-amd64.iso | 64位分区live-cd | http://pan.baidu.com/s/1dFenvvb|\n\n上面的gparted iso 文件是分区用的不过没有用到，下载不容易就一块传上来了。\n\n## 1.3. 更改vagrant 存放box的位置\n默认vagrant 添加的box 默认存放位置为\n> C:\\Users\\当前用户名\\ .vagrant.d\\boxes\\ \n\n可以通过添加环境变量 VAGRANT_HOME 修改存放位置\n\n例如：VAGRANT_HOME = D:\\Program Files\\VagrantHome\n\n## 1.4. 更改virtualBox 存放镜像目录\n默认目录 \n\n> C:\\Users\\当前用户名\\VirtualBox VMs\n  \n可以在virtualBox 软件 > 管理 > 全局设置 > 常规 > 默认虚拟电脑位置进行修改\n\n我修改为\n> D:\\VirtualBoxVMs\n# 2. 启动vagrant\n## 2.1. 添加box\n> vagrant box add centos7 E:\\软件安装包\\centos-7.0-x86_64.box\n\n查看已添加的box\n\n> vagrant box list\n\n    D:\\vagrantSpace>vagrant box list\n    centos7 (virtualbox, 0)\n\n## 2.2. 初始化\n\n在准备存放vagrant配置文件的文件夹中执行\n\n> vagrant init \n\n会生成 Vagrantfile 文件  \n文件中包含vagrant 配置信息  \n其中有一些配置项的说明  \n\n    config.vm.box = \"base\" 修改base 为centos7 即 boxlist 中的名字  \n    config.vm.synced_folder \"E:\\\", \"/vagrant_data\" 共享文件夹\n    \n其他配置请自行百度\n\n### 2.2.1. vagrant 配置文件\n\n下面的是我的配置\n\n    # -*- mode: ruby -*-\n    # vi: set ft=ruby :\n    Vagrant.configure(\"2\") do |config|\n      config.vm.box = \"centos7\"\n      config.vm.define :java do |java|\n        java.vm.provider \"virtualbox\" do |v|\n            v.customize [\"modifyvm\", :id, \"--name\", \"java\", \"--memory\", \"512\"]\n        end\n        java.vm.box = \"centos7\"\n        java.vm.hostname = \"java\"\n        java.vm.network :private_network, ip: \"192.168.33.10\"\n      end\n      config.vm.define :linux do |linux|\n        linux.vm.provider \"virtualbox\" do |v|\n            v.customize [\"modifyvm\", :id, \"--name\", \"linux\", \"--memory\", \"512\"]\n        end\n        linux.vm.box = \"centos7\"\n        linux.vm.hostname = \"linux\"\n        linux.vm.network :private_network, ip: \"192.168.33.11\"\n      end\n    end\n\n## 2.3. 启动虚拟机\n\n> vagrant up linux \n\n第一次会初始化虚拟机,并启动,成功后查看虚拟机运行状态\n\n> vagrant global-status\n\n    D:\\vagrantSpace>vagrant global-status\n    id       name   provider   state   directory\n    -----------------------------------------------------------------------\n    1d24610  linux  virtualbox running D:/vagrantSpace\n\n这个时候就可以通过ssh登录虚拟机了。默认用户和密码都是 vagrant\n\n------------------------------------\n下面是修改磁盘大小,如果觉得没有必要,可以不修改,直接玩就可以啦\n\n# 3. 修改虚拟机磁盘大小\n\nvagrant 默认创建的磁盘 根目录下只有10G.觉得太小,修改为1T.\n\n- 关闭 linux\n\n> vagrant halt linux\n\n- 进入到 D:\\VirtualBoxVMs文件夹下 即 之前设置的virtualBox的路径,里面会有个刚才创建的linux系统的文件夹 D:\\VirtualBoxVMs\\linux\n- 加入virtualBox 安装目录加入环境变量path\n\n    安装virtualBox后会自动加入 VBOX_MSI_INSTALL_PATH 环境变量,直接把这个路径加到path后面即可. \n    \n> %VBOX_MSI_INSTALL_PATH%\n    \n- 通过下面命令 复制一份磁盘文件, .vmdk 文件直接修改大小会报错\n\n\n> vboxmanage clonehd box-disk1.vmdk box.vdi --format vdi\n\n    D:\\VirtualBoxVMs\\linux>vboxmanage clonehd box-disk1.vmdk box.vdi --format vdi\n    0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%\n    Clone medium created in format 'vdi'. UUID: 1431c156-a3b1-4374-b196-36450edecd9e\n\n- 修改vdi 文件大小,命令如下\n\n> vboxmanage modifyhd box.vdi --resize 1048576\n\n    D:\\VirtualBoxVMs\\linux>vboxmanage modifyhd box.vdi --resize 1048576\n    0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%\n\n- 打开虚拟机,修改 linux 磁盘文件为 box.vdi\n\n![](https://static.oschina.net/uploads/img/201707/02192036_F9Jv.jpg)\n\n修改后\n\n![](https://static.oschina.net/uploads/img/201707/02192410_T07t.jpg)\n\n- 查看D:\\VirtualBoxVMs\\linux 文件夹下linux.vbox 文件 \n删除 原来的harddisk \n```\n     <HardDisk uuid=\"{3417d3e1-fcfd-410c-8df6-adba5f8b01bb}\" location=\"box-disk1.vmdk\" format=\"VMDK\" type=\"Normal\"/>\n```\n\n保留新的harddisk\n```\n    <HardDisk uuid=\"{417759f6-4e5d-4a45-9ce1-1351b15c5a7d}\" location=\"box-linux.vdi\" format=\"VDI\" type=\"Normal\"/>\n```\n\n\n- 删除原来的磁盘文件, box-disk1.vmdk。这个可以以后再删除也可以，防止操作中出现什么错误。\n- 启动虚拟机\n> vagrant up linux\n\n切换到root，密码为vagrant\n\n> su\n\n查看磁盘\n\n> fdisk -l\n\n    Gerät  boot.     Anfang        Ende     Blöcke   Id  System\n    /dev/sda1   *        2048     1026047      512000   83  Linux\n    /dev/sda2         1026048    20766719     9870336   8e  Linux LVM\n\n可以看到一共还是10G,并不是1T,我们需要加一个磁盘sda3\n\n    fdisk /dev/sda\n    n\n    p\n    3\n    回车\n    回车\n更改磁盘类型为 lvm\n\n    t\n    3\n    8e\n\n\n查看磁盘\n\n    p\n全部操作如下\n    \n    Befehl (m für Hilfe): n\n    Partition type:\n       p   primary (2 primary, 0 extended, 2 free)\n       e   Erweiterte\n    Select (default p): p\n    Partitionsnummer (3,4, default 3): 3\n    Erster Sektor (20766720-2147483647, Vorgabe: 20766720): \n    Benutze den Standardwert 20766720\n    Last Sektor, +Sektoren or +size{K,M,G} (20766720-2147483647, Vorgabe: 2147483647): \n    Benutze den Standardwert 2147483647\n    Partition 3 of type Linux and of size 1014,1 GiB is set\n    \n    Befehl (m für Hilfe): t\n    Partitionsnummer (1-3, default 3): 3\n    Hex code (type L to list all codes): 8e\n    Changed type of partition 'Linux' to 'Linux LVM'\n    \n    Befehl (m für Hilfe): p\n    \n    Disk /dev/sda: 1099.5 GB, 1099511627776 bytes, 2147483648 sectors\n    Units = Sektoren of 1 * 512 = 512 bytes\n    Sector size (logical/physical): 512 bytes / 512 bytes\n    I/O size (minimum/optimal): 512 bytes / 512 bytes\n    Disk label type: dos\n    Disk identifier: 0x00095a8e\n    \n       Gerät  boot.     Anfang        Ende     Blöcke   Id  System\n    /dev/sda1   *        2048     1026047      512000   83  Linux\n    /dev/sda2         1026048    20766719     9870336   8e  Linux LVM\n    /dev/sda3        20766720  2147483647  1063358464   8e  Linux LVM\n\n保存退出\n\n    w\n重启虚拟机\n    \n    reboot\n查看当前 Volume Group\n\n    vgdisplay\n信息如下\n\n    [root@linux vagrant]# vgdisplay\n      --- Volume group ---\n      VG Name               centos\n      System ID             \n      Format                lvm2\n      Metadata Areas        1\n      Metadata Sequence No  3\n      VG Access             read/write\n      VG Status             resizable\n      MAX LV                0\n      Cur LV                2\n      Open LV               2\n      Max PV                0\n      Cur PV                1\n      Act PV                1\n      VG Size               9,41 GiB\n      PE Size               4,00 MiB\n      Total PE              2409\n      Alloc PE / Size       2399 / 9,37 GiB\n      Free  PE / Size       10 / 40,00 MiB\n      VG UUID               NJWfOH-An0K-Hm9Q-8Tjs-yq2x-ZWXi-L2vP7i\n      \n名称为 centos，可调整大小（resizable），当前大小为 9,41GB。活动的 LVM 卷有\n\n    lvscan\n    \n    [root@linux vagrant]# lvscan\n    ACTIVE            '/dev/centos/swap' [1016,00 MiB] inherit\n    ACTIVE            '/dev/centos/root' [8,38 GiB] inherit\n    \n先将分配过来的新磁盘空间创建为一个新的物理卷\n\n    pvcreate /dev/sda3\n    \n    [root@linux vagrant]# pvcreate /dev/sda3\n    Physical volume \"/dev/sda3\" successfully created\n    \n然后使用新的物理卷来扩展 LVM 的 centos\n\n    vgextend centos /dev/sda3\n    \n    [root@linux vagrant]# vgextend centos /dev/sda3\n    Volume group \"centos\" successfully extended\n\n然后扩展 LVM 的逻辑卷 centos-lv_root\n\n    lvextend /dev/centos/root /dev/sda3\n    \n    [root@linux vagrant]# lvextend /dev/centos/root /dev/sda3\n    Size of logical volume centos/root changed from 8,38 GiB (2145 extents) to 1022,47 GiB (261753 extents).\n    Logical volume root successfully resized\n    \n最后，调整逻辑卷文件系统的大小\n\n    vagrant]# resize2fs /dev/centos/root\n    \n    [root@linux vagrant]# resize2fs /dev/centos/root\n    resize2fs 1.42.9 (28-Dec-2013)\n    resize2fs: Ungültige magische Zahl im Superblock beim Versuch, /dev/centos/root zu öffnen\n    Kann keinen gültigen Dateisystem-Superblock finden.\n    \n完成。看看效果,可以看到root下变成了1T\n\n    lvscan\n    \n    [root@linux vagrant]# lvscan\n      ACTIVE            '/dev/centos/swap' [1016,00 MiB] inherit\n      ACTIVE            '/dev/centos/root' [1022,47 GiB] inherit\n      \n但是,查看根目录下面分配大小, 跟目录还是为8.4G\n\n    [root@linux vagrant]# df -h\n    Dateisystem             Größe Benutzt Verf. Verw% Eingehängt auf\n    /dev/mapper/centos-root  8,4G    1,1G  7,4G   13% /\n    devtmpfs                 236M       0  236M    0% /dev\n    tmpfs                    245M       0  245M    0% /dev/shm\n    tmpfs                    245M    4,3M  241M    2% /run\n    tmpfs                    245M       0  245M    0% /sys/fs/cgroup\n    /dev/sda1                497M    118M  379M   24% /boot  \n \n用 xfs_growfs 对扩容后的 LV 进行 xfs 格式大小调整\n\n    xfs_growfs /dev/centos/root\n    \n    [root@linux vagrant]# xfs_growfs /dev/centos/root\n    meta-data=/dev/mapper/centos-root isize=256    agcount=4, agsize=549120 blks\n             =                       sectsz=512   attr=2, projid32bit=1\n             =                       crc=0        finobt=0\n    data     =                       bsize=4096   blocks=2196480, imaxpct=25\n             =                       sunit=0      swidth=0 blks\n    naming   =version 2              bsize=4096   ascii-ci=0 ftype=0\n    log      =Intern                 bsize=4096   blocks=2560, version=2\n             =                       sectsz=512   sunit=0 blks, lazy-count=1\n    realtime =keine                  extsz=4096   blocks=0, rtextents=0\n    Datenblöcke von 2196480 auf 268035072 geändert.\n\n再查看\n\n    [root@linux vagrant]# df -h\n    Dateisystem             Größe Benutzt Verf. Verw% Eingehängt auf\n    /dev/mapper/centos-root 1023G    1,1G 1022G    1% /\n    devtmpfs                 236M       0  236M    0% /dev\n    tmpfs                    245M       0  245M    0% /dev/shm\n    tmpfs                    245M    4,3M  241M    2% /run\n    tmpfs                    245M       0  245M    0% /sys/fs/cgroup\n    /dev/sda1                497M    118M  379M   24% /boot\n    \n可以看到根目录大小已经变成1T了\n\nhttp://pan.baidu.com/s/1dEC3ePr\n\n由于不了解linux,修改磁盘大小费了很多事.完成后打了包,做成了新的box，方便以后直接使用。\n\n# 4. 其他\n## 4.1. 修改linux 语言\n> /etc/locale.conf\n```\nLANG='en_US.UTF-8'\n```\n\n\n# 5. 参考博客:  \n\n## 5.1. 调整 VirtualBox 虚拟机的磁盘大小  \nhttps://cnzhx.net/blog/resizing-lvm-centos-virtualbox-guest/  \n\n## 5.2. 手把手教你给 CentOS 7 添加硬盘及扩容(LVM)  \nhttps://aurthurxlc.github.io/Aurthur-2017/Centos-7-extend-lvm-volume.html\n","slug":"杂记/vagrant 创建virtualBox虚拟机","published":1,"updated":"2018-02-06T07:48:09.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a0x003iv4vfgizouhxh","content":"<h1 id=\"1-安装vagrant\"><a href=\"#1-安装vagrant\" class=\"headerlink\" title=\"1. 安装vagrant\"></a>1. 安装vagrant</h1><h2 id=\"1-1-本机环境\"><a href=\"#1-1-本机环境\" class=\"headerlink\" title=\"1.1. 本机环境\"></a>1.1. 本机环境</h2><p>系统环境 ： win10 64 系统</p>\n<h2 id=\"1-2-软件及镜像\"><a href=\"#1-2-软件及镜像\" class=\"headerlink\" title=\"1.2. 软件及镜像\"></a>1.2. 软件及镜像</h2><p>vagrant 官网 <a href=\"https://www.vagrantup.com/\" target=\"_blank\" rel=\"external\">https://www.vagrantup.com/</a><br>vagrant 需要依赖虚拟机 我用的 virtualBox<br>virtualBox 官网 <a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"external\">https://www.virtualbox.org/</a><br>virtualBox 镜像 在vagrant官网中可以下载<br>镜像下载 <a href=\"http://www.vagrantbox.es/\" target=\"_blank\" rel=\"external\">http://www.vagrantbox.es/</a></p>\n<p>由于国内下载比较慢，已分享到百度云<br><a id=\"more\"></a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">分享链接</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">vagrant_1.9.5.msi</td>\n<td style=\"text-align:center\">软件</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1kVzFP1H\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1kVzFP1H</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">VirtualBox-5.1.22-115126-Win.exe</td>\n<td style=\"text-align:center\">软件</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1jIQgl6m\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1jIQgl6m</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">centos-7.0-x86_64.box</td>\n<td style=\"text-align:center\">镜像文件</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1o7Zlspk\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1o7Zlspk</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gparted-live-0.28.1-1-i686.iso</td>\n<td style=\"text-align:center\">32位分区live-cd</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1jISiee6\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1jISiee6</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gparted-live-0.28.1-1-amd64.iso</td>\n<td style=\"text-align:center\">64位分区live-cd</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1dFenvvb\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1dFenvvb</a></td>\n</tr>\n</tbody>\n</table>\n<p>上面的gparted iso 文件是分区用的不过没有用到，下载不容易就一块传上来了。</p>\n<h2 id=\"1-3-更改vagrant-存放box的位置\"><a href=\"#1-3-更改vagrant-存放box的位置\" class=\"headerlink\" title=\"1.3. 更改vagrant 存放box的位置\"></a>1.3. 更改vagrant 存放box的位置</h2><p>默认vagrant 添加的box 默认存放位置为</p>\n<blockquote>\n<p>C:\\Users\\当前用户名\\ .vagrant.d\\boxes\\ </p>\n</blockquote>\n<p>可以通过添加环境变量 VAGRANT_HOME 修改存放位置</p>\n<p>例如：VAGRANT_HOME = D:\\Program Files\\VagrantHome</p>\n<h2 id=\"1-4-更改virtualBox-存放镜像目录\"><a href=\"#1-4-更改virtualBox-存放镜像目录\" class=\"headerlink\" title=\"1.4. 更改virtualBox 存放镜像目录\"></a>1.4. 更改virtualBox 存放镜像目录</h2><p>默认目录 </p>\n<blockquote>\n<p>C:\\Users\\当前用户名\\VirtualBox VMs</p>\n</blockquote>\n<p>可以在virtualBox 软件 &gt; 管理 &gt; 全局设置 &gt; 常规 &gt; 默认虚拟电脑位置进行修改</p>\n<p>我修改为</p>\n<blockquote>\n<p>D:\\VirtualBoxVMs</p>\n<h1 id=\"2-启动vagrant\"><a href=\"#2-启动vagrant\" class=\"headerlink\" title=\"2. 启动vagrant\"></a>2. 启动vagrant</h1><h2 id=\"2-1-添加box\"><a href=\"#2-1-添加box\" class=\"headerlink\" title=\"2.1. 添加box\"></a>2.1. 添加box</h2><p>vagrant box add centos7 E:\\软件安装包\\centos-7.0-x86_64.box</p>\n</blockquote>\n<p>查看已添加的box</p>\n<blockquote>\n<p>vagrant box list</p>\n</blockquote>\n<pre><code>D:\\vagrantSpace&gt;vagrant box list\ncentos7 (virtualbox, 0)\n</code></pre><h2 id=\"2-2-初始化\"><a href=\"#2-2-初始化\" class=\"headerlink\" title=\"2.2. 初始化\"></a>2.2. 初始化</h2><p>在准备存放vagrant配置文件的文件夹中执行</p>\n<blockquote>\n<p>vagrant init </p>\n</blockquote>\n<p>会生成 Vagrantfile 文件<br>文件中包含vagrant 配置信息<br>其中有一些配置项的说明  </p>\n<pre><code>config.vm.box = &quot;base&quot; 修改base 为centos7 即 boxlist 中的名字  \nconfig.vm.synced_folder &quot;E:\\&quot;, &quot;/vagrant_data&quot; 共享文件夹\n</code></pre><p>其他配置请自行百度</p>\n<h3 id=\"2-2-1-vagrant-配置文件\"><a href=\"#2-2-1-vagrant-配置文件\" class=\"headerlink\" title=\"2.2.1. vagrant 配置文件\"></a>2.2.1. vagrant 配置文件</h3><p>下面的是我的配置</p>\n<pre><code># -*- mode: ruby -*-\n# vi: set ft=ruby :\nVagrant.configure(&quot;2&quot;) do |config|\n  config.vm.box = &quot;centos7&quot;\n  config.vm.define :java do |java|\n    java.vm.provider &quot;virtualbox&quot; do |v|\n        v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;java&quot;, &quot;--memory&quot;, &quot;512&quot;]\n    end\n    java.vm.box = &quot;centos7&quot;\n    java.vm.hostname = &quot;java&quot;\n    java.vm.network :private_network, ip: &quot;192.168.33.10&quot;\n  end\n  config.vm.define :linux do |linux|\n    linux.vm.provider &quot;virtualbox&quot; do |v|\n        v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;linux&quot;, &quot;--memory&quot;, &quot;512&quot;]\n    end\n    linux.vm.box = &quot;centos7&quot;\n    linux.vm.hostname = &quot;linux&quot;\n    linux.vm.network :private_network, ip: &quot;192.168.33.11&quot;\n  end\nend\n</code></pre><h2 id=\"2-3-启动虚拟机\"><a href=\"#2-3-启动虚拟机\" class=\"headerlink\" title=\"2.3. 启动虚拟机\"></a>2.3. 启动虚拟机</h2><blockquote>\n<p>vagrant up linux </p>\n</blockquote>\n<p>第一次会初始化虚拟机,并启动,成功后查看虚拟机运行状态</p>\n<blockquote>\n<p>vagrant global-status</p>\n</blockquote>\n<pre><code>D:\\vagrantSpace&gt;vagrant global-status\nid       name   provider   state   directory\n-----------------------------------------------------------------------\n1d24610  linux  virtualbox running D:/vagrantSpace\n</code></pre><p>这个时候就可以通过ssh登录虚拟机了。默认用户和密码都是 vagrant</p>\n<hr>\n<p>下面是修改磁盘大小,如果觉得没有必要,可以不修改,直接玩就可以啦</p>\n<h1 id=\"3-修改虚拟机磁盘大小\"><a href=\"#3-修改虚拟机磁盘大小\" class=\"headerlink\" title=\"3. 修改虚拟机磁盘大小\"></a>3. 修改虚拟机磁盘大小</h1><p>vagrant 默认创建的磁盘 根目录下只有10G.觉得太小,修改为1T.</p>\n<ul>\n<li>关闭 linux</li>\n</ul>\n<blockquote>\n<p>vagrant halt linux</p>\n</blockquote>\n<ul>\n<li>进入到 D:\\VirtualBoxVMs文件夹下 即 之前设置的virtualBox的路径,里面会有个刚才创建的linux系统的文件夹 D:\\VirtualBoxVMs\\linux</li>\n<li><p>加入virtualBox 安装目录加入环境变量path</p>\n<p>  安装virtualBox后会自动加入 VBOX_MSI_INSTALL_PATH 环境变量,直接把这个路径加到path后面即可. </p>\n</li>\n</ul>\n<blockquote>\n<p>%VBOX_MSI_INSTALL_PATH%</p>\n</blockquote>\n<ul>\n<li>通过下面命令 复制一份磁盘文件, .vmdk 文件直接修改大小会报错</li>\n</ul>\n<blockquote>\n<p>vboxmanage clonehd box-disk1.vmdk box.vdi –format vdi</p>\n</blockquote>\n<pre><code>D:\\VirtualBoxVMs\\linux&gt;vboxmanage clonehd box-disk1.vmdk box.vdi --format vdi\n0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%\nClone medium created in format &apos;vdi&apos;. UUID: 1431c156-a3b1-4374-b196-36450edecd9e\n</code></pre><ul>\n<li>修改vdi 文件大小,命令如下</li>\n</ul>\n<blockquote>\n<p>vboxmanage modifyhd box.vdi –resize 1048576</p>\n</blockquote>\n<pre><code>D:\\VirtualBoxVMs\\linux&gt;vboxmanage modifyhd box.vdi --resize 1048576\n0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%\n</code></pre><ul>\n<li>打开虚拟机,修改 linux 磁盘文件为 box.vdi</li>\n</ul>\n<p><img src=\"https://static.oschina.net/uploads/img/201707/02192036_F9Jv.jpg\" alt=\"\"></p>\n<p>修改后</p>\n<p><img src=\"https://static.oschina.net/uploads/img/201707/02192410_T07t.jpg\" alt=\"\"></p>\n<ul>\n<li>查看D:\\VirtualBoxVMs\\linux 文件夹下linux.vbox 文件<br>删除 原来的harddisk <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;HardDisk uuid=&quot;&#123;3417d3e1-fcfd-410c-8df6-adba5f8b01bb&#125;&quot; location=&quot;box-disk1.vmdk&quot; format=&quot;VMDK&quot; type=&quot;Normal&quot;/&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>保留新的harddisk<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;HardDisk uuid=&quot;&#123;417759f6-4e5d-4a45-9ce1-1351b15c5a7d&#125;&quot; location=&quot;box-linux.vdi&quot; format=&quot;VDI&quot; type=&quot;Normal&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>删除原来的磁盘文件, box-disk1.vmdk。这个可以以后再删除也可以，防止操作中出现什么错误。</li>\n<li>启动虚拟机<blockquote>\n<p>vagrant up linux</p>\n</blockquote>\n</li>\n</ul>\n<p>切换到root，密码为vagrant</p>\n<blockquote>\n<p>su</p>\n</blockquote>\n<p>查看磁盘</p>\n<blockquote>\n<p>fdisk -l</p>\n</blockquote>\n<pre><code>Gerät  boot.     Anfang        Ende     Blöcke   Id  System\n/dev/sda1   *        2048     1026047      512000   83  Linux\n/dev/sda2         1026048    20766719     9870336   8e  Linux LVM\n</code></pre><p>可以看到一共还是10G,并不是1T,我们需要加一个磁盘sda3</p>\n<pre><code>fdisk /dev/sda\nn\np\n3\n回车\n回车\n</code></pre><p>更改磁盘类型为 lvm</p>\n<pre><code>t\n3\n8e\n</code></pre><p>查看磁盘</p>\n<pre><code>p\n</code></pre><p>全部操作如下</p>\n<pre><code>Befehl (m für Hilfe): n\nPartition type:\n   p   primary (2 primary, 0 extended, 2 free)\n   e   Erweiterte\nSelect (default p): p\nPartitionsnummer (3,4, default 3): 3\nErster Sektor (20766720-2147483647, Vorgabe: 20766720): \nBenutze den Standardwert 20766720\nLast Sektor, +Sektoren or +size{K,M,G} (20766720-2147483647, Vorgabe: 2147483647): \nBenutze den Standardwert 2147483647\nPartition 3 of type Linux and of size 1014,1 GiB is set\n\nBefehl (m für Hilfe): t\nPartitionsnummer (1-3, default 3): 3\nHex code (type L to list all codes): 8e\nChanged type of partition &apos;Linux&apos; to &apos;Linux LVM&apos;\n\nBefehl (m für Hilfe): p\n\nDisk /dev/sda: 1099.5 GB, 1099511627776 bytes, 2147483648 sectors\nUnits = Sektoren of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk label type: dos\nDisk identifier: 0x00095a8e\n\n   Gerät  boot.     Anfang        Ende     Blöcke   Id  System\n/dev/sda1   *        2048     1026047      512000   83  Linux\n/dev/sda2         1026048    20766719     9870336   8e  Linux LVM\n/dev/sda3        20766720  2147483647  1063358464   8e  Linux LVM\n</code></pre><p>保存退出</p>\n<pre><code>w\n</code></pre><p>重启虚拟机</p>\n<pre><code>reboot\n</code></pre><p>查看当前 Volume Group</p>\n<pre><code>vgdisplay\n</code></pre><p>信息如下</p>\n<pre><code>[root@linux vagrant]# vgdisplay\n  --- Volume group ---\n  VG Name               centos\n  System ID             \n  Format                lvm2\n  Metadata Areas        1\n  Metadata Sequence No  3\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                0\n  Cur LV                2\n  Open LV               2\n  Max PV                0\n  Cur PV                1\n  Act PV                1\n  VG Size               9,41 GiB\n  PE Size               4,00 MiB\n  Total PE              2409\n  Alloc PE / Size       2399 / 9,37 GiB\n  Free  PE / Size       10 / 40,00 MiB\n  VG UUID               NJWfOH-An0K-Hm9Q-8Tjs-yq2x-ZWXi-L2vP7i\n</code></pre><p>名称为 centos，可调整大小（resizable），当前大小为 9,41GB。活动的 LVM 卷有</p>\n<pre><code>lvscan\n\n[root@linux vagrant]# lvscan\nACTIVE            &apos;/dev/centos/swap&apos; [1016,00 MiB] inherit\nACTIVE            &apos;/dev/centos/root&apos; [8,38 GiB] inherit\n</code></pre><p>先将分配过来的新磁盘空间创建为一个新的物理卷</p>\n<pre><code>pvcreate /dev/sda3\n\n[root@linux vagrant]# pvcreate /dev/sda3\nPhysical volume &quot;/dev/sda3&quot; successfully created\n</code></pre><p>然后使用新的物理卷来扩展 LVM 的 centos</p>\n<pre><code>vgextend centos /dev/sda3\n\n[root@linux vagrant]# vgextend centos /dev/sda3\nVolume group &quot;centos&quot; successfully extended\n</code></pre><p>然后扩展 LVM 的逻辑卷 centos-lv_root</p>\n<pre><code>lvextend /dev/centos/root /dev/sda3\n\n[root@linux vagrant]# lvextend /dev/centos/root /dev/sda3\nSize of logical volume centos/root changed from 8,38 GiB (2145 extents) to 1022,47 GiB (261753 extents).\nLogical volume root successfully resized\n</code></pre><p>最后，调整逻辑卷文件系统的大小</p>\n<pre><code>vagrant]# resize2fs /dev/centos/root\n\n[root@linux vagrant]# resize2fs /dev/centos/root\nresize2fs 1.42.9 (28-Dec-2013)\nresize2fs: Ungültige magische Zahl im Superblock beim Versuch, /dev/centos/root zu öffnen\nKann keinen gültigen Dateisystem-Superblock finden.\n</code></pre><p>完成。看看效果,可以看到root下变成了1T</p>\n<pre><code>lvscan\n\n[root@linux vagrant]# lvscan\n  ACTIVE            &apos;/dev/centos/swap&apos; [1016,00 MiB] inherit\n  ACTIVE            &apos;/dev/centos/root&apos; [1022,47 GiB] inherit\n</code></pre><p>但是,查看根目录下面分配大小, 跟目录还是为8.4G</p>\n<pre><code>[root@linux vagrant]# df -h\nDateisystem             Größe Benutzt Verf. Verw% Eingehängt auf\n/dev/mapper/centos-root  8,4G    1,1G  7,4G   13% /\ndevtmpfs                 236M       0  236M    0% /dev\ntmpfs                    245M       0  245M    0% /dev/shm\ntmpfs                    245M    4,3M  241M    2% /run\ntmpfs                    245M       0  245M    0% /sys/fs/cgroup\n/dev/sda1                497M    118M  379M   24% /boot  \n</code></pre><p>用 xfs_growfs 对扩容后的 LV 进行 xfs 格式大小调整</p>\n<pre><code>xfs_growfs /dev/centos/root\n\n[root@linux vagrant]# xfs_growfs /dev/centos/root\nmeta-data=/dev/mapper/centos-root isize=256    agcount=4, agsize=549120 blks\n         =                       sectsz=512   attr=2, projid32bit=1\n         =                       crc=0        finobt=0\ndata     =                       bsize=4096   blocks=2196480, imaxpct=25\n         =                       sunit=0      swidth=0 blks\nnaming   =version 2              bsize=4096   ascii-ci=0 ftype=0\nlog      =Intern                 bsize=4096   blocks=2560, version=2\n         =                       sectsz=512   sunit=0 blks, lazy-count=1\nrealtime =keine                  extsz=4096   blocks=0, rtextents=0\nDatenblöcke von 2196480 auf 268035072 geändert.\n</code></pre><p>再查看</p>\n<pre><code>[root@linux vagrant]# df -h\nDateisystem             Größe Benutzt Verf. Verw% Eingehängt auf\n/dev/mapper/centos-root 1023G    1,1G 1022G    1% /\ndevtmpfs                 236M       0  236M    0% /dev\ntmpfs                    245M       0  245M    0% /dev/shm\ntmpfs                    245M    4,3M  241M    2% /run\ntmpfs                    245M       0  245M    0% /sys/fs/cgroup\n/dev/sda1                497M    118M  379M   24% /boot\n</code></pre><p>可以看到根目录大小已经变成1T了</p>\n<p><a href=\"http://pan.baidu.com/s/1dEC3ePr\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1dEC3ePr</a></p>\n<p>由于不了解linux,修改磁盘大小费了很多事.完成后打了包,做成了新的box，方便以后直接使用。</p>\n<h1 id=\"4-其他\"><a href=\"#4-其他\" class=\"headerlink\" title=\"4. 其他\"></a>4. 其他</h1><h2 id=\"4-1-修改linux-语言\"><a href=\"#4-1-修改linux-语言\" class=\"headerlink\" title=\"4.1. 修改linux 语言\"></a>4.1. 修改linux 语言</h2><blockquote>\n<p>/etc/locale.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LANG=&apos;en_US.UTF-8&apos;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"5-参考博客\"><a href=\"#5-参考博客\" class=\"headerlink\" title=\"5. 参考博客:\"></a>5. 参考博客:</h1><h2 id=\"5-1-调整-VirtualBox-虚拟机的磁盘大小\"><a href=\"#5-1-调整-VirtualBox-虚拟机的磁盘大小\" class=\"headerlink\" title=\"5.1. 调整 VirtualBox 虚拟机的磁盘大小\"></a>5.1. 调整 VirtualBox 虚拟机的磁盘大小</h2><p><a href=\"https://cnzhx.net/blog/resizing-lvm-centos-virtualbox-guest/\" target=\"_blank\" rel=\"external\">https://cnzhx.net/blog/resizing-lvm-centos-virtualbox-guest/</a>  </p>\n<h2 id=\"5-2-手把手教你给-CentOS-7-添加硬盘及扩容-LVM\"><a href=\"#5-2-手把手教你给-CentOS-7-添加硬盘及扩容-LVM\" class=\"headerlink\" title=\"5.2. 手把手教你给 CentOS 7 添加硬盘及扩容(LVM)\"></a>5.2. 手把手教你给 CentOS 7 添加硬盘及扩容(LVM)</h2><p><a href=\"https://aurthurxlc.github.io/Aurthur-2017/Centos-7-extend-lvm-volume.html\" target=\"_blank\" rel=\"external\">https://aurthurxlc.github.io/Aurthur-2017/Centos-7-extend-lvm-volume.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-安装vagrant\"><a href=\"#1-安装vagrant\" class=\"headerlink\" title=\"1. 安装vagrant\"></a>1. 安装vagrant</h1><h2 id=\"1-1-本机环境\"><a href=\"#1-1-本机环境\" class=\"headerlink\" title=\"1.1. 本机环境\"></a>1.1. 本机环境</h2><p>系统环境 ： win10 64 系统</p>\n<h2 id=\"1-2-软件及镜像\"><a href=\"#1-2-软件及镜像\" class=\"headerlink\" title=\"1.2. 软件及镜像\"></a>1.2. 软件及镜像</h2><p>vagrant 官网 <a href=\"https://www.vagrantup.com/\" target=\"_blank\" rel=\"external\">https://www.vagrantup.com/</a><br>vagrant 需要依赖虚拟机 我用的 virtualBox<br>virtualBox 官网 <a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"external\">https://www.virtualbox.org/</a><br>virtualBox 镜像 在vagrant官网中可以下载<br>镜像下载 <a href=\"http://www.vagrantbox.es/\" target=\"_blank\" rel=\"external\">http://www.vagrantbox.es/</a></p>\n<p>由于国内下载比较慢，已分享到百度云<br>","more":"</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">分享链接</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">vagrant_1.9.5.msi</td>\n<td style=\"text-align:center\">软件</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1kVzFP1H\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1kVzFP1H</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">VirtualBox-5.1.22-115126-Win.exe</td>\n<td style=\"text-align:center\">软件</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1jIQgl6m\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1jIQgl6m</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">centos-7.0-x86_64.box</td>\n<td style=\"text-align:center\">镜像文件</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1o7Zlspk\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1o7Zlspk</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gparted-live-0.28.1-1-i686.iso</td>\n<td style=\"text-align:center\">32位分区live-cd</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1jISiee6\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1jISiee6</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gparted-live-0.28.1-1-amd64.iso</td>\n<td style=\"text-align:center\">64位分区live-cd</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1dFenvvb\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1dFenvvb</a></td>\n</tr>\n</tbody>\n</table>\n<p>上面的gparted iso 文件是分区用的不过没有用到，下载不容易就一块传上来了。</p>\n<h2 id=\"1-3-更改vagrant-存放box的位置\"><a href=\"#1-3-更改vagrant-存放box的位置\" class=\"headerlink\" title=\"1.3. 更改vagrant 存放box的位置\"></a>1.3. 更改vagrant 存放box的位置</h2><p>默认vagrant 添加的box 默认存放位置为</p>\n<blockquote>\n<p>C:\\Users\\当前用户名\\ .vagrant.d\\boxes\\ </p>\n</blockquote>\n<p>可以通过添加环境变量 VAGRANT_HOME 修改存放位置</p>\n<p>例如：VAGRANT_HOME = D:\\Program Files\\VagrantHome</p>\n<h2 id=\"1-4-更改virtualBox-存放镜像目录\"><a href=\"#1-4-更改virtualBox-存放镜像目录\" class=\"headerlink\" title=\"1.4. 更改virtualBox 存放镜像目录\"></a>1.4. 更改virtualBox 存放镜像目录</h2><p>默认目录 </p>\n<blockquote>\n<p>C:\\Users\\当前用户名\\VirtualBox VMs</p>\n</blockquote>\n<p>可以在virtualBox 软件 &gt; 管理 &gt; 全局设置 &gt; 常规 &gt; 默认虚拟电脑位置进行修改</p>\n<p>我修改为</p>\n<blockquote>\n<p>D:\\VirtualBoxVMs</p>\n<h1 id=\"2-启动vagrant\"><a href=\"#2-启动vagrant\" class=\"headerlink\" title=\"2. 启动vagrant\"></a>2. 启动vagrant</h1><h2 id=\"2-1-添加box\"><a href=\"#2-1-添加box\" class=\"headerlink\" title=\"2.1. 添加box\"></a>2.1. 添加box</h2><p>vagrant box add centos7 E:\\软件安装包\\centos-7.0-x86_64.box</p>\n</blockquote>\n<p>查看已添加的box</p>\n<blockquote>\n<p>vagrant box list</p>\n</blockquote>\n<pre><code>D:\\vagrantSpace&gt;vagrant box list\ncentos7 (virtualbox, 0)\n</code></pre><h2 id=\"2-2-初始化\"><a href=\"#2-2-初始化\" class=\"headerlink\" title=\"2.2. 初始化\"></a>2.2. 初始化</h2><p>在准备存放vagrant配置文件的文件夹中执行</p>\n<blockquote>\n<p>vagrant init </p>\n</blockquote>\n<p>会生成 Vagrantfile 文件<br>文件中包含vagrant 配置信息<br>其中有一些配置项的说明  </p>\n<pre><code>config.vm.box = &quot;base&quot; 修改base 为centos7 即 boxlist 中的名字  \nconfig.vm.synced_folder &quot;E:\\&quot;, &quot;/vagrant_data&quot; 共享文件夹\n</code></pre><p>其他配置请自行百度</p>\n<h3 id=\"2-2-1-vagrant-配置文件\"><a href=\"#2-2-1-vagrant-配置文件\" class=\"headerlink\" title=\"2.2.1. vagrant 配置文件\"></a>2.2.1. vagrant 配置文件</h3><p>下面的是我的配置</p>\n<pre><code># -*- mode: ruby -*-\n# vi: set ft=ruby :\nVagrant.configure(&quot;2&quot;) do |config|\n  config.vm.box = &quot;centos7&quot;\n  config.vm.define :java do |java|\n    java.vm.provider &quot;virtualbox&quot; do |v|\n        v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;java&quot;, &quot;--memory&quot;, &quot;512&quot;]\n    end\n    java.vm.box = &quot;centos7&quot;\n    java.vm.hostname = &quot;java&quot;\n    java.vm.network :private_network, ip: &quot;192.168.33.10&quot;\n  end\n  config.vm.define :linux do |linux|\n    linux.vm.provider &quot;virtualbox&quot; do |v|\n        v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;linux&quot;, &quot;--memory&quot;, &quot;512&quot;]\n    end\n    linux.vm.box = &quot;centos7&quot;\n    linux.vm.hostname = &quot;linux&quot;\n    linux.vm.network :private_network, ip: &quot;192.168.33.11&quot;\n  end\nend\n</code></pre><h2 id=\"2-3-启动虚拟机\"><a href=\"#2-3-启动虚拟机\" class=\"headerlink\" title=\"2.3. 启动虚拟机\"></a>2.3. 启动虚拟机</h2><blockquote>\n<p>vagrant up linux </p>\n</blockquote>\n<p>第一次会初始化虚拟机,并启动,成功后查看虚拟机运行状态</p>\n<blockquote>\n<p>vagrant global-status</p>\n</blockquote>\n<pre><code>D:\\vagrantSpace&gt;vagrant global-status\nid       name   provider   state   directory\n-----------------------------------------------------------------------\n1d24610  linux  virtualbox running D:/vagrantSpace\n</code></pre><p>这个时候就可以通过ssh登录虚拟机了。默认用户和密码都是 vagrant</p>\n<hr>\n<p>下面是修改磁盘大小,如果觉得没有必要,可以不修改,直接玩就可以啦</p>\n<h1 id=\"3-修改虚拟机磁盘大小\"><a href=\"#3-修改虚拟机磁盘大小\" class=\"headerlink\" title=\"3. 修改虚拟机磁盘大小\"></a>3. 修改虚拟机磁盘大小</h1><p>vagrant 默认创建的磁盘 根目录下只有10G.觉得太小,修改为1T.</p>\n<ul>\n<li>关闭 linux</li>\n</ul>\n<blockquote>\n<p>vagrant halt linux</p>\n</blockquote>\n<ul>\n<li>进入到 D:\\VirtualBoxVMs文件夹下 即 之前设置的virtualBox的路径,里面会有个刚才创建的linux系统的文件夹 D:\\VirtualBoxVMs\\linux</li>\n<li><p>加入virtualBox 安装目录加入环境变量path</p>\n<p>  安装virtualBox后会自动加入 VBOX_MSI_INSTALL_PATH 环境变量,直接把这个路径加到path后面即可. </p>\n</li>\n</ul>\n<blockquote>\n<p>%VBOX_MSI_INSTALL_PATH%</p>\n</blockquote>\n<ul>\n<li>通过下面命令 复制一份磁盘文件, .vmdk 文件直接修改大小会报错</li>\n</ul>\n<blockquote>\n<p>vboxmanage clonehd box-disk1.vmdk box.vdi –format vdi</p>\n</blockquote>\n<pre><code>D:\\VirtualBoxVMs\\linux&gt;vboxmanage clonehd box-disk1.vmdk box.vdi --format vdi\n0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%\nClone medium created in format &apos;vdi&apos;. UUID: 1431c156-a3b1-4374-b196-36450edecd9e\n</code></pre><ul>\n<li>修改vdi 文件大小,命令如下</li>\n</ul>\n<blockquote>\n<p>vboxmanage modifyhd box.vdi –resize 1048576</p>\n</blockquote>\n<pre><code>D:\\VirtualBoxVMs\\linux&gt;vboxmanage modifyhd box.vdi --resize 1048576\n0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%\n</code></pre><ul>\n<li>打开虚拟机,修改 linux 磁盘文件为 box.vdi</li>\n</ul>\n<p><img src=\"https://static.oschina.net/uploads/img/201707/02192036_F9Jv.jpg\" alt=\"\"></p>\n<p>修改后</p>\n<p><img src=\"https://static.oschina.net/uploads/img/201707/02192410_T07t.jpg\" alt=\"\"></p>\n<ul>\n<li>查看D:\\VirtualBoxVMs\\linux 文件夹下linux.vbox 文件<br>删除 原来的harddisk <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;HardDisk uuid=&quot;&#123;3417d3e1-fcfd-410c-8df6-adba5f8b01bb&#125;&quot; location=&quot;box-disk1.vmdk&quot; format=&quot;VMDK&quot; type=&quot;Normal&quot;/&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>保留新的harddisk<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;HardDisk uuid=&quot;&#123;417759f6-4e5d-4a45-9ce1-1351b15c5a7d&#125;&quot; location=&quot;box-linux.vdi&quot; format=&quot;VDI&quot; type=&quot;Normal&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>删除原来的磁盘文件, box-disk1.vmdk。这个可以以后再删除也可以，防止操作中出现什么错误。</li>\n<li>启动虚拟机<blockquote>\n<p>vagrant up linux</p>\n</blockquote>\n</li>\n</ul>\n<p>切换到root，密码为vagrant</p>\n<blockquote>\n<p>su</p>\n</blockquote>\n<p>查看磁盘</p>\n<blockquote>\n<p>fdisk -l</p>\n</blockquote>\n<pre><code>Gerät  boot.     Anfang        Ende     Blöcke   Id  System\n/dev/sda1   *        2048     1026047      512000   83  Linux\n/dev/sda2         1026048    20766719     9870336   8e  Linux LVM\n</code></pre><p>可以看到一共还是10G,并不是1T,我们需要加一个磁盘sda3</p>\n<pre><code>fdisk /dev/sda\nn\np\n3\n回车\n回车\n</code></pre><p>更改磁盘类型为 lvm</p>\n<pre><code>t\n3\n8e\n</code></pre><p>查看磁盘</p>\n<pre><code>p\n</code></pre><p>全部操作如下</p>\n<pre><code>Befehl (m für Hilfe): n\nPartition type:\n   p   primary (2 primary, 0 extended, 2 free)\n   e   Erweiterte\nSelect (default p): p\nPartitionsnummer (3,4, default 3): 3\nErster Sektor (20766720-2147483647, Vorgabe: 20766720): \nBenutze den Standardwert 20766720\nLast Sektor, +Sektoren or +size{K,M,G} (20766720-2147483647, Vorgabe: 2147483647): \nBenutze den Standardwert 2147483647\nPartition 3 of type Linux and of size 1014,1 GiB is set\n\nBefehl (m für Hilfe): t\nPartitionsnummer (1-3, default 3): 3\nHex code (type L to list all codes): 8e\nChanged type of partition &apos;Linux&apos; to &apos;Linux LVM&apos;\n\nBefehl (m für Hilfe): p\n\nDisk /dev/sda: 1099.5 GB, 1099511627776 bytes, 2147483648 sectors\nUnits = Sektoren of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk label type: dos\nDisk identifier: 0x00095a8e\n\n   Gerät  boot.     Anfang        Ende     Blöcke   Id  System\n/dev/sda1   *        2048     1026047      512000   83  Linux\n/dev/sda2         1026048    20766719     9870336   8e  Linux LVM\n/dev/sda3        20766720  2147483647  1063358464   8e  Linux LVM\n</code></pre><p>保存退出</p>\n<pre><code>w\n</code></pre><p>重启虚拟机</p>\n<pre><code>reboot\n</code></pre><p>查看当前 Volume Group</p>\n<pre><code>vgdisplay\n</code></pre><p>信息如下</p>\n<pre><code>[root@linux vagrant]# vgdisplay\n  --- Volume group ---\n  VG Name               centos\n  System ID             \n  Format                lvm2\n  Metadata Areas        1\n  Metadata Sequence No  3\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                0\n  Cur LV                2\n  Open LV               2\n  Max PV                0\n  Cur PV                1\n  Act PV                1\n  VG Size               9,41 GiB\n  PE Size               4,00 MiB\n  Total PE              2409\n  Alloc PE / Size       2399 / 9,37 GiB\n  Free  PE / Size       10 / 40,00 MiB\n  VG UUID               NJWfOH-An0K-Hm9Q-8Tjs-yq2x-ZWXi-L2vP7i\n</code></pre><p>名称为 centos，可调整大小（resizable），当前大小为 9,41GB。活动的 LVM 卷有</p>\n<pre><code>lvscan\n\n[root@linux vagrant]# lvscan\nACTIVE            &apos;/dev/centos/swap&apos; [1016,00 MiB] inherit\nACTIVE            &apos;/dev/centos/root&apos; [8,38 GiB] inherit\n</code></pre><p>先将分配过来的新磁盘空间创建为一个新的物理卷</p>\n<pre><code>pvcreate /dev/sda3\n\n[root@linux vagrant]# pvcreate /dev/sda3\nPhysical volume &quot;/dev/sda3&quot; successfully created\n</code></pre><p>然后使用新的物理卷来扩展 LVM 的 centos</p>\n<pre><code>vgextend centos /dev/sda3\n\n[root@linux vagrant]# vgextend centos /dev/sda3\nVolume group &quot;centos&quot; successfully extended\n</code></pre><p>然后扩展 LVM 的逻辑卷 centos-lv_root</p>\n<pre><code>lvextend /dev/centos/root /dev/sda3\n\n[root@linux vagrant]# lvextend /dev/centos/root /dev/sda3\nSize of logical volume centos/root changed from 8,38 GiB (2145 extents) to 1022,47 GiB (261753 extents).\nLogical volume root successfully resized\n</code></pre><p>最后，调整逻辑卷文件系统的大小</p>\n<pre><code>vagrant]# resize2fs /dev/centos/root\n\n[root@linux vagrant]# resize2fs /dev/centos/root\nresize2fs 1.42.9 (28-Dec-2013)\nresize2fs: Ungültige magische Zahl im Superblock beim Versuch, /dev/centos/root zu öffnen\nKann keinen gültigen Dateisystem-Superblock finden.\n</code></pre><p>完成。看看效果,可以看到root下变成了1T</p>\n<pre><code>lvscan\n\n[root@linux vagrant]# lvscan\n  ACTIVE            &apos;/dev/centos/swap&apos; [1016,00 MiB] inherit\n  ACTIVE            &apos;/dev/centos/root&apos; [1022,47 GiB] inherit\n</code></pre><p>但是,查看根目录下面分配大小, 跟目录还是为8.4G</p>\n<pre><code>[root@linux vagrant]# df -h\nDateisystem             Größe Benutzt Verf. Verw% Eingehängt auf\n/dev/mapper/centos-root  8,4G    1,1G  7,4G   13% /\ndevtmpfs                 236M       0  236M    0% /dev\ntmpfs                    245M       0  245M    0% /dev/shm\ntmpfs                    245M    4,3M  241M    2% /run\ntmpfs                    245M       0  245M    0% /sys/fs/cgroup\n/dev/sda1                497M    118M  379M   24% /boot  \n</code></pre><p>用 xfs_growfs 对扩容后的 LV 进行 xfs 格式大小调整</p>\n<pre><code>xfs_growfs /dev/centos/root\n\n[root@linux vagrant]# xfs_growfs /dev/centos/root\nmeta-data=/dev/mapper/centos-root isize=256    agcount=4, agsize=549120 blks\n         =                       sectsz=512   attr=2, projid32bit=1\n         =                       crc=0        finobt=0\ndata     =                       bsize=4096   blocks=2196480, imaxpct=25\n         =                       sunit=0      swidth=0 blks\nnaming   =version 2              bsize=4096   ascii-ci=0 ftype=0\nlog      =Intern                 bsize=4096   blocks=2560, version=2\n         =                       sectsz=512   sunit=0 blks, lazy-count=1\nrealtime =keine                  extsz=4096   blocks=0, rtextents=0\nDatenblöcke von 2196480 auf 268035072 geändert.\n</code></pre><p>再查看</p>\n<pre><code>[root@linux vagrant]# df -h\nDateisystem             Größe Benutzt Verf. Verw% Eingehängt auf\n/dev/mapper/centos-root 1023G    1,1G 1022G    1% /\ndevtmpfs                 236M       0  236M    0% /dev\ntmpfs                    245M       0  245M    0% /dev/shm\ntmpfs                    245M    4,3M  241M    2% /run\ntmpfs                    245M       0  245M    0% /sys/fs/cgroup\n/dev/sda1                497M    118M  379M   24% /boot\n</code></pre><p>可以看到根目录大小已经变成1T了</p>\n<p><a href=\"http://pan.baidu.com/s/1dEC3ePr\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1dEC3ePr</a></p>\n<p>由于不了解linux,修改磁盘大小费了很多事.完成后打了包,做成了新的box，方便以后直接使用。</p>\n<h1 id=\"4-其他\"><a href=\"#4-其他\" class=\"headerlink\" title=\"4. 其他\"></a>4. 其他</h1><h2 id=\"4-1-修改linux-语言\"><a href=\"#4-1-修改linux-语言\" class=\"headerlink\" title=\"4.1. 修改linux 语言\"></a>4.1. 修改linux 语言</h2><blockquote>\n<p>/etc/locale.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LANG=&apos;en_US.UTF-8&apos;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"5-参考博客\"><a href=\"#5-参考博客\" class=\"headerlink\" title=\"5. 参考博客:\"></a>5. 参考博客:</h1><h2 id=\"5-1-调整-VirtualBox-虚拟机的磁盘大小\"><a href=\"#5-1-调整-VirtualBox-虚拟机的磁盘大小\" class=\"headerlink\" title=\"5.1. 调整 VirtualBox 虚拟机的磁盘大小\"></a>5.1. 调整 VirtualBox 虚拟机的磁盘大小</h2><p><a href=\"https://cnzhx.net/blog/resizing-lvm-centos-virtualbox-guest/\" target=\"_blank\" rel=\"external\">https://cnzhx.net/blog/resizing-lvm-centos-virtualbox-guest/</a>  </p>\n<h2 id=\"5-2-手把手教你给-CentOS-7-添加硬盘及扩容-LVM\"><a href=\"#5-2-手把手教你给-CentOS-7-添加硬盘及扩容-LVM\" class=\"headerlink\" title=\"5.2. 手把手教你给 CentOS 7 添加硬盘及扩容(LVM)\"></a>5.2. 手把手教你给 CentOS 7 添加硬盘及扩容(LVM)</h2><p><a href=\"https://aurthurxlc.github.io/Aurthur-2017/Centos-7-extend-lvm-volume.html\" target=\"_blank\" rel=\"external\">https://aurthurxlc.github.io/Aurthur-2017/Centos-7-extend-lvm-volume.html</a></p>"},{"title":"tomcat+idea远程调试","toc":true,"date":"2018-01-24T07:03:02.000Z","scaffolds":null,"_content":"# 1. 测试的web项目\n```java\npackage com.signalfire.servlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n/**\n * Created by jk on 2017/12/12.\n */\npublic class HelloServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"111111111111111111\");\n        resp.getWriter().write(\"hello baby\");\n        resp.getWriter().flush();\n    }\n}\n```\n\n```xml\n<!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n<web-app>\n  <display-name>Archetype Created Web Application</display-name>\n  <servlet>\n    <servlet-name>my</servlet-name>\n    <servlet-class>com.signalfire.servlet.HelloServlet</servlet-class>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>my</servlet-name>\n    <url-pattern>/*</url-pattern>\n  </servlet-mapping>\n</web-app>\n```\n# 2. tomcat\n- 打war包部署到tomcat中\n- 使用默认配置启动tomcat调试\n```\n[root@mytest bin]# ./catalina.sh jpda start\n```\n默认情况下，远程调试的默认端口为8000，可以通过JPDA_ADDRESS进行配置，指定自定义的端口，另外，还有两个可以配置的参数\n* JPDA_TRANSPORT：即调试器和虚拟机之间数据的传输方式，默认值是dt_socket\n* JPDA_SUSPEND：即JVM启动后是否立即挂起，默认是n\n可以在catalina.sh中进行配置：\n```bash\nJPDA_TRANSPORT=dt_socket  \nJPDA_ADDRESS=5005  \nJPAD_SUSPEND=n  \n```\n\n# 3. idea配置远程调试\n\n## 3.1. 配置  \n![tomcat+idea远程调试-20171213104020](http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104020.png)  \n![tomcat+idea远程调试-2017121310403](http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-2017121310403.png)  \n## 3.2. debug启动  \n![tomcat+idea远程调试-20171213104146](http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104146.png)\n\n## 3.3. 结果\n![tomcat+idea远程调试-20171213104437](http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104437.png)\n\n![tomcat+idea远程调试-20171213104256](http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104256.png)\n\n# 4. 调试java程序\n在远程服务器上java启动参赛要加上调试的参数：  \n\"-Xdebug -Xrunjdwp:transport=dt_socket,address=2345,server=y,suspend=n\"","source":"_posts/杂记/tomcat+idea远程调试.md","raw":"---\ntitle: tomcat+idea远程调试\ncategories: 学习\ntags:\n  - idea\ntoc: true\ndate: 2018-01-24 15:03:02\nscaffolds:\n---\n# 1. 测试的web项目\n```java\npackage com.signalfire.servlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n/**\n * Created by jk on 2017/12/12.\n */\npublic class HelloServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"111111111111111111\");\n        resp.getWriter().write(\"hello baby\");\n        resp.getWriter().flush();\n    }\n}\n```\n\n```xml\n<!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n<web-app>\n  <display-name>Archetype Created Web Application</display-name>\n  <servlet>\n    <servlet-name>my</servlet-name>\n    <servlet-class>com.signalfire.servlet.HelloServlet</servlet-class>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>my</servlet-name>\n    <url-pattern>/*</url-pattern>\n  </servlet-mapping>\n</web-app>\n```\n# 2. tomcat\n- 打war包部署到tomcat中\n- 使用默认配置启动tomcat调试\n```\n[root@mytest bin]# ./catalina.sh jpda start\n```\n默认情况下，远程调试的默认端口为8000，可以通过JPDA_ADDRESS进行配置，指定自定义的端口，另外，还有两个可以配置的参数\n* JPDA_TRANSPORT：即调试器和虚拟机之间数据的传输方式，默认值是dt_socket\n* JPDA_SUSPEND：即JVM启动后是否立即挂起，默认是n\n可以在catalina.sh中进行配置：\n```bash\nJPDA_TRANSPORT=dt_socket  \nJPDA_ADDRESS=5005  \nJPAD_SUSPEND=n  \n```\n\n# 3. idea配置远程调试\n\n## 3.1. 配置  \n![tomcat+idea远程调试-20171213104020](http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104020.png)  \n![tomcat+idea远程调试-2017121310403](http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-2017121310403.png)  \n## 3.2. debug启动  \n![tomcat+idea远程调试-20171213104146](http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104146.png)\n\n## 3.3. 结果\n![tomcat+idea远程调试-20171213104437](http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104437.png)\n\n![tomcat+idea远程调试-20171213104256](http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104256.png)\n\n# 4. 调试java程序\n在远程服务器上java启动参赛要加上调试的参数：  \n\"-Xdebug -Xrunjdwp:transport=dt_socket,address=2345,server=y,suspend=n\"","slug":"杂记/tomcat+idea远程调试","published":1,"updated":"2018-02-06T07:48:07.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a10003lv4vf4jiin7ov","content":"<h1 id=\"1-测试的web项目\"><a href=\"#1-测试的web项目\" class=\"headerlink\" title=\"1. 测试的web项目\"></a>1. 测试的web项目</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.signalfire.servlet;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Created by jk on 2017/12/12.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"111111111111111111\"</span>);</div><div class=\"line\">        resp.getWriter().write(<span class=\"string\">\"hello baby\"</span>);</div><div class=\"line\">        resp.getWriter().flush();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE web-app PUBLIC</span></div><div class=\"line\"><span class=\"meta\"> \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"</span></div><div class=\"line\"><span class=\"meta\"> \"http://java.sun.com/dtd/web-app_2_3.dtd\" &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Archetype Created Web Application<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>my<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.signalfire.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>my<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"2-tomcat\"><a href=\"#2-tomcat\" class=\"headerlink\" title=\"2. tomcat\"></a>2. tomcat</h1><ul>\n<li>打war包部署到tomcat中</li>\n<li>使用默认配置启动tomcat调试<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@mytest bin]# ./catalina.sh jpda start</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>默认情况下，远程调试的默认端口为8000，可以通过JPDA_ADDRESS进行配置，指定自定义的端口，另外，还有两个可以配置的参数</p>\n<ul>\n<li>JPDA_TRANSPORT：即调试器和虚拟机之间数据的传输方式，默认值是dt_socket</li>\n<li>JPDA_SUSPEND：即JVM启动后是否立即挂起，默认是n<br>可以在catalina.sh中进行配置：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">JPDA_TRANSPORT=dt_socket  </div><div class=\"line\">JPDA_ADDRESS=5005  </div><div class=\"line\">JPAD_SUSPEND=n</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"3-idea配置远程调试\"><a href=\"#3-idea配置远程调试\" class=\"headerlink\" title=\"3. idea配置远程调试\"></a>3. idea配置远程调试</h1><h2 id=\"3-1-配置\"><a href=\"#3-1-配置\" class=\"headerlink\" title=\"3.1. 配置\"></a>3.1. 配置</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104020.png\" alt=\"tomcat+idea远程调试-20171213104020\"><br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-2017121310403.png\" alt=\"tomcat+idea远程调试-2017121310403\">  </p>\n<h2 id=\"3-2-debug启动\"><a href=\"#3-2-debug启动\" class=\"headerlink\" title=\"3.2. debug启动\"></a>3.2. debug启动</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104146.png\" alt=\"tomcat+idea远程调试-20171213104146\"></p>\n<h2 id=\"3-3-结果\"><a href=\"#3-3-结果\" class=\"headerlink\" title=\"3.3. 结果\"></a>3.3. 结果</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104437.png\" alt=\"tomcat+idea远程调试-20171213104437\"></p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104256.png\" alt=\"tomcat+idea远程调试-20171213104256\"></p>\n<h1 id=\"4-调试java程序\"><a href=\"#4-调试java程序\" class=\"headerlink\" title=\"4. 调试java程序\"></a>4. 调试java程序</h1><p>在远程服务器上java启动参赛要加上调试的参数：<br>“-Xdebug -Xrunjdwp:transport=dt_socket,address=2345,server=y,suspend=n”</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-测试的web项目\"><a href=\"#1-测试的web项目\" class=\"headerlink\" title=\"1. 测试的web项目\"></a>1. 测试的web项目</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.signalfire.servlet;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Created by jk on 2017/12/12.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"111111111111111111\"</span>);</div><div class=\"line\">        resp.getWriter().write(<span class=\"string\">\"hello baby\"</span>);</div><div class=\"line\">        resp.getWriter().flush();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE web-app PUBLIC</span></div><div class=\"line\"><span class=\"meta\"> \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"</span></div><div class=\"line\"><span class=\"meta\"> \"http://java.sun.com/dtd/web-app_2_3.dtd\" &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Archetype Created Web Application<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>my<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.signalfire.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>my<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"2-tomcat\"><a href=\"#2-tomcat\" class=\"headerlink\" title=\"2. tomcat\"></a>2. tomcat</h1><ul>\n<li>打war包部署到tomcat中</li>\n<li>使用默认配置启动tomcat调试<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@mytest bin]# ./catalina.sh jpda start</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>默认情况下，远程调试的默认端口为8000，可以通过JPDA_ADDRESS进行配置，指定自定义的端口，另外，还有两个可以配置的参数</p>\n<ul>\n<li>JPDA_TRANSPORT：即调试器和虚拟机之间数据的传输方式，默认值是dt_socket</li>\n<li>JPDA_SUSPEND：即JVM启动后是否立即挂起，默认是n<br>可以在catalina.sh中进行配置：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">JPDA_TRANSPORT=dt_socket  </div><div class=\"line\">JPDA_ADDRESS=5005  </div><div class=\"line\">JPAD_SUSPEND=n</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"3-idea配置远程调试\"><a href=\"#3-idea配置远程调试\" class=\"headerlink\" title=\"3. idea配置远程调试\"></a>3. idea配置远程调试</h1><h2 id=\"3-1-配置\"><a href=\"#3-1-配置\" class=\"headerlink\" title=\"3.1. 配置\"></a>3.1. 配置</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104020.png\" alt=\"tomcat+idea远程调试-20171213104020\"><br><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-2017121310403.png\" alt=\"tomcat+idea远程调试-2017121310403\">  </p>\n<h2 id=\"3-2-debug启动\"><a href=\"#3-2-debug启动\" class=\"headerlink\" title=\"3.2. debug启动\"></a>3.2. debug启动</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104146.png\" alt=\"tomcat+idea远程调试-20171213104146\"></p>\n<h2 id=\"3-3-结果\"><a href=\"#3-3-结果\" class=\"headerlink\" title=\"3.3. 结果\"></a>3.3. 结果</h2><p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104437.png\" alt=\"tomcat+idea远程调试-20171213104437\"></p>\n<p><img src=\"http://ovasdkxqr.bkt.clouddn.com/image/work/tomcat+idea远程调试-20171213104256.png\" alt=\"tomcat+idea远程调试-20171213104256\"></p>\n<h1 id=\"4-调试java程序\"><a href=\"#4-调试java程序\" class=\"headerlink\" title=\"4. 调试java程序\"></a>4. 调试java程序</h1><p>在远程服务器上java启动参赛要加上调试的参数：<br>“-Xdebug -Xrunjdwp:transport=dt_socket,address=2345,server=y,suspend=n”</p>\n"},{"title":"使用多个git账户","toc":true,"date":"2018-01-07T09:36:01.000Z","scaffolds":null,"_content":"\n# 1. 生成两个SSH key\n为了举例方便，这里使用“one”和“two”两个账户。下同。\n```\n$ ssh-keygen -t rsa -C \"one@gmail.com\"\n\n$ ssh-keygen -t rsa -C \"two@gmail.com\"\n```\n不要一路回车，分别在第一个对话的时候输入重命名（id_rsa_one和id_rsa_two），这样会生成两份，包含私钥和公钥的4个文件。\n```\nid_rsa_one\nid_rsa_one.pub\nid_rsa_two\nid_rsa_two.pub\n```\n# 2. 添加私钥\n\n1. 打开ssh-agent\n\n    - 如果你是github官方的bash：\n    ```\n    $ ssh-agent -s\n    ```\n    - 如果你是其它，比如msysgit：\n    ```\n    $ eval $(ssh-agent -s)\n    ```\n\n2. 添加私钥\n\n    ```\n    ssh-agent bash  //不执行这个会报没有权限\n    $ ssh-add ~/.ssh/id_rsa_one\n    $ ssh-add ~/.ssh/id_rsa_two\n    ```\n# 3. 创建config文件\n在.ssh下创建config\n\n```\n    # one(one@gmail.com) \n    Host one.github.com //自定义的映射\n    HostName github.com //git仓库对应的地址\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_one //对应为文件\n    User one   //对应的用户名\n    # two(two@ gmail.com)\n    Host two.github.com\n    HostName github.com   \n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_two\n    User two\n```\n# 4. 部署SSH key\n在github上添加对应的ssh key\n# 5. clone项目方法\n> $ git clone git@`one.github.com`: `one的用户名`/learngit.git  注意是自定义的域名 和用户名（git的用户名）  \n> $ git clone git@`two.github.com`: `two的用户名`/learngit.git \n\n# 6. 其他（与上面没有关联）\n## 6.1. git的三种环境变量\n1. 系统变量。\n    - 存放在git的安装目录下：%Git%\\etc\\gitconfig。\n    - 若使用 git config 时用 --system 选项，读写的就是这个文件：\n    - $ git config --system core.symlinks\n    - 系统变量对所有用户都适用。\n2. 用户变量。\n    - 存放在用户目录下。例如windows xp存放在：C:\\Documents and Settings\\$USER\\.gitconfig。\n    - 若使用 git config 时用 --global 选项，读写的就是这个文件：\n    - $ git config --global user.name\n    - 用户变量只适用于该用户\n3. 本地项目变量\n    - 当前项目的 git 目录中的配置文件（也就是工作目录中的 .git/config 文件）。\n    - 若使用git config 时用 --local 选项，读写的就是这个文件：\n    - $ git config --local remote.origin.url\n    - 本地变量只对当前项目有效。\n\n## 6.2. 查找顺序\n本地 》 用户 》系统\n## 6.3. 其他config命令\n```\n$ git config --list 查看所有环境变量\n$ git config --system --list 查看系统环境变量\n$ git config --global --list 查看用户环境变量\n$ git config --local --list 查看本地环境变量\n$ git config --[system/global/local] [varname] [yourname] 编辑环境变量\n```","source":"_posts/杂记/使用多个git账户.md","raw":"---\ntitle: 使用多个git账户\ncategories: 学习\ntags:\n  - git\ntoc: true\ndate: 2018-01-07 17:36:01\nscaffolds:\n---\n\n# 1. 生成两个SSH key\n为了举例方便，这里使用“one”和“two”两个账户。下同。\n```\n$ ssh-keygen -t rsa -C \"one@gmail.com\"\n\n$ ssh-keygen -t rsa -C \"two@gmail.com\"\n```\n不要一路回车，分别在第一个对话的时候输入重命名（id_rsa_one和id_rsa_two），这样会生成两份，包含私钥和公钥的4个文件。\n```\nid_rsa_one\nid_rsa_one.pub\nid_rsa_two\nid_rsa_two.pub\n```\n# 2. 添加私钥\n\n1. 打开ssh-agent\n\n    - 如果你是github官方的bash：\n    ```\n    $ ssh-agent -s\n    ```\n    - 如果你是其它，比如msysgit：\n    ```\n    $ eval $(ssh-agent -s)\n    ```\n\n2. 添加私钥\n\n    ```\n    ssh-agent bash  //不执行这个会报没有权限\n    $ ssh-add ~/.ssh/id_rsa_one\n    $ ssh-add ~/.ssh/id_rsa_two\n    ```\n# 3. 创建config文件\n在.ssh下创建config\n\n```\n    # one(one@gmail.com) \n    Host one.github.com //自定义的映射\n    HostName github.com //git仓库对应的地址\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_one //对应为文件\n    User one   //对应的用户名\n    # two(two@ gmail.com)\n    Host two.github.com\n    HostName github.com   \n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa_two\n    User two\n```\n# 4. 部署SSH key\n在github上添加对应的ssh key\n# 5. clone项目方法\n> $ git clone git@`one.github.com`: `one的用户名`/learngit.git  注意是自定义的域名 和用户名（git的用户名）  \n> $ git clone git@`two.github.com`: `two的用户名`/learngit.git \n\n# 6. 其他（与上面没有关联）\n## 6.1. git的三种环境变量\n1. 系统变量。\n    - 存放在git的安装目录下：%Git%\\etc\\gitconfig。\n    - 若使用 git config 时用 --system 选项，读写的就是这个文件：\n    - $ git config --system core.symlinks\n    - 系统变量对所有用户都适用。\n2. 用户变量。\n    - 存放在用户目录下。例如windows xp存放在：C:\\Documents and Settings\\$USER\\.gitconfig。\n    - 若使用 git config 时用 --global 选项，读写的就是这个文件：\n    - $ git config --global user.name\n    - 用户变量只适用于该用户\n3. 本地项目变量\n    - 当前项目的 git 目录中的配置文件（也就是工作目录中的 .git/config 文件）。\n    - 若使用git config 时用 --local 选项，读写的就是这个文件：\n    - $ git config --local remote.origin.url\n    - 本地变量只对当前项目有效。\n\n## 6.2. 查找顺序\n本地 》 用户 》系统\n## 6.3. 其他config命令\n```\n$ git config --list 查看所有环境变量\n$ git config --system --list 查看系统环境变量\n$ git config --global --list 查看用户环境变量\n$ git config --local --list 查看本地环境变量\n$ git config --[system/global/local] [varname] [yourname] 编辑环境变量\n```","slug":"杂记/使用多个git账户","published":1,"updated":"2018-02-06T07:48:14.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a13003pv4vf6mlz8ydg","content":"<h1 id=\"1-生成两个SSH-key\"><a href=\"#1-生成两个SSH-key\" class=\"headerlink\" title=\"1. 生成两个SSH key\"></a>1. 生成两个SSH key</h1><p>为了举例方便，这里使用“one”和“two”两个账户。下同。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C &quot;one@gmail.com&quot;</div><div class=\"line\"></div><div class=\"line\">$ ssh-keygen -t rsa -C &quot;two@gmail.com&quot;</div></pre></td></tr></table></figure></p>\n<p>不要一路回车，分别在第一个对话的时候输入重命名（id_rsa_one和id_rsa_two），这样会生成两份，包含私钥和公钥的4个文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">id_rsa_one</div><div class=\"line\">id_rsa_one.pub</div><div class=\"line\">id_rsa_two</div><div class=\"line\">id_rsa_two.pub</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-添加私钥\"><a href=\"#2-添加私钥\" class=\"headerlink\" title=\"2. 添加私钥\"></a>2. 添加私钥</h1><ol>\n<li><p>打开ssh-agent</p>\n<ul>\n<li><p>如果你是github官方的bash：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent -s</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果你是其它，比如msysgit：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ eval $(ssh-agent -s)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>添加私钥</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-agent bash  //不执行这个会报没有权限</div><div class=\"line\">$ ssh-add ~/.ssh/id_rsa_one</div><div class=\"line\">$ ssh-add ~/.ssh/id_rsa_two</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"3-创建config文件\"><a href=\"#3-创建config文件\" class=\"headerlink\" title=\"3. 创建config文件\"></a>3. 创建config文件</h1><p>在.ssh下创建config</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># one(one@gmail.com) </div><div class=\"line\">Host one.github.com //自定义的映射</div><div class=\"line\">HostName github.com //git仓库对应的地址</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa_one //对应为文件</div><div class=\"line\">User one   //对应的用户名</div><div class=\"line\"># two(two@ gmail.com)</div><div class=\"line\">Host two.github.com</div><div class=\"line\">HostName github.com   </div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa_two</div><div class=\"line\">User two</div></pre></td></tr></table></figure>\n<h1 id=\"4-部署SSH-key\"><a href=\"#4-部署SSH-key\" class=\"headerlink\" title=\"4. 部署SSH key\"></a>4. 部署SSH key</h1><p>在github上添加对应的ssh key</p>\n<h1 id=\"5-clone项目方法\"><a href=\"#5-clone项目方法\" class=\"headerlink\" title=\"5. clone项目方法\"></a>5. clone项目方法</h1><blockquote>\n<p>$ git clone git@<code>one.github.com</code>: <code>one的用户名</code>/learngit.git  注意是自定义的域名 和用户名（git的用户名）<br>$ git clone git@<code>two.github.com</code>: <code>two的用户名</code>/learngit.git </p>\n</blockquote>\n<h1 id=\"6-其他（与上面没有关联）\"><a href=\"#6-其他（与上面没有关联）\" class=\"headerlink\" title=\"6. 其他（与上面没有关联）\"></a>6. 其他（与上面没有关联）</h1><h2 id=\"6-1-git的三种环境变量\"><a href=\"#6-1-git的三种环境变量\" class=\"headerlink\" title=\"6.1. git的三种环境变量\"></a>6.1. git的三种环境变量</h2><ol>\n<li>系统变量。<ul>\n<li>存放在git的安装目录下：%Git%\\etc\\gitconfig。</li>\n<li>若使用 git config 时用 –system 选项，读写的就是这个文件：</li>\n<li>$ git config –system core.symlinks</li>\n<li>系统变量对所有用户都适用。</li>\n</ul>\n</li>\n<li>用户变量。<ul>\n<li>存放在用户目录下。例如windows xp存放在：C:\\Documents and Settings\\$USER.gitconfig。</li>\n<li>若使用 git config 时用 –global 选项，读写的就是这个文件：</li>\n<li>$ git config –global user.name</li>\n<li>用户变量只适用于该用户</li>\n</ul>\n</li>\n<li>本地项目变量<ul>\n<li>当前项目的 git 目录中的配置文件（也就是工作目录中的 .git/config 文件）。</li>\n<li>若使用git config 时用 –local 选项，读写的就是这个文件：</li>\n<li>$ git config –local remote.origin.url</li>\n<li>本地变量只对当前项目有效。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"6-2-查找顺序\"><a href=\"#6-2-查找顺序\" class=\"headerlink\" title=\"6.2. 查找顺序\"></a>6.2. 查找顺序</h2><p>本地 》 用户 》系统</p>\n<h2 id=\"6-3-其他config命令\"><a href=\"#6-3-其他config命令\" class=\"headerlink\" title=\"6.3. 其他config命令\"></a>6.3. 其他config命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --list 查看所有环境变量</div><div class=\"line\">$ git config --system --list 查看系统环境变量</div><div class=\"line\">$ git config --global --list 查看用户环境变量</div><div class=\"line\">$ git config --local --list 查看本地环境变量</div><div class=\"line\">$ git config --[system/global/local] [varname] [yourname] 编辑环境变量</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-生成两个SSH-key\"><a href=\"#1-生成两个SSH-key\" class=\"headerlink\" title=\"1. 生成两个SSH key\"></a>1. 生成两个SSH key</h1><p>为了举例方便，这里使用“one”和“two”两个账户。下同。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C &quot;one@gmail.com&quot;</div><div class=\"line\"></div><div class=\"line\">$ ssh-keygen -t rsa -C &quot;two@gmail.com&quot;</div></pre></td></tr></table></figure></p>\n<p>不要一路回车，分别在第一个对话的时候输入重命名（id_rsa_one和id_rsa_two），这样会生成两份，包含私钥和公钥的4个文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">id_rsa_one</div><div class=\"line\">id_rsa_one.pub</div><div class=\"line\">id_rsa_two</div><div class=\"line\">id_rsa_two.pub</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-添加私钥\"><a href=\"#2-添加私钥\" class=\"headerlink\" title=\"2. 添加私钥\"></a>2. 添加私钥</h1><ol>\n<li><p>打开ssh-agent</p>\n<ul>\n<li><p>如果你是github官方的bash：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent -s</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果你是其它，比如msysgit：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ eval $(ssh-agent -s)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>添加私钥</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-agent bash  //不执行这个会报没有权限</div><div class=\"line\">$ ssh-add ~/.ssh/id_rsa_one</div><div class=\"line\">$ ssh-add ~/.ssh/id_rsa_two</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"3-创建config文件\"><a href=\"#3-创建config文件\" class=\"headerlink\" title=\"3. 创建config文件\"></a>3. 创建config文件</h1><p>在.ssh下创建config</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># one(one@gmail.com) </div><div class=\"line\">Host one.github.com //自定义的映射</div><div class=\"line\">HostName github.com //git仓库对应的地址</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa_one //对应为文件</div><div class=\"line\">User one   //对应的用户名</div><div class=\"line\"># two(two@ gmail.com)</div><div class=\"line\">Host two.github.com</div><div class=\"line\">HostName github.com   </div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa_two</div><div class=\"line\">User two</div></pre></td></tr></table></figure>\n<h1 id=\"4-部署SSH-key\"><a href=\"#4-部署SSH-key\" class=\"headerlink\" title=\"4. 部署SSH key\"></a>4. 部署SSH key</h1><p>在github上添加对应的ssh key</p>\n<h1 id=\"5-clone项目方法\"><a href=\"#5-clone项目方法\" class=\"headerlink\" title=\"5. clone项目方法\"></a>5. clone项目方法</h1><blockquote>\n<p>$ git clone git@<code>one.github.com</code>: <code>one的用户名</code>/learngit.git  注意是自定义的域名 和用户名（git的用户名）<br>$ git clone git@<code>two.github.com</code>: <code>two的用户名</code>/learngit.git </p>\n</blockquote>\n<h1 id=\"6-其他（与上面没有关联）\"><a href=\"#6-其他（与上面没有关联）\" class=\"headerlink\" title=\"6. 其他（与上面没有关联）\"></a>6. 其他（与上面没有关联）</h1><h2 id=\"6-1-git的三种环境变量\"><a href=\"#6-1-git的三种环境变量\" class=\"headerlink\" title=\"6.1. git的三种环境变量\"></a>6.1. git的三种环境变量</h2><ol>\n<li>系统变量。<ul>\n<li>存放在git的安装目录下：%Git%\\etc\\gitconfig。</li>\n<li>若使用 git config 时用 –system 选项，读写的就是这个文件：</li>\n<li>$ git config –system core.symlinks</li>\n<li>系统变量对所有用户都适用。</li>\n</ul>\n</li>\n<li>用户变量。<ul>\n<li>存放在用户目录下。例如windows xp存放在：C:\\Documents and Settings\\$USER.gitconfig。</li>\n<li>若使用 git config 时用 –global 选项，读写的就是这个文件：</li>\n<li>$ git config –global user.name</li>\n<li>用户变量只适用于该用户</li>\n</ul>\n</li>\n<li>本地项目变量<ul>\n<li>当前项目的 git 目录中的配置文件（也就是工作目录中的 .git/config 文件）。</li>\n<li>若使用git config 时用 –local 选项，读写的就是这个文件：</li>\n<li>$ git config –local remote.origin.url</li>\n<li>本地变量只对当前项目有效。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"6-2-查找顺序\"><a href=\"#6-2-查找顺序\" class=\"headerlink\" title=\"6.2. 查找顺序\"></a>6.2. 查找顺序</h2><p>本地 》 用户 》系统</p>\n<h2 id=\"6-3-其他config命令\"><a href=\"#6-3-其他config命令\" class=\"headerlink\" title=\"6.3. 其他config命令\"></a>6.3. 其他config命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --list 查看所有环境变量</div><div class=\"line\">$ git config --system --list 查看系统环境变量</div><div class=\"line\">$ git config --global --list 查看用户环境变量</div><div class=\"line\">$ git config --local --list 查看本地环境变量</div><div class=\"line\">$ git config --[system/global/local] [varname] [yourname] 编辑环境变量</div></pre></td></tr></table></figure>"},{"title":"vscode快捷键记录","toc":true,"date":"2017-09-10T16:07:26.000Z","scaffolds":null,"_content":"\n分屏预览  \nctrl+k v  \nctrl+B 唤出侧边栏   \n\n切换分屏  \nctrl+1     \nctrl+2   \nctrl+3  \n\n<!-- more -->\n\nalt+z  开启/取消自动换行  \nctrl+` 打开/关闭控制台\n\n文本编辑  \nalt+↑/↓ 挪动行  \nalt+shift+↑/↓ 向上/下复制行  \nctrl+enter 下方新建行  \nctrl+shift+enter 上方新建行  \nctrl+shift+k 删除当前行  \n\nctrl+x 剪切行(光标没选中的时候)  \nctrl+k z 编辑区域最大化  \n\n切换窗口  \nctrl+e 最近打开的文件  \nctrl+r 打开的工作空间  ","source":"_posts/杂记/vscode快捷键记录.md","raw":"---\ntitle: vscode快捷键记录\ncategories: 工具\ntags: [vscode,快捷键]\ntoc: true\ndate: 2017-09-11 00:07:26\nscaffolds:\n---\n\n分屏预览  \nctrl+k v  \nctrl+B 唤出侧边栏   \n\n切换分屏  \nctrl+1     \nctrl+2   \nctrl+3  \n\n<!-- more -->\n\nalt+z  开启/取消自动换行  \nctrl+` 打开/关闭控制台\n\n文本编辑  \nalt+↑/↓ 挪动行  \nalt+shift+↑/↓ 向上/下复制行  \nctrl+enter 下方新建行  \nctrl+shift+enter 上方新建行  \nctrl+shift+k 删除当前行  \n\nctrl+x 剪切行(光标没选中的时候)  \nctrl+k z 编辑区域最大化  \n\n切换窗口  \nctrl+e 最近打开的文件  \nctrl+r 打开的工作空间  ","slug":"杂记/vscode快捷键记录","published":1,"updated":"2018-02-06T07:48:12.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a15003sv4vf4b07efei","content":"<p>分屏预览<br>ctrl+k v<br>ctrl+B 唤出侧边栏   </p>\n<p>切换分屏<br>ctrl+1<br>ctrl+2<br>ctrl+3  </p>\n<a id=\"more\"></a>\n<p>alt+z  开启/取消自动换行<br>ctrl+` 打开/关闭控制台</p>\n<p>文本编辑<br>alt+↑/↓ 挪动行<br>alt+shift+↑/↓ 向上/下复制行<br>ctrl+enter 下方新建行<br>ctrl+shift+enter 上方新建行<br>ctrl+shift+k 删除当前行  </p>\n<p>ctrl+x 剪切行(光标没选中的时候)<br>ctrl+k z 编辑区域最大化  </p>\n<p>切换窗口<br>ctrl+e 最近打开的文件<br>ctrl+r 打开的工作空间  </p>\n","site":{"data":{}},"excerpt":"<p>分屏预览<br>ctrl+k v<br>ctrl+B 唤出侧边栏   </p>\n<p>切换分屏<br>ctrl+1<br>ctrl+2<br>ctrl+3  </p>","more":"<p>alt+z  开启/取消自动换行<br>ctrl+` 打开/关闭控制台</p>\n<p>文本编辑<br>alt+↑/↓ 挪动行<br>alt+shift+↑/↓ 向上/下复制行<br>ctrl+enter 下方新建行<br>ctrl+shift+enter 上方新建行<br>ctrl+shift+k 删除当前行  </p>\n<p>ctrl+x 剪切行(光标没选中的时候)<br>ctrl+k z 编辑区域最大化  </p>\n<p>切换窗口<br>ctrl+e 最近打开的文件<br>ctrl+r 打开的工作空间  </p>"},{"title":"记录下hexo常用命令自己方便看","toc":true,"date":"2017-09-03T14:02:00.000Z","scaffolds":null,"_content":"\n```\n    Hexo常用命令：\n\n        hexo new \"postName\"       #新建文章\n        hexo new page \"pageName\"  #新建页面\n        hexo generate             #生成静态页面至public目录\n        hexo server               #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n        hexo deploy               #将.deploy目录部署到GitHub\n```\n<!-- more -->\n简写\n    \n```\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n复合命令\n\n```\n    hexo deploy -g\n    hexo server -g\n```    \n有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧\n    \n    hexo clean","source":"_posts/杂记/记录下hexo常用命令自己方便看.md","raw":"---\ntitle: 记录下hexo常用命令自己方便看\ntoc: true\ndate: 2017-09-03 22:02:00\ncategories: 工具\nscaffolds:\ntags: hexo\n---\n\n```\n    Hexo常用命令：\n\n        hexo new \"postName\"       #新建文章\n        hexo new page \"pageName\"  #新建页面\n        hexo generate             #生成静态页面至public目录\n        hexo server               #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n        hexo deploy               #将.deploy目录部署到GitHub\n```\n<!-- more -->\n简写\n    \n```\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n复合命令\n\n```\n    hexo deploy -g\n    hexo server -g\n```    \n有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧\n    \n    hexo clean","slug":"杂记/记录下hexo常用命令自己方便看","published":1,"updated":"2018-02-06T07:48:16.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a18003wv4vfrq1bclj8","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hexo常用命令：</div><div class=\"line\"></div><div class=\"line\">    hexo new &quot;postName&quot;       #新建文章</div><div class=\"line\">    hexo new page &quot;pageName&quot;  #新建页面</div><div class=\"line\">    hexo generate             #生成静态页面至public目录</div><div class=\"line\">    hexo server               #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class=\"line\">    hexo deploy               #将.deploy目录部署到GitHub</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>简写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n == hexo new</div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div></pre></td></tr></table></figure>\n<p>复合命令</p>\n<pre><code>hexo deploy -g\nhexo server -g\n</code></pre><p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧</p>\n<pre><code>hexo clean\n</code></pre>","site":{"data":{}},"excerpt":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hexo常用命令：</div><div class=\"line\"></div><div class=\"line\">    hexo new &quot;postName&quot;       #新建文章</div><div class=\"line\">    hexo new page &quot;pageName&quot;  #新建页面</div><div class=\"line\">    hexo generate             #生成静态页面至public目录</div><div class=\"line\">    hexo server               #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class=\"line\">    hexo deploy               #将.deploy目录部署到GitHub</div></pre></td></tr></table></figure>","more":"<p>简写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n == hexo new</div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div></pre></td></tr></table></figure>\n<p>复合命令</p>\n<pre><code>hexo deploy -g\nhexo server -g\n</code></pre><p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧</p>\n<pre><code>hexo clean\n</code></pre>"},{"title":"阿里java规约(一)-编程规约(1)-命名风格.md","toc":true,"date":"2018-02-09T07:02:33.000Z","scaffolds":null,"_content":"\n# 命名风格(16)\n## 强制(10)\n1. 【强制】不以`下划线或美元符号`做开头结尾\n2. 【强制】禁止使用拼音与英文混合,禁止使用中文,纯拼音也尽量避免\n    * 正例： alibaba / taobao / youku / hangzhou 等国际通用的名称， 可视同英文。\n3. 【强制】`类名`使用 UpperCamelCase 风格，但以下情形例外： DO / BO / DTO / VO / AO / PO 等。\n    * 正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion\n    * 反例： macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion \n4. 【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从`驼峰`形式。\n5. 【强制】`常量命名全部大写，单词间用下划线隔开`，力求语义表达完整清楚，不要嫌名字长。\n6. 【强制】`抽象类`命名使用 `Abstract` 或 `Base` 开头； `异常类`命名使用 `Exception` 结尾； `测试类`\n命名以它要`测试的类名`开始，以 `Test 结尾`。\n7. 【强制】`类型与中括号紧挨`相连来定义数组。\n    * 正例： 定义整形数组 `int[]` arrayDemo;\n    * 反例： 在 main 参数中，使用 String args[]来定义。\n8. 【强制】POJO 类中`布尔类型的变量`，都`不要加 is 前缀`，否则部分框架解析会引起序列化错误。\n9. 【强制】`包名`统一使用`小写`，点分隔符之间有且仅有`一个自然语义`的英语单词。`包名`统一使用`单数形式`，但是`类名`如果有复数含义，类名`可以`使用`复数形式`。\n    * 正例： 应用工具类包名为 com.alibaba.ai.util、类名为 MessageUtils（ 此规则参考 spring\n    * 的框架结构）\n10. 【强制】`杜绝完全不规范的缩写`， 避免望文不知义。\n    * 反例： AbstractClass“缩写” 命名成 AbsClass； condition“ 缩写” 命名成 condi，此类随意缩写严重降低了代码的可阅读性。\n\n## 推荐(4)\n11. 【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用`尽量完整`的单词组合来`表达其意`。\n    * 正例： 从远程仓库拉取代码的类命名为 PullCodeFromRemoteRepository。\n    * 反例： 变量 int a; 的随意命名方式。\n12. 【推荐】如果模块、 接口、类、方法`使用了设计模式`，在`命名时体现出具体模式`。\n    * 说明： 将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。\n    * 正例：    \n                public class OrderFactory;  \n                public class LoginProxy;  \n                public class ResourceObserver;  \n\n13. 【推荐】`接口类`中的`方法`和`属性不要加任何修饰符号`（ public 也不要加） ，保持代码的简洁性，并`加上有效的 Javadoc 注释`。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。\n    * 正例：   \n            接口方法签名 void f();  \n            接口基础常量 String COMPANY = \"alibaba\";  \n    * 反例： 接口方法定义 public abstract void f();\n    * 说明： JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。\n14. `接口和实现类`的命名有两套规则：\n    1. 【强制】对于 `Service` 和 `DAO` 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 `Impl` 的后缀与接口区别。\n        *  正例： CacheServiceImpl 实现 CacheService 接口。\n    2. 【推荐】 如果是形容能力的接口名称，取对应的形容词为接口名 （ 通常是`–able` 的形式）。\n        * 正例： AbstractTranslator 实现 Translatable。\n\n## 参考(2)\n15. 【参考】`枚举类`名建议带上 `Enum 后缀`，枚举`成员名称`需要`全大写`，单词间用`下划线隔开`。\n    * 说明： 枚举其实就是特殊的常量类，且构造方法被默认强制是私有。\n    * 正例： 枚举名字为 ProcessStatusEnum 的成员名称： SUCCESS / UNKNOWN_REASON。\n16. 【参考】各层命名规约：\n    1. Service/DAO 层方法命名规约\n        *  获取`单个对象`的方法用 `get` 作前缀。\n        *  获取`多个对象`的方法用 `list` 作前缀。\n        *  获取`统计值`的方法用 `count` 作前缀。\n        *  `插入`的方法用 `save/insert` 作前缀。\n        *  `删除`的方法用 `remove/delete` 作前缀。\n        *  `修改`的方法用 `update` 作前缀。\n    2. 领域模型命名规约\n        * 数据对象： xxxDO， xxx 即为数据表名。\n        * 数据传输对象： xxxDTO， xxx 为业务领域相关的名称。\n        * 展示对象： xxxVO， xxx 一般为网页名称。\n        * POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。\n","source":"_posts/阿里java规约/阿里java规约(一)-编程规约(1)-命名风格.md","raw":"---\ntitle: 阿里java规约(一)-编程规约(1)-命名风格.md\ncategories: 阿里java规约\ntags:\n  - 阿里java规约\ntoc: true\ndate: 2018-02-09 15:02:33\nscaffolds:\n---\n\n# 命名风格(16)\n## 强制(10)\n1. 【强制】不以`下划线或美元符号`做开头结尾\n2. 【强制】禁止使用拼音与英文混合,禁止使用中文,纯拼音也尽量避免\n    * 正例： alibaba / taobao / youku / hangzhou 等国际通用的名称， 可视同英文。\n3. 【强制】`类名`使用 UpperCamelCase 风格，但以下情形例外： DO / BO / DTO / VO / AO / PO 等。\n    * 正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion\n    * 反例： macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion \n4. 【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从`驼峰`形式。\n5. 【强制】`常量命名全部大写，单词间用下划线隔开`，力求语义表达完整清楚，不要嫌名字长。\n6. 【强制】`抽象类`命名使用 `Abstract` 或 `Base` 开头； `异常类`命名使用 `Exception` 结尾； `测试类`\n命名以它要`测试的类名`开始，以 `Test 结尾`。\n7. 【强制】`类型与中括号紧挨`相连来定义数组。\n    * 正例： 定义整形数组 `int[]` arrayDemo;\n    * 反例： 在 main 参数中，使用 String args[]来定义。\n8. 【强制】POJO 类中`布尔类型的变量`，都`不要加 is 前缀`，否则部分框架解析会引起序列化错误。\n9. 【强制】`包名`统一使用`小写`，点分隔符之间有且仅有`一个自然语义`的英语单词。`包名`统一使用`单数形式`，但是`类名`如果有复数含义，类名`可以`使用`复数形式`。\n    * 正例： 应用工具类包名为 com.alibaba.ai.util、类名为 MessageUtils（ 此规则参考 spring\n    * 的框架结构）\n10. 【强制】`杜绝完全不规范的缩写`， 避免望文不知义。\n    * 反例： AbstractClass“缩写” 命名成 AbsClass； condition“ 缩写” 命名成 condi，此类随意缩写严重降低了代码的可阅读性。\n\n## 推荐(4)\n11. 【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用`尽量完整`的单词组合来`表达其意`。\n    * 正例： 从远程仓库拉取代码的类命名为 PullCodeFromRemoteRepository。\n    * 反例： 变量 int a; 的随意命名方式。\n12. 【推荐】如果模块、 接口、类、方法`使用了设计模式`，在`命名时体现出具体模式`。\n    * 说明： 将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。\n    * 正例：    \n                public class OrderFactory;  \n                public class LoginProxy;  \n                public class ResourceObserver;  \n\n13. 【推荐】`接口类`中的`方法`和`属性不要加任何修饰符号`（ public 也不要加） ，保持代码的简洁性，并`加上有效的 Javadoc 注释`。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。\n    * 正例：   \n            接口方法签名 void f();  \n            接口基础常量 String COMPANY = \"alibaba\";  \n    * 反例： 接口方法定义 public abstract void f();\n    * 说明： JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。\n14. `接口和实现类`的命名有两套规则：\n    1. 【强制】对于 `Service` 和 `DAO` 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 `Impl` 的后缀与接口区别。\n        *  正例： CacheServiceImpl 实现 CacheService 接口。\n    2. 【推荐】 如果是形容能力的接口名称，取对应的形容词为接口名 （ 通常是`–able` 的形式）。\n        * 正例： AbstractTranslator 实现 Translatable。\n\n## 参考(2)\n15. 【参考】`枚举类`名建议带上 `Enum 后缀`，枚举`成员名称`需要`全大写`，单词间用`下划线隔开`。\n    * 说明： 枚举其实就是特殊的常量类，且构造方法被默认强制是私有。\n    * 正例： 枚举名字为 ProcessStatusEnum 的成员名称： SUCCESS / UNKNOWN_REASON。\n16. 【参考】各层命名规约：\n    1. Service/DAO 层方法命名规约\n        *  获取`单个对象`的方法用 `get` 作前缀。\n        *  获取`多个对象`的方法用 `list` 作前缀。\n        *  获取`统计值`的方法用 `count` 作前缀。\n        *  `插入`的方法用 `save/insert` 作前缀。\n        *  `删除`的方法用 `remove/delete` 作前缀。\n        *  `修改`的方法用 `update` 作前缀。\n    2. 领域模型命名规约\n        * 数据对象： xxxDO， xxx 即为数据表名。\n        * 数据传输对象： xxxDTO， xxx 为业务领域相关的名称。\n        * 展示对象： xxxVO， xxx 一般为网页名称。\n        * POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。\n","slug":"阿里java规约/阿里java规约(一)-编程规约(1)-命名风格","published":1,"updated":"2018-02-09T08:45:18.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a1a003zv4vf341gqq96","content":"<h1 id=\"命名风格-16\"><a href=\"#命名风格-16\" class=\"headerlink\" title=\"命名风格(16)\"></a>命名风格(16)</h1><h2 id=\"强制-10\"><a href=\"#强制-10\" class=\"headerlink\" title=\"强制(10)\"></a>强制(10)</h2><ol>\n<li>【强制】不以<code>下划线或美元符号</code>做开头结尾</li>\n<li>【强制】禁止使用拼音与英文混合,禁止使用中文,纯拼音也尽量避免<ul>\n<li>正例： alibaba / taobao / youku / hangzhou 等国际通用的名称， 可视同英文。</li>\n</ul>\n</li>\n<li>【强制】<code>类名</code>使用 UpperCamelCase 风格，但以下情形例外： DO / BO / DTO / VO / AO / PO 等。<ul>\n<li>正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion</li>\n<li>反例： macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion </li>\n</ul>\n</li>\n<li>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从<code>驼峰</code>形式。</li>\n<li>【强制】<code>常量命名全部大写，单词间用下划线隔开</code>，力求语义表达完整清楚，不要嫌名字长。</li>\n<li>【强制】<code>抽象类</code>命名使用 <code>Abstract</code> 或 <code>Base</code> 开头； <code>异常类</code>命名使用 <code>Exception</code> 结尾； <code>测试类</code><br>命名以它要<code>测试的类名</code>开始，以 <code>Test 结尾</code>。</li>\n<li>【强制】<code>类型与中括号紧挨</code>相连来定义数组。<ul>\n<li>正例： 定义整形数组 <code>int[]</code> arrayDemo;</li>\n<li>反例： 在 main 参数中，使用 String args[]来定义。</li>\n</ul>\n</li>\n<li>【强制】POJO 类中<code>布尔类型的变量</code>，都<code>不要加 is 前缀</code>，否则部分框架解析会引起序列化错误。</li>\n<li>【强制】<code>包名</code>统一使用<code>小写</code>，点分隔符之间有且仅有<code>一个自然语义</code>的英语单词。<code>包名</code>统一使用<code>单数形式</code>，但是<code>类名</code>如果有复数含义，类名<code>可以</code>使用<code>复数形式</code>。<ul>\n<li>正例： 应用工具类包名为 com.alibaba.ai.util、类名为 MessageUtils（ 此规则参考 spring</li>\n<li>的框架结构）</li>\n</ul>\n</li>\n<li>【强制】<code>杜绝完全不规范的缩写</code>， 避免望文不知义。<ul>\n<li>反例： AbstractClass“缩写” 命名成 AbsClass； condition“ 缩写” 命名成 condi，此类随意缩写严重降低了代码的可阅读性。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-4\"><a href=\"#推荐-4\" class=\"headerlink\" title=\"推荐(4)\"></a>推荐(4)</h2><ol>\n<li>【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用<code>尽量完整</code>的单词组合来<code>表达其意</code>。<ul>\n<li>正例： 从远程仓库拉取代码的类命名为 PullCodeFromRemoteRepository。</li>\n<li>反例： 变量 int a; 的随意命名方式。</li>\n</ul>\n</li>\n<li><p>【推荐】如果模块、 接口、类、方法<code>使用了设计模式</code>，在<code>命名时体现出具体模式</code>。</p>\n<ul>\n<li>说明： 将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。</li>\n<li>正例：    <pre><code>public class OrderFactory;  \npublic class LoginProxy;  \npublic class ResourceObserver;  \n</code></pre></li>\n</ul>\n</li>\n<li><p>【推荐】<code>接口类</code>中的<code>方法</code>和<code>属性不要加任何修饰符号</code>（ public 也不要加） ，保持代码的简洁性，并<code>加上有效的 Javadoc 注释</code>。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。</p>\n<ul>\n<li>正例：   <pre><code>接口方法签名 void f();  \n接口基础常量 String COMPANY = &quot;alibaba&quot;;  \n</code></pre></li>\n<li>反例： 接口方法定义 public abstract void f();</li>\n<li>说明： JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</li>\n</ul>\n</li>\n<li><code>接口和实现类</code>的命名有两套规则：<ol>\n<li>【强制】对于 <code>Service</code> 和 <code>DAO</code> 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 <code>Impl</code> 的后缀与接口区别。<ul>\n<li>正例： CacheServiceImpl 实现 CacheService 接口。</li>\n</ul>\n</li>\n<li>【推荐】 如果是形容能力的接口名称，取对应的形容词为接口名 （ 通常是<code>–able</code> 的形式）。<ul>\n<li>正例： AbstractTranslator 实现 Translatable。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考(2)\"></a>参考(2)</h2><ol>\n<li>【参考】<code>枚举类</code>名建议带上 <code>Enum 后缀</code>，枚举<code>成员名称</code>需要<code>全大写</code>，单词间用<code>下划线隔开</code>。<ul>\n<li>说明： 枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</li>\n<li>正例： 枚举名字为 ProcessStatusEnum 的成员名称： SUCCESS / UNKNOWN_REASON。</li>\n</ul>\n</li>\n<li>【参考】各层命名规约：<ol>\n<li>Service/DAO 层方法命名规约<ul>\n<li>获取<code>单个对象</code>的方法用 <code>get</code> 作前缀。</li>\n<li>获取<code>多个对象</code>的方法用 <code>list</code> 作前缀。</li>\n<li>获取<code>统计值</code>的方法用 <code>count</code> 作前缀。</li>\n<li><code>插入</code>的方法用 <code>save/insert</code> 作前缀。</li>\n<li><code>删除</code>的方法用 <code>remove/delete</code> 作前缀。</li>\n<li><code>修改</code>的方法用 <code>update</code> 作前缀。</li>\n</ul>\n</li>\n<li>领域模型命名规约<ul>\n<li>数据对象： xxxDO， xxx 即为数据表名。</li>\n<li>数据传输对象： xxxDTO， xxx 为业务领域相关的名称。</li>\n<li>展示对象： xxxVO， xxx 一般为网页名称。</li>\n<li>POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"命名风格-16\"><a href=\"#命名风格-16\" class=\"headerlink\" title=\"命名风格(16)\"></a>命名风格(16)</h1><h2 id=\"强制-10\"><a href=\"#强制-10\" class=\"headerlink\" title=\"强制(10)\"></a>强制(10)</h2><ol>\n<li>【强制】不以<code>下划线或美元符号</code>做开头结尾</li>\n<li>【强制】禁止使用拼音与英文混合,禁止使用中文,纯拼音也尽量避免<ul>\n<li>正例： alibaba / taobao / youku / hangzhou 等国际通用的名称， 可视同英文。</li>\n</ul>\n</li>\n<li>【强制】<code>类名</code>使用 UpperCamelCase 风格，但以下情形例外： DO / BO / DTO / VO / AO / PO 等。<ul>\n<li>正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion</li>\n<li>反例： macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion </li>\n</ul>\n</li>\n<li>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从<code>驼峰</code>形式。</li>\n<li>【强制】<code>常量命名全部大写，单词间用下划线隔开</code>，力求语义表达完整清楚，不要嫌名字长。</li>\n<li>【强制】<code>抽象类</code>命名使用 <code>Abstract</code> 或 <code>Base</code> 开头； <code>异常类</code>命名使用 <code>Exception</code> 结尾； <code>测试类</code><br>命名以它要<code>测试的类名</code>开始，以 <code>Test 结尾</code>。</li>\n<li>【强制】<code>类型与中括号紧挨</code>相连来定义数组。<ul>\n<li>正例： 定义整形数组 <code>int[]</code> arrayDemo;</li>\n<li>反例： 在 main 参数中，使用 String args[]来定义。</li>\n</ul>\n</li>\n<li>【强制】POJO 类中<code>布尔类型的变量</code>，都<code>不要加 is 前缀</code>，否则部分框架解析会引起序列化错误。</li>\n<li>【强制】<code>包名</code>统一使用<code>小写</code>，点分隔符之间有且仅有<code>一个自然语义</code>的英语单词。<code>包名</code>统一使用<code>单数形式</code>，但是<code>类名</code>如果有复数含义，类名<code>可以</code>使用<code>复数形式</code>。<ul>\n<li>正例： 应用工具类包名为 com.alibaba.ai.util、类名为 MessageUtils（ 此规则参考 spring</li>\n<li>的框架结构）</li>\n</ul>\n</li>\n<li>【强制】<code>杜绝完全不规范的缩写</code>， 避免望文不知义。<ul>\n<li>反例： AbstractClass“缩写” 命名成 AbsClass； condition“ 缩写” 命名成 condi，此类随意缩写严重降低了代码的可阅读性。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-4\"><a href=\"#推荐-4\" class=\"headerlink\" title=\"推荐(4)\"></a>推荐(4)</h2><ol>\n<li>【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用<code>尽量完整</code>的单词组合来<code>表达其意</code>。<ul>\n<li>正例： 从远程仓库拉取代码的类命名为 PullCodeFromRemoteRepository。</li>\n<li>反例： 变量 int a; 的随意命名方式。</li>\n</ul>\n</li>\n<li><p>【推荐】如果模块、 接口、类、方法<code>使用了设计模式</code>，在<code>命名时体现出具体模式</code>。</p>\n<ul>\n<li>说明： 将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。</li>\n<li>正例：    <pre><code>public class OrderFactory;  \npublic class LoginProxy;  \npublic class ResourceObserver;  \n</code></pre></li>\n</ul>\n</li>\n<li><p>【推荐】<code>接口类</code>中的<code>方法</code>和<code>属性不要加任何修饰符号</code>（ public 也不要加） ，保持代码的简洁性，并<code>加上有效的 Javadoc 注释</code>。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。</p>\n<ul>\n<li>正例：   <pre><code>接口方法签名 void f();  \n接口基础常量 String COMPANY = &quot;alibaba&quot;;  \n</code></pre></li>\n<li>反例： 接口方法定义 public abstract void f();</li>\n<li>说明： JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</li>\n</ul>\n</li>\n<li><code>接口和实现类</code>的命名有两套规则：<ol>\n<li>【强制】对于 <code>Service</code> 和 <code>DAO</code> 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 <code>Impl</code> 的后缀与接口区别。<ul>\n<li>正例： CacheServiceImpl 实现 CacheService 接口。</li>\n</ul>\n</li>\n<li>【推荐】 如果是形容能力的接口名称，取对应的形容词为接口名 （ 通常是<code>–able</code> 的形式）。<ul>\n<li>正例： AbstractTranslator 实现 Translatable。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考(2)\"></a>参考(2)</h2><ol>\n<li>【参考】<code>枚举类</code>名建议带上 <code>Enum 后缀</code>，枚举<code>成员名称</code>需要<code>全大写</code>，单词间用<code>下划线隔开</code>。<ul>\n<li>说明： 枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</li>\n<li>正例： 枚举名字为 ProcessStatusEnum 的成员名称： SUCCESS / UNKNOWN_REASON。</li>\n</ul>\n</li>\n<li>【参考】各层命名规约：<ol>\n<li>Service/DAO 层方法命名规约<ul>\n<li>获取<code>单个对象</code>的方法用 <code>get</code> 作前缀。</li>\n<li>获取<code>多个对象</code>的方法用 <code>list</code> 作前缀。</li>\n<li>获取<code>统计值</code>的方法用 <code>count</code> 作前缀。</li>\n<li><code>插入</code>的方法用 <code>save/insert</code> 作前缀。</li>\n<li><code>删除</code>的方法用 <code>remove/delete</code> 作前缀。</li>\n<li><code>修改</code>的方法用 <code>update</code> 作前缀。</li>\n</ul>\n</li>\n<li>领域模型命名规约<ul>\n<li>数据对象： xxxDO， xxx 即为数据表名。</li>\n<li>数据传输对象： xxxDTO， xxx 为业务领域相关的名称。</li>\n<li>展示对象： xxxVO， xxx 一般为网页名称。</li>\n<li>POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"阿里java规约(一)-编程规约(2)-常量定义.md","toc":true,"date":"2018-02-09T07:03:33.000Z","scaffolds":null,"_content":"\n# 常量定义(5)\n## 强制(2)\n1. 【强制】不允许任何魔法值（ 即未经预先定义的常量） 直接出现在代码中。\n2. 【强制】 `long` 或者 `Long` 初始赋值时， `使用大写的 L`，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。\n    * 说明： Long a = 2l; 写的是数字的 21，还是 Long 型的 2?\n\n## 推荐(3)\n3. 【推荐】不要使用一个常量类维护所有常量， `按常量功能进行归类`，分开维护。\n    * 说明： 大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。\n    * 正例： 缓存相关常量放在类 CacheConsts 下； 系统配置相关常量放在类 ConfigConsts 下。\n4. 【推荐】常量的复用层次有五层：`跨应用`共享常量、`应用内`共享常量、`子工程`内共享常量、`包`内共享常量、`类`内共享常量。\n    * 1） `跨应用`共享常量：放置在`二方库`中，通常是 client.jar 中的 constant 目录下。\n    * 2） `应用内`共享常量：放置在`一方库`中，通常是子模块中的 constant 目录下。  \n\n            反例： 易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：  \n            类 A 中： public static final String YES = \"yes\";  \n            类 B 中： public static final String YES = \"y\";  \n            A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。\n            \n    * 3） `子工程`内部共享常量：即在当前子工程的 constant 目录下。\n    * 4） `包`内共享常量：即在当前包下单独的 constant 目录下。\n    * 5） `类`内共享常量：直接在类内部 private static final 定义。\n5. 【推荐】如果变量值仅在一个固定范围内变化用 enum 类型来定义。\n    * 说明： 如果存在名称之外的延伸属性使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。\n    * 正例：\n            ```java\n                    public enum SeasonEnum {\n                        SPRING(1), SUMMER(2), AUTUMN(3), WINTER(4);\n                        int seq;\n                        SeasonEnum(int seq){\n                            this.seq = seq;\n                        }\n                    }\n            ```","source":"_posts/阿里java规约/阿里java规约(一)-编程规约(2)-常量定义.md","raw":"---\ntitle: 阿里java规约(一)-编程规约(2)-常量定义.md\ncategories: 阿里java规约\ntags:\n  - 阿里java规约\ntoc: true\ndate: 2018-02-09 15:03:33\nscaffolds:\n---\n\n# 常量定义(5)\n## 强制(2)\n1. 【强制】不允许任何魔法值（ 即未经预先定义的常量） 直接出现在代码中。\n2. 【强制】 `long` 或者 `Long` 初始赋值时， `使用大写的 L`，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。\n    * 说明： Long a = 2l; 写的是数字的 21，还是 Long 型的 2?\n\n## 推荐(3)\n3. 【推荐】不要使用一个常量类维护所有常量， `按常量功能进行归类`，分开维护。\n    * 说明： 大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。\n    * 正例： 缓存相关常量放在类 CacheConsts 下； 系统配置相关常量放在类 ConfigConsts 下。\n4. 【推荐】常量的复用层次有五层：`跨应用`共享常量、`应用内`共享常量、`子工程`内共享常量、`包`内共享常量、`类`内共享常量。\n    * 1） `跨应用`共享常量：放置在`二方库`中，通常是 client.jar 中的 constant 目录下。\n    * 2） `应用内`共享常量：放置在`一方库`中，通常是子模块中的 constant 目录下。  \n\n            反例： 易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：  \n            类 A 中： public static final String YES = \"yes\";  \n            类 B 中： public static final String YES = \"y\";  \n            A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。\n            \n    * 3） `子工程`内部共享常量：即在当前子工程的 constant 目录下。\n    * 4） `包`内共享常量：即在当前包下单独的 constant 目录下。\n    * 5） `类`内共享常量：直接在类内部 private static final 定义。\n5. 【推荐】如果变量值仅在一个固定范围内变化用 enum 类型来定义。\n    * 说明： 如果存在名称之外的延伸属性使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。\n    * 正例：\n            ```java\n                    public enum SeasonEnum {\n                        SPRING(1), SUMMER(2), AUTUMN(3), WINTER(4);\n                        int seq;\n                        SeasonEnum(int seq){\n                            this.seq = seq;\n                        }\n                    }\n            ```","slug":"阿里java规约/阿里java规约(一)-编程规约(2)-常量定义","published":1,"updated":"2018-02-09T08:45:20.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a1e0043v4vfwgwyd7fk","content":"<h1 id=\"常量定义-5\"><a href=\"#常量定义-5\" class=\"headerlink\" title=\"常量定义(5)\"></a>常量定义(5)</h1><h2 id=\"强制-2\"><a href=\"#强制-2\" class=\"headerlink\" title=\"强制(2)\"></a>强制(2)</h2><ol>\n<li>【强制】不允许任何魔法值（ 即未经预先定义的常量） 直接出现在代码中。</li>\n<li>【强制】 <code>long</code> 或者 <code>Long</code> 初始赋值时， <code>使用大写的 L</code>，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。<ul>\n<li>说明： Long a = 2l; 写的是数字的 21，还是 Long 型的 2?</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-3\"><a href=\"#推荐-3\" class=\"headerlink\" title=\"推荐(3)\"></a>推荐(3)</h2><ol>\n<li>【推荐】不要使用一个常量类维护所有常量， <code>按常量功能进行归类</code>，分开维护。<ul>\n<li>说明： 大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。</li>\n<li>正例： 缓存相关常量放在类 CacheConsts 下； 系统配置相关常量放在类 ConfigConsts 下。</li>\n</ul>\n</li>\n<li><p>【推荐】常量的复用层次有五层：<code>跨应用</code>共享常量、<code>应用内</code>共享常量、<code>子工程</code>内共享常量、<code>包</code>内共享常量、<code>类</code>内共享常量。</p>\n<ul>\n<li>1） <code>跨应用</code>共享常量：放置在<code>二方库</code>中，通常是 client.jar 中的 constant 目录下。</li>\n<li><p>2） <code>应用内</code>共享常量：放置在<code>一方库</code>中，通常是子模块中的 constant 目录下。  </p>\n<pre><code>反例： 易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：  \n类 A 中： public static final String YES = &quot;yes&quot;;  \n类 B 中： public static final String YES = &quot;y&quot;;  \nA.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。\n</code></pre></li>\n<li><p>3） <code>子工程</code>内部共享常量：即在当前子工程的 constant 目录下。</p>\n</li>\n<li>4） <code>包</code>内共享常量：即在当前包下单独的 constant 目录下。</li>\n<li>5） <code>类</code>内共享常量：直接在类内部 private static final 定义。</li>\n</ul>\n</li>\n<li>【推荐】如果变量值仅在一个固定范围内变化用 enum 类型来定义。<ul>\n<li>说明： 如果存在名称之外的延伸属性使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。</li>\n<li>正例：<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> SeasonEnum &#123;</div><div class=\"line\">    SPRING(<span class=\"number\">1</span>), SUMMER(<span class=\"number\">2</span>), AUTUMN(<span class=\"number\">3</span>), WINTER(<span class=\"number\">4</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> seq;</div><div class=\"line\">    SeasonEnum(<span class=\"keyword\">int</span> seq)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.seq = seq;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"常量定义-5\"><a href=\"#常量定义-5\" class=\"headerlink\" title=\"常量定义(5)\"></a>常量定义(5)</h1><h2 id=\"强制-2\"><a href=\"#强制-2\" class=\"headerlink\" title=\"强制(2)\"></a>强制(2)</h2><ol>\n<li>【强制】不允许任何魔法值（ 即未经预先定义的常量） 直接出现在代码中。</li>\n<li>【强制】 <code>long</code> 或者 <code>Long</code> 初始赋值时， <code>使用大写的 L</code>，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。<ul>\n<li>说明： Long a = 2l; 写的是数字的 21，还是 Long 型的 2?</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-3\"><a href=\"#推荐-3\" class=\"headerlink\" title=\"推荐(3)\"></a>推荐(3)</h2><ol>\n<li>【推荐】不要使用一个常量类维护所有常量， <code>按常量功能进行归类</code>，分开维护。<ul>\n<li>说明： 大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。</li>\n<li>正例： 缓存相关常量放在类 CacheConsts 下； 系统配置相关常量放在类 ConfigConsts 下。</li>\n</ul>\n</li>\n<li><p>【推荐】常量的复用层次有五层：<code>跨应用</code>共享常量、<code>应用内</code>共享常量、<code>子工程</code>内共享常量、<code>包</code>内共享常量、<code>类</code>内共享常量。</p>\n<ul>\n<li>1） <code>跨应用</code>共享常量：放置在<code>二方库</code>中，通常是 client.jar 中的 constant 目录下。</li>\n<li><p>2） <code>应用内</code>共享常量：放置在<code>一方库</code>中，通常是子模块中的 constant 目录下。  </p>\n<pre><code>反例： 易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：  \n类 A 中： public static final String YES = &quot;yes&quot;;  \n类 B 中： public static final String YES = &quot;y&quot;;  \nA.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。\n</code></pre></li>\n<li><p>3） <code>子工程</code>内部共享常量：即在当前子工程的 constant 目录下。</p>\n</li>\n<li>4） <code>包</code>内共享常量：即在当前包下单独的 constant 目录下。</li>\n<li>5） <code>类</code>内共享常量：直接在类内部 private static final 定义。</li>\n</ul>\n</li>\n<li>【推荐】如果变量值仅在一个固定范围内变化用 enum 类型来定义。<ul>\n<li>说明： 如果存在名称之外的延伸属性使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。</li>\n<li>正例：<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> SeasonEnum &#123;</div><div class=\"line\">    SPRING(<span class=\"number\">1</span>), SUMMER(<span class=\"number\">2</span>), AUTUMN(<span class=\"number\">3</span>), WINTER(<span class=\"number\">4</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> seq;</div><div class=\"line\">    SeasonEnum(<span class=\"keyword\">int</span> seq)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.seq = seq;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n</li>\n</ol>\n"},{"title":"阿里java规约(一)-编程规约(3)-代码格式.md","toc":true,"date":"2018-02-09T07:04:33.000Z","scaffolds":null,"_content":"# 代码格式(11)\n## 强制(9)\n1. 【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行； 如果是非空代码块则：\n    * 1） 左大括号前不换行。\n    * 2） 左大括号后换行。\n    * 3） 右大括号前换行。\n    * 4） 右大括号后还有 else 等代码则不换行； 表示终止的右大括号后必须换行。\n2. 【强制】 左小括号和字符之间不出现空格； 同样，右小括号和字符之间也不出现空格。详见第 5 条下方正例提示。\n    * 反例： if (空格 a == b 空格)\n3. 【强制】 if/for/while/switch/do 等保留字与括号之间都必须加空格。\n4. 【强制】任何二目、 三目运算符的左右两边都需要加一个空格。\n    * 说明： 运算符包括赋值运算符=、逻辑运算符&&、加减乘除符号等。\n5. 【强制】 采用 4 个空格缩进，禁止使用 tab 字符。\n    * 说明： 如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。 IDEA 设置 tab 为 4 个空格时，\n    * 请勿勾选 `Use tab character`；而在 eclipse 中，必须勾选 `insert spaces for tabs`。\n    * 正例： （ 涉及 1-5 点）\n        ```java\n        public static void main(String[] args) {\n            // 缩进 4 个空格\n            String say = \"hello\";\n            // 运算符的左右必须有一个空格\n            int flag = 0;\n            // 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号， 0 与右括号不需要空格\n            if (flag == 0) {\n                System.out.println(say);\n            }\n            // 左大括号前加空格且不换行；左大括号后换行\n            if (flag == 1) {\n                System.out.println(\"world\");\n                // 右大括号前换行，右大括号后有 else，不用换行\n            } else {\n                System.out.println(\"ok\");\n                // 在右大括号后直接结束，则必须换行\n            }\n        }\n        ```\n6. 【强制】注释的双斜线与注释内容之间有且仅有一个空格。\n    * 正例：\n        ```java\n        // 这是示例注释，请注意在双斜线之后有一个空格\n        String ygb = new String();\n        ```\n7. 【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：\n    * 1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。\n    * 2） 运算符与下文一起换行。\n    * 3） 方法调用的点符号与下文一起换行。\n    * 4） 方法调用时，多个参数， 需要换行时， 在逗号后进行。\n    * 5） 在括号前不要换行，见反例。\n    * 正例：\n        ```java\n            StringBuffer sb = new StringBuffer();\n            // 超过 120 个字符的情况下，换行缩进 4 个空格， 点号和方法名称一起换行\n            sb.append(\"zi\").append(\"xin\")...\n                .append(\"huang\")...\n                .append(\"huang\")...\n                .append(\"huang\");\n        ```\n\n    * 反例：\n        ```java\n            StringBuffer sb = new StringBuffer();\n            // 超过 120 个字符的情况下，不要在括号前换行\n            sb.append(\"zi\").append(\"xin\")...append\n            (\"huang\");\n            // 参数很多的方法调用可能超过 120 个字符， 不要在逗号前换行\n            method(args1, args2, args3, ...\n            , argsX);\n        ```\n\n8. 【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。\n    * 正例： 下例中实参的\"a\",后边必须要有一个空格。\n        ```java\n        method(\"a\", \"b\", \"c\");\n        ```\n9. 【强制】 IDE 的 `text file encoding` 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 Windows 格式。\n\n\n## 推荐(2)\n10. 【推荐】没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。\n    * 正例：\n        ```java\n        int a = 3;\n        long b = 4L;\n        float c = 5F;\n        StringBuffer sb = new StringBuffer();\n        ```\n    * 说明： 增加 sb 这个变量，如果需要对齐，则给 a、 b、 c 都要增加几个空格，在变量比较多的情况下，是非常累赘的事情。\n11. 【推荐】 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。\n    * 说明： 没有必要插入`多个空行`进行隔开。\n","source":"_posts/阿里java规约/阿里java规约(一)-编程规约(3)-代码格式.md","raw":"---\ntitle: 阿里java规约(一)-编程规约(3)-代码格式.md\ncategories: 阿里java规约\ntags:\n  - 阿里java规约\ntoc: true\ndate: 2018-02-09 15:04:33\nscaffolds:\n---\n# 代码格式(11)\n## 强制(9)\n1. 【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行； 如果是非空代码块则：\n    * 1） 左大括号前不换行。\n    * 2） 左大括号后换行。\n    * 3） 右大括号前换行。\n    * 4） 右大括号后还有 else 等代码则不换行； 表示终止的右大括号后必须换行。\n2. 【强制】 左小括号和字符之间不出现空格； 同样，右小括号和字符之间也不出现空格。详见第 5 条下方正例提示。\n    * 反例： if (空格 a == b 空格)\n3. 【强制】 if/for/while/switch/do 等保留字与括号之间都必须加空格。\n4. 【强制】任何二目、 三目运算符的左右两边都需要加一个空格。\n    * 说明： 运算符包括赋值运算符=、逻辑运算符&&、加减乘除符号等。\n5. 【强制】 采用 4 个空格缩进，禁止使用 tab 字符。\n    * 说明： 如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。 IDEA 设置 tab 为 4 个空格时，\n    * 请勿勾选 `Use tab character`；而在 eclipse 中，必须勾选 `insert spaces for tabs`。\n    * 正例： （ 涉及 1-5 点）\n        ```java\n        public static void main(String[] args) {\n            // 缩进 4 个空格\n            String say = \"hello\";\n            // 运算符的左右必须有一个空格\n            int flag = 0;\n            // 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号， 0 与右括号不需要空格\n            if (flag == 0) {\n                System.out.println(say);\n            }\n            // 左大括号前加空格且不换行；左大括号后换行\n            if (flag == 1) {\n                System.out.println(\"world\");\n                // 右大括号前换行，右大括号后有 else，不用换行\n            } else {\n                System.out.println(\"ok\");\n                // 在右大括号后直接结束，则必须换行\n            }\n        }\n        ```\n6. 【强制】注释的双斜线与注释内容之间有且仅有一个空格。\n    * 正例：\n        ```java\n        // 这是示例注释，请注意在双斜线之后有一个空格\n        String ygb = new String();\n        ```\n7. 【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：\n    * 1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。\n    * 2） 运算符与下文一起换行。\n    * 3） 方法调用的点符号与下文一起换行。\n    * 4） 方法调用时，多个参数， 需要换行时， 在逗号后进行。\n    * 5） 在括号前不要换行，见反例。\n    * 正例：\n        ```java\n            StringBuffer sb = new StringBuffer();\n            // 超过 120 个字符的情况下，换行缩进 4 个空格， 点号和方法名称一起换行\n            sb.append(\"zi\").append(\"xin\")...\n                .append(\"huang\")...\n                .append(\"huang\")...\n                .append(\"huang\");\n        ```\n\n    * 反例：\n        ```java\n            StringBuffer sb = new StringBuffer();\n            // 超过 120 个字符的情况下，不要在括号前换行\n            sb.append(\"zi\").append(\"xin\")...append\n            (\"huang\");\n            // 参数很多的方法调用可能超过 120 个字符， 不要在逗号前换行\n            method(args1, args2, args3, ...\n            , argsX);\n        ```\n\n8. 【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。\n    * 正例： 下例中实参的\"a\",后边必须要有一个空格。\n        ```java\n        method(\"a\", \"b\", \"c\");\n        ```\n9. 【强制】 IDE 的 `text file encoding` 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 Windows 格式。\n\n\n## 推荐(2)\n10. 【推荐】没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。\n    * 正例：\n        ```java\n        int a = 3;\n        long b = 4L;\n        float c = 5F;\n        StringBuffer sb = new StringBuffer();\n        ```\n    * 说明： 增加 sb 这个变量，如果需要对齐，则给 a、 b、 c 都要增加几个空格，在变量比较多的情况下，是非常累赘的事情。\n11. 【推荐】 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。\n    * 说明： 没有必要插入`多个空行`进行隔开。\n","slug":"阿里java规约/阿里java规约(一)-编程规约(3)-代码格式","published":1,"updated":"2018-02-09T08:45:15.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a1h0047v4vfg71us0f3","content":"<h1 id=\"代码格式-11\"><a href=\"#代码格式-11\" class=\"headerlink\" title=\"代码格式(11)\"></a>代码格式(11)</h1><h2 id=\"强制-9\"><a href=\"#强制-9\" class=\"headerlink\" title=\"强制(9)\"></a>强制(9)</h2><ol>\n<li>【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行； 如果是非空代码块则：<ul>\n<li>1） 左大括号前不换行。</li>\n<li>2） 左大括号后换行。</li>\n<li>3） 右大括号前换行。</li>\n<li>4） 右大括号后还有 else 等代码则不换行； 表示终止的右大括号后必须换行。</li>\n</ul>\n</li>\n<li>【强制】 左小括号和字符之间不出现空格； 同样，右小括号和字符之间也不出现空格。详见第 5 条下方正例提示。<ul>\n<li>反例： if (空格 a == b 空格)</li>\n</ul>\n</li>\n<li>【强制】 if/for/while/switch/do 等保留字与括号之间都必须加空格。</li>\n<li>【强制】任何二目、 三目运算符的左右两边都需要加一个空格。<ul>\n<li>说明： 运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。</li>\n</ul>\n</li>\n<li><p>【强制】 采用 4 个空格缩进，禁止使用 tab 字符。</p>\n<ul>\n<li>说明： 如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。 IDEA 设置 tab 为 4 个空格时，</li>\n<li>请勿勾选 <code>Use tab character</code>；而在 eclipse 中，必须勾选 <code>insert spaces for tabs</code>。</li>\n<li>正例： （ 涉及 1-5 点）  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 缩进 4 个空格</span></div><div class=\"line\">    String say = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 运算符的左右必须有一个空格</span></div><div class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号， 0 与右括号不需要空格</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        System.out.println(say);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 左大括号前加空格且不换行；左大括号后换行</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"world\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 右大括号前换行，右大括号后有 else，不用换行</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"ok\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 在右大括号后直接结束，则必须换行</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】注释的双斜线与注释内容之间有且仅有一个空格。</p>\n<ul>\n<li>正例：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这是示例注释，请注意在双斜线之后有一个空格</span></div><div class=\"line\">String ygb = <span class=\"keyword\">new</span> String();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p>\n<ul>\n<li>1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</li>\n<li>2） 运算符与下文一起换行。</li>\n<li>3） 方法调用的点符号与下文一起换行。</li>\n<li>4） 方法调用时，多个参数， 需要换行时， 在逗号后进行。</li>\n<li>5） 在括号前不要换行，见反例。</li>\n<li><p>正例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\"><span class=\"comment\">// 超过 120 个字符的情况下，换行缩进 4 个空格， 点号和方法名称一起换行</span></div><div class=\"line\">sb.append(<span class=\"string\">\"zi\"</span>).append(<span class=\"string\">\"xin\"</span>)...</div><div class=\"line\">    .append(<span class=\"string\">\"huang\"</span>)...</div><div class=\"line\">    .append(<span class=\"string\">\"huang\"</span>)...</div><div class=\"line\">    .append(<span class=\"string\">\"huang\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>反例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\"><span class=\"comment\">// 超过 120 个字符的情况下，不要在括号前换行</span></div><div class=\"line\">sb.append(<span class=\"string\">\"zi\"</span>).append(<span class=\"string\">\"xin\"</span>)...append</div><div class=\"line\">(<span class=\"string\">\"huang\"</span>);</div><div class=\"line\"><span class=\"comment\">// 参数很多的方法调用可能超过 120 个字符， 不要在逗号前换行</span></div><div class=\"line\">method(args1, args2, args3, ...</div><div class=\"line\">, argsX);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。</p>\n<ul>\n<li>正例： 下例中实参的”a”,后边必须要有一个空格。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">method(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】 IDE 的 <code>text file encoding</code> 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 Windows 格式。</p>\n</li>\n</ol>\n<h2 id=\"推荐-2\"><a href=\"#推荐-2\" class=\"headerlink\" title=\"推荐(2)\"></a>推荐(2)</h2><ol>\n<li><p>【推荐】没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。</p>\n<ul>\n<li><p>正例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">long</span> b = <span class=\"number\">4L</span>;</div><div class=\"line\"><span class=\"keyword\">float</span> c = <span class=\"number\">5F</span>;</div><div class=\"line\">StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div></pre></td></tr></table></figure>\n</li>\n<li><p>说明： 增加 sb 这个变量，如果需要对齐，则给 a、 b、 c 都要增加几个空格，在变量比较多的情况下，是非常累赘的事情。</p>\n</li>\n</ul>\n</li>\n<li>【推荐】 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。<ul>\n<li>说明： 没有必要插入<code>多个空行</code>进行隔开。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码格式-11\"><a href=\"#代码格式-11\" class=\"headerlink\" title=\"代码格式(11)\"></a>代码格式(11)</h1><h2 id=\"强制-9\"><a href=\"#强制-9\" class=\"headerlink\" title=\"强制(9)\"></a>强制(9)</h2><ol>\n<li>【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行； 如果是非空代码块则：<ul>\n<li>1） 左大括号前不换行。</li>\n<li>2） 左大括号后换行。</li>\n<li>3） 右大括号前换行。</li>\n<li>4） 右大括号后还有 else 等代码则不换行； 表示终止的右大括号后必须换行。</li>\n</ul>\n</li>\n<li>【强制】 左小括号和字符之间不出现空格； 同样，右小括号和字符之间也不出现空格。详见第 5 条下方正例提示。<ul>\n<li>反例： if (空格 a == b 空格)</li>\n</ul>\n</li>\n<li>【强制】 if/for/while/switch/do 等保留字与括号之间都必须加空格。</li>\n<li>【强制】任何二目、 三目运算符的左右两边都需要加一个空格。<ul>\n<li>说明： 运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。</li>\n</ul>\n</li>\n<li><p>【强制】 采用 4 个空格缩进，禁止使用 tab 字符。</p>\n<ul>\n<li>说明： 如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。 IDEA 设置 tab 为 4 个空格时，</li>\n<li>请勿勾选 <code>Use tab character</code>；而在 eclipse 中，必须勾选 <code>insert spaces for tabs</code>。</li>\n<li>正例： （ 涉及 1-5 点）  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 缩进 4 个空格</span></div><div class=\"line\">    String say = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 运算符的左右必须有一个空格</span></div><div class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号， 0 与右括号不需要空格</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        System.out.println(say);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 左大括号前加空格且不换行；左大括号后换行</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"world\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 右大括号前换行，右大括号后有 else，不用换行</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"ok\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 在右大括号后直接结束，则必须换行</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】注释的双斜线与注释内容之间有且仅有一个空格。</p>\n<ul>\n<li>正例：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这是示例注释，请注意在双斜线之后有一个空格</span></div><div class=\"line\">String ygb = <span class=\"keyword\">new</span> String();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p>\n<ul>\n<li>1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</li>\n<li>2） 运算符与下文一起换行。</li>\n<li>3） 方法调用的点符号与下文一起换行。</li>\n<li>4） 方法调用时，多个参数， 需要换行时， 在逗号后进行。</li>\n<li>5） 在括号前不要换行，见反例。</li>\n<li><p>正例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\"><span class=\"comment\">// 超过 120 个字符的情况下，换行缩进 4 个空格， 点号和方法名称一起换行</span></div><div class=\"line\">sb.append(<span class=\"string\">\"zi\"</span>).append(<span class=\"string\">\"xin\"</span>)...</div><div class=\"line\">    .append(<span class=\"string\">\"huang\"</span>)...</div><div class=\"line\">    .append(<span class=\"string\">\"huang\"</span>)...</div><div class=\"line\">    .append(<span class=\"string\">\"huang\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>反例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\"><span class=\"comment\">// 超过 120 个字符的情况下，不要在括号前换行</span></div><div class=\"line\">sb.append(<span class=\"string\">\"zi\"</span>).append(<span class=\"string\">\"xin\"</span>)...append</div><div class=\"line\">(<span class=\"string\">\"huang\"</span>);</div><div class=\"line\"><span class=\"comment\">// 参数很多的方法调用可能超过 120 个字符， 不要在逗号前换行</span></div><div class=\"line\">method(args1, args2, args3, ...</div><div class=\"line\">, argsX);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。</p>\n<ul>\n<li>正例： 下例中实参的”a”,后边必须要有一个空格。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">method(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】 IDE 的 <code>text file encoding</code> 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 Windows 格式。</p>\n</li>\n</ol>\n<h2 id=\"推荐-2\"><a href=\"#推荐-2\" class=\"headerlink\" title=\"推荐(2)\"></a>推荐(2)</h2><ol>\n<li><p>【推荐】没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。</p>\n<ul>\n<li><p>正例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">long</span> b = <span class=\"number\">4L</span>;</div><div class=\"line\"><span class=\"keyword\">float</span> c = <span class=\"number\">5F</span>;</div><div class=\"line\">StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div></pre></td></tr></table></figure>\n</li>\n<li><p>说明： 增加 sb 这个变量，如果需要对齐，则给 a、 b、 c 都要增加几个空格，在变量比较多的情况下，是非常累赘的事情。</p>\n</li>\n</ul>\n</li>\n<li>【推荐】 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。<ul>\n<li>说明： 没有必要插入<code>多个空行</code>进行隔开。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"阿里java规约(一)-编程规约(4)-OOP规约.md","toc":true,"date":"2018-02-09T07:04:34.000Z","scaffolds":null,"_content":"# OOP规约(20)\n## 强制(12)\n1. 【强制】使用类的`静态变量`或`静态方法`，直接用`类名`访问。\n2. 【强制】所有的`覆写`方法，`必须加@Override` 注解。\n    * 说明： getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。\n3. 【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。\n    * 说明： 可变参数必须放置在参数列表的最后。 （ 提倡同学们尽量不用可变参数编程）\n    * 正例： public User getUsers(String type, Integer... ids) {...}\n4. 【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名， 避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。\n5. 【强制】不能使用过时的类或方法。\n    * 说明： java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口； 作为调用方来说，有义务去考证过时方法的新实现是什么。\n6. 【强制】 Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。\n    * 正例： \"test\".equals(object);\n    * 反例： object.equals(\"test\");\n    * 说明： 推荐使用 java.util.Objects#equals（ JDK7 引入的工具类）\n7. 【强制】所有的相同类型的包装类对象之间`值的比较`，全部使用 equals 方法比较。\n    * 说明： 对于 Integer var = ? 在`-128` 至 `127` 范围内的赋值， Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。\n8. 关于基本数据类型与包装数据类型的使用标准如下：\n    * 1） 【强制】 所有的 POJO 类`属性必须使用包装数据类型`。\n    * 2） 【强制】 RPC 方法的返回值和参数必须使用包装数据类型。\n    * 3） 【推荐】 所有的`局部变量使用基本数据类型`。\n    * 说明： POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。\n    * 正例： 数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。\n    * 反例： 比如显示成交总额涨跌情况，即正负 x%， x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。\n9. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性`默认值`。\n    * 反例： POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。\n10. 【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败； 如果完全不兼容升级，避免反序化混乱，那么请修改 serialVersionUID 值。\n    * 说明： 注意 serialVersionUID 不一致会抛出序列化运行时异常。\n11. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。\n12. 【强制】 POJO 类必须写 toString 方法。使用 IDE 中的工具： source> generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。\n    * 说明： 在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。\n\n## 推荐(8)\n13. 【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。\n    * 说明：\n        ```java\n        String str = \"a,b,c,,\";\n        String[] ary = str.split(\",\");\n        // 预期大于 3，结果是 3\n        System.out.println(ary.length);\n        ```\n\n14. 【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于第 15 条规则。\n15. 【推荐】类内方法定义的顺序依次是：`公有方法或保护方法 > 私有方法 > getter/setter 方法`。\n    * 说明： 公有方法是类的调用者和维护者最关心的方法，首屏展示最好； 保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法； 而私有方法外部一般不需要特别关心，是一个黑盒实现； 因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。\n16. 【推荐】 setter 方法中，参数名称与类成员变量名称一致， this.成员名 = 参数名。在getter/setter 方法中， 不要增加业务逻辑，增加排查问题的难度。\n    * 反例：\n        ```java\n            public Integer getData() {\n                if (condition) {\n                    return this.data + 100;\n                } else {\n                    return this.data - 100;\n                }\n            }\n        ```\n17. 【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。\n    * 说明： 反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。\n    * 反例：\n        ```java\n        String str = \"start\";\n        for (int i = 0; i < 100; i++) {\n            str = str + \"hello\";\n        }\n        ```\n18. 【推荐】 final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：\n    * 1） 不允许被继承的类，如： String 类。\n    * 2） 不允许修改引用的域对象，如： POJO 类的域变量。\n    * 3） 不允许被重写的方法，如： POJO 类的 setter 方法。\n    * 4） 不允许运行过程中重新赋值的局部变量。\n    * 5） 避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好地进行重构。\n19. 【推荐】慎用 Object 的 clone 方法来拷贝对象。\n    * 说明： 对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。\n20. 【推荐】类成员与方法访问控制从严：\n    * 1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。\n    * 2） 工具类不允许有 public 或 default 构造方法。\n    * 3） 类非 static 成员变量并且与子类共享，必须是 protected。\n    * 4） 类非 static 成员变量并且仅在本类使用，必须是 private。\n    * 5） 类 static 成员变量如果仅在本类使用，必须是 private。\n    * 6） 若是 static 成员变量，必须考虑是否为 final。\n    * 7） 类成员方法只供类内部调用，必须是 private。\n    * 8） 类成员方法只对继承类公开，那么限制为 protected。\n    * 说明： 任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。\n    * 思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大， 无限制的到处跑，那么你会担心的。","source":"_posts/阿里java规约/阿里java规约(一)-编程规约(4)-OOP规约.md","raw":"---\ntitle: 阿里java规约(一)-编程规约(4)-OOP规约.md\ncategories: 阿里java规约\ntags:\n  - 阿里java规约\ntoc: true\ndate: 2018-02-09 15:04:34\nscaffolds:\n---\n# OOP规约(20)\n## 强制(12)\n1. 【强制】使用类的`静态变量`或`静态方法`，直接用`类名`访问。\n2. 【强制】所有的`覆写`方法，`必须加@Override` 注解。\n    * 说明： getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。\n3. 【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。\n    * 说明： 可变参数必须放置在参数列表的最后。 （ 提倡同学们尽量不用可变参数编程）\n    * 正例： public User getUsers(String type, Integer... ids) {...}\n4. 【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名， 避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。\n5. 【强制】不能使用过时的类或方法。\n    * 说明： java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口； 作为调用方来说，有义务去考证过时方法的新实现是什么。\n6. 【强制】 Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。\n    * 正例： \"test\".equals(object);\n    * 反例： object.equals(\"test\");\n    * 说明： 推荐使用 java.util.Objects#equals（ JDK7 引入的工具类）\n7. 【强制】所有的相同类型的包装类对象之间`值的比较`，全部使用 equals 方法比较。\n    * 说明： 对于 Integer var = ? 在`-128` 至 `127` 范围内的赋值， Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。\n8. 关于基本数据类型与包装数据类型的使用标准如下：\n    * 1） 【强制】 所有的 POJO 类`属性必须使用包装数据类型`。\n    * 2） 【强制】 RPC 方法的返回值和参数必须使用包装数据类型。\n    * 3） 【推荐】 所有的`局部变量使用基本数据类型`。\n    * 说明： POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。\n    * 正例： 数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。\n    * 反例： 比如显示成交总额涨跌情况，即正负 x%， x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。\n9. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性`默认值`。\n    * 反例： POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。\n10. 【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败； 如果完全不兼容升级，避免反序化混乱，那么请修改 serialVersionUID 值。\n    * 说明： 注意 serialVersionUID 不一致会抛出序列化运行时异常。\n11. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。\n12. 【强制】 POJO 类必须写 toString 方法。使用 IDE 中的工具： source> generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。\n    * 说明： 在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。\n\n## 推荐(8)\n13. 【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。\n    * 说明：\n        ```java\n        String str = \"a,b,c,,\";\n        String[] ary = str.split(\",\");\n        // 预期大于 3，结果是 3\n        System.out.println(ary.length);\n        ```\n\n14. 【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于第 15 条规则。\n15. 【推荐】类内方法定义的顺序依次是：`公有方法或保护方法 > 私有方法 > getter/setter 方法`。\n    * 说明： 公有方法是类的调用者和维护者最关心的方法，首屏展示最好； 保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法； 而私有方法外部一般不需要特别关心，是一个黑盒实现； 因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。\n16. 【推荐】 setter 方法中，参数名称与类成员变量名称一致， this.成员名 = 参数名。在getter/setter 方法中， 不要增加业务逻辑，增加排查问题的难度。\n    * 反例：\n        ```java\n            public Integer getData() {\n                if (condition) {\n                    return this.data + 100;\n                } else {\n                    return this.data - 100;\n                }\n            }\n        ```\n17. 【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。\n    * 说明： 反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。\n    * 反例：\n        ```java\n        String str = \"start\";\n        for (int i = 0; i < 100; i++) {\n            str = str + \"hello\";\n        }\n        ```\n18. 【推荐】 final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：\n    * 1） 不允许被继承的类，如： String 类。\n    * 2） 不允许修改引用的域对象，如： POJO 类的域变量。\n    * 3） 不允许被重写的方法，如： POJO 类的 setter 方法。\n    * 4） 不允许运行过程中重新赋值的局部变量。\n    * 5） 避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好地进行重构。\n19. 【推荐】慎用 Object 的 clone 方法来拷贝对象。\n    * 说明： 对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。\n20. 【推荐】类成员与方法访问控制从严：\n    * 1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。\n    * 2） 工具类不允许有 public 或 default 构造方法。\n    * 3） 类非 static 成员变量并且与子类共享，必须是 protected。\n    * 4） 类非 static 成员变量并且仅在本类使用，必须是 private。\n    * 5） 类 static 成员变量如果仅在本类使用，必须是 private。\n    * 6） 若是 static 成员变量，必须考虑是否为 final。\n    * 7） 类成员方法只供类内部调用，必须是 private。\n    * 8） 类成员方法只对继承类公开，那么限制为 protected。\n    * 说明： 任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。\n    * 思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大， 无限制的到处跑，那么你会担心的。","slug":"阿里java规约/阿里java规约(一)-编程规约(4)-OOP规约","published":1,"updated":"2018-02-09T08:45:13.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a1l004bv4vfmh6s80cw","content":"<h1 id=\"OOP规约-20\"><a href=\"#OOP规约-20\" class=\"headerlink\" title=\"OOP规约(20)\"></a>OOP规约(20)</h1><h2 id=\"强制-12\"><a href=\"#强制-12\" class=\"headerlink\" title=\"强制(12)\"></a>强制(12)</h2><ol>\n<li>【强制】使用类的<code>静态变量</code>或<code>静态方法</code>，直接用<code>类名</code>访问。</li>\n<li>【强制】所有的<code>覆写</code>方法，<code>必须加@Override</code> 注解。<ul>\n<li>说明： getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</li>\n</ul>\n</li>\n<li>【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。<ul>\n<li>说明： 可变参数必须放置在参数列表的最后。 （ 提倡同学们尽量不用可变参数编程）</li>\n<li>正例： public User getUsers(String type, Integer… ids) {…}</li>\n</ul>\n</li>\n<li>【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名， 避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</li>\n<li>【强制】不能使用过时的类或方法。<ul>\n<li>说明： java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口； 作为调用方来说，有义务去考证过时方法的新实现是什么。</li>\n</ul>\n</li>\n<li>【强制】 Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。<ul>\n<li>正例： “test”.equals(object);</li>\n<li>反例： object.equals(“test”);</li>\n<li>说明： 推荐使用 java.util.Objects#equals（ JDK7 引入的工具类）</li>\n</ul>\n</li>\n<li>【强制】所有的相同类型的包装类对象之间<code>值的比较</code>，全部使用 equals 方法比较。<ul>\n<li>说明： 对于 Integer var = ? 在<code>-128</code> 至 <code>127</code> 范围内的赋值， Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</li>\n</ul>\n</li>\n<li>关于基本数据类型与包装数据类型的使用标准如下：<ul>\n<li>1） 【强制】 所有的 POJO 类<code>属性必须使用包装数据类型</code>。</li>\n<li>2） 【强制】 RPC 方法的返回值和参数必须使用包装数据类型。</li>\n<li>3） 【推荐】 所有的<code>局部变量使用基本数据类型</code>。</li>\n<li>说明： POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。</li>\n<li>正例： 数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</li>\n<li>反例： 比如显示成交总额涨跌情况，即正负 x%， x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</li>\n</ul>\n</li>\n<li>【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性<code>默认值</code>。<ul>\n<li>反例： POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</li>\n</ul>\n</li>\n<li>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败； 如果完全不兼容升级，避免反序化混乱，那么请修改 serialVersionUID 值。<ul>\n<li>说明： 注意 serialVersionUID 不一致会抛出序列化运行时异常。</li>\n</ul>\n</li>\n<li>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</li>\n<li>【强制】 POJO 类必须写 toString 方法。使用 IDE 中的工具： source&gt; generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。<ul>\n<li>说明： 在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-8\"><a href=\"#推荐-8\" class=\"headerlink\" title=\"推荐(8)\"></a>推荐(8)</h2><ol>\n<li><p>【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。</p>\n<ul>\n<li>说明：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str = <span class=\"string\">\"a,b,c,,\"</span>;</div><div class=\"line\">String[] ary = str.split(<span class=\"string\">\",\"</span>);</div><div class=\"line\"><span class=\"comment\">// 预期大于 3，结果是 3</span></div><div class=\"line\">System.out.println(ary.length);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于第 15 条规则。</p>\n</li>\n<li>【推荐】类内方法定义的顺序依次是：<code>公有方法或保护方法 &gt; 私有方法 &gt; getter/setter 方法</code>。<ul>\n<li>说明： 公有方法是类的调用者和维护者最关心的方法，首屏展示最好； 保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法； 而私有方法外部一般不需要特别关心，是一个黑盒实现； 因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。</li>\n</ul>\n</li>\n<li><p>【推荐】 setter 方法中，参数名称与类成员变量名称一致， this.成员名 = 参数名。在getter/setter 方法中， 不要增加业务逻辑，增加排查问题的难度。</p>\n<ul>\n<li>反例：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data + <span class=\"number\">100</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data - <span class=\"number\">100</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</p>\n<ul>\n<li>说明： 反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</li>\n<li>反例：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str = <span class=\"string\">\"start\"</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">    str = str + <span class=\"string\">\"hello\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【推荐】 final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：</p>\n<ul>\n<li>1） 不允许被继承的类，如： String 类。</li>\n<li>2） 不允许修改引用的域对象，如： POJO 类的域变量。</li>\n<li>3） 不允许被重写的方法，如： POJO 类的 setter 方法。</li>\n<li>4） 不允许运行过程中重新赋值的局部变量。</li>\n<li>5） 避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好地进行重构。</li>\n</ul>\n</li>\n<li>【推荐】慎用 Object 的 clone 方法来拷贝对象。<ul>\n<li>说明： 对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。</li>\n</ul>\n</li>\n<li>【推荐】类成员与方法访问控制从严：<ul>\n<li>1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</li>\n<li>2） 工具类不允许有 public 或 default 构造方法。</li>\n<li>3） 类非 static 成员变量并且与子类共享，必须是 protected。</li>\n<li>4） 类非 static 成员变量并且仅在本类使用，必须是 private。</li>\n<li>5） 类 static 成员变量如果仅在本类使用，必须是 private。</li>\n<li>6） 若是 static 成员变量，必须考虑是否为 final。</li>\n<li>7） 类成员方法只供类内部调用，必须是 private。</li>\n<li>8） 类成员方法只对继承类公开，那么限制为 protected。</li>\n<li>说明： 任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</li>\n<li>思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大， 无限制的到处跑，那么你会担心的。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"OOP规约-20\"><a href=\"#OOP规约-20\" class=\"headerlink\" title=\"OOP规约(20)\"></a>OOP规约(20)</h1><h2 id=\"强制-12\"><a href=\"#强制-12\" class=\"headerlink\" title=\"强制(12)\"></a>强制(12)</h2><ol>\n<li>【强制】使用类的<code>静态变量</code>或<code>静态方法</code>，直接用<code>类名</code>访问。</li>\n<li>【强制】所有的<code>覆写</code>方法，<code>必须加@Override</code> 注解。<ul>\n<li>说明： getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</li>\n</ul>\n</li>\n<li>【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。<ul>\n<li>说明： 可变参数必须放置在参数列表的最后。 （ 提倡同学们尽量不用可变参数编程）</li>\n<li>正例： public User getUsers(String type, Integer… ids) {…}</li>\n</ul>\n</li>\n<li>【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名， 避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</li>\n<li>【强制】不能使用过时的类或方法。<ul>\n<li>说明： java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口； 作为调用方来说，有义务去考证过时方法的新实现是什么。</li>\n</ul>\n</li>\n<li>【强制】 Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。<ul>\n<li>正例： “test”.equals(object);</li>\n<li>反例： object.equals(“test”);</li>\n<li>说明： 推荐使用 java.util.Objects#equals（ JDK7 引入的工具类）</li>\n</ul>\n</li>\n<li>【强制】所有的相同类型的包装类对象之间<code>值的比较</code>，全部使用 equals 方法比较。<ul>\n<li>说明： 对于 Integer var = ? 在<code>-128</code> 至 <code>127</code> 范围内的赋值， Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</li>\n</ul>\n</li>\n<li>关于基本数据类型与包装数据类型的使用标准如下：<ul>\n<li>1） 【强制】 所有的 POJO 类<code>属性必须使用包装数据类型</code>。</li>\n<li>2） 【强制】 RPC 方法的返回值和参数必须使用包装数据类型。</li>\n<li>3） 【推荐】 所有的<code>局部变量使用基本数据类型</code>。</li>\n<li>说明： POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。</li>\n<li>正例： 数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</li>\n<li>反例： 比如显示成交总额涨跌情况，即正负 x%， x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</li>\n</ul>\n</li>\n<li>【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性<code>默认值</code>。<ul>\n<li>反例： POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</li>\n</ul>\n</li>\n<li>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败； 如果完全不兼容升级，避免反序化混乱，那么请修改 serialVersionUID 值。<ul>\n<li>说明： 注意 serialVersionUID 不一致会抛出序列化运行时异常。</li>\n</ul>\n</li>\n<li>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</li>\n<li>【强制】 POJO 类必须写 toString 方法。使用 IDE 中的工具： source&gt; generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。<ul>\n<li>说明： 在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-8\"><a href=\"#推荐-8\" class=\"headerlink\" title=\"推荐(8)\"></a>推荐(8)</h2><ol>\n<li><p>【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。</p>\n<ul>\n<li>说明：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str = <span class=\"string\">\"a,b,c,,\"</span>;</div><div class=\"line\">String[] ary = str.split(<span class=\"string\">\",\"</span>);</div><div class=\"line\"><span class=\"comment\">// 预期大于 3，结果是 3</span></div><div class=\"line\">System.out.println(ary.length);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于第 15 条规则。</p>\n</li>\n<li>【推荐】类内方法定义的顺序依次是：<code>公有方法或保护方法 &gt; 私有方法 &gt; getter/setter 方法</code>。<ul>\n<li>说明： 公有方法是类的调用者和维护者最关心的方法，首屏展示最好； 保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法； 而私有方法外部一般不需要特别关心，是一个黑盒实现； 因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。</li>\n</ul>\n</li>\n<li><p>【推荐】 setter 方法中，参数名称与类成员变量名称一致， this.成员名 = 参数名。在getter/setter 方法中， 不要增加业务逻辑，增加排查问题的难度。</p>\n<ul>\n<li>反例：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data + <span class=\"number\">100</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data - <span class=\"number\">100</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</p>\n<ul>\n<li>说明： 反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</li>\n<li>反例：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str = <span class=\"string\">\"start\"</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">    str = str + <span class=\"string\">\"hello\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【推荐】 final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：</p>\n<ul>\n<li>1） 不允许被继承的类，如： String 类。</li>\n<li>2） 不允许修改引用的域对象，如： POJO 类的域变量。</li>\n<li>3） 不允许被重写的方法，如： POJO 类的 setter 方法。</li>\n<li>4） 不允许运行过程中重新赋值的局部变量。</li>\n<li>5） 避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好地进行重构。</li>\n</ul>\n</li>\n<li>【推荐】慎用 Object 的 clone 方法来拷贝对象。<ul>\n<li>说明： 对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。</li>\n</ul>\n</li>\n<li>【推荐】类成员与方法访问控制从严：<ul>\n<li>1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</li>\n<li>2） 工具类不允许有 public 或 default 构造方法。</li>\n<li>3） 类非 static 成员变量并且与子类共享，必须是 protected。</li>\n<li>4） 类非 static 成员变量并且仅在本类使用，必须是 private。</li>\n<li>5） 类 static 成员变量如果仅在本类使用，必须是 private。</li>\n<li>6） 若是 static 成员变量，必须考虑是否为 final。</li>\n<li>7） 类成员方法只供类内部调用，必须是 private。</li>\n<li>8） 类成员方法只对继承类公开，那么限制为 protected。</li>\n<li>说明： 任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</li>\n<li>思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大， 无限制的到处跑，那么你会担心的。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"阿里java规约(一)-编程规约(6)-并发处理.md","toc":true,"date":"2018-02-09T07:16:33.000Z","scaffolds":null,"_content":"\n# 并发处理(15)\n## 强制(9)\n1. 【强制】 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。\n    * 说明： 资源驱动类、工具类、单例工厂类都需要注意。\n2. 【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。\n    * 正例：\n        ```java\n        public class TimerTaskThread extends Thread {\n            public TimerTaskThread() {\n                super.setName(\"TimerTaskThread\");\n                ...\n            }\n        ```\n3. 【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\n    * 说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\n4. 【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。\n    * 说明： Executors 返回的线程池对象的弊端如下：\n        * 1） `FixedThreadPool` 和 `SingleThreadPool`:\n            * 允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。\n        * 2） `CachedThreadPool` 和 `ScheduledThreadPool`:\n            * 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。\n5. 【强制】 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。\n    * 正例： 注意线程安全，使用 DateUtils。亦推荐如下处理：\n        ```java\n        private static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() {\n            @Override\n            protected DateFormat initialValue() {\n                return new SimpleDateFormat(\"yyyy-MM-dd\");\n            }\n        };\n        ```\n    * 说明： 如果是 JDK8 的应用，可以使用 Instant 代替 Date， LocalDateTime 代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释： simple beautiful strong immutable thread-safe。\n6. 【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁； 能锁区块，就不要锁整个方法体； 能用对象锁，就不要用类锁。\n    * 说明： 尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。\n7. 【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。\n    * 说明： 线程一需要对表 A、 B、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、 B、 C，否则可能出现死锁。\n8. 【强制】并发修改同一记录时，避免更新丢失， 需要加锁。 要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。\n    * 说明： 如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。\n9. 【强制】多线程并行处理定时任务时， Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。\n\n## 推荐(3)\n10. 【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。\n    * 说明： 注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。\n11. 【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。\n    * 说明： Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。\n    * 正例： 在 JDK7 之后，可以直接使用 API ThreadLocalRandom， 而在 JDK7 之前， 需要编码保证每个线程持有一个实例。\n12. 【推荐】 在并发场景下， 通过双重检查锁（ double-checked locking） 实现延迟初始化的优化问题隐患(可参考 The \"Double-Checked Locking is Broken\" Declaration)， 推荐解决方案中较为简单一种（ 适用于 JDK5 及以上版本） ，将目标属性声明为 volatile 型。\n    * 反例：\n        ```java\n        class Singleton {\n            private Helper helper = null;\n            public Helper getHelper() {\n            if (helper == null) synchronized(this) {\n                if (helper == null)\n                    helper = new Helper();\n                }\n                return helper;\n            }\n            // other methods and fields...\n        }\n        ```\n## 参考(3)\n13. 【参考】 volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现：  \n    AtomicInteger count = new AtomicInteger(); count.addAndGet(1);   \n    如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（ 减少乐观锁的重试次数）。\n14. 【参考】 HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。\n15. 【参考】 ThreadLocal 无法解决共享对象的更新问题， ThreadLocal 对象建议使用 static修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。","source":"_posts/阿里java规约/阿里java规约(一)-编程规约(6)-并发处理.md","raw":"---\ntitle: 阿里java规约(一)-编程规约(6)-并发处理.md\ncategories: 阿里java规约\ntags:\n  - 阿里java规约\ntoc: true\ndate: 2018-02-09 15:16:33\nscaffolds:\n---\n\n# 并发处理(15)\n## 强制(9)\n1. 【强制】 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。\n    * 说明： 资源驱动类、工具类、单例工厂类都需要注意。\n2. 【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。\n    * 正例：\n        ```java\n        public class TimerTaskThread extends Thread {\n            public TimerTaskThread() {\n                super.setName(\"TimerTaskThread\");\n                ...\n            }\n        ```\n3. 【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\n    * 说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\n4. 【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。\n    * 说明： Executors 返回的线程池对象的弊端如下：\n        * 1） `FixedThreadPool` 和 `SingleThreadPool`:\n            * 允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。\n        * 2） `CachedThreadPool` 和 `ScheduledThreadPool`:\n            * 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。\n5. 【强制】 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。\n    * 正例： 注意线程安全，使用 DateUtils。亦推荐如下处理：\n        ```java\n        private static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() {\n            @Override\n            protected DateFormat initialValue() {\n                return new SimpleDateFormat(\"yyyy-MM-dd\");\n            }\n        };\n        ```\n    * 说明： 如果是 JDK8 的应用，可以使用 Instant 代替 Date， LocalDateTime 代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释： simple beautiful strong immutable thread-safe。\n6. 【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁； 能锁区块，就不要锁整个方法体； 能用对象锁，就不要用类锁。\n    * 说明： 尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。\n7. 【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。\n    * 说明： 线程一需要对表 A、 B、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、 B、 C，否则可能出现死锁。\n8. 【强制】并发修改同一记录时，避免更新丢失， 需要加锁。 要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。\n    * 说明： 如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。\n9. 【强制】多线程并行处理定时任务时， Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。\n\n## 推荐(3)\n10. 【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。\n    * 说明： 注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。\n11. 【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。\n    * 说明： Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。\n    * 正例： 在 JDK7 之后，可以直接使用 API ThreadLocalRandom， 而在 JDK7 之前， 需要编码保证每个线程持有一个实例。\n12. 【推荐】 在并发场景下， 通过双重检查锁（ double-checked locking） 实现延迟初始化的优化问题隐患(可参考 The \"Double-Checked Locking is Broken\" Declaration)， 推荐解决方案中较为简单一种（ 适用于 JDK5 及以上版本） ，将目标属性声明为 volatile 型。\n    * 反例：\n        ```java\n        class Singleton {\n            private Helper helper = null;\n            public Helper getHelper() {\n            if (helper == null) synchronized(this) {\n                if (helper == null)\n                    helper = new Helper();\n                }\n                return helper;\n            }\n            // other methods and fields...\n        }\n        ```\n## 参考(3)\n13. 【参考】 volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现：  \n    AtomicInteger count = new AtomicInteger(); count.addAndGet(1);   \n    如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（ 减少乐观锁的重试次数）。\n14. 【参考】 HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。\n15. 【参考】 ThreadLocal 无法解决共享对象的更新问题， ThreadLocal 对象建议使用 static修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。","slug":"阿里java规约/阿里java规约(一)-编程规约(6)-并发处理","published":1,"updated":"2018-02-09T08:45:08.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a1n004ev4vfwy6yo6yg","content":"<h1 id=\"并发处理-15\"><a href=\"#并发处理-15\" class=\"headerlink\" title=\"并发处理(15)\"></a>并发处理(15)</h1><h2 id=\"强制-9\"><a href=\"#强制-9\" class=\"headerlink\" title=\"强制(9)\"></a>强制(9)</h2><ol>\n<li>【强制】 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。<ul>\n<li>说明： 资源驱动类、工具类、单例工厂类都需要注意。</li>\n</ul>\n</li>\n<li><p>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</p>\n<ul>\n<li>正例：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerTaskThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TimerTaskThread</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.setName(<span class=\"string\">\"TimerTaskThread\"</span>);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p>\n<ul>\n<li>说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</li>\n</ul>\n</li>\n<li>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<ul>\n<li>说明： Executors 返回的线程池对象的弊端如下：<ul>\n<li>1） <code>FixedThreadPool</code> 和 <code>SingleThreadPool</code>:<ul>\n<li>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</li>\n</ul>\n</li>\n<li>2） <code>CachedThreadPool</code> 和 <code>ScheduledThreadPool</code>:<ul>\n<li>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>【强制】 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。</p>\n<ul>\n<li><p>正例： 注意线程安全，使用 DateUtils。亦推荐如下处理：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class=\"keyword\">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> DateFormat <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>说明： 如果是 JDK8 的应用，可以使用 Instant 代替 Date， LocalDateTime 代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释： simple beautiful strong immutable thread-safe。</p>\n</li>\n</ul>\n</li>\n<li>【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁； 能锁区块，就不要锁整个方法体； 能用对象锁，就不要用类锁。<ul>\n<li>说明： 尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</li>\n</ul>\n</li>\n<li>【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。<ul>\n<li>说明： 线程一需要对表 A、 B、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、 B、 C，否则可能出现死锁。</li>\n</ul>\n</li>\n<li>【强制】并发修改同一记录时，避免更新丢失， 需要加锁。 要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。<ul>\n<li>说明： 如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</li>\n</ul>\n</li>\n<li>【强制】多线程并行处理定时任务时， Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</li>\n</ol>\n<h2 id=\"推荐-3\"><a href=\"#推荐-3\" class=\"headerlink\" title=\"推荐(3)\"></a>推荐(3)</h2><ol>\n<li>【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。<ul>\n<li>说明： 注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</li>\n</ul>\n</li>\n<li>【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。<ul>\n<li>说明： Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。</li>\n<li>正例： 在 JDK7 之后，可以直接使用 API ThreadLocalRandom， 而在 JDK7 之前， 需要编码保证每个线程持有一个实例。</li>\n</ul>\n</li>\n<li>【推荐】 在并发场景下， 通过双重检查锁（ double-checked locking） 实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)， 推荐解决方案中较为简单一种（ 适用于 JDK5 及以上版本） ，将目标属性声明为 volatile 型。<ul>\n<li>反例：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Helper helper = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Helper <span class=\"title\">getHelper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (helper == <span class=\"keyword\">null</span>) <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (helper == <span class=\"keyword\">null</span>)</div><div class=\"line\">            helper = <span class=\"keyword\">new</span> Helper();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> helper;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// other methods and fields...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"参考-3\"><a href=\"#参考-3\" class=\"headerlink\" title=\"参考(3)\"></a>参考(3)</h2><ol>\n<li>【参考】 volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现：<br>AtomicInteger count = new AtomicInteger(); count.addAndGet(1);<br>如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（ 减少乐观锁的重试次数）。</li>\n<li>【参考】 HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。</li>\n<li>【参考】 ThreadLocal 无法解决共享对象的更新问题， ThreadLocal 对象建议使用 static修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"并发处理-15\"><a href=\"#并发处理-15\" class=\"headerlink\" title=\"并发处理(15)\"></a>并发处理(15)</h1><h2 id=\"强制-9\"><a href=\"#强制-9\" class=\"headerlink\" title=\"强制(9)\"></a>强制(9)</h2><ol>\n<li>【强制】 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。<ul>\n<li>说明： 资源驱动类、工具类、单例工厂类都需要注意。</li>\n</ul>\n</li>\n<li><p>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</p>\n<ul>\n<li>正例：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerTaskThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TimerTaskThread</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.setName(<span class=\"string\">\"TimerTaskThread\"</span>);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p>\n<ul>\n<li>说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</li>\n</ul>\n</li>\n<li>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<ul>\n<li>说明： Executors 返回的线程池对象的弊端如下：<ul>\n<li>1） <code>FixedThreadPool</code> 和 <code>SingleThreadPool</code>:<ul>\n<li>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</li>\n</ul>\n</li>\n<li>2） <code>CachedThreadPool</code> 和 <code>ScheduledThreadPool</code>:<ul>\n<li>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>【强制】 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。</p>\n<ul>\n<li><p>正例： 注意线程安全，使用 DateUtils。亦推荐如下处理：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class=\"keyword\">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> DateFormat <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>说明： 如果是 JDK8 的应用，可以使用 Instant 代替 Date， LocalDateTime 代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释： simple beautiful strong immutable thread-safe。</p>\n</li>\n</ul>\n</li>\n<li>【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁； 能锁区块，就不要锁整个方法体； 能用对象锁，就不要用类锁。<ul>\n<li>说明： 尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</li>\n</ul>\n</li>\n<li>【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。<ul>\n<li>说明： 线程一需要对表 A、 B、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、 B、 C，否则可能出现死锁。</li>\n</ul>\n</li>\n<li>【强制】并发修改同一记录时，避免更新丢失， 需要加锁。 要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。<ul>\n<li>说明： 如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</li>\n</ul>\n</li>\n<li>【强制】多线程并行处理定时任务时， Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</li>\n</ol>\n<h2 id=\"推荐-3\"><a href=\"#推荐-3\" class=\"headerlink\" title=\"推荐(3)\"></a>推荐(3)</h2><ol>\n<li>【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。<ul>\n<li>说明： 注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</li>\n</ul>\n</li>\n<li>【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。<ul>\n<li>说明： Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。</li>\n<li>正例： 在 JDK7 之后，可以直接使用 API ThreadLocalRandom， 而在 JDK7 之前， 需要编码保证每个线程持有一个实例。</li>\n</ul>\n</li>\n<li>【推荐】 在并发场景下， 通过双重检查锁（ double-checked locking） 实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)， 推荐解决方案中较为简单一种（ 适用于 JDK5 及以上版本） ，将目标属性声明为 volatile 型。<ul>\n<li>反例：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Helper helper = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Helper <span class=\"title\">getHelper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (helper == <span class=\"keyword\">null</span>) <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (helper == <span class=\"keyword\">null</span>)</div><div class=\"line\">            helper = <span class=\"keyword\">new</span> Helper();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> helper;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// other methods and fields...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"参考-3\"><a href=\"#参考-3\" class=\"headerlink\" title=\"参考(3)\"></a>参考(3)</h2><ol>\n<li>【参考】 volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现：<br>AtomicInteger count = new AtomicInteger(); count.addAndGet(1);<br>如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（ 减少乐观锁的重试次数）。</li>\n<li>【参考】 HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。</li>\n<li>【参考】 ThreadLocal 无法解决共享对象的更新问题， ThreadLocal 对象建议使用 static修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</li>\n</ol>\n"},{"title":"阿里java规约(一)-编程规约(5)-集合处理.md","toc":true,"date":"2018-02-09T07:07:33.000Z","scaffolds":null,"_content":"\n# 集合处理(13)\n## 强制(8)\n1. 【强制】 关于 hashCode 和 equals 的处理，遵循如下规则：\n    * 1） 只要重写 equals，就必须重写 hashCode。\n    * 2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 `Set 存储的对象必须重写`这两个方法。\n    * 3） 如果`自定义对象作为 Map 的键`，那么`必须重写` hashCode 和 equals。\n    * 说明： String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。\n2. 【强制】 ArrayList的subList结果不可强转成ArrayList，否则会抛出 ClassCastException异常， 即 java.util.RandomAccessSubList cannot be cast to java.util.ArrayList.\n    * 说明： subList 返回的是 ArrayList 的内部类 `SubList`，并不是 ArrayList ，而是`ArrayList 的一个视图`，对于 SubList 子列表的所有操作`最终会反映到原列表`上。\n3. 【强制】在 subList 场景中， 高度注意对`原集合元素个数的修改`，`会导致子列表的遍历、增加、删除均会产生 ConcurrentModificationException 异常`。\n4. 【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一样的数组，大小就是 list.size()。\n    * 说明： 使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配内存空间，并返回新数组地址； 如果数组元素个数大于实际所需，下标为[ list.size() ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。\n    * 正例：\n        ```java\n        List<String> list = new ArrayList<String>(2);\n        list.add(\"guan\");\n        list.add(\"bao\");\n        String[] array = new String[list.size()];\n        array = list.toArray(array);\n        ```\n    * 反例： 直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。\n5. 【强制】使用工具类 `Arrays.asList()`把数组`转换`成`集合`时，`不能使用其修改集合相关的方法`，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。\n    * 说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。\n        ```java\n        String[] str = new String[] { \"you\", \"wu\" };\n        List list = Arrays.asList(str);\n        第一种情况： list.add(\"yangguanbao\"); 运行时异常。\n        第二种情况： str[0] = \"gujin\"; 那么 list.get(0)也会随之修改。\n        ```\n6. 【强制】泛型通配符<? extends T>来接收返回的数据，此写法的泛型集合不能使用 add 方法， 而<? super T>不能使用 get 方法，作为接口调用赋值时易出错。\n    * 说明： 扩展说一下 PECS(Producer Extends Consumer Super)原则： 第一、 频繁往外读取内容的，适合用<? extends T>。 第二、 经常往里插入的，适合用<? super T>。\n7. 【强制】不要在 foreach 循环里进行元素的 remove/add 操作。 `remove 元素请使用 Iterator方式`，如果`并发`操作，需要对 Iterator 对象`加锁`。\n    * 正例：\n        ```java\n            Iterator<String> iterator = list.iterator();\n            while (iterator.hasNext()) {\n                String item = iterator.next();\n                if (删除元素的条件) {\n                    iterator.remove();\n                }\n            }\n        ```\n    * 反例：\n        ```java\n        List<String> list = new ArrayList<String>();\n        list.add(\"1\");\n        list.add(\"2\");\n        for (String item : list) {\n            if (\"1\".equals(item)) {\n                list.remove(item);\n            }\n        }\n        ```\n    * 说明： 以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？\n8. 【强制】在 JDK7 版本及以上， Comparator 要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。\n    * 说明： 三个条件如下\n        * 1） x， y 的比较结果和 y， x 的比较结果相反。\n        * 2） x>y， y>z， 则 x>z。\n        * 3） x=y， 则 x， z 比较结果和 y， z 比较结果相同。\n    * 反例： 下例中没有处理相等的情况，实际使用中可能会出现异常：\n        ```java\n        new Comparator<Student>() {\n            @Override\n            public int compare(Student o1, Student o2) {\n                return o1.getId() > o2.getId() ? 1 : -1;\n            }\n        };\n        ```\n\n## 推荐(3)\n9. 【推荐】集合初始化时， 指定集合初始值大小。\n    * 说明：HashMap 使用 HashMap(int initialCapacity) 初始化，\n    * 正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子 （ 即 loaderfactor） 默认为 0.75， 如果暂时无法确定初始值大小，请设置为 16（即默认值） 。\n    * 反例： HashMap 需要放置 1024 个元素， 由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大， resize 需要重建 hash 表，严重影响性能。\n10. 【推荐】`使用 entrySet 遍历 Map 类集合 KV`，而不是 keySet 方式进行遍历。\n    * 说明： keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。`如果是 JDK8，使用 Map.foreach 方法`。\n    * 正例： values()返回的是 V 值集合，是一个 list 集合对象； keySet()返回的是 K 值集合，是一个 Set 集合对象； entrySet()返回的是 K-V 值组合集合。\n11. 【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：\n\n    集合类 | Key | Value | Super | 说明\n    ----|-----|-------|-------|---\n    Hashtable | 不允许为null | 不允许为null | Dictionary | 线程安全\n    ConcurrentHashMap | 不允许为null | 不允许为null | AbstractMap | 锁分段技术（ JDK8:CAS）\n    TreeMap | 不允许为null | 允许为null | AbstractMap | 线程不安全\n    HashMap | 允许为null | 允许为null | AbstractMap | 线程不安全\n    \n    * 反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。\n\n## 参考(2)\n12. 【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。\n    * 说明： `有序性`是指遍历的结果是按某种比较规则依次排列的。 `稳定性`指集合每次遍历的元素次序是一定的。 如： ArrayList 是 order/unsort； HashMap 是 unorder/unsort； TreeSet 是order/sort。\n13. 【参考】利用 `Set` 元素唯一的特性，可以快速对一个集合进行`去重操作`，避免使用 List 的contains 方法进行遍历、对比、 去重操作。","source":"_posts/阿里java规约/阿里java规约(一)-编程规约(5)-集合处理.md","raw":"---\ntitle: 阿里java规约(一)-编程规约(5)-集合处理.md\ncategories: 阿里java规约\ntags:\n  - 阿里java规约\ntoc: true\ndate: 2018-02-09 15:07:33\nscaffolds:\n---\n\n# 集合处理(13)\n## 强制(8)\n1. 【强制】 关于 hashCode 和 equals 的处理，遵循如下规则：\n    * 1） 只要重写 equals，就必须重写 hashCode。\n    * 2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 `Set 存储的对象必须重写`这两个方法。\n    * 3） 如果`自定义对象作为 Map 的键`，那么`必须重写` hashCode 和 equals。\n    * 说明： String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。\n2. 【强制】 ArrayList的subList结果不可强转成ArrayList，否则会抛出 ClassCastException异常， 即 java.util.RandomAccessSubList cannot be cast to java.util.ArrayList.\n    * 说明： subList 返回的是 ArrayList 的内部类 `SubList`，并不是 ArrayList ，而是`ArrayList 的一个视图`，对于 SubList 子列表的所有操作`最终会反映到原列表`上。\n3. 【强制】在 subList 场景中， 高度注意对`原集合元素个数的修改`，`会导致子列表的遍历、增加、删除均会产生 ConcurrentModificationException 异常`。\n4. 【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一样的数组，大小就是 list.size()。\n    * 说明： 使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配内存空间，并返回新数组地址； 如果数组元素个数大于实际所需，下标为[ list.size() ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。\n    * 正例：\n        ```java\n        List<String> list = new ArrayList<String>(2);\n        list.add(\"guan\");\n        list.add(\"bao\");\n        String[] array = new String[list.size()];\n        array = list.toArray(array);\n        ```\n    * 反例： 直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。\n5. 【强制】使用工具类 `Arrays.asList()`把数组`转换`成`集合`时，`不能使用其修改集合相关的方法`，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。\n    * 说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。\n        ```java\n        String[] str = new String[] { \"you\", \"wu\" };\n        List list = Arrays.asList(str);\n        第一种情况： list.add(\"yangguanbao\"); 运行时异常。\n        第二种情况： str[0] = \"gujin\"; 那么 list.get(0)也会随之修改。\n        ```\n6. 【强制】泛型通配符<? extends T>来接收返回的数据，此写法的泛型集合不能使用 add 方法， 而<? super T>不能使用 get 方法，作为接口调用赋值时易出错。\n    * 说明： 扩展说一下 PECS(Producer Extends Consumer Super)原则： 第一、 频繁往外读取内容的，适合用<? extends T>。 第二、 经常往里插入的，适合用<? super T>。\n7. 【强制】不要在 foreach 循环里进行元素的 remove/add 操作。 `remove 元素请使用 Iterator方式`，如果`并发`操作，需要对 Iterator 对象`加锁`。\n    * 正例：\n        ```java\n            Iterator<String> iterator = list.iterator();\n            while (iterator.hasNext()) {\n                String item = iterator.next();\n                if (删除元素的条件) {\n                    iterator.remove();\n                }\n            }\n        ```\n    * 反例：\n        ```java\n        List<String> list = new ArrayList<String>();\n        list.add(\"1\");\n        list.add(\"2\");\n        for (String item : list) {\n            if (\"1\".equals(item)) {\n                list.remove(item);\n            }\n        }\n        ```\n    * 说明： 以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？\n8. 【强制】在 JDK7 版本及以上， Comparator 要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。\n    * 说明： 三个条件如下\n        * 1） x， y 的比较结果和 y， x 的比较结果相反。\n        * 2） x>y， y>z， 则 x>z。\n        * 3） x=y， 则 x， z 比较结果和 y， z 比较结果相同。\n    * 反例： 下例中没有处理相等的情况，实际使用中可能会出现异常：\n        ```java\n        new Comparator<Student>() {\n            @Override\n            public int compare(Student o1, Student o2) {\n                return o1.getId() > o2.getId() ? 1 : -1;\n            }\n        };\n        ```\n\n## 推荐(3)\n9. 【推荐】集合初始化时， 指定集合初始值大小。\n    * 说明：HashMap 使用 HashMap(int initialCapacity) 初始化，\n    * 正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子 （ 即 loaderfactor） 默认为 0.75， 如果暂时无法确定初始值大小，请设置为 16（即默认值） 。\n    * 反例： HashMap 需要放置 1024 个元素， 由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大， resize 需要重建 hash 表，严重影响性能。\n10. 【推荐】`使用 entrySet 遍历 Map 类集合 KV`，而不是 keySet 方式进行遍历。\n    * 说明： keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。`如果是 JDK8，使用 Map.foreach 方法`。\n    * 正例： values()返回的是 V 值集合，是一个 list 集合对象； keySet()返回的是 K 值集合，是一个 Set 集合对象； entrySet()返回的是 K-V 值组合集合。\n11. 【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：\n\n    集合类 | Key | Value | Super | 说明\n    ----|-----|-------|-------|---\n    Hashtable | 不允许为null | 不允许为null | Dictionary | 线程安全\n    ConcurrentHashMap | 不允许为null | 不允许为null | AbstractMap | 锁分段技术（ JDK8:CAS）\n    TreeMap | 不允许为null | 允许为null | AbstractMap | 线程不安全\n    HashMap | 允许为null | 允许为null | AbstractMap | 线程不安全\n    \n    * 反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。\n\n## 参考(2)\n12. 【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。\n    * 说明： `有序性`是指遍历的结果是按某种比较规则依次排列的。 `稳定性`指集合每次遍历的元素次序是一定的。 如： ArrayList 是 order/unsort； HashMap 是 unorder/unsort； TreeSet 是order/sort。\n13. 【参考】利用 `Set` 元素唯一的特性，可以快速对一个集合进行`去重操作`，避免使用 List 的contains 方法进行遍历、对比、 去重操作。","slug":"阿里java规约/阿里java规约(一)-编程规约(5)-集合处理","published":1,"updated":"2018-02-09T08:45:10.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a1s004jv4vfq0zu4pby","content":"<h1 id=\"集合处理-13\"><a href=\"#集合处理-13\" class=\"headerlink\" title=\"集合处理(13)\"></a>集合处理(13)</h1><h2 id=\"强制-8\"><a href=\"#强制-8\" class=\"headerlink\" title=\"强制(8)\"></a>强制(8)</h2><ol>\n<li>【强制】 关于 hashCode 和 equals 的处理，遵循如下规则：<ul>\n<li>1） 只要重写 equals，就必须重写 hashCode。</li>\n<li>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 <code>Set 存储的对象必须重写</code>这两个方法。</li>\n<li>3） 如果<code>自定义对象作为 Map 的键</code>，那么<code>必须重写</code> hashCode 和 equals。</li>\n<li>说明： String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。</li>\n</ul>\n</li>\n<li>【强制】 ArrayList的subList结果不可强转成ArrayList，否则会抛出 ClassCastException异常， 即 java.util.RandomAccessSubList cannot be cast to java.util.ArrayList.<ul>\n<li>说明： subList 返回的是 ArrayList 的内部类 <code>SubList</code>，并不是 ArrayList ，而是<code>ArrayList 的一个视图</code>，对于 SubList 子列表的所有操作<code>最终会反映到原列表</code>上。</li>\n</ul>\n</li>\n<li>【强制】在 subList 场景中， 高度注意对<code>原集合元素个数的修改</code>，<code>会导致子列表的遍历、增加、删除均会产生 ConcurrentModificationException 异常</code>。</li>\n<li><p>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一样的数组，大小就是 list.size()。</p>\n<ul>\n<li>说明： 使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配内存空间，并返回新数组地址； 如果数组元素个数大于实际所需，下标为[ list.size() ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。</li>\n<li><p>正例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(<span class=\"number\">2</span>);</div><div class=\"line\">list.add(<span class=\"string\">\"guan\"</span>);</div><div class=\"line\">list.add(<span class=\"string\">\"bao\"</span>);</div><div class=\"line\">String[] array = <span class=\"keyword\">new</span> String[list.size()];</div><div class=\"line\">array = list.toArray(array);</div></pre></td></tr></table></figure>\n</li>\n<li><p>反例： 直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。</p>\n</li>\n</ul>\n</li>\n<li><p>【强制】使用工具类 <code>Arrays.asList()</code>把数组<code>转换</code>成<code>集合</code>时，<code>不能使用其修改集合相关的方法</code>，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</p>\n<ul>\n<li>说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] str = <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">\"you\"</span>, <span class=\"string\">\"wu\"</span> &#125;;</div><div class=\"line\">List list = Arrays.asList(str);</div><div class=\"line\">第一种情况： list.add(<span class=\"string\">\"yangguanbao\"</span>); 运行时异常。</div><div class=\"line\">第二种情况： str[<span class=\"number\">0</span>] = <span class=\"string\">\"gujin\"</span>; 那么 list.get(<span class=\"number\">0</span>)也会随之修改。</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法， 而&lt;? super T&gt;不能使用 get 方法，作为接口调用赋值时易出错。</p>\n<ul>\n<li>说明： 扩展说一下 PECS(Producer Extends Consumer Super)原则： 第一、 频繁往外读取内容的，适合用&lt;? extends T&gt;。 第二、 经常往里插入的，适合用&lt;? super T&gt;。</li>\n</ul>\n</li>\n<li><p>【强制】不要在 foreach 循环里进行元素的 remove/add 操作。 <code>remove 元素请使用 Iterator方式</code>，如果<code>并发</code>操作，需要对 Iterator 对象<code>加锁</code>。</p>\n<ul>\n<li><p>正例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Iterator&lt;String&gt; iterator = list.iterator();</div><div class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</div><div class=\"line\">    String item = iterator.next();</div><div class=\"line\">    <span class=\"keyword\">if</span> (删除元素的条件) &#123;</div><div class=\"line\">        iterator.remove();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>反例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">list.add(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">list.add(<span class=\"string\">\"2\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (String item : list) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"1\"</span>.equals(item)) &#123;</div><div class=\"line\">        list.remove(item);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>说明： 以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</p>\n</li>\n</ul>\n</li>\n<li>【强制】在 JDK7 版本及以上， Comparator 要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。<ul>\n<li>说明： 三个条件如下<ul>\n<li>1） x， y 的比较结果和 y， x 的比较结果相反。</li>\n<li>2） x&gt;y， y&gt;z， 则 x&gt;z。</li>\n<li>3） x=y， 则 x， z 比较结果和 y， z 比较结果相同。</li>\n</ul>\n</li>\n<li>反例： 下例中没有处理相等的情况，实际使用中可能会出现异常：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Comparator&lt;Student&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> o1.getId() &gt; o2.getId() ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-3\"><a href=\"#推荐-3\" class=\"headerlink\" title=\"推荐(3)\"></a>推荐(3)</h2><ol>\n<li>【推荐】集合初始化时， 指定集合初始值大小。<ul>\n<li>说明：HashMap 使用 HashMap(int initialCapacity) 初始化，</li>\n<li>正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子 （ 即 loaderfactor） 默认为 0.75， 如果暂时无法确定初始值大小，请设置为 16（即默认值） 。</li>\n<li>反例： HashMap 需要放置 1024 个元素， 由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大， resize 需要重建 hash 表，严重影响性能。</li>\n</ul>\n</li>\n<li>【推荐】<code>使用 entrySet 遍历 Map 类集合 KV</code>，而不是 keySet 方式进行遍历。<ul>\n<li>说明： keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。<code>如果是 JDK8，使用 Map.foreach 方法</code>。</li>\n<li>正例： values()返回的是 V 值集合，是一个 list 集合对象； keySet()返回的是 K 值集合，是一个 Set 集合对象； entrySet()返回的是 K-V 值组合集合。</li>\n</ul>\n</li>\n<li><p>【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：</p>\n<p>集合类 | Key | Value | Super | 说明<br>—-|—–|——-|——-|—<br>Hashtable | 不允许为null | 不允许为null | Dictionary | 线程安全<br>ConcurrentHashMap | 不允许为null | 不允许为null | AbstractMap | 锁分段技术（ JDK8:CAS）<br>TreeMap | 不允许为null | 允许为null | AbstractMap | 线程不安全<br>HashMap | 允许为null | 允许为null | AbstractMap | 线程不安全</p>\n<ul>\n<li>反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考(2)\"></a>参考(2)</h2><ol>\n<li>【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。<ul>\n<li>说明： <code>有序性</code>是指遍历的结果是按某种比较规则依次排列的。 <code>稳定性</code>指集合每次遍历的元素次序是一定的。 如： ArrayList 是 order/unsort； HashMap 是 unorder/unsort； TreeSet 是order/sort。</li>\n</ul>\n</li>\n<li>【参考】利用 <code>Set</code> 元素唯一的特性，可以快速对一个集合进行<code>去重操作</code>，避免使用 List 的contains 方法进行遍历、对比、 去重操作。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"集合处理-13\"><a href=\"#集合处理-13\" class=\"headerlink\" title=\"集合处理(13)\"></a>集合处理(13)</h1><h2 id=\"强制-8\"><a href=\"#强制-8\" class=\"headerlink\" title=\"强制(8)\"></a>强制(8)</h2><ol>\n<li>【强制】 关于 hashCode 和 equals 的处理，遵循如下规则：<ul>\n<li>1） 只要重写 equals，就必须重写 hashCode。</li>\n<li>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 <code>Set 存储的对象必须重写</code>这两个方法。</li>\n<li>3） 如果<code>自定义对象作为 Map 的键</code>，那么<code>必须重写</code> hashCode 和 equals。</li>\n<li>说明： String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。</li>\n</ul>\n</li>\n<li>【强制】 ArrayList的subList结果不可强转成ArrayList，否则会抛出 ClassCastException异常， 即 java.util.RandomAccessSubList cannot be cast to java.util.ArrayList.<ul>\n<li>说明： subList 返回的是 ArrayList 的内部类 <code>SubList</code>，并不是 ArrayList ，而是<code>ArrayList 的一个视图</code>，对于 SubList 子列表的所有操作<code>最终会反映到原列表</code>上。</li>\n</ul>\n</li>\n<li>【强制】在 subList 场景中， 高度注意对<code>原集合元素个数的修改</code>，<code>会导致子列表的遍历、增加、删除均会产生 ConcurrentModificationException 异常</code>。</li>\n<li><p>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一样的数组，大小就是 list.size()。</p>\n<ul>\n<li>说明： 使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配内存空间，并返回新数组地址； 如果数组元素个数大于实际所需，下标为[ list.size() ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。</li>\n<li><p>正例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(<span class=\"number\">2</span>);</div><div class=\"line\">list.add(<span class=\"string\">\"guan\"</span>);</div><div class=\"line\">list.add(<span class=\"string\">\"bao\"</span>);</div><div class=\"line\">String[] array = <span class=\"keyword\">new</span> String[list.size()];</div><div class=\"line\">array = list.toArray(array);</div></pre></td></tr></table></figure>\n</li>\n<li><p>反例： 直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。</p>\n</li>\n</ul>\n</li>\n<li><p>【强制】使用工具类 <code>Arrays.asList()</code>把数组<code>转换</code>成<code>集合</code>时，<code>不能使用其修改集合相关的方法</code>，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</p>\n<ul>\n<li>说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] str = <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">\"you\"</span>, <span class=\"string\">\"wu\"</span> &#125;;</div><div class=\"line\">List list = Arrays.asList(str);</div><div class=\"line\">第一种情况： list.add(<span class=\"string\">\"yangguanbao\"</span>); 运行时异常。</div><div class=\"line\">第二种情况： str[<span class=\"number\">0</span>] = <span class=\"string\">\"gujin\"</span>; 那么 list.get(<span class=\"number\">0</span>)也会随之修改。</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法， 而&lt;? super T&gt;不能使用 get 方法，作为接口调用赋值时易出错。</p>\n<ul>\n<li>说明： 扩展说一下 PECS(Producer Extends Consumer Super)原则： 第一、 频繁往外读取内容的，适合用&lt;? extends T&gt;。 第二、 经常往里插入的，适合用&lt;? super T&gt;。</li>\n</ul>\n</li>\n<li><p>【强制】不要在 foreach 循环里进行元素的 remove/add 操作。 <code>remove 元素请使用 Iterator方式</code>，如果<code>并发</code>操作，需要对 Iterator 对象<code>加锁</code>。</p>\n<ul>\n<li><p>正例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Iterator&lt;String&gt; iterator = list.iterator();</div><div class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</div><div class=\"line\">    String item = iterator.next();</div><div class=\"line\">    <span class=\"keyword\">if</span> (删除元素的条件) &#123;</div><div class=\"line\">        iterator.remove();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>反例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">list.add(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">list.add(<span class=\"string\">\"2\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (String item : list) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"1\"</span>.equals(item)) &#123;</div><div class=\"line\">        list.remove(item);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>说明： 以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</p>\n</li>\n</ul>\n</li>\n<li>【强制】在 JDK7 版本及以上， Comparator 要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。<ul>\n<li>说明： 三个条件如下<ul>\n<li>1） x， y 的比较结果和 y， x 的比较结果相反。</li>\n<li>2） x&gt;y， y&gt;z， 则 x&gt;z。</li>\n<li>3） x=y， 则 x， z 比较结果和 y， z 比较结果相同。</li>\n</ul>\n</li>\n<li>反例： 下例中没有处理相等的情况，实际使用中可能会出现异常：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Comparator&lt;Student&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> o1.getId() &gt; o2.getId() ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-3\"><a href=\"#推荐-3\" class=\"headerlink\" title=\"推荐(3)\"></a>推荐(3)</h2><ol>\n<li>【推荐】集合初始化时， 指定集合初始值大小。<ul>\n<li>说明：HashMap 使用 HashMap(int initialCapacity) 初始化，</li>\n<li>正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子 （ 即 loaderfactor） 默认为 0.75， 如果暂时无法确定初始值大小，请设置为 16（即默认值） 。</li>\n<li>反例： HashMap 需要放置 1024 个元素， 由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大， resize 需要重建 hash 表，严重影响性能。</li>\n</ul>\n</li>\n<li>【推荐】<code>使用 entrySet 遍历 Map 类集合 KV</code>，而不是 keySet 方式进行遍历。<ul>\n<li>说明： keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。<code>如果是 JDK8，使用 Map.foreach 方法</code>。</li>\n<li>正例： values()返回的是 V 值集合，是一个 list 集合对象； keySet()返回的是 K 值集合，是一个 Set 集合对象； entrySet()返回的是 K-V 值组合集合。</li>\n</ul>\n</li>\n<li><p>【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：</p>\n<p>集合类 | Key | Value | Super | 说明<br>—-|—–|——-|——-|—<br>Hashtable | 不允许为null | 不允许为null | Dictionary | 线程安全<br>ConcurrentHashMap | 不允许为null | 不允许为null | AbstractMap | 锁分段技术（ JDK8:CAS）<br>TreeMap | 不允许为null | 允许为null | AbstractMap | 线程不安全<br>HashMap | 允许为null | 允许为null | AbstractMap | 线程不安全</p>\n<ul>\n<li>反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考(2)\"></a>参考(2)</h2><ol>\n<li>【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。<ul>\n<li>说明： <code>有序性</code>是指遍历的结果是按某种比较规则依次排列的。 <code>稳定性</code>指集合每次遍历的元素次序是一定的。 如： ArrayList 是 order/unsort； HashMap 是 unorder/unsort； TreeSet 是order/sort。</li>\n</ul>\n</li>\n<li>【参考】利用 <code>Set</code> 元素唯一的特性，可以快速对一个集合进行<code>去重操作</code>，避免使用 List 的contains 方法进行遍历、对比、 去重操作。</li>\n</ol>\n"},{"title":"阿里java规约(一)-编程规约(7)-控制语句.md","toc":true,"date":"2018-02-09T07:22:33.000Z","scaffolds":null,"_content":"# 控制语句(10)\n## 强制(3)\n1. 【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止； 在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使空代码。\n2. 【强制】在 if/else/for/while/do 语句中必须使用大括号。 即使只有一行代码，避免采用单行的编码方式： if (condition) statements;\n3. 【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。\n  * 说明： 如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。\n  * 反例： 判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数， 这样的话，活动无法终止。\n\n## 推荐(5)\n4. 【推荐】表达异常的分支时，少用 if-else 方式，这种方式可以改写成：\n    ```java\n    if (condition) {\n      ...\n      return obj;\n    }\n    // 接着写 else 的业务逻辑代码;\n    ```\n  * 说明： 如果非得使用 if()...else if()...else...方式表达逻辑，【强制】 避免后续代码维护困难， 请勿超过 3 层。\n  * 正例： 超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：\n    ```java\n    public void today() {\n      if (isBusy()) {\n        System.out.println(“change time.”);\n        return;\n      }\n      if (isFree()) {\n        System.out.println(“go to travel.”);\n        return;\n      }\n      System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);\n      return;\n    }\n    ```\n5. 【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。\n  * 说明： 很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？\n  * 正例：\n    ```java\n    // 伪代码如下\n    final boolean existed = (file.open(fileName, \"w\") != null) && (...) || (...);\n    if (existed) {\n      ...\n    }\n    ```\n  * 反例：\n    ```java\n    if ((file.open(fileName, \"w\") != null) && (...) || (...)) {\n      ...\n    }\n\n    ```\n6. 【推荐】循环体中的语句要考量性能，以下操作`尽量移至循环体外`处理，如`定义对象、变量、获取数据库连接`，进行不必要的 `try-catch` 操作（ 这个 try-catch 是否可以移至循环体外） 。\n7. 【推荐】`避免`采用取`反逻辑运算符`。\n  * 说明： 取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。\n  * 正例： 使用 if (x < 628) 来表达 x 小于 628。\n  * 反例： 使用 if (!(x >= 628)) 来表达 x 小于 628。\n8. 【推荐】接口入参保护，这种场景常见的是用作批量操作的接口。\n\n## 参考(2)\n9. 【参考】下列情形，需要进行参数校验：\n  * 1） 调用频次低的方法。\n  * 2） 执行时间开销很大的方法。 此情形中， 参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。\n  * 3） 需要极高稳定性和可用性的方法。\n  * 4） 对外提供的开放接口，不管是 RPC/API/HTTP 接口。\n  * 5） 敏感权限入口。\n10. 【参考】下列情形， 不需要进行参数校验：\n  * 1） 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。\n  * 2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。\n  * 3） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。","source":"_posts/阿里java规约/阿里java规约(一)-编程规约(7)-控制语句.md","raw":"---\ntitle: 阿里java规约(一)-编程规约(7)-控制语句.md\ncategories: 阿里java规约\ntags:\n  - 阿里java规约\ntoc: true\ndate: 2018-02-09 15:22:33\nscaffolds:\n---\n# 控制语句(10)\n## 强制(3)\n1. 【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止； 在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使空代码。\n2. 【强制】在 if/else/for/while/do 语句中必须使用大括号。 即使只有一行代码，避免采用单行的编码方式： if (condition) statements;\n3. 【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。\n  * 说明： 如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。\n  * 反例： 判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数， 这样的话，活动无法终止。\n\n## 推荐(5)\n4. 【推荐】表达异常的分支时，少用 if-else 方式，这种方式可以改写成：\n    ```java\n    if (condition) {\n      ...\n      return obj;\n    }\n    // 接着写 else 的业务逻辑代码;\n    ```\n  * 说明： 如果非得使用 if()...else if()...else...方式表达逻辑，【强制】 避免后续代码维护困难， 请勿超过 3 层。\n  * 正例： 超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：\n    ```java\n    public void today() {\n      if (isBusy()) {\n        System.out.println(“change time.”);\n        return;\n      }\n      if (isFree()) {\n        System.out.println(“go to travel.”);\n        return;\n      }\n      System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);\n      return;\n    }\n    ```\n5. 【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。\n  * 说明： 很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？\n  * 正例：\n    ```java\n    // 伪代码如下\n    final boolean existed = (file.open(fileName, \"w\") != null) && (...) || (...);\n    if (existed) {\n      ...\n    }\n    ```\n  * 反例：\n    ```java\n    if ((file.open(fileName, \"w\") != null) && (...) || (...)) {\n      ...\n    }\n\n    ```\n6. 【推荐】循环体中的语句要考量性能，以下操作`尽量移至循环体外`处理，如`定义对象、变量、获取数据库连接`，进行不必要的 `try-catch` 操作（ 这个 try-catch 是否可以移至循环体外） 。\n7. 【推荐】`避免`采用取`反逻辑运算符`。\n  * 说明： 取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。\n  * 正例： 使用 if (x < 628) 来表达 x 小于 628。\n  * 反例： 使用 if (!(x >= 628)) 来表达 x 小于 628。\n8. 【推荐】接口入参保护，这种场景常见的是用作批量操作的接口。\n\n## 参考(2)\n9. 【参考】下列情形，需要进行参数校验：\n  * 1） 调用频次低的方法。\n  * 2） 执行时间开销很大的方法。 此情形中， 参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。\n  * 3） 需要极高稳定性和可用性的方法。\n  * 4） 对外提供的开放接口，不管是 RPC/API/HTTP 接口。\n  * 5） 敏感权限入口。\n10. 【参考】下列情形， 不需要进行参数校验：\n  * 1） 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。\n  * 2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。\n  * 3） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。","slug":"阿里java规约/阿里java规约(一)-编程规约(7)-控制语句","published":1,"updated":"2018-02-09T08:45:06.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a1w004mv4vfa9ae641c","content":"<h1 id=\"控制语句-10\"><a href=\"#控制语句-10\" class=\"headerlink\" title=\"控制语句(10)\"></a>控制语句(10)</h1><h2 id=\"强制-3\"><a href=\"#强制-3\" class=\"headerlink\" title=\"强制(3)\"></a>强制(3)</h2><ol>\n<li>【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止； 在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使空代码。</li>\n<li>【强制】在 if/else/for/while/do 语句中必须使用大括号。 即使只有一行代码，避免采用单行的编码方式： if (condition) statements;</li>\n<li>【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。<ul>\n<li>说明： 如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。</li>\n<li>反例： 判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数， 这样的话，活动无法终止。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-5\"><a href=\"#推荐-5\" class=\"headerlink\" title=\"推荐(5)\"></a>推荐(5)</h2><ol>\n<li><p>【推荐】表达异常的分支时，少用 if-else 方式，这种方式可以改写成：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 接着写 else 的业务逻辑代码;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>说明： 如果非得使用 if()…else if()…else…方式表达逻辑，【强制】 避免后续代码维护困难， 请勿超过 3 层。</li>\n<li>正例： 超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">today</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isBusy()) &#123;</div><div class=\"line\">    System.out.println(“change time.”);</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isFree()) &#123;</div><div class=\"line\">    System.out.println(“go to travel.”);</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);</div><div class=\"line\">  <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p>\n<ul>\n<li>说明： 很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</li>\n<li><p>正例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 伪代码如下</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> existed = (file.open(fileName, <span class=\"string\">\"w\"</span>) != <span class=\"keyword\">null</span>) &amp;&amp; (...) || (...);</div><div class=\"line\"><span class=\"keyword\">if</span> (existed) &#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>反例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ((file.open(fileName, <span class=\"string\">\"w\"</span>) != <span class=\"keyword\">null</span>) &amp;&amp; (...) || (...)) &#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【推荐】循环体中的语句要考量性能，以下操作<code>尽量移至循环体外</code>处理，如<code>定义对象、变量、获取数据库连接</code>，进行不必要的 <code>try-catch</code> 操作（ 这个 try-catch 是否可以移至循环体外） 。</p>\n</li>\n<li>【推荐】<code>避免</code>采用取<code>反逻辑运算符</code>。<ul>\n<li>说明： 取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。</li>\n<li>正例： 使用 if (x &lt; 628) 来表达 x 小于 628。</li>\n<li>反例： 使用 if (!(x &gt;= 628)) 来表达 x 小于 628。</li>\n</ul>\n</li>\n<li>【推荐】接口入参保护，这种场景常见的是用作批量操作的接口。</li>\n</ol>\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考(2)\"></a>参考(2)</h2><ol>\n<li>【参考】下列情形，需要进行参数校验：<ul>\n<li>1） 调用频次低的方法。</li>\n<li>2） 执行时间开销很大的方法。 此情形中， 参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。</li>\n<li>3） 需要极高稳定性和可用性的方法。</li>\n<li>4） 对外提供的开放接口，不管是 RPC/API/HTTP 接口。</li>\n<li>5） 敏感权限入口。</li>\n</ul>\n</li>\n<li>【参考】下列情形， 不需要进行参数校验：<ul>\n<li>1） 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。</li>\n<li>2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。</li>\n<li>3） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"控制语句-10\"><a href=\"#控制语句-10\" class=\"headerlink\" title=\"控制语句(10)\"></a>控制语句(10)</h1><h2 id=\"强制-3\"><a href=\"#强制-3\" class=\"headerlink\" title=\"强制(3)\"></a>强制(3)</h2><ol>\n<li>【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止； 在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使空代码。</li>\n<li>【强制】在 if/else/for/while/do 语句中必须使用大括号。 即使只有一行代码，避免采用单行的编码方式： if (condition) statements;</li>\n<li>【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。<ul>\n<li>说明： 如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。</li>\n<li>反例： 判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数， 这样的话，活动无法终止。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-5\"><a href=\"#推荐-5\" class=\"headerlink\" title=\"推荐(5)\"></a>推荐(5)</h2><ol>\n<li><p>【推荐】表达异常的分支时，少用 if-else 方式，这种方式可以改写成：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 接着写 else 的业务逻辑代码;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>说明： 如果非得使用 if()…else if()…else…方式表达逻辑，【强制】 避免后续代码维护困难， 请勿超过 3 层。</li>\n<li>正例： 超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">today</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isBusy()) &#123;</div><div class=\"line\">    System.out.println(“change time.”);</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isFree()) &#123;</div><div class=\"line\">    System.out.println(“go to travel.”);</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);</div><div class=\"line\">  <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p>\n<ul>\n<li>说明： 很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</li>\n<li><p>正例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 伪代码如下</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> existed = (file.open(fileName, <span class=\"string\">\"w\"</span>) != <span class=\"keyword\">null</span>) &amp;&amp; (...) || (...);</div><div class=\"line\"><span class=\"keyword\">if</span> (existed) &#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>反例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ((file.open(fileName, <span class=\"string\">\"w\"</span>) != <span class=\"keyword\">null</span>) &amp;&amp; (...) || (...)) &#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【推荐】循环体中的语句要考量性能，以下操作<code>尽量移至循环体外</code>处理，如<code>定义对象、变量、获取数据库连接</code>，进行不必要的 <code>try-catch</code> 操作（ 这个 try-catch 是否可以移至循环体外） 。</p>\n</li>\n<li>【推荐】<code>避免</code>采用取<code>反逻辑运算符</code>。<ul>\n<li>说明： 取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。</li>\n<li>正例： 使用 if (x &lt; 628) 来表达 x 小于 628。</li>\n<li>反例： 使用 if (!(x &gt;= 628)) 来表达 x 小于 628。</li>\n</ul>\n</li>\n<li>【推荐】接口入参保护，这种场景常见的是用作批量操作的接口。</li>\n</ol>\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考(2)\"></a>参考(2)</h2><ol>\n<li>【参考】下列情形，需要进行参数校验：<ul>\n<li>1） 调用频次低的方法。</li>\n<li>2） 执行时间开销很大的方法。 此情形中， 参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。</li>\n<li>3） 需要极高稳定性和可用性的方法。</li>\n<li>4） 对外提供的开放接口，不管是 RPC/API/HTTP 接口。</li>\n<li>5） 敏感权限入口。</li>\n</ul>\n</li>\n<li>【参考】下列情形， 不需要进行参数校验：<ul>\n<li>1） 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。</li>\n<li>2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。</li>\n<li>3） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"阿里java规约(一)-编程规约(8)-注释规约.md","toc":true,"date":"2018-02-09T08:02:33.000Z","scaffolds":null,"_content":"# 注释规约(11)\n## 强制(6)\n1. 【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/**内容*/格式，不得使用// xxx 方式。\n    * 说明： 在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释； 在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。\n2. 【强制】所有的抽象方法（ 包括接口中的方法） 必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。\n    * 说明： 对子类的实现要求，或者调用注意事项，请一并说明。\n3. 【强制】所有的类都必须添加创建者和创建日期。\n4. 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释，注意与代码对齐。\n5. 【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。\n\n## 推荐(2)\n6. 【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。\n    * 反例： “TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。\n7. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。\n    * 说明： 代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。\n\n## 参考(5)\n8. 【参考】 谨慎注释掉代码。 在上方详细说明，而不是简单地注释掉。 如果无用，则删除。\n    * 说明： 代码被注释掉有两种可能性： \n      * 1） 后续会恢复此段代码逻辑。 \n      * 2） 永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（ 代码仓库保存了历史代码） 。\n9. 【参考】对于注释的要求：\n    * 第一、能够准确反应设计思想和代码逻辑； \n    * 第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。\n    > 完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路； 注释也是给继任者看的，使其能够快速接替自己的工作。\n10. 【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。\n    * 反例：  \n      // put elephant into fridge  \n      put(elephant, fridge);  \n      方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。\n11. 【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。\n    * 1） 待办事宜（ TODO） :（标记人，标记时间， [预计处理时间]）表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法（ 因为它是一个 Javadoc 标签）。\n    * 2） 错误，不能工作（ FIXME） :（ 标记人，标记时间， [预计处理时间]）在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。","source":"_posts/阿里java规约/阿里java规约(一)-编程规约(8)-注释规约.md","raw":"---\ntitle: 阿里java规约(一)-编程规约(8)-注释规约.md\ncategories: 阿里java规约\ntags:\n  - 阿里java规约\ntoc: true\ndate: 2018-02-09 16:02:33\nscaffolds:\n---\n# 注释规约(11)\n## 强制(6)\n1. 【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/**内容*/格式，不得使用// xxx 方式。\n    * 说明： 在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释； 在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。\n2. 【强制】所有的抽象方法（ 包括接口中的方法） 必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。\n    * 说明： 对子类的实现要求，或者调用注意事项，请一并说明。\n3. 【强制】所有的类都必须添加创建者和创建日期。\n4. 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释，注意与代码对齐。\n5. 【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。\n\n## 推荐(2)\n6. 【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。\n    * 反例： “TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。\n7. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。\n    * 说明： 代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。\n\n## 参考(5)\n8. 【参考】 谨慎注释掉代码。 在上方详细说明，而不是简单地注释掉。 如果无用，则删除。\n    * 说明： 代码被注释掉有两种可能性： \n      * 1） 后续会恢复此段代码逻辑。 \n      * 2） 永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（ 代码仓库保存了历史代码） 。\n9. 【参考】对于注释的要求：\n    * 第一、能够准确反应设计思想和代码逻辑； \n    * 第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。\n    > 完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路； 注释也是给继任者看的，使其能够快速接替自己的工作。\n10. 【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。\n    * 反例：  \n      // put elephant into fridge  \n      put(elephant, fridge);  \n      方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。\n11. 【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。\n    * 1） 待办事宜（ TODO） :（标记人，标记时间， [预计处理时间]）表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法（ 因为它是一个 Javadoc 标签）。\n    * 2） 错误，不能工作（ FIXME） :（ 标记人，标记时间， [预计处理时间]）在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。","slug":"阿里java规约/阿里java规约(一)-编程规约(8)-注释规约","published":1,"updated":"2018-02-09T08:45:01.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a20004rv4vf63xcsjdv","content":"<h1 id=\"注释规约-11\"><a href=\"#注释规约-11\" class=\"headerlink\" title=\"注释规约(11)\"></a>注释规约(11)</h1><h2 id=\"强制-6\"><a href=\"#强制-6\" class=\"headerlink\" title=\"强制(6)\"></a>强制(6)</h2><ol>\n<li>【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/<em>*内容</em>/格式，不得使用// xxx 方式。<ul>\n<li>说明： 在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释； 在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</li>\n</ul>\n</li>\n<li>【强制】所有的抽象方法（ 包括接口中的方法） 必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。<ul>\n<li>说明： 对子类的实现要求，或者调用注意事项，请一并说明。</li>\n</ul>\n</li>\n<li>【强制】所有的类都必须添加创建者和创建日期。</li>\n<li>【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/<em> </em>/注释，注意与代码对齐。</li>\n<li>【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</li>\n</ol>\n<h2 id=\"推荐-2\"><a href=\"#推荐-2\" class=\"headerlink\" title=\"推荐(2)\"></a>推荐(2)</h2><ol>\n<li>【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。<ul>\n<li>反例： “TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</li>\n</ul>\n</li>\n<li>【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。<ul>\n<li>说明： 代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"参考-5\"><a href=\"#参考-5\" class=\"headerlink\" title=\"参考(5)\"></a>参考(5)</h2><ol>\n<li>【参考】 谨慎注释掉代码。 在上方详细说明，而不是简单地注释掉。 如果无用，则删除。<ul>\n<li>说明： 代码被注释掉有两种可能性： <ul>\n<li>1） 后续会恢复此段代码逻辑。 </li>\n<li>2） 永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（ 代码仓库保存了历史代码） 。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>【参考】对于注释的要求：<ul>\n<li>第一、能够准确反应设计思想和代码逻辑； </li>\n<li>第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。<blockquote>\n<p>完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路； 注释也是给继任者看的，使其能够快速接替自己的工作。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。<ul>\n<li>反例：<br>// put elephant into fridge<br>put(elephant, fridge);<br>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</li>\n</ul>\n</li>\n<li>【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。<ul>\n<li>1） 待办事宜（ TODO） :（标记人，标记时间， [预计处理时间]）表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法（ 因为它是一个 Javadoc 标签）。</li>\n<li>2） 错误，不能工作（ FIXME） :（ 标记人，标记时间， [预计处理时间]）在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"注释规约-11\"><a href=\"#注释规约-11\" class=\"headerlink\" title=\"注释规约(11)\"></a>注释规约(11)</h1><h2 id=\"强制-6\"><a href=\"#强制-6\" class=\"headerlink\" title=\"强制(6)\"></a>强制(6)</h2><ol>\n<li>【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/<em>*内容</em>/格式，不得使用// xxx 方式。<ul>\n<li>说明： 在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释； 在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</li>\n</ul>\n</li>\n<li>【强制】所有的抽象方法（ 包括接口中的方法） 必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。<ul>\n<li>说明： 对子类的实现要求，或者调用注意事项，请一并说明。</li>\n</ul>\n</li>\n<li>【强制】所有的类都必须添加创建者和创建日期。</li>\n<li>【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/<em> </em>/注释，注意与代码对齐。</li>\n<li>【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</li>\n</ol>\n<h2 id=\"推荐-2\"><a href=\"#推荐-2\" class=\"headerlink\" title=\"推荐(2)\"></a>推荐(2)</h2><ol>\n<li>【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。<ul>\n<li>反例： “TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</li>\n</ul>\n</li>\n<li>【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。<ul>\n<li>说明： 代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"参考-5\"><a href=\"#参考-5\" class=\"headerlink\" title=\"参考(5)\"></a>参考(5)</h2><ol>\n<li>【参考】 谨慎注释掉代码。 在上方详细说明，而不是简单地注释掉。 如果无用，则删除。<ul>\n<li>说明： 代码被注释掉有两种可能性： <ul>\n<li>1） 后续会恢复此段代码逻辑。 </li>\n<li>2） 永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（ 代码仓库保存了历史代码） 。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>【参考】对于注释的要求：<ul>\n<li>第一、能够准确反应设计思想和代码逻辑； </li>\n<li>第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。<blockquote>\n<p>完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路； 注释也是给继任者看的，使其能够快速接替自己的工作。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。<ul>\n<li>反例：<br>// put elephant into fridge<br>put(elephant, fridge);<br>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</li>\n</ul>\n</li>\n<li>【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。<ul>\n<li>1） 待办事宜（ TODO） :（标记人，标记时间， [预计处理时间]）表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法（ 因为它是一个 Javadoc 标签）。</li>\n<li>2） 错误，不能工作（ FIXME） :（ 标记人，标记时间， [预计处理时间]）在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"阿里java规约(一)-编程规约(9)-其他.md","toc":true,"date":"2018-02-09T08:12:33.000Z","scaffolds":null,"_content":"# 其他(8)\n## 强制(5)\n1. 【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。\n    * 说明： 不要在方法体内定义： Pattern pattern = Pattern.compile(规则);\n2. 【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（ boolean 命名不需要加 is前缀） ，会自动调用 isXxx()方法。\n    * 说明： 注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。\n3. 【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。\n    * 说明： 如果 var=null 或者不存在，那么${var}会直接显示在页面上。\n4. 【强制】注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x<1（ 能够取到零值，注意除零异常） ，如果想`获取整数类型的随机数`，不要将 x 放大 10 的若干倍然后取整，直接使用 `Random` 对象的 `nextInt` 或者 `nextLong` 方法。\n5. 【强制】获取当前毫秒数 System.currentTimeMillis(); 而不是 new Date().getTime();\n    * 说明： 如果想获取更加精确的纳秒级时间值， 使用 System.nanoTime()的方式。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。\n\n## 推荐(3)\n6. 【推荐】 不要在视图模板中加入任何复杂的逻辑。\n    * 说明： 根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。\n7. 【推荐】 任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。\n8. 【推荐】 及时清理不再使用的代码段或配置信息。\n    * 说明： 对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。\n    * 正例： 对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///)来说明注释掉代码的理由。","source":"_posts/阿里java规约/阿里java规约(一)-编程规约(9)-其他.md","raw":"---\ntitle: 阿里java规约(一)-编程规约(9)-其他.md\ncategories: 阿里java规约\ntags:\n  - 阿里java规约\ntoc: true\ndate: 2018-02-09 16:12:33\nscaffolds:\n---\n# 其他(8)\n## 强制(5)\n1. 【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。\n    * 说明： 不要在方法体内定义： Pattern pattern = Pattern.compile(规则);\n2. 【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（ boolean 命名不需要加 is前缀） ，会自动调用 isXxx()方法。\n    * 说明： 注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。\n3. 【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。\n    * 说明： 如果 var=null 或者不存在，那么${var}会直接显示在页面上。\n4. 【强制】注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x<1（ 能够取到零值，注意除零异常） ，如果想`获取整数类型的随机数`，不要将 x 放大 10 的若干倍然后取整，直接使用 `Random` 对象的 `nextInt` 或者 `nextLong` 方法。\n5. 【强制】获取当前毫秒数 System.currentTimeMillis(); 而不是 new Date().getTime();\n    * 说明： 如果想获取更加精确的纳秒级时间值， 使用 System.nanoTime()的方式。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。\n\n## 推荐(3)\n6. 【推荐】 不要在视图模板中加入任何复杂的逻辑。\n    * 说明： 根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。\n7. 【推荐】 任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。\n8. 【推荐】 及时清理不再使用的代码段或配置信息。\n    * 说明： 对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。\n    * 正例： 对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///)来说明注释掉代码的理由。","slug":"阿里java规约/阿里java规约(一)-编程规约(9)-其他","published":1,"updated":"2018-02-09T08:44:59.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a22004uv4vfy2fwrcca","content":"<h1 id=\"其他-8\"><a href=\"#其他-8\" class=\"headerlink\" title=\"其他(8)\"></a>其他(8)</h1><h2 id=\"强制-5\"><a href=\"#强制-5\" class=\"headerlink\" title=\"强制(5)\"></a>强制(5)</h2><ol>\n<li>【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。<ul>\n<li>说明： 不要在方法体内定义： Pattern pattern = Pattern.compile(规则);</li>\n</ul>\n</li>\n<li>【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（ boolean 命名不需要加 is前缀） ，会自动调用 isXxx()方法。<ul>\n<li>说明： 注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。</li>\n</ul>\n</li>\n<li>【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。<ul>\n<li>说明： 如果 var=null 或者不存在，那么${var}会直接显示在页面上。</li>\n</ul>\n</li>\n<li>【强制】注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x&lt;1（ 能够取到零值，注意除零异常） ，如果想<code>获取整数类型的随机数</code>，不要将 x 放大 10 的若干倍然后取整，直接使用 <code>Random</code> 对象的 <code>nextInt</code> 或者 <code>nextLong</code> 方法。</li>\n<li>【强制】获取当前毫秒数 System.currentTimeMillis(); 而不是 new Date().getTime();<ul>\n<li>说明： 如果想获取更加精确的纳秒级时间值， 使用 System.nanoTime()的方式。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-3\"><a href=\"#推荐-3\" class=\"headerlink\" title=\"推荐(3)\"></a>推荐(3)</h2><ol>\n<li>【推荐】 不要在视图模板中加入任何复杂的逻辑。<ul>\n<li>说明： 根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。</li>\n</ul>\n</li>\n<li>【推荐】 任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</li>\n<li>【推荐】 及时清理不再使用的代码段或配置信息。<ul>\n<li>说明： 对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。</li>\n<li>正例： 对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///)来说明注释掉代码的理由。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"其他-8\"><a href=\"#其他-8\" class=\"headerlink\" title=\"其他(8)\"></a>其他(8)</h1><h2 id=\"强制-5\"><a href=\"#强制-5\" class=\"headerlink\" title=\"强制(5)\"></a>强制(5)</h2><ol>\n<li>【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。<ul>\n<li>说明： 不要在方法体内定义： Pattern pattern = Pattern.compile(规则);</li>\n</ul>\n</li>\n<li>【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（ boolean 命名不需要加 is前缀） ，会自动调用 isXxx()方法。<ul>\n<li>说明： 注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。</li>\n</ul>\n</li>\n<li>【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。<ul>\n<li>说明： 如果 var=null 或者不存在，那么${var}会直接显示在页面上。</li>\n</ul>\n</li>\n<li>【强制】注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x&lt;1（ 能够取到零值，注意除零异常） ，如果想<code>获取整数类型的随机数</code>，不要将 x 放大 10 的若干倍然后取整，直接使用 <code>Random</code> 对象的 <code>nextInt</code> 或者 <code>nextLong</code> 方法。</li>\n<li>【强制】获取当前毫秒数 System.currentTimeMillis(); 而不是 new Date().getTime();<ul>\n<li>说明： 如果想获取更加精确的纳秒级时间值， 使用 System.nanoTime()的方式。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-3\"><a href=\"#推荐-3\" class=\"headerlink\" title=\"推荐(3)\"></a>推荐(3)</h2><ol>\n<li>【推荐】 不要在视图模板中加入任何复杂的逻辑。<ul>\n<li>说明： 根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。</li>\n</ul>\n</li>\n<li>【推荐】 任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</li>\n<li>【推荐】 及时清理不再使用的代码段或配置信息。<ul>\n<li>说明： 对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。</li>\n<li>正例： 对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///)来说明注释掉代码的理由。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"阿里java规约(三)-单元测试.md","toc":true,"date":"2018-02-09T09:29:33.000Z","scaffolds":null,"_content":"# 单元测试(16)\n## 强制(7)\n1. 【强制】好的单元测试必须遵守 AIR 原则。\n    * 说明： 单元测试在线上运行时，感觉像空气（ AIR） 一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。\n    * A： Automatic（自动化）\n    * I： Independent（独立性）\n    * R： Repeatable（可重复）\n2. 【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。\n3. 【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。\n    * 反例： method2 需要依赖 method1 的执行， 将执行结果作为 method2 的输入。\n4. 【强制】单元测试是可以重复执行的，不能受到外界环境的影响。\n    * 说明： 单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等） 有依赖，容易导致持续集成机制的不可用。\n    * 正例： 为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。\n5. 【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。\n    * 说明： 只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。\n6. 【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。\n    * 说明： 新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。\n7. 【强制】单元测试代码必须写在如下工程目录： src/test/java，不允许写在业务代码目录下。\n    * 说明： 源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。\n\n## 推荐(7)\n8. 【推荐】单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%\n    * 说明： 在工程规约的应用分层中提到的 DAO 层， Manager 层，可重用度高的 Service，都应该进行单元测试。\n9. 【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。\n    * B： Border，边界值测试，包括循环边界、特殊取值、 特殊时间点、数据顺序等。\n    * C： Correct，正确的输入，并得到预期的结果。\n    * D： Design，与设计文档相结合，来编写单元测试。\n    * E： Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。\n10. 【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。\n    * 反例： 删除某一行数据的单元测试，在数据库中， 先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则， 导致测试结果异常。\n11. 【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。\n    * 正例： 在 RDC 内部单元测试中，使用 RDC_UNIT_TEST_的前缀标识数据。\n12. 【推荐】对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。\n13. 【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（ UC）。\n14. 【推荐】单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。\n\n## 参考(2)\n15. 【参考】为了更方便地进行单元测试，业务代码应避免以下情况：\n    * 构造方法中做的事情过多。\n    * 存在过多的全局变量和静态方法。\n    * 存在过多的外部依赖。\n    * 存在过多的条件语句。\n    * 说明： 多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。\n16. 【参考】不要对单元测试存在如下误解：\n    * 那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。\n    * 单元测试代码是多余的。 汽车的整体功能与各单元部件的测试正常与否是强相关的。\n    * 单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。\n    * 单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。","source":"_posts/阿里java规约/阿里java规约(三)-单元测试.md","raw":"---\ntitle: 阿里java规约(三)-单元测试.md\ncategories: 阿里java规约\ntags:\n  - 阿里java规约\ntoc: true\ndate: 2018-02-09 17:29:33\nscaffolds:\n---\n# 单元测试(16)\n## 强制(7)\n1. 【强制】好的单元测试必须遵守 AIR 原则。\n    * 说明： 单元测试在线上运行时，感觉像空气（ AIR） 一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。\n    * A： Automatic（自动化）\n    * I： Independent（独立性）\n    * R： Repeatable（可重复）\n2. 【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。\n3. 【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。\n    * 反例： method2 需要依赖 method1 的执行， 将执行结果作为 method2 的输入。\n4. 【强制】单元测试是可以重复执行的，不能受到外界环境的影响。\n    * 说明： 单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等） 有依赖，容易导致持续集成机制的不可用。\n    * 正例： 为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。\n5. 【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。\n    * 说明： 只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。\n6. 【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。\n    * 说明： 新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。\n7. 【强制】单元测试代码必须写在如下工程目录： src/test/java，不允许写在业务代码目录下。\n    * 说明： 源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。\n\n## 推荐(7)\n8. 【推荐】单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%\n    * 说明： 在工程规约的应用分层中提到的 DAO 层， Manager 层，可重用度高的 Service，都应该进行单元测试。\n9. 【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。\n    * B： Border，边界值测试，包括循环边界、特殊取值、 特殊时间点、数据顺序等。\n    * C： Correct，正确的输入，并得到预期的结果。\n    * D： Design，与设计文档相结合，来编写单元测试。\n    * E： Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。\n10. 【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。\n    * 反例： 删除某一行数据的单元测试，在数据库中， 先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则， 导致测试结果异常。\n11. 【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。\n    * 正例： 在 RDC 内部单元测试中，使用 RDC_UNIT_TEST_的前缀标识数据。\n12. 【推荐】对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。\n13. 【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（ UC）。\n14. 【推荐】单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。\n\n## 参考(2)\n15. 【参考】为了更方便地进行单元测试，业务代码应避免以下情况：\n    * 构造方法中做的事情过多。\n    * 存在过多的全局变量和静态方法。\n    * 存在过多的外部依赖。\n    * 存在过多的条件语句。\n    * 说明： 多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。\n16. 【参考】不要对单元测试存在如下误解：\n    * 那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。\n    * 单元测试代码是多余的。 汽车的整体功能与各单元部件的测试正常与否是强相关的。\n    * 单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。\n    * 单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。","slug":"阿里java规约/阿里java规约(三)-单元测试","published":1,"updated":"2018-02-09T09:54:15.921Z","_id":"cjdfr8a25004yv4vffiimkncg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"单元测试-16\"><a href=\"#单元测试-16\" class=\"headerlink\" title=\"单元测试(16)\"></a>单元测试(16)</h1><h2 id=\"强制-7\"><a href=\"#强制-7\" class=\"headerlink\" title=\"强制(7)\"></a>强制(7)</h2><ol>\n<li>【强制】好的单元测试必须遵守 AIR 原则。<ul>\n<li>说明： 单元测试在线上运行时，感觉像空气（ AIR） 一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</li>\n<li>A： Automatic（自动化）</li>\n<li>I： Independent（独立性）</li>\n<li>R： Repeatable（可重复）</li>\n</ul>\n</li>\n<li>【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</li>\n<li>【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。<ul>\n<li>反例： method2 需要依赖 method1 的执行， 将执行结果作为 method2 的输入。</li>\n</ul>\n</li>\n<li>【强制】单元测试是可以重复执行的，不能受到外界环境的影响。<ul>\n<li>说明： 单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等） 有依赖，容易导致持续集成机制的不可用。</li>\n<li>正例： 为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。</li>\n</ul>\n</li>\n<li>【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。<ul>\n<li>说明： 只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。</li>\n</ul>\n</li>\n<li>【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。<ul>\n<li>说明： 新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</li>\n</ul>\n</li>\n<li>【强制】单元测试代码必须写在如下工程目录： src/test/java，不允许写在业务代码目录下。<ul>\n<li>说明： 源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-7\"><a href=\"#推荐-7\" class=\"headerlink\" title=\"推荐(7)\"></a>推荐(7)</h2><ol>\n<li>【推荐】单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%<ul>\n<li>说明： 在工程规约的应用分层中提到的 DAO 层， Manager 层，可重用度高的 Service，都应该进行单元测试。</li>\n</ul>\n</li>\n<li>【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。<ul>\n<li>B： Border，边界值测试，包括循环边界、特殊取值、 特殊时间点、数据顺序等。</li>\n<li>C： Correct，正确的输入，并得到预期的结果。</li>\n<li>D： Design，与设计文档相结合，来编写单元测试。</li>\n<li>E： Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。</li>\n</ul>\n</li>\n<li>【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。<ul>\n<li>反例： 删除某一行数据的单元测试，在数据库中， 先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则， 导致测试结果异常。</li>\n</ul>\n</li>\n<li>【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。<ul>\n<li>正例： 在 RDC 内部单元测试中，使用 RDC_UNIT<em>TEST</em>的前缀标识数据。</li>\n</ul>\n</li>\n<li>【推荐】对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</li>\n<li>【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（ UC）。</li>\n<li>【推荐】单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。</li>\n</ol>\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考(2)\"></a>参考(2)</h2><ol>\n<li>【参考】为了更方便地进行单元测试，业务代码应避免以下情况：<ul>\n<li>构造方法中做的事情过多。</li>\n<li>存在过多的全局变量和静态方法。</li>\n<li>存在过多的外部依赖。</li>\n<li>存在过多的条件语句。</li>\n<li>说明： 多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</li>\n</ul>\n</li>\n<li>【参考】不要对单元测试存在如下误解：<ul>\n<li>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。</li>\n<li>单元测试代码是多余的。 汽车的整体功能与各单元部件的测试正常与否是强相关的。</li>\n<li>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</li>\n<li>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"单元测试-16\"><a href=\"#单元测试-16\" class=\"headerlink\" title=\"单元测试(16)\"></a>单元测试(16)</h1><h2 id=\"强制-7\"><a href=\"#强制-7\" class=\"headerlink\" title=\"强制(7)\"></a>强制(7)</h2><ol>\n<li>【强制】好的单元测试必须遵守 AIR 原则。<ul>\n<li>说明： 单元测试在线上运行时，感觉像空气（ AIR） 一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</li>\n<li>A： Automatic（自动化）</li>\n<li>I： Independent（独立性）</li>\n<li>R： Repeatable（可重复）</li>\n</ul>\n</li>\n<li>【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</li>\n<li>【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。<ul>\n<li>反例： method2 需要依赖 method1 的执行， 将执行结果作为 method2 的输入。</li>\n</ul>\n</li>\n<li>【强制】单元测试是可以重复执行的，不能受到外界环境的影响。<ul>\n<li>说明： 单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等） 有依赖，容易导致持续集成机制的不可用。</li>\n<li>正例： 为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。</li>\n</ul>\n</li>\n<li>【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。<ul>\n<li>说明： 只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。</li>\n</ul>\n</li>\n<li>【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。<ul>\n<li>说明： 新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</li>\n</ul>\n</li>\n<li>【强制】单元测试代码必须写在如下工程目录： src/test/java，不允许写在业务代码目录下。<ul>\n<li>说明： 源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-7\"><a href=\"#推荐-7\" class=\"headerlink\" title=\"推荐(7)\"></a>推荐(7)</h2><ol>\n<li>【推荐】单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%<ul>\n<li>说明： 在工程规约的应用分层中提到的 DAO 层， Manager 层，可重用度高的 Service，都应该进行单元测试。</li>\n</ul>\n</li>\n<li>【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。<ul>\n<li>B： Border，边界值测试，包括循环边界、特殊取值、 特殊时间点、数据顺序等。</li>\n<li>C： Correct，正确的输入，并得到预期的结果。</li>\n<li>D： Design，与设计文档相结合，来编写单元测试。</li>\n<li>E： Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。</li>\n</ul>\n</li>\n<li>【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。<ul>\n<li>反例： 删除某一行数据的单元测试，在数据库中， 先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则， 导致测试结果异常。</li>\n</ul>\n</li>\n<li>【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。<ul>\n<li>正例： 在 RDC 内部单元测试中，使用 RDC_UNIT<em>TEST</em>的前缀标识数据。</li>\n</ul>\n</li>\n<li>【推荐】对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</li>\n<li>【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（ UC）。</li>\n<li>【推荐】单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。</li>\n</ol>\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考(2)\"></a>参考(2)</h2><ol>\n<li>【参考】为了更方便地进行单元测试，业务代码应避免以下情况：<ul>\n<li>构造方法中做的事情过多。</li>\n<li>存在过多的全局变量和静态方法。</li>\n<li>存在过多的外部依赖。</li>\n<li>存在过多的条件语句。</li>\n<li>说明： 多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</li>\n</ul>\n</li>\n<li>【参考】不要对单元测试存在如下误解：<ul>\n<li>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。</li>\n<li>单元测试代码是多余的。 汽车的整体功能与各单元部件的测试正常与否是强相关的。</li>\n<li>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</li>\n<li>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"阿里java规约(二)-异常日志(2)-日志规约.md","toc":true,"date":"2018-02-09T08:29:33.000Z","scaffolds":null,"_content":"# 日志规约(8)\n## 强制(6)\n1. 【强制】应用中`不可直接使用`日志系统（ Log4j、 Logback） 中的 API，而应依赖`使用`日志框架`SLF4J` 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。\n    ```java\n    import org.slf4j.Logger;\n    import org.slf4j.LoggerFactory;\n    private static final Logger logger = LoggerFactory.getLogger(Abc.class);\n    ```\n2. 【强制】日志文件推荐`至少`保存 `15` 天，因为有些异常具备以“周”为频次发生的特点。\n3. 【强制】应用中的扩展日志（ 如打点、临时监控、访问日志等） 命名方式：\n    * appName_logType_logName.log。\n    * logType:日志类型，推荐分类有 stats/monitor/visit 等；\n    * logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。\n    * 正例： mppserver 应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log\n    * 说明： 推荐对日志进行分类， 如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。\n4. 【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。\n    * 说明： logger.debug(\"Processing trade with id: \" + id + \" and symbol: \" + symbol);\n    * 如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。\n    * 正例： （ 条件）\n        ```java\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Processing trade with id: \" + id + \" and symbol: \" + symbol);\n        }\n        ```\n    * 正例： （ 占位符）\n        ```java\n        logger.debug(\"Processing trade with id: {} and symbol : {} \", id, symbol);\n        ```\n5. 【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。\n    * 正例： <logger name=\"com.taobao.dubbo.config\" additivity=\"false\">\n6. 【强制】异常信息应该包括两类信息：`案发现场信息`和`异常堆栈信息`。如果不处理，那么通过关键字 throws 往上抛出。\n    * 正例： logger.error(各类参数或者对象 toString + \"_\" + e.getMessage(), e);\n\n## 推荐(2)\n7. 【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志； 有选择地输出 info 日志； 如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。\n    * 说明： 大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。 记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？\n8. 【推荐】可以使用 `warn` 日志级别来记录`用户输入参数错误`的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。\n    * 说明： 注意日志输出的级别， error 级别只记录系统逻辑出错、异常或者重要的错误信息。","source":"_posts/阿里java规约/阿里java规约(二)-异常日志(2)-日志规约.md","raw":"---\ntitle: 阿里java规约(二)-异常日志(2)-日志规约.md\ncategories: 阿里java规约\ntags:\n  - 阿里java规约\ntoc: true\ndate: 2018-02-09 16:29:33\nscaffolds:\n---\n# 日志规约(8)\n## 强制(6)\n1. 【强制】应用中`不可直接使用`日志系统（ Log4j、 Logback） 中的 API，而应依赖`使用`日志框架`SLF4J` 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。\n    ```java\n    import org.slf4j.Logger;\n    import org.slf4j.LoggerFactory;\n    private static final Logger logger = LoggerFactory.getLogger(Abc.class);\n    ```\n2. 【强制】日志文件推荐`至少`保存 `15` 天，因为有些异常具备以“周”为频次发生的特点。\n3. 【强制】应用中的扩展日志（ 如打点、临时监控、访问日志等） 命名方式：\n    * appName_logType_logName.log。\n    * logType:日志类型，推荐分类有 stats/monitor/visit 等；\n    * logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。\n    * 正例： mppserver 应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log\n    * 说明： 推荐对日志进行分类， 如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。\n4. 【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。\n    * 说明： logger.debug(\"Processing trade with id: \" + id + \" and symbol: \" + symbol);\n    * 如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。\n    * 正例： （ 条件）\n        ```java\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Processing trade with id: \" + id + \" and symbol: \" + symbol);\n        }\n        ```\n    * 正例： （ 占位符）\n        ```java\n        logger.debug(\"Processing trade with id: {} and symbol : {} \", id, symbol);\n        ```\n5. 【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。\n    * 正例： <logger name=\"com.taobao.dubbo.config\" additivity=\"false\">\n6. 【强制】异常信息应该包括两类信息：`案发现场信息`和`异常堆栈信息`。如果不处理，那么通过关键字 throws 往上抛出。\n    * 正例： logger.error(各类参数或者对象 toString + \"_\" + e.getMessage(), e);\n\n## 推荐(2)\n7. 【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志； 有选择地输出 info 日志； 如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。\n    * 说明： 大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。 记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？\n8. 【推荐】可以使用 `warn` 日志级别来记录`用户输入参数错误`的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。\n    * 说明： 注意日志输出的级别， error 级别只记录系统逻辑出错、异常或者重要的错误信息。","slug":"阿里java规约/阿里java规约(二)-异常日志(2)-日志规约","published":1,"updated":"2018-02-09T08:57:21.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a280051v4vfky7xufk9","content":"<h1 id=\"日志规约-8\"><a href=\"#日志规约-8\" class=\"headerlink\" title=\"日志规约(8)\"></a>日志规约(8)</h1><h2 id=\"强制-6\"><a href=\"#强制-6\" class=\"headerlink\" title=\"强制(6)\"></a>强制(6)</h2><ol>\n<li><p>【强制】应用中<code>不可直接使用</code>日志系统（ Log4j、 Logback） 中的 API，而应依赖<code>使用</code>日志框架<code>SLF4J</code> 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</div><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(Abc.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>【强制】日志文件推荐<code>至少</code>保存 <code>15</code> 天，因为有些异常具备以“周”为频次发生的特点。</p>\n</li>\n<li>【强制】应用中的扩展日志（ 如打点、临时监控、访问日志等） 命名方式：<ul>\n<li>appName_logType_logName.log。</li>\n<li>logType:日志类型，推荐分类有 stats/monitor/visit 等；</li>\n<li>logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</li>\n<li>正例： mppserver 应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log</li>\n<li>说明： 推荐对日志进行分类， 如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</li>\n</ul>\n</li>\n<li><p>【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。</p>\n<ul>\n<li>说明： logger.debug(“Processing trade with id: “ + id + “ and symbol: “ + symbol);</li>\n<li>如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。</li>\n<li><p>正例： （ 条件）</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">    logger.debug(<span class=\"string\">\"Processing trade with id: \"</span> + id + <span class=\"string\">\" and symbol: \"</span> + symbol);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>正例： （ 占位符）</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">logger.debug(<span class=\"string\">\"Processing trade with id: &#123;&#125; and symbol : &#123;&#125; \"</span>, id, symbol);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。</p>\n<ul>\n<li>正例： <logger name=\"com.taobao.dubbo.config\" additivity=\"false\"></logger></li>\n</ul>\n</li>\n<li>【强制】异常信息应该包括两类信息：<code>案发现场信息</code>和<code>异常堆栈信息</code>。如果不处理，那么通过关键字 throws 往上抛出。<ul>\n<li>正例： logger.error(各类参数或者对象 toString + “_” + e.getMessage(), e);</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-2\"><a href=\"#推荐-2\" class=\"headerlink\" title=\"推荐(2)\"></a>推荐(2)</h2><ol>\n<li>【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志； 有选择地输出 info 日志； 如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。<ul>\n<li>说明： 大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。 记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</li>\n</ul>\n</li>\n<li>【推荐】可以使用 <code>warn</code> 日志级别来记录<code>用户输入参数错误</code>的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。<ul>\n<li>说明： 注意日志输出的级别， error 级别只记录系统逻辑出错、异常或者重要的错误信息。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"日志规约-8\"><a href=\"#日志规约-8\" class=\"headerlink\" title=\"日志规约(8)\"></a>日志规约(8)</h1><h2 id=\"强制-6\"><a href=\"#强制-6\" class=\"headerlink\" title=\"强制(6)\"></a>强制(6)</h2><ol>\n<li><p>【强制】应用中<code>不可直接使用</code>日志系统（ Log4j、 Logback） 中的 API，而应依赖<code>使用</code>日志框架<code>SLF4J</code> 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</div><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(Abc.class);</div></pre></td></tr></table></figure>\n</li>\n<li><p>【强制】日志文件推荐<code>至少</code>保存 <code>15</code> 天，因为有些异常具备以“周”为频次发生的特点。</p>\n</li>\n<li>【强制】应用中的扩展日志（ 如打点、临时监控、访问日志等） 命名方式：<ul>\n<li>appName_logType_logName.log。</li>\n<li>logType:日志类型，推荐分类有 stats/monitor/visit 等；</li>\n<li>logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</li>\n<li>正例： mppserver 应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log</li>\n<li>说明： 推荐对日志进行分类， 如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</li>\n</ul>\n</li>\n<li><p>【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。</p>\n<ul>\n<li>说明： logger.debug(“Processing trade with id: “ + id + “ and symbol: “ + symbol);</li>\n<li>如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。</li>\n<li><p>正例： （ 条件）</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">    logger.debug(<span class=\"string\">\"Processing trade with id: \"</span> + id + <span class=\"string\">\" and symbol: \"</span> + symbol);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>正例： （ 占位符）</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">logger.debug(<span class=\"string\">\"Processing trade with id: &#123;&#125; and symbol : &#123;&#125; \"</span>, id, symbol);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。</p>\n<ul>\n<li>正例： <logger name=\"com.taobao.dubbo.config\" additivity=\"false\"></logger></li>\n</ul>\n</li>\n<li>【强制】异常信息应该包括两类信息：<code>案发现场信息</code>和<code>异常堆栈信息</code>。如果不处理，那么通过关键字 throws 往上抛出。<ul>\n<li>正例： logger.error(各类参数或者对象 toString + “_” + e.getMessage(), e);</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-2\"><a href=\"#推荐-2\" class=\"headerlink\" title=\"推荐(2)\"></a>推荐(2)</h2><ol>\n<li>【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志； 有选择地输出 info 日志； 如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。<ul>\n<li>说明： 大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。 记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</li>\n</ul>\n</li>\n<li>【推荐】可以使用 <code>warn</code> 日志级别来记录<code>用户输入参数错误</code>的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。<ul>\n<li>说明： 注意日志输出的级别， error 级别只记录系统逻辑出错、异常或者重要的错误信息。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"阿里java规约(二)-异常日志(1)-异常处理.md","toc":true,"date":"2018-02-09T08:29:33.000Z","scaffolds":null,"_content":"# 异常处理(13)\n## 强制(8)\n1. 【强制】 Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来处理，比如： NullPointerException， IndexOutOfBoundsException 等等。\n    * 说明： 无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。\n    * 正例： if (obj != null) {...}\n    * 反例： try { obj.method() } catch (NullPointerException e) {…}\n2. 【强制】异常不要用来做流程控制，条件控制。\n    * 说明： 异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。\n3. 【强制】 catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。\n    * 说明： 对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。\n    * 正例： 用户注册的场景中，如果用户输入非法字符， 或用户名称已存在， 或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。\n4. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\n5. 【强制】有 try 块放到了事务代码中， catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。\n6. 【强制】 finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。\n    * 说明： 如果 JDK7 及以上，可以使用 try-with-resources 方式。\n7. 【强制】不要在 finally 块中使用 return。\n    * 说明： finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。\n8. 【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。\n    * 说明： 如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。\n\n## 推荐(4)\n9. 【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。\n    * 说明： 本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、 序列化失败、 运行时异常等场景返回null 的情况。\n10. 【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：\n    * 1）返回类型为基本数据类型， return 包装数据类型的对象时，自动拆箱有可能产生 NPE。\n        * 反例： public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。\n    * 2） 数据库的查询结果可能为 null。\n    * 3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。\n    * 4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。\n    * 5） 对于 Session 中获取的数据， 建议 NPE 检查，避免空指针。\n    * 6） 级联调用 obj.getA().getB().getC()； 一连串调用，易产生 NPE。\n    * 正例： 使用 JDK8 的 Optional 类来防止 NPE 问题。\n11. 【推荐】定义时区分 unchecked / checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如： DAOException / ServiceException 等。\n\n\n## 参考(1)\n12. 【 参考】 对于公司外的 `http/api 开放接口必须使用“错误码”`； 而`应用内部推荐异常抛出`；跨应用间 `RPC` 调用优先考虑使用 `Result` 方式，封装 `isSuccess`()方法、 `“错误码”、` `“错误简短信息”。`\n    * 说明： 关于 RPC 方法返回方式使用 Result 方式的理由：\n    * 1） 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。\n    * 2） 如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。\n13. 【参考】 `避免出现重复的代码`（ Don’t Repeat Yourself） ，即 DRY 原则。\n    * 说明： 随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。\n    * 正例： 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：\n        * private boolean checkParam(DTO dto) {...}","source":"_posts/阿里java规约/阿里java规约(二)-异常日志(1)-异常处理.md","raw":"---\ntitle: 阿里java规约(二)-异常日志(1)-异常处理.md\ncategories: 阿里java规约\ntags:\n  - 阿里java规约\ntoc: true\ndate: 2018-02-09 16:29:33\nscaffolds:\n---\n# 异常处理(13)\n## 强制(8)\n1. 【强制】 Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来处理，比如： NullPointerException， IndexOutOfBoundsException 等等。\n    * 说明： 无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。\n    * 正例： if (obj != null) {...}\n    * 反例： try { obj.method() } catch (NullPointerException e) {…}\n2. 【强制】异常不要用来做流程控制，条件控制。\n    * 说明： 异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。\n3. 【强制】 catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。\n    * 说明： 对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。\n    * 正例： 用户注册的场景中，如果用户输入非法字符， 或用户名称已存在， 或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。\n4. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\n5. 【强制】有 try 块放到了事务代码中， catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。\n6. 【强制】 finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。\n    * 说明： 如果 JDK7 及以上，可以使用 try-with-resources 方式。\n7. 【强制】不要在 finally 块中使用 return。\n    * 说明： finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。\n8. 【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。\n    * 说明： 如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。\n\n## 推荐(4)\n9. 【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。\n    * 说明： 本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、 序列化失败、 运行时异常等场景返回null 的情况。\n10. 【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：\n    * 1）返回类型为基本数据类型， return 包装数据类型的对象时，自动拆箱有可能产生 NPE。\n        * 反例： public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。\n    * 2） 数据库的查询结果可能为 null。\n    * 3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。\n    * 4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。\n    * 5） 对于 Session 中获取的数据， 建议 NPE 检查，避免空指针。\n    * 6） 级联调用 obj.getA().getB().getC()； 一连串调用，易产生 NPE。\n    * 正例： 使用 JDK8 的 Optional 类来防止 NPE 问题。\n11. 【推荐】定义时区分 unchecked / checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如： DAOException / ServiceException 等。\n\n\n## 参考(1)\n12. 【 参考】 对于公司外的 `http/api 开放接口必须使用“错误码”`； 而`应用内部推荐异常抛出`；跨应用间 `RPC` 调用优先考虑使用 `Result` 方式，封装 `isSuccess`()方法、 `“错误码”、` `“错误简短信息”。`\n    * 说明： 关于 RPC 方法返回方式使用 Result 方式的理由：\n    * 1） 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。\n    * 2） 如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。\n13. 【参考】 `避免出现重复的代码`（ Don’t Repeat Yourself） ，即 DRY 原则。\n    * 说明： 随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。\n    * 正例： 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：\n        * private boolean checkParam(DTO dto) {...}","slug":"阿里java规约/阿里java规约(二)-异常日志(1)-异常处理","published":1,"updated":"2018-02-09T08:45:40.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfr8a2d0054v4vf24dj4der","content":"<h1 id=\"异常处理-13\"><a href=\"#异常处理-13\" class=\"headerlink\" title=\"异常处理(13)\"></a>异常处理(13)</h1><h2 id=\"强制-8\"><a href=\"#强制-8\" class=\"headerlink\" title=\"强制(8)\"></a>强制(8)</h2><ol>\n<li>【强制】 Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来处理，比如： NullPointerException， IndexOutOfBoundsException 等等。<ul>\n<li>说明： 无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。</li>\n<li>正例： if (obj != null) {…}</li>\n<li>反例： try { obj.method() } catch (NullPointerException e) {…}</li>\n</ul>\n</li>\n<li>【强制】异常不要用来做流程控制，条件控制。<ul>\n<li>说明： 异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</li>\n</ul>\n</li>\n<li>【强制】 catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。<ul>\n<li>说明： 对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。</li>\n<li>正例： 用户注册的场景中，如果用户输入非法字符， 或用户名称已存在， 或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</li>\n</ul>\n</li>\n<li>【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</li>\n<li>【强制】有 try 块放到了事务代码中， catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。</li>\n<li>【强制】 finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。<ul>\n<li>说明： 如果 JDK7 及以上，可以使用 try-with-resources 方式。</li>\n</ul>\n</li>\n<li>【强制】不要在 finally 块中使用 return。<ul>\n<li>说明： finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</li>\n</ul>\n</li>\n<li>【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。<ul>\n<li>说明： 如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-4\"><a href=\"#推荐-4\" class=\"headerlink\" title=\"推荐(4)\"></a>推荐(4)</h2><ol>\n<li>【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。<ul>\n<li>说明： 本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、 序列化失败、 运行时异常等场景返回null 的情况。</li>\n</ul>\n</li>\n<li>【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：<ul>\n<li>1）返回类型为基本数据类型， return 包装数据类型的对象时，自动拆箱有可能产生 NPE。<ul>\n<li>反例： public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。</li>\n</ul>\n</li>\n<li>2） 数据库的查询结果可能为 null。</li>\n<li>3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。</li>\n<li>4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</li>\n<li>5） 对于 Session 中获取的数据， 建议 NPE 检查，避免空指针。</li>\n<li>6） 级联调用 obj.getA().getB().getC()； 一连串调用，易产生 NPE。</li>\n<li>正例： 使用 JDK8 的 Optional 类来防止 NPE 问题。</li>\n</ul>\n</li>\n<li>【推荐】定义时区分 unchecked / checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如： DAOException / ServiceException 等。</li>\n</ol>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考(1)\"></a>参考(1)</h2><ol>\n<li>【 参考】 对于公司外的 <code>http/api 开放接口必须使用“错误码”</code>； 而<code>应用内部推荐异常抛出</code>；跨应用间 <code>RPC</code> 调用优先考虑使用 <code>Result</code> 方式，封装 <code>isSuccess</code>()方法、 <code>“错误码”、</code> <code>“错误简短信息”。</code><ul>\n<li>说明： 关于 RPC 方法返回方式使用 Result 方式的理由：</li>\n<li>1） 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</li>\n<li>2） 如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</li>\n</ul>\n</li>\n<li>【参考】 <code>避免出现重复的代码</code>（ Don’t Repeat Yourself） ，即 DRY 原则。<ul>\n<li>说明： 随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。</li>\n<li>正例： 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：<ul>\n<li>private boolean checkParam(DTO dto) {…}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"异常处理-13\"><a href=\"#异常处理-13\" class=\"headerlink\" title=\"异常处理(13)\"></a>异常处理(13)</h1><h2 id=\"强制-8\"><a href=\"#强制-8\" class=\"headerlink\" title=\"强制(8)\"></a>强制(8)</h2><ol>\n<li>【强制】 Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来处理，比如： NullPointerException， IndexOutOfBoundsException 等等。<ul>\n<li>说明： 无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。</li>\n<li>正例： if (obj != null) {…}</li>\n<li>反例： try { obj.method() } catch (NullPointerException e) {…}</li>\n</ul>\n</li>\n<li>【强制】异常不要用来做流程控制，条件控制。<ul>\n<li>说明： 异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</li>\n</ul>\n</li>\n<li>【强制】 catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。<ul>\n<li>说明： 对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。</li>\n<li>正例： 用户注册的场景中，如果用户输入非法字符， 或用户名称已存在， 或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</li>\n</ul>\n</li>\n<li>【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</li>\n<li>【强制】有 try 块放到了事务代码中， catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。</li>\n<li>【强制】 finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。<ul>\n<li>说明： 如果 JDK7 及以上，可以使用 try-with-resources 方式。</li>\n</ul>\n</li>\n<li>【强制】不要在 finally 块中使用 return。<ul>\n<li>说明： finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</li>\n</ul>\n</li>\n<li>【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。<ul>\n<li>说明： 如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"推荐-4\"><a href=\"#推荐-4\" class=\"headerlink\" title=\"推荐(4)\"></a>推荐(4)</h2><ol>\n<li>【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。<ul>\n<li>说明： 本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、 序列化失败、 运行时异常等场景返回null 的情况。</li>\n</ul>\n</li>\n<li>【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：<ul>\n<li>1）返回类型为基本数据类型， return 包装数据类型的对象时，自动拆箱有可能产生 NPE。<ul>\n<li>反例： public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。</li>\n</ul>\n</li>\n<li>2） 数据库的查询结果可能为 null。</li>\n<li>3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。</li>\n<li>4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</li>\n<li>5） 对于 Session 中获取的数据， 建议 NPE 检查，避免空指针。</li>\n<li>6） 级联调用 obj.getA().getB().getC()； 一连串调用，易产生 NPE。</li>\n<li>正例： 使用 JDK8 的 Optional 类来防止 NPE 问题。</li>\n</ul>\n</li>\n<li>【推荐】定义时区分 unchecked / checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如： DAOException / ServiceException 等。</li>\n</ol>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考(1)\"></a>参考(1)</h2><ol>\n<li>【 参考】 对于公司外的 <code>http/api 开放接口必须使用“错误码”</code>； 而<code>应用内部推荐异常抛出</code>；跨应用间 <code>RPC</code> 调用优先考虑使用 <code>Result</code> 方式，封装 <code>isSuccess</code>()方法、 <code>“错误码”、</code> <code>“错误简短信息”。</code><ul>\n<li>说明： 关于 RPC 方法返回方式使用 Result 方式的理由：</li>\n<li>1） 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</li>\n<li>2） 如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</li>\n</ul>\n</li>\n<li>【参考】 <code>避免出现重复的代码</code>（ Don’t Repeat Yourself） ，即 DRY 原则。<ul>\n<li>说明： 随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。</li>\n<li>正例： 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：<ul>\n<li>private boolean checkParam(DTO dto) {…}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjdfr89pb0002v4vftr6uxf1r","category_id":"cjdfr89pe0003v4vfkr8esoty","_id":"cjdfr89ph0004v4vfoq4boyy8"},{"post_id":"cjdfr89yf000cv4vf8591qnha","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89yk000hv4vft2uqwrab"},{"post_id":"cjdfr89y90007v4vf3f34a7uo","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89yn000lv4vfwumobfr9"},{"post_id":"cjdfr89yg000dv4vfqnaj691m","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89yp000nv4vf5vqr0jf8"},{"post_id":"cjdfr89yj000gv4vfwwalev9j","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89yr000qv4vfl7osk3q4"},{"post_id":"cjdfr89yb0008v4vf0xlhen08","category_id":"cjdfr89yh000ev4vf3r1lkz5o","_id":"cjdfr89yt000tv4vfrea3arv5"},{"post_id":"cjdfr89yk000iv4vf8xvwn0sg","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89yv000wv4vfum00ekcp"},{"post_id":"cjdfr89yo000mv4vfwfe73cfp","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89yy0010v4vf1ge2i5t0"},{"post_id":"cjdfr89ye000bv4vfs531n59g","category_id":"cjdfr89yh000ev4vf3r1lkz5o","_id":"cjdfr89z00012v4vflgxjul4t"},{"post_id":"cjdfr89yq000ov4vfzs6l69e0","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89z20015v4vf0fr6hp53"},{"post_id":"cjdfr89ys000rv4vfakf4e5yw","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89z40018v4vf69co3252"},{"post_id":"cjdfr89yu000uv4vfye3vsw26","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89z6001cv4vfmcqvqhjy"},{"post_id":"cjdfr89yw000yv4vff2o87ygy","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89z8001ev4vfqty78g2j"},{"post_id":"cjdfr89yy0011v4vfll899vfa","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89zb001hv4vf5koa3qnq"},{"post_id":"cjdfr89z00013v4vfzxlv47aa","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89ze001jv4vfu1je3oar"},{"post_id":"cjdfr89z20017v4vfshk5vyqk","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89zo001mv4vfgsv74o3p"},{"post_id":"cjdfr89z4001av4vfsdj509fu","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89zp001pv4vfvbjsrh2y"},{"post_id":"cjdfr89z7001dv4vffunak3hz","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89zs001tv4vfby7imbwu"},{"post_id":"cjdfr89z8001fv4vfkpad7ka5","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89zv001xv4vf35r9vqes"},{"post_id":"cjdfr89zb001iv4vf0zl4eelh","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89zx0020v4vfxnj7grid"},{"post_id":"cjdfr89ze001kv4vfh499cv1p","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr89zz0023v4vfgufotmos"},{"post_id":"cjdfr89zo001nv4vfi91mpu4f","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr8a020028v4vforbdeogq"},{"post_id":"cjdfr89zs001uv4vf5jihl3qc","category_id":"cjdfr89yc0009v4vfd0cegwon","_id":"cjdfr8a04002bv4vfo9azulgr"},{"post_id":"cjdfr89zy0021v4vft0egrsod","category_id":"cjdfr89zu001wv4vf8bqav494","_id":"cjdfr8a06002fv4vfs2edqhmy"},{"post_id":"cjdfr89zq001qv4vfdcqawo3v","category_id":"cjdfr89zu001wv4vf8bqav494","_id":"cjdfr8a08002iv4vfwj6niglf"},{"post_id":"cjdfr89zz0024v4vfxh8xqp2m","category_id":"cjdfr89zu001wv4vf8bqav494","_id":"cjdfr8a0b002mv4vfrzrik1lw"},{"post_id":"cjdfr89zv001yv4vfxjzq7wgv","category_id":"cjdfr89zu001wv4vf8bqav494","_id":"cjdfr8a0d002qv4vfkhffl99j"},{"post_id":"cjdfr8a020029v4vf3e01k88z","category_id":"cjdfr8a06002ev4vfdr1rhb5a","_id":"cjdfr8a0f002uv4vf4y4db8g5"},{"post_id":"cjdfr8a0b002nv4vfcogztct7","category_id":"cjdfr8a06002ev4vfdr1rhb5a","_id":"cjdfr8a0i002yv4vf8rk3jx44"},{"post_id":"cjdfr8a0d002rv4vf2jmnyp7l","category_id":"cjdfr8a0c002ov4vfhxteqegx","_id":"cjdfr8a0k0032v4vf5kb8rcov"},{"post_id":"cjdfr8a04002cv4vfobwya7u4","category_id":"cjdfr8a0c002ov4vfhxteqegx","_id":"cjdfr8a0p0036v4vfyqvl5b3k"},{"post_id":"cjdfr8a0g002vv4vf2oyrhwhf","category_id":"cjdfr8a06002ev4vfdr1rhb5a","_id":"cjdfr8a0s003av4vflsheqier"},{"post_id":"cjdfr8a0i002zv4vft0rbc5rr","category_id":"cjdfr8a0c002ov4vfhxteqegx","_id":"cjdfr8a0u003dv4vfcgk4qven"},{"post_id":"cjdfr8a07002gv4vf9r67nlo8","category_id":"cjdfr8a0c002ov4vfhxteqegx","_id":"cjdfr8a0w003hv4vflq02a071"},{"post_id":"cjdfr8a0l0033v4vfoplzyj45","category_id":"cjdfr8a0c002ov4vfhxteqegx","_id":"cjdfr8a0z003kv4vf25rp2o6r"},{"post_id":"cjdfr8a0p0037v4vfb31qk7iv","category_id":"cjdfr8a0c002ov4vfhxteqegx","_id":"cjdfr8a12003ov4vfy0gyvov8"},{"post_id":"cjdfr8a09002jv4vfxson65y3","category_id":"cjdfr8a0c002ov4vfhxteqegx","_id":"cjdfr8a14003rv4vfajq82kw8"},{"post_id":"cjdfr8a0s003bv4vf8rqfd63n","category_id":"cjdfr8a0c002ov4vfhxteqegx","_id":"cjdfr8a17003vv4vf962qhbrk"},{"post_id":"cjdfr8a0u003ev4vf2th8zt9m","category_id":"cjdfr8a0c002ov4vfhxteqegx","_id":"cjdfr8a1a003yv4vfn1n9780y"},{"post_id":"cjdfr8a0x003iv4vfgizouhxh","category_id":"cjdfr8a06002ev4vfdr1rhb5a","_id":"cjdfr8a1c0041v4vfoo5ybte1"},{"post_id":"cjdfr8a10003lv4vf4jiin7ov","category_id":"cjdfr8a0c002ov4vfhxteqegx","_id":"cjdfr8a1g0046v4vf04wka2m1"},{"post_id":"cjdfr8a13003pv4vf6mlz8ydg","category_id":"cjdfr8a0c002ov4vfhxteqegx","_id":"cjdfr8a1j0049v4vf7ntv7ogq"},{"post_id":"cjdfr8a15003sv4vf4b07efei","category_id":"cjdfr8a06002ev4vfdr1rhb5a","_id":"cjdfr8a1n004dv4vf5f9s7of7"},{"post_id":"cjdfr8a18003wv4vfrq1bclj8","category_id":"cjdfr8a06002ev4vfdr1rhb5a","_id":"cjdfr8a1q004hv4vfiff54huu"},{"post_id":"cjdfr8a1l004bv4vfmh6s80cw","category_id":"cjdfr8a1g0045v4vfytacb3h3","_id":"cjdfr8a1w004lv4vf1vce7gpl"},{"post_id":"cjdfr8a1a003zv4vf341gqq96","category_id":"cjdfr8a1g0045v4vfytacb3h3","_id":"cjdfr8a1z004pv4vfltuzwrmt"},{"post_id":"cjdfr8a1n004ev4vfwy6yo6yg","category_id":"cjdfr8a1g0045v4vfytacb3h3","_id":"cjdfr8a22004tv4vfsqwo03cy"},{"post_id":"cjdfr8a1s004jv4vfq0zu4pby","category_id":"cjdfr8a1g0045v4vfytacb3h3","_id":"cjdfr8a24004wv4vfvyvvf0ic"},{"post_id":"cjdfr8a1e0043v4vfwgwyd7fk","category_id":"cjdfr8a1g0045v4vfytacb3h3","_id":"cjdfr8a270050v4vfu74hj5bp"},{"post_id":"cjdfr8a1w004mv4vfa9ae641c","category_id":"cjdfr8a1g0045v4vfytacb3h3","_id":"cjdfr8a2c0053v4vfh5sd4mku"},{"post_id":"cjdfr8a20004rv4vf63xcsjdv","category_id":"cjdfr8a1g0045v4vfytacb3h3","_id":"cjdfr8a2g0057v4vfuxhk6ccs"},{"post_id":"cjdfr8a1h0047v4vfg71us0f3","category_id":"cjdfr8a1g0045v4vfytacb3h3","_id":"cjdfr8a2i0059v4vfrnwcexcz"},{"post_id":"cjdfr8a22004uv4vfy2fwrcca","category_id":"cjdfr8a1g0045v4vfytacb3h3","_id":"cjdfr8a2j005cv4vfbl1cxcda"},{"post_id":"cjdfr8a25004yv4vffiimkncg","category_id":"cjdfr8a1g0045v4vfytacb3h3","_id":"cjdfr8a2k005ev4vfp96muwcg"},{"post_id":"cjdfr8a280051v4vfky7xufk9","category_id":"cjdfr8a1g0045v4vfytacb3h3","_id":"cjdfr8a2n005hv4vf5q24l07r"},{"post_id":"cjdfr8a2d0054v4vf24dj4der","category_id":"cjdfr8a1g0045v4vfytacb3h3","_id":"cjdfr8a2o005jv4vftfb3hrjl"}],"PostTag":[{"post_id":"cjdfr89y90007v4vf3f34a7uo","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr89yt000sv4vfzib46n7d"},{"post_id":"cjdfr89y90007v4vf3f34a7uo","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr89yv000vv4vfadgtln5g"},{"post_id":"cjdfr89y90007v4vf3f34a7uo","tag_id":"cjdfr89ym000kv4vfc1y6juu7","_id":"cjdfr89yx000zv4vfsajy4qhl"},{"post_id":"cjdfr89yb0008v4vf0xlhen08","tag_id":"cjdfr89yr000pv4vfwjd91vre","_id":"cjdfr89z20016v4vfon3cmdmk"},{"post_id":"cjdfr89yb0008v4vf0xlhen08","tag_id":"cjdfr89yv000xv4vfucsxfnmn","_id":"cjdfr89z40019v4vfzyvtg8qc"},{"post_id":"cjdfr89ye000bv4vfs531n59g","tag_id":"cjdfr89z10014v4vf56495kqu","_id":"cjdfr89zp001ov4vfn367f3w6"},{"post_id":"cjdfr89ye000bv4vfs531n59g","tag_id":"cjdfr89yr000pv4vfwjd91vre","_id":"cjdfr89zr001rv4vf1kv183ky"},{"post_id":"cjdfr89ye000bv4vfs531n59g","tag_id":"cjdfr89yv000xv4vfucsxfnmn","_id":"cjdfr89zt001vv4vf5mjd44xu"},{"post_id":"cjdfr89yf000cv4vf8591qnha","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr89zy0022v4vfz5bequ6r"},{"post_id":"cjdfr89yf000cv4vf8591qnha","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a010026v4vfk6wy8neu"},{"post_id":"cjdfr89yf000cv4vf8591qnha","tag_id":"cjdfr89ym000kv4vfc1y6juu7","_id":"cjdfr8a03002av4vfyxinp9dg"},{"post_id":"cjdfr89yg000dv4vfqnaj691m","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a08002hv4vf6yipsbui"},{"post_id":"cjdfr89yg000dv4vfqnaj691m","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a0a002kv4vfeb9c0r2o"},{"post_id":"cjdfr89yg000dv4vfqnaj691m","tag_id":"cjdfr8a010027v4vflncuog47","_id":"cjdfr8a0d002pv4vfwav1zufp"},{"post_id":"cjdfr8a07002gv4vf9r67nlo8","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a0f002sv4vfqqy5mobl"},{"post_id":"cjdfr8a07002gv4vf9r67nlo8","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a0h002xv4vf0k0eje7g"},{"post_id":"cjdfr8a07002gv4vf9r67nlo8","tag_id":"cjdfr8a010027v4vflncuog47","_id":"cjdfr8a0j0030v4vfty7155zg"},{"post_id":"cjdfr89yj000gv4vfwwalev9j","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a0o0035v4vfxpfk2ook"},{"post_id":"cjdfr89yj000gv4vfwwalev9j","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a0r0038v4vf48mzss24"},{"post_id":"cjdfr89yj000gv4vfwwalev9j","tag_id":"cjdfr8a010027v4vflncuog47","_id":"cjdfr8a0u003cv4vfn6cu0zfo"},{"post_id":"cjdfr89yj000gv4vfwwalev9j","tag_id":"cjdfr89ym000kv4vfc1y6juu7","_id":"cjdfr8a0v003fv4vf15weiher"},{"post_id":"cjdfr8a0l0033v4vfoplzyj45","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a0z003jv4vfiydjg5iu"},{"post_id":"cjdfr89yk000iv4vf8xvwn0sg","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a11003mv4vfmolp24pb"},{"post_id":"cjdfr89yk000iv4vf8xvwn0sg","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a14003qv4vfpzz9xbf1"},{"post_id":"cjdfr89yk000iv4vf8xvwn0sg","tag_id":"cjdfr8a010027v4vflncuog47","_id":"cjdfr8a16003tv4vfqv4ke2i7"},{"post_id":"cjdfr89yk000iv4vf8xvwn0sg","tag_id":"cjdfr89ym000kv4vfc1y6juu7","_id":"cjdfr8a19003xv4vfswrq4f76"},{"post_id":"cjdfr8a0p0037v4vfb31qk7iv","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a1c0040v4vfuhlbmkbt"},{"post_id":"cjdfr89yo000mv4vfwfe73cfp","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a1f0044v4vfvyndpo6f"},{"post_id":"cjdfr89yo000mv4vfwfe73cfp","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a1j0048v4vfrctpbs76"},{"post_id":"cjdfr89yo000mv4vfwfe73cfp","tag_id":"cjdfr8a010027v4vflncuog47","_id":"cjdfr8a1m004cv4vfybk66vsc"},{"post_id":"cjdfr89yo000mv4vfwfe73cfp","tag_id":"cjdfr89ym000kv4vfc1y6juu7","_id":"cjdfr8a1q004gv4vfqgvsp68n"},{"post_id":"cjdfr8a0u003ev4vf2th8zt9m","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a1v004kv4vf0mk3y36u"},{"post_id":"cjdfr8a0u003ev4vf2th8zt9m","tag_id":"cjdfr8a010027v4vflncuog47","_id":"cjdfr8a1y004ov4vfp4ph2lxj"},{"post_id":"cjdfr89yq000ov4vfzs6l69e0","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a21004sv4vfw1j37yip"},{"post_id":"cjdfr89yq000ov4vfzs6l69e0","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a24004vv4vfn50z7ag3"},{"post_id":"cjdfr89yq000ov4vfzs6l69e0","tag_id":"cjdfr8a010027v4vflncuog47","_id":"cjdfr8a27004zv4vfw9hjwxc0"},{"post_id":"cjdfr89yq000ov4vfzs6l69e0","tag_id":"cjdfr89ym000kv4vfc1y6juu7","_id":"cjdfr8a2c0052v4vfgl8ba41h"},{"post_id":"cjdfr89ys000rv4vfakf4e5yw","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a2g0056v4vfxtzwqlcn"},{"post_id":"cjdfr89ys000rv4vfakf4e5yw","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a2h0058v4vf7kpoj0fb"},{"post_id":"cjdfr89ys000rv4vfakf4e5yw","tag_id":"cjdfr8a010027v4vflncuog47","_id":"cjdfr8a2j005bv4vf3bt8w7sy"},{"post_id":"cjdfr89yu000uv4vfye3vsw26","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a2k005dv4vfm0bwxzin"},{"post_id":"cjdfr89yu000uv4vfye3vsw26","tag_id":"cjdfr8a16003uv4vf63hmwlhp","_id":"cjdfr8a2m005gv4vfjaa3jgth"},{"post_id":"cjdfr89yw000yv4vff2o87ygy","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a2n005iv4vf1m0kdajk"},{"post_id":"cjdfr89yw000yv4vff2o87ygy","tag_id":"cjdfr8a16003uv4vf63hmwlhp","_id":"cjdfr8a2p005lv4vfc9md4e7b"},{"post_id":"cjdfr89yy0011v4vfll899vfa","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a2q005mv4vfszqbr1h0"},{"post_id":"cjdfr89yy0011v4vfll899vfa","tag_id":"cjdfr8a16003uv4vf63hmwlhp","_id":"cjdfr8a2q005nv4vf4ew4n565"},{"post_id":"cjdfr89z00013v4vfzxlv47aa","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a2r005pv4vfvtgm0p9c"},{"post_id":"cjdfr89z00013v4vfzxlv47aa","tag_id":"cjdfr8a16003uv4vf63hmwlhp","_id":"cjdfr8a2r005qv4vfsadl6do1"},{"post_id":"cjdfr89z20017v4vfshk5vyqk","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a2s005sv4vf7o8w276a"},{"post_id":"cjdfr89z20017v4vfshk5vyqk","tag_id":"cjdfr8a16003uv4vf63hmwlhp","_id":"cjdfr8a2s005tv4vfmayt8ycq"},{"post_id":"cjdfr89z4001av4vfsdj509fu","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a2t005vv4vffi4930ux"},{"post_id":"cjdfr89z4001av4vfsdj509fu","tag_id":"cjdfr8a24004xv4vfcebirelf","_id":"cjdfr8a2u005wv4vf6n0h7nt8"},{"post_id":"cjdfr89z7001dv4vffunak3hz","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a2v005yv4vfnqc438jo"},{"post_id":"cjdfr89z7001dv4vffunak3hz","tag_id":"cjdfr8a24004xv4vfcebirelf","_id":"cjdfr8a2w005zv4vf1lo0f0ci"},{"post_id":"cjdfr89z7001dv4vffunak3hz","tag_id":"cjdfr8a2i005av4vf5o28cov5","_id":"cjdfr8a2w0061v4vf05hhpm2r"},{"post_id":"cjdfr89z8001fv4vfkpad7ka5","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a2x0062v4vfwjdjau7r"},{"post_id":"cjdfr89z8001fv4vfkpad7ka5","tag_id":"cjdfr8a24004xv4vfcebirelf","_id":"cjdfr8a2x0064v4vfmbf24bdd"},{"post_id":"cjdfr89z8001fv4vfkpad7ka5","tag_id":"cjdfr8a2o005kv4vfguf47pjb","_id":"cjdfr8a2y0065v4vfscdrpwhy"},{"post_id":"cjdfr89zb001iv4vf0zl4eelh","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a2z0067v4vfepw8v8o9"},{"post_id":"cjdfr89zb001iv4vf0zl4eelh","tag_id":"cjdfr8a2q005ov4vfdd2c3jth","_id":"cjdfr8a2z0068v4vfoaomuwwf"},{"post_id":"cjdfr89zb001iv4vf0zl4eelh","tag_id":"cjdfr8a2r005rv4vf2sy9bnx5","_id":"cjdfr8a2z0069v4vfxpr6y240"},{"post_id":"cjdfr89zb001iv4vf0zl4eelh","tag_id":"cjdfr8a24004xv4vfcebirelf","_id":"cjdfr8a30006bv4vfy9gqehha"},{"post_id":"cjdfr89ze001kv4vfh499cv1p","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a30006cv4vf3rk00j7u"},{"post_id":"cjdfr89ze001kv4vfh499cv1p","tag_id":"cjdfr8a24004xv4vfcebirelf","_id":"cjdfr8a31006ev4vfya0f8ain"},{"post_id":"cjdfr89ze001kv4vfh499cv1p","tag_id":"cjdfr8a2w0060v4vf87005ck6","_id":"cjdfr8a31006fv4vfkfadxoxg"},{"post_id":"cjdfr89zo001nv4vfi91mpu4f","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a32006hv4vfng6cc4w4"},{"post_id":"cjdfr89zo001nv4vfi91mpu4f","tag_id":"cjdfr8a24004xv4vfcebirelf","_id":"cjdfr8a33006iv4vffphalz4v"},{"post_id":"cjdfr89zo001nv4vfi91mpu4f","tag_id":"cjdfr8a2y0066v4vfjc5csnzn","_id":"cjdfr8a34006kv4vffc73o8q6"},{"post_id":"cjdfr89zq001qv4vfdcqawo3v","tag_id":"cjdfr8a30006av4vfahf88w2h","_id":"cjdfr8a34006lv4vfksodaepn"},{"post_id":"cjdfr89zs001uv4vf5jihl3qc","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a36006nv4vfp8quog4g"},{"post_id":"cjdfr89zs001uv4vf5jihl3qc","tag_id":"cjdfr8a31006dv4vfgj0ftgqa","_id":"cjdfr8a36006ov4vf9mspyytg"},{"post_id":"cjdfr89zv001yv4vfxjzq7wgv","tag_id":"cjdfr8a30006av4vfahf88w2h","_id":"cjdfr8a37006qv4vfulpqfcbu"},{"post_id":"cjdfr89zy0021v4vft0egrsod","tag_id":"cjdfr8a30006av4vfahf88w2h","_id":"cjdfr8a37006rv4vfs8d5dptr"},{"post_id":"cjdfr89zz0024v4vfxh8xqp2m","tag_id":"cjdfr8a30006av4vfahf88w2h","_id":"cjdfr8a38006tv4vfw246i0tm"},{"post_id":"cjdfr8a020029v4vf3e01k88z","tag_id":"cjdfr8a36006pv4vfhfwvs4jk","_id":"cjdfr8a39006vv4vfcoownt6x"},{"post_id":"cjdfr8a020029v4vf3e01k88z","tag_id":"cjdfr8a37006sv4vf9kle4rok","_id":"cjdfr8a39006wv4vfqlgpaf9a"},{"post_id":"cjdfr8a04002cv4vfobwya7u4","tag_id":"cjdfr89yi000fv4vf4ed0kq10","_id":"cjdfr8a3a006yv4vfvmb98inq"},{"post_id":"cjdfr8a04002cv4vfobwya7u4","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a3a006zv4vfmkx00ujl"},{"post_id":"cjdfr8a04002cv4vfobwya7u4","tag_id":"cjdfr8a38006uv4vfhc1km88o","_id":"cjdfr8a3b0071v4vfm0zavstv"},{"post_id":"cjdfr8a09002jv4vfxson65y3","tag_id":"cjdfr8a39006xv4vf2uis6qi4","_id":"cjdfr8a3b0072v4vfvffh44ls"},{"post_id":"cjdfr8a09002jv4vfxson65y3","tag_id":"cjdfr89yd000av4vf4r9bfsz2","_id":"cjdfr8a3c0074v4vf9o2gr7b0"},{"post_id":"cjdfr8a0b002nv4vfcogztct7","tag_id":"cjdfr8a3b0070v4vfy5s180kj","_id":"cjdfr8a3d0076v4vfu501zbby"},{"post_id":"cjdfr8a0b002nv4vfcogztct7","tag_id":"cjdfr8a3c0073v4vf4k8vkv50","_id":"cjdfr8a3f0077v4vfex0vhrsw"},{"post_id":"cjdfr8a0d002rv4vf2jmnyp7l","tag_id":"cjdfr8a3c0075v4vf2s07zfma","_id":"cjdfr8a3g0079v4vfdyo2wkr8"},{"post_id":"cjdfr8a0g002vv4vf2oyrhwhf","tag_id":"cjdfr8a3c0075v4vf2s07zfma","_id":"cjdfr8a3h007bv4vf4nyua5tu"},{"post_id":"cjdfr8a0i002zv4vft0rbc5rr","tag_id":"cjdfr8a3g007av4vfh5f67cdx","_id":"cjdfr8a3j007dv4vf4b3z5c6r"},{"post_id":"cjdfr8a0s003bv4vf8rqfd63n","tag_id":"cjdfr8a3i007cv4vf2appppti","_id":"cjdfr8a3l007fv4vf48syty67"},{"post_id":"cjdfr8a0x003iv4vfgizouhxh","tag_id":"cjdfr8a3j007ev4vf95h4a5uc","_id":"cjdfr8a3n007hv4vfdxv3nqud"},{"post_id":"cjdfr8a10003lv4vf4jiin7ov","tag_id":"cjdfr8a3b0070v4vfy5s180kj","_id":"cjdfr8a3o007jv4vff5gjy7c9"},{"post_id":"cjdfr8a13003pv4vf6mlz8ydg","tag_id":"cjdfr8a3n007iv4vfpws79ayd","_id":"cjdfr8a3p007lv4vfyy0hv3pg"},{"post_id":"cjdfr8a15003sv4vf4b07efei","tag_id":"cjdfr8a3o007kv4vfcym9lt6s","_id":"cjdfr8a3r007ov4vfi08k0upu"},{"post_id":"cjdfr8a15003sv4vf4b07efei","tag_id":"cjdfr8a3c0073v4vf4k8vkv50","_id":"cjdfr8a3r007pv4vfupbjxepv"},{"post_id":"cjdfr8a18003wv4vfrq1bclj8","tag_id":"cjdfr8a3c0075v4vf2s07zfma","_id":"cjdfr8a3s007rv4vfe5clu4uy"},{"post_id":"cjdfr8a1a003zv4vf341gqq96","tag_id":"cjdfr8a3r007qv4vfquqkxhri","_id":"cjdfr8a3t007tv4vfnts9lxtk"},{"post_id":"cjdfr8a1e0043v4vfwgwyd7fk","tag_id":"cjdfr8a3r007qv4vfquqkxhri","_id":"cjdfr8a3v007vv4vfjcae5oqq"},{"post_id":"cjdfr8a1h0047v4vfg71us0f3","tag_id":"cjdfr8a3r007qv4vfquqkxhri","_id":"cjdfr8a3w007xv4vfgwizwj5c"},{"post_id":"cjdfr8a1l004bv4vfmh6s80cw","tag_id":"cjdfr8a3r007qv4vfquqkxhri","_id":"cjdfr8a3y007zv4vf8vesg7ku"},{"post_id":"cjdfr8a1n004ev4vfwy6yo6yg","tag_id":"cjdfr8a3r007qv4vfquqkxhri","_id":"cjdfr8a3z0081v4vfalqlz1ny"},{"post_id":"cjdfr8a1s004jv4vfq0zu4pby","tag_id":"cjdfr8a3r007qv4vfquqkxhri","_id":"cjdfr8a410083v4vfw4cxcvq8"},{"post_id":"cjdfr8a1w004mv4vfa9ae641c","tag_id":"cjdfr8a3r007qv4vfquqkxhri","_id":"cjdfr8a430085v4vf48zlpe72"},{"post_id":"cjdfr8a20004rv4vf63xcsjdv","tag_id":"cjdfr8a3r007qv4vfquqkxhri","_id":"cjdfr8a450087v4vfh0ck2rhf"},{"post_id":"cjdfr8a22004uv4vfy2fwrcca","tag_id":"cjdfr8a3r007qv4vfquqkxhri","_id":"cjdfr8a460089v4vfqju6udzj"},{"post_id":"cjdfr8a25004yv4vffiimkncg","tag_id":"cjdfr8a3r007qv4vfquqkxhri","_id":"cjdfr8a48008bv4vfdmd7ebbf"},{"post_id":"cjdfr8a280051v4vfky7xufk9","tag_id":"cjdfr8a3r007qv4vfquqkxhri","_id":"cjdfr8a49008dv4vfidgvq4gh"},{"post_id":"cjdfr8a2d0054v4vf24dj4der","tag_id":"cjdfr8a3r007qv4vfquqkxhri","_id":"cjdfr8a4a008ev4vfxx2xfbcu"}],"Tag":[{"name":"linux","_id":"cjdfr89yd000av4vf4r9bfsz2"},{"name":"大数据","_id":"cjdfr89yi000fv4vf4ed0kq10"},{"name":"linux命令","_id":"cjdfr89ym000kv4vfc1y6juu7"},{"name":"北京","_id":"cjdfr89yr000pv4vfwjd91vre"},{"name":"游玩","_id":"cjdfr89yv000xv4vfucsxfnmn"},{"name":"生活","_id":"cjdfr89z10014v4vf56495kqu"},{"name":"centos7","_id":"cjdfr8a010027v4vflncuog47"},{"name":"zookeeper","_id":"cjdfr8a16003uv4vf63hmwlhp"},{"name":"java","_id":"cjdfr8a24004xv4vfcebirelf"},{"name":"反射","_id":"cjdfr8a2i005av4vf5o28cov5"},{"name":"动态代理","_id":"cjdfr8a2o005kv4vfguf47pjb"},{"name":"JMS","_id":"cjdfr8a2q005ov4vfdd2c3jth"},{"name":"activeMQ","_id":"cjdfr8a2r005rv4vf2sy9bnx5"},{"name":"JVM","_id":"cjdfr8a2w0060v4vf87005ck6"},{"name":"socket","_id":"cjdfr8a2y0066v4vfjc5csnzn"},{"name":"微服务","_id":"cjdfr8a30006av4vfahf88w2h"},{"name":"rpc","_id":"cjdfr8a31006dv4vfgj0ftgqa"},{"name":"vpn","_id":"cjdfr8a36006pv4vfhfwvs4jk"},{"name":"aws","_id":"cjdfr8a37006sv4vf9kle4rok"},{"name":"mysql","_id":"cjdfr8a38006uv4vfhc1km88o"},{"name":"ftp","_id":"cjdfr8a39006xv4vf2uis6qi4"},{"name":"idea","_id":"cjdfr8a3b0070v4vfy5s180kj"},{"name":"快捷键","_id":"cjdfr8a3c0073v4vf4k8vkv50"},{"name":"hexo","_id":"cjdfr8a3c0075v4vf2s07zfma"},{"name":"javascript","_id":"cjdfr8a3g007av4vfh5f67cdx"},{"name":"opencv","_id":"cjdfr8a3i007cv4vf2appppti"},{"name":"vagrant","_id":"cjdfr8a3j007ev4vf95h4a5uc"},{"name":"git","_id":"cjdfr8a3n007iv4vfpws79ayd"},{"name":"vscode","_id":"cjdfr8a3o007kv4vfcym9lt6s"},{"name":"阿里java规约","_id":"cjdfr8a3r007qv4vfquqkxhri"}]}}